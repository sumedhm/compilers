Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    RETURN
    DO
    DEFAULT
    FOR
    WHILE
    COMMENT
    MAIN
    NEWLINE
    CASE
    SINGLE_QUOTES
    ELSE
    IF
    BREAK
    CONTINUE
    DOUBLE_QUOTES
    SWITCH

Grammar

Rule 0     S' -> declaration
Rule 1     declaration -> declaration_specifiers SEMI_COLON
Rule 2     declaration -> declaration_specifiers init_declarator_list SEMI_COLON
Rule 3     declaration_specifiers -> type_specifier
Rule 4     declaration_specifiers -> type_specifier declaration_specifiers
Rule 5     init_declarator_list -> init_declarator
Rule 6     init_declarator_list -> init_declarator_list COMMA init_declarator
Rule 7     init_declarator -> declarator
Rule 8     init_declarator -> declarator EQUALS initializer
Rule 9     initializer -> assignment_expression
Rule 10    initializer -> LBRACE initializer_list RBRACE
Rule 11    initializer -> LBRACE initializer_list COMMA RBRACE
Rule 12    initializer_list -> initializer
Rule 13    initializer_list -> initializer_list COMMA initializer
Rule 14    declarator -> direct_declarator
Rule 15    direct_declarator -> VARIABLE
Rule 16    direct_declarator -> LPAREN declarator RPAREN
Rule 17    direct_declarator -> direct_declarator LBIG constant_expression RBIG
Rule 18    direct_declarator -> direct_declarator LBIG RBIG
Rule 19    direct_declarator -> direct_declarator LPAREN variable_list RPAREN
Rule 20    direct_declarator -> direct_declarator LPAREN RPAREN
Rule 21    variable_list -> VARIABLE
Rule 22    variable_list -> variable_list COMMA VARIABLE
Rule 23    type_specifier -> VOID
Rule 24    type_specifier -> INT
Rule 25    type_specifier -> CHAR
Rule 26    type_specifier -> SHORT
Rule 27    type_specifier -> LONG
Rule 28    type_specifier -> FLOAT
Rule 29    type_specifier -> DOUBLE
Rule 30    type_specifier -> enum_specifier
Rule 31    enum_specifier -> type_specifier enum_list
Rule 32    enum_list -> enumerator
Rule 33    enum_list -> enum_list COMMA enumerator
Rule 34    enumerator -> VARIABLE
Rule 35    enumerator -> VARIABLE EQUALS constant_expression
Rule 36    constant_expression -> conditional_expression
Rule 37    conditional_expression -> logical_or_expression
Rule 38    conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression
Rule 39    logical_or_expression -> logical_and_expression
Rule 40    logical_or_expression -> logical_or_expression OR_OP logical_and_expression
Rule 41    logical_and_expression -> inclusive_or_expression
Rule 42    logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression
Rule 43    inclusive_or_expression -> exclusive_or_expression
Rule 44    inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression
Rule 45    exclusive_or_expression -> and_expression
Rule 46    exclusive_or_expression -> exclusive_or_expression AND and_expression
Rule 47    and_expression -> equality_expression
Rule 48    and_expression -> and_expression AND_OP equality_expression
Rule 49    equality_expression -> relational_expression
Rule 50    equality_expression -> equality_expression EQUALS_OP relational_expression
Rule 51    equality_expression -> equality_expression NOTEQUALS relational_expression
Rule 52    relational_expression -> shift_expression
Rule 53    relational_expression -> relational_expression L_OP shift_expression
Rule 54    relational_expression -> relational_expression G_OP shift_expression
Rule 55    relational_expression -> relational_expression LE_OP shift_expression
Rule 56    relational_expression -> relational_expression GE_OP shift_expression
Rule 57    shift_expression -> additive_expression
Rule 58    shift_expression -> shift_expression LEFT_OP additive_expression
Rule 59    shift_expression -> shift_expression RIGHT_OP additive_expression
Rule 60    additive_expression -> multiplicative_expression
Rule 61    additive_expression -> additive_expression ADD multiplicative_expression
Rule 62    additive_expression -> additive_expression MINUS multiplicative_expression
Rule 63    multiplicative_expression -> cast_expression
Rule 64    multiplicative_expression -> multiplicative_expression MULT cast_expression
Rule 65    multiplicative_expression -> multiplicative_expression DIV cast_expression
Rule 66    multiplicative_expression -> multiplicative_expression MOD cast_expression
Rule 67    cast_expression -> unary_expression
Rule 68    cast_expression -> LPAREN type_name RPAREN cast_expression
Rule 69    unary_expression -> postfix_expression
Rule 70    unary_expression -> INCREMENT unary_expression
Rule 71    unary_expression -> DECREMENT unary_expression
Rule 72    unary_expression -> unary_operator cast_expression
Rule 73    unary_expression -> SIZEOF unary_expression
Rule 74    unary_expression -> SIZEOF LPAREN type_name RPAREN
Rule 75    unary_operator -> AND_OP
Rule 76    unary_operator -> MULT
Rule 77    unary_operator -> ADD
Rule 78    unary_operator -> MINUS
Rule 79    unary_operator -> TILDA
Rule 80    unary_operator -> NOT
Rule 81    type_name -> specifier_qualifier_list
Rule 82    specifier_qualifier_list -> type_specifier specifier_qualifier_list
Rule 83    specifier_qualifier_list -> type_specifier
Rule 84    postfix_expression -> primary_expression
Rule 85    primary_expression -> VARIABLE
Rule 86    primary_expression -> constant
Rule 87    primary_expression -> LPAREN expression RPAREN
Rule 88    constant -> HEX_INT
Rule 89    constant -> EXP_REAL
Rule 90    constant -> DOT_REAL
Rule 91    constant -> DEC_INT
Rule 92    postfix_expression -> postfix_expression LBIG expression RBIG
Rule 93    postfix_expression -> postfix_expression LPAREN RPAREN
Rule 94    postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN
Rule 95    post_expression -> postfix_expression DOT VARIABLE
Rule 96    post_expression -> postfix_expression INCREMENT
Rule 97    post_expression -> postfix_expression DECREMENT
Rule 98    argument_expression_list -> assignment_expression
Rule 99    argument_expression_list -> argument_expression_list COMMA assignment_expression
Rule 100   expression -> assignment_expression
Rule 101   expression -> expression COMMA assignment_expression
Rule 102   assignment_expression -> conditional_expression
Rule 103   assignment_expression -> unary_expression assignment_operator assignment_expression
Rule 104   assignment_operator -> EQUALS
Rule 105   assignment_operator -> MUL_ASSIGN
Rule 106   assignment_operator -> DIV_ASSIGN
Rule 107   assignment_operator -> MOD_ASSIGN
Rule 108   assignment_operator -> ADD_ASSIGN
Rule 109   assignment_operator -> SUB_ASSIGN
Rule 110   assignment_operator -> LEFT_ASSIGN
Rule 111   assignment_operator -> RIGHT_ASSIGN
Rule 112   assignment_operator -> AND_ASSIGN
Rule 113   assignment_operator -> XOR_ASSIGN
Rule 114   assignment_operator -> OR_ASSIGN
Rule 115   empty -> <empty>

Terminals, with rules where they appear

ADD                  : 61 77
ADD_ASSIGN           : 108
AND                  : 46
AND_ASSIGN           : 112
AND_OP               : 42 48 75
BREAK                : 
CASE                 : 
CHAR                 : 25
COLON                : 38
COMMA                : 6 11 13 22 33 99 101
COMMENT              : 
CONDOP               : 38
CONTINUE             : 
DECREMENT            : 71 97
DEC_INT              : 91
DEFAULT              : 
DIV                  : 65
DIV_ASSIGN           : 106
DO                   : 
DOT                  : 95
DOT_REAL             : 90
DOUBLE               : 29
DOUBLE_QUOTES        : 
ELSE                 : 
EQUALS               : 8 35 104
EQUALS_OP            : 50
EXP_REAL             : 89
FLOAT                : 28
FOR                  : 
GE_OP                : 56
G_OP                 : 54
HEX_INT              : 88
IF                   : 
INCREMENT            : 70 96
INT                  : 24
LBIG                 : 17 18 92
LBRACE               : 10 11
LEFT_ASSIGN          : 110
LEFT_OP              : 58
LE_OP                : 55
LONG                 : 27
LPAREN               : 16 19 20 68 74 87 93 94
L_OP                 : 53
MAIN                 : 
MINUS                : 62 78
MOD                  : 66
MOD_ASSIGN           : 107
MULT                 : 64 76
MUL_ASSIGN           : 105
NEWLINE              : 
NOT                  : 80
NOTEQUALS            : 51
OR                   : 44
OR_ASSIGN            : 114
OR_OP                : 40
RBIG                 : 17 18 92
RBRACE               : 10 11
RETURN               : 
RIGHT_ASSIGN         : 111
RIGHT_OP             : 59
RPAREN               : 16 19 20 68 74 87 93 94
SEMI_COLON           : 1 2
SHORT                : 26
SINGLE_QUOTES        : 
SIZEOF               : 73 74
SUB_ASSIGN           : 109
SWITCH               : 
TILDA                : 79
VARIABLE             : 15 21 22 34 35 85 95
VOID                 : 23
WHILE                : 
XOR_ASSIGN           : 113
error                : 

Nonterminals, with rules where they appear

additive_expression  : 57 58 59 61 62
and_expression       : 45 46 48
argument_expression_list : 94 99
assignment_expression : 9 98 99 100 101 103
assignment_operator  : 103
cast_expression      : 63 64 65 66 68 72
conditional_expression : 36 38 102
constant             : 86
constant_expression  : 17 35
declaration          : 0
declaration_specifiers : 1 2 4
declarator           : 7 8 16
direct_declarator    : 14 17 18 19 20
empty                : 
enum_list            : 31 33
enum_specifier       : 30
enumerator           : 32 33
equality_expression  : 47 48 50 51
exclusive_or_expression : 43 44 46
expression           : 38 87 92 101
inclusive_or_expression : 41 42 44
init_declarator      : 5 6
init_declarator_list : 2 6
initializer          : 8 12 13
initializer_list     : 10 11 13
logical_and_expression : 39 40 42
logical_or_expression : 37 38 40
multiplicative_expression : 60 61 62 64 65 66
post_expression      : 
postfix_expression   : 69 92 93 94 95 96 97
primary_expression   : 84
relational_expression : 49 50 51 53 54 55 56
shift_expression     : 52 53 54 55 56 58 59
specifier_qualifier_list : 81 82
type_name            : 68 74
type_specifier       : 3 4 31 82 83
unary_expression     : 67 70 71 73 103
unary_operator       : 72
variable_list        : 19 22

Parsing method: LALR

state 0

    (0) S' -> . declaration
    (1) declaration -> . declaration_specifiers SEMI_COLON
    (2) declaration -> . declaration_specifiers init_declarator_list SEMI_COLON
    (3) declaration_specifiers -> . type_specifier
    (4) declaration_specifiers -> . type_specifier declaration_specifiers
    (23) type_specifier -> . VOID
    (24) type_specifier -> . INT
    (25) type_specifier -> . CHAR
    (26) type_specifier -> . SHORT
    (27) type_specifier -> . LONG
    (28) type_specifier -> . FLOAT
    (29) type_specifier -> . DOUBLE
    (30) type_specifier -> . enum_specifier
    (31) enum_specifier -> . type_specifier enum_list

    VOID            shift and go to state 4
    INT             shift and go to state 2
    CHAR            shift and go to state 7
    SHORT           shift and go to state 9
    LONG            shift and go to state 6
    FLOAT           shift and go to state 5
    DOUBLE          shift and go to state 3

    type_specifier                 shift and go to state 1
    enum_specifier                 shift and go to state 8
    declaration_specifiers         shift and go to state 10
    declaration                    shift and go to state 11

state 1

    (3) declaration_specifiers -> type_specifier .
    (4) declaration_specifiers -> type_specifier . declaration_specifiers
    (31) enum_specifier -> type_specifier . enum_list
    (3) declaration_specifiers -> . type_specifier
    (4) declaration_specifiers -> . type_specifier declaration_specifiers
    (32) enum_list -> . enumerator
    (33) enum_list -> . enum_list COMMA enumerator
    (23) type_specifier -> . VOID
    (24) type_specifier -> . INT
    (25) type_specifier -> . CHAR
    (26) type_specifier -> . SHORT
    (27) type_specifier -> . LONG
    (28) type_specifier -> . FLOAT
    (29) type_specifier -> . DOUBLE
    (30) type_specifier -> . enum_specifier
    (34) enumerator -> . VARIABLE
    (35) enumerator -> . VARIABLE EQUALS constant_expression
    (31) enum_specifier -> . type_specifier enum_list

  ! shift/reduce conflict for VARIABLE resolved as shift
    SEMI_COLON      reduce using rule 3 (declaration_specifiers -> type_specifier .)
    LPAREN          reduce using rule 3 (declaration_specifiers -> type_specifier .)
    VOID            shift and go to state 4
    INT             shift and go to state 2
    CHAR            shift and go to state 7
    SHORT           shift and go to state 9
    LONG            shift and go to state 6
    FLOAT           shift and go to state 5
    DOUBLE          shift and go to state 3
    VARIABLE        shift and go to state 15

  ! VARIABLE        [ reduce using rule 3 (declaration_specifiers -> type_specifier .) ]

    type_specifier                 shift and go to state 1
    enumerator                     shift and go to state 12
    enum_specifier                 shift and go to state 8
    enum_list                      shift and go to state 13
    declaration_specifiers         shift and go to state 14

state 2

    (24) type_specifier -> INT .

    VOID            reduce using rule 24 (type_specifier -> INT .)
    INT             reduce using rule 24 (type_specifier -> INT .)
    CHAR            reduce using rule 24 (type_specifier -> INT .)
    SHORT           reduce using rule 24 (type_specifier -> INT .)
    LONG            reduce using rule 24 (type_specifier -> INT .)
    FLOAT           reduce using rule 24 (type_specifier -> INT .)
    DOUBLE          reduce using rule 24 (type_specifier -> INT .)
    VARIABLE        reduce using rule 24 (type_specifier -> INT .)
    SEMI_COLON      reduce using rule 24 (type_specifier -> INT .)
    LPAREN          reduce using rule 24 (type_specifier -> INT .)
    RPAREN          reduce using rule 24 (type_specifier -> INT .)


state 3

    (29) type_specifier -> DOUBLE .

    VOID            reduce using rule 29 (type_specifier -> DOUBLE .)
    INT             reduce using rule 29 (type_specifier -> DOUBLE .)
    CHAR            reduce using rule 29 (type_specifier -> DOUBLE .)
    SHORT           reduce using rule 29 (type_specifier -> DOUBLE .)
    LONG            reduce using rule 29 (type_specifier -> DOUBLE .)
    FLOAT           reduce using rule 29 (type_specifier -> DOUBLE .)
    DOUBLE          reduce using rule 29 (type_specifier -> DOUBLE .)
    VARIABLE        reduce using rule 29 (type_specifier -> DOUBLE .)
    SEMI_COLON      reduce using rule 29 (type_specifier -> DOUBLE .)
    LPAREN          reduce using rule 29 (type_specifier -> DOUBLE .)
    RPAREN          reduce using rule 29 (type_specifier -> DOUBLE .)


state 4

    (23) type_specifier -> VOID .

    VOID            reduce using rule 23 (type_specifier -> VOID .)
    INT             reduce using rule 23 (type_specifier -> VOID .)
    CHAR            reduce using rule 23 (type_specifier -> VOID .)
    SHORT           reduce using rule 23 (type_specifier -> VOID .)
    LONG            reduce using rule 23 (type_specifier -> VOID .)
    FLOAT           reduce using rule 23 (type_specifier -> VOID .)
    DOUBLE          reduce using rule 23 (type_specifier -> VOID .)
    VARIABLE        reduce using rule 23 (type_specifier -> VOID .)
    SEMI_COLON      reduce using rule 23 (type_specifier -> VOID .)
    LPAREN          reduce using rule 23 (type_specifier -> VOID .)
    RPAREN          reduce using rule 23 (type_specifier -> VOID .)


state 5

    (28) type_specifier -> FLOAT .

    VOID            reduce using rule 28 (type_specifier -> FLOAT .)
    INT             reduce using rule 28 (type_specifier -> FLOAT .)
    CHAR            reduce using rule 28 (type_specifier -> FLOAT .)
    SHORT           reduce using rule 28 (type_specifier -> FLOAT .)
    LONG            reduce using rule 28 (type_specifier -> FLOAT .)
    FLOAT           reduce using rule 28 (type_specifier -> FLOAT .)
    DOUBLE          reduce using rule 28 (type_specifier -> FLOAT .)
    VARIABLE        reduce using rule 28 (type_specifier -> FLOAT .)
    SEMI_COLON      reduce using rule 28 (type_specifier -> FLOAT .)
    LPAREN          reduce using rule 28 (type_specifier -> FLOAT .)
    RPAREN          reduce using rule 28 (type_specifier -> FLOAT .)


state 6

    (27) type_specifier -> LONG .

    VOID            reduce using rule 27 (type_specifier -> LONG .)
    INT             reduce using rule 27 (type_specifier -> LONG .)
    CHAR            reduce using rule 27 (type_specifier -> LONG .)
    SHORT           reduce using rule 27 (type_specifier -> LONG .)
    LONG            reduce using rule 27 (type_specifier -> LONG .)
    FLOAT           reduce using rule 27 (type_specifier -> LONG .)
    DOUBLE          reduce using rule 27 (type_specifier -> LONG .)
    VARIABLE        reduce using rule 27 (type_specifier -> LONG .)
    SEMI_COLON      reduce using rule 27 (type_specifier -> LONG .)
    LPAREN          reduce using rule 27 (type_specifier -> LONG .)
    RPAREN          reduce using rule 27 (type_specifier -> LONG .)


state 7

    (25) type_specifier -> CHAR .

    VOID            reduce using rule 25 (type_specifier -> CHAR .)
    INT             reduce using rule 25 (type_specifier -> CHAR .)
    CHAR            reduce using rule 25 (type_specifier -> CHAR .)
    SHORT           reduce using rule 25 (type_specifier -> CHAR .)
    LONG            reduce using rule 25 (type_specifier -> CHAR .)
    FLOAT           reduce using rule 25 (type_specifier -> CHAR .)
    DOUBLE          reduce using rule 25 (type_specifier -> CHAR .)
    VARIABLE        reduce using rule 25 (type_specifier -> CHAR .)
    SEMI_COLON      reduce using rule 25 (type_specifier -> CHAR .)
    LPAREN          reduce using rule 25 (type_specifier -> CHAR .)
    RPAREN          reduce using rule 25 (type_specifier -> CHAR .)


state 8

    (30) type_specifier -> enum_specifier .

    VOID            reduce using rule 30 (type_specifier -> enum_specifier .)
    INT             reduce using rule 30 (type_specifier -> enum_specifier .)
    CHAR            reduce using rule 30 (type_specifier -> enum_specifier .)
    SHORT           reduce using rule 30 (type_specifier -> enum_specifier .)
    LONG            reduce using rule 30 (type_specifier -> enum_specifier .)
    FLOAT           reduce using rule 30 (type_specifier -> enum_specifier .)
    DOUBLE          reduce using rule 30 (type_specifier -> enum_specifier .)
    VARIABLE        reduce using rule 30 (type_specifier -> enum_specifier .)
    SEMI_COLON      reduce using rule 30 (type_specifier -> enum_specifier .)
    LPAREN          reduce using rule 30 (type_specifier -> enum_specifier .)
    RPAREN          reduce using rule 30 (type_specifier -> enum_specifier .)


state 9

    (26) type_specifier -> SHORT .

    VOID            reduce using rule 26 (type_specifier -> SHORT .)
    INT             reduce using rule 26 (type_specifier -> SHORT .)
    CHAR            reduce using rule 26 (type_specifier -> SHORT .)
    SHORT           reduce using rule 26 (type_specifier -> SHORT .)
    LONG            reduce using rule 26 (type_specifier -> SHORT .)
    FLOAT           reduce using rule 26 (type_specifier -> SHORT .)
    DOUBLE          reduce using rule 26 (type_specifier -> SHORT .)
    VARIABLE        reduce using rule 26 (type_specifier -> SHORT .)
    SEMI_COLON      reduce using rule 26 (type_specifier -> SHORT .)
    LPAREN          reduce using rule 26 (type_specifier -> SHORT .)
    RPAREN          reduce using rule 26 (type_specifier -> SHORT .)


state 10

    (1) declaration -> declaration_specifiers . SEMI_COLON
    (2) declaration -> declaration_specifiers . init_declarator_list SEMI_COLON
    (5) init_declarator_list -> . init_declarator
    (6) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (7) init_declarator -> . declarator
    (8) init_declarator -> . declarator EQUALS initializer
    (14) declarator -> . direct_declarator
    (15) direct_declarator -> . VARIABLE
    (16) direct_declarator -> . LPAREN declarator RPAREN
    (17) direct_declarator -> . direct_declarator LBIG constant_expression RBIG
    (18) direct_declarator -> . direct_declarator LBIG RBIG
    (19) direct_declarator -> . direct_declarator LPAREN variable_list RPAREN
    (20) direct_declarator -> . direct_declarator LPAREN RPAREN

    SEMI_COLON      shift and go to state 22
    VARIABLE        shift and go to state 20
    LPAREN          shift and go to state 16

    direct_declarator              shift and go to state 17
    init_declarator                shift and go to state 18
    declarator                     shift and go to state 21
    init_declarator_list           shift and go to state 19

state 11

    (0) S' -> declaration .



state 12

    (32) enum_list -> enumerator .

    COMMA           reduce using rule 32 (enum_list -> enumerator .)
    VOID            reduce using rule 32 (enum_list -> enumerator .)
    INT             reduce using rule 32 (enum_list -> enumerator .)
    CHAR            reduce using rule 32 (enum_list -> enumerator .)
    SHORT           reduce using rule 32 (enum_list -> enumerator .)
    LONG            reduce using rule 32 (enum_list -> enumerator .)
    FLOAT           reduce using rule 32 (enum_list -> enumerator .)
    DOUBLE          reduce using rule 32 (enum_list -> enumerator .)
    VARIABLE        reduce using rule 32 (enum_list -> enumerator .)
    RPAREN          reduce using rule 32 (enum_list -> enumerator .)
    SEMI_COLON      reduce using rule 32 (enum_list -> enumerator .)
    LPAREN          reduce using rule 32 (enum_list -> enumerator .)


state 13

    (31) enum_specifier -> type_specifier enum_list .
    (33) enum_list -> enum_list . COMMA enumerator

    VOID            reduce using rule 31 (enum_specifier -> type_specifier enum_list .)
    INT             reduce using rule 31 (enum_specifier -> type_specifier enum_list .)
    CHAR            reduce using rule 31 (enum_specifier -> type_specifier enum_list .)
    SHORT           reduce using rule 31 (enum_specifier -> type_specifier enum_list .)
    LONG            reduce using rule 31 (enum_specifier -> type_specifier enum_list .)
    FLOAT           reduce using rule 31 (enum_specifier -> type_specifier enum_list .)
    DOUBLE          reduce using rule 31 (enum_specifier -> type_specifier enum_list .)
    VARIABLE        reduce using rule 31 (enum_specifier -> type_specifier enum_list .)
    SEMI_COLON      reduce using rule 31 (enum_specifier -> type_specifier enum_list .)
    LPAREN          reduce using rule 31 (enum_specifier -> type_specifier enum_list .)
    RPAREN          reduce using rule 31 (enum_specifier -> type_specifier enum_list .)
    COMMA           shift and go to state 23


state 14

    (4) declaration_specifiers -> type_specifier declaration_specifiers .

    SEMI_COLON      reduce using rule 4 (declaration_specifiers -> type_specifier declaration_specifiers .)
    VARIABLE        reduce using rule 4 (declaration_specifiers -> type_specifier declaration_specifiers .)
    LPAREN          reduce using rule 4 (declaration_specifiers -> type_specifier declaration_specifiers .)


state 15

    (34) enumerator -> VARIABLE .
    (35) enumerator -> VARIABLE . EQUALS constant_expression

    COMMA           reduce using rule 34 (enumerator -> VARIABLE .)
    VOID            reduce using rule 34 (enumerator -> VARIABLE .)
    INT             reduce using rule 34 (enumerator -> VARIABLE .)
    CHAR            reduce using rule 34 (enumerator -> VARIABLE .)
    SHORT           reduce using rule 34 (enumerator -> VARIABLE .)
    LONG            reduce using rule 34 (enumerator -> VARIABLE .)
    FLOAT           reduce using rule 34 (enumerator -> VARIABLE .)
    DOUBLE          reduce using rule 34 (enumerator -> VARIABLE .)
    VARIABLE        reduce using rule 34 (enumerator -> VARIABLE .)
    RPAREN          reduce using rule 34 (enumerator -> VARIABLE .)
    SEMI_COLON      reduce using rule 34 (enumerator -> VARIABLE .)
    LPAREN          reduce using rule 34 (enumerator -> VARIABLE .)
    EQUALS          shift and go to state 24


state 16

    (16) direct_declarator -> LPAREN . declarator RPAREN
    (14) declarator -> . direct_declarator
    (15) direct_declarator -> . VARIABLE
    (16) direct_declarator -> . LPAREN declarator RPAREN
    (17) direct_declarator -> . direct_declarator LBIG constant_expression RBIG
    (18) direct_declarator -> . direct_declarator LBIG RBIG
    (19) direct_declarator -> . direct_declarator LPAREN variable_list RPAREN
    (20) direct_declarator -> . direct_declarator LPAREN RPAREN

    VARIABLE        shift and go to state 20
    LPAREN          shift and go to state 16

    direct_declarator              shift and go to state 17
    declarator                     shift and go to state 25

state 17

    (14) declarator -> direct_declarator .
    (17) direct_declarator -> direct_declarator . LBIG constant_expression RBIG
    (18) direct_declarator -> direct_declarator . LBIG RBIG
    (19) direct_declarator -> direct_declarator . LPAREN variable_list RPAREN
    (20) direct_declarator -> direct_declarator . LPAREN RPAREN

    EQUALS          reduce using rule 14 (declarator -> direct_declarator .)
    SEMI_COLON      reduce using rule 14 (declarator -> direct_declarator .)
    COMMA           reduce using rule 14 (declarator -> direct_declarator .)
    RPAREN          reduce using rule 14 (declarator -> direct_declarator .)
    LBIG            shift and go to state 26
    LPAREN          shift and go to state 27


state 18

    (5) init_declarator_list -> init_declarator .

    SEMI_COLON      reduce using rule 5 (init_declarator_list -> init_declarator .)
    COMMA           reduce using rule 5 (init_declarator_list -> init_declarator .)


state 19

    (2) declaration -> declaration_specifiers init_declarator_list . SEMI_COLON
    (6) init_declarator_list -> init_declarator_list . COMMA init_declarator

    SEMI_COLON      shift and go to state 28
    COMMA           shift and go to state 29


state 20

    (15) direct_declarator -> VARIABLE .

    LBIG            reduce using rule 15 (direct_declarator -> VARIABLE .)
    LPAREN          reduce using rule 15 (direct_declarator -> VARIABLE .)
    EQUALS          reduce using rule 15 (direct_declarator -> VARIABLE .)
    SEMI_COLON      reduce using rule 15 (direct_declarator -> VARIABLE .)
    COMMA           reduce using rule 15 (direct_declarator -> VARIABLE .)
    RPAREN          reduce using rule 15 (direct_declarator -> VARIABLE .)


state 21

    (7) init_declarator -> declarator .
    (8) init_declarator -> declarator . EQUALS initializer

    SEMI_COLON      reduce using rule 7 (init_declarator -> declarator .)
    COMMA           reduce using rule 7 (init_declarator -> declarator .)
    EQUALS          shift and go to state 30


state 22

    (1) declaration -> declaration_specifiers SEMI_COLON .

    $end            reduce using rule 1 (declaration -> declaration_specifiers SEMI_COLON .)


state 23

    (33) enum_list -> enum_list COMMA . enumerator
    (34) enumerator -> . VARIABLE
    (35) enumerator -> . VARIABLE EQUALS constant_expression

    VARIABLE        shift and go to state 15

    enumerator                     shift and go to state 31

state 24

    (35) enumerator -> VARIABLE EQUALS . constant_expression
    (36) constant_expression -> . conditional_expression
    (37) conditional_expression -> . logical_or_expression
    (38) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (39) logical_or_expression -> . logical_and_expression
    (40) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (41) logical_and_expression -> . inclusive_or_expression
    (42) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (43) inclusive_or_expression -> . exclusive_or_expression
    (44) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (45) exclusive_or_expression -> . and_expression
    (46) exclusive_or_expression -> . exclusive_or_expression AND and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression AND_OP equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQUALS_OP relational_expression
    (51) equality_expression -> . equality_expression NOTEQUALS relational_expression
    (52) relational_expression -> . shift_expression
    (53) relational_expression -> . relational_expression L_OP shift_expression
    (54) relational_expression -> . relational_expression G_OP shift_expression
    (55) relational_expression -> . relational_expression LE_OP shift_expression
    (56) relational_expression -> . relational_expression GE_OP shift_expression
    (57) shift_expression -> . additive_expression
    (58) shift_expression -> . shift_expression LEFT_OP additive_expression
    (59) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (60) additive_expression -> . multiplicative_expression
    (61) additive_expression -> . additive_expression ADD multiplicative_expression
    (62) additive_expression -> . additive_expression MINUS multiplicative_expression
    (63) multiplicative_expression -> . cast_expression
    (64) multiplicative_expression -> . multiplicative_expression MULT cast_expression
    (65) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (66) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (67) cast_expression -> . unary_expression
    (68) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREMENT unary_expression
    (71) unary_expression -> . DECREMENT unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (73) unary_expression -> . SIZEOF unary_expression
    (74) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (84) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LBIG expression RBIG
    (93) postfix_expression -> . postfix_expression LPAREN RPAREN
    (94) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (75) unary_operator -> . AND_OP
    (76) unary_operator -> . MULT
    (77) unary_operator -> . ADD
    (78) unary_operator -> . MINUS
    (79) unary_operator -> . TILDA
    (80) unary_operator -> . NOT
    (85) primary_expression -> . VARIABLE
    (86) primary_expression -> . constant
    (87) primary_expression -> . LPAREN expression RPAREN
    (88) constant -> . HEX_INT
    (89) constant -> . EXP_REAL
    (90) constant -> . DOT_REAL
    (91) constant -> . DEC_INT

    LPAREN          shift and go to state 52
    INCREMENT       shift and go to state 43
    DECREMENT       shift and go to state 64
    SIZEOF          shift and go to state 47
    AND_OP          shift and go to state 49
    MULT            shift and go to state 57
    ADD             shift and go to state 59
    MINUS           shift and go to state 35
    TILDA           shift and go to state 41
    NOT             shift and go to state 63
    VARIABLE        shift and go to state 53
    HEX_INT         shift and go to state 58
    EXP_REAL        shift and go to state 39
    DOT_REAL        shift and go to state 60
    DEC_INT         shift and go to state 40

    constant                       shift and go to state 32
    unary_expression               shift and go to state 37
    multiplicative_expression      shift and go to state 48
    inclusive_or_expression        shift and go to state 38
    exclusive_or_expression        shift and go to state 33
    postfix_expression             shift and go to state 34
    shift_expression               shift and go to state 55
    additive_expression            shift and go to state 50
    equality_expression            shift and go to state 56
    and_expression                 shift and go to state 36
    unary_operator                 shift and go to state 61
    conditional_expression         shift and go to state 62
    cast_expression                shift and go to state 44
    logical_and_expression         shift and go to state 54
    primary_expression             shift and go to state 51
    logical_or_expression          shift and go to state 45
    constant_expression            shift and go to state 46
    relational_expression          shift and go to state 42

state 25

    (16) direct_declarator -> LPAREN declarator . RPAREN

    RPAREN          shift and go to state 65


state 26

    (17) direct_declarator -> direct_declarator LBIG . constant_expression RBIG
    (18) direct_declarator -> direct_declarator LBIG . RBIG
    (36) constant_expression -> . conditional_expression
    (37) conditional_expression -> . logical_or_expression
    (38) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (39) logical_or_expression -> . logical_and_expression
    (40) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (41) logical_and_expression -> . inclusive_or_expression
    (42) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (43) inclusive_or_expression -> . exclusive_or_expression
    (44) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (45) exclusive_or_expression -> . and_expression
    (46) exclusive_or_expression -> . exclusive_or_expression AND and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression AND_OP equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQUALS_OP relational_expression
    (51) equality_expression -> . equality_expression NOTEQUALS relational_expression
    (52) relational_expression -> . shift_expression
    (53) relational_expression -> . relational_expression L_OP shift_expression
    (54) relational_expression -> . relational_expression G_OP shift_expression
    (55) relational_expression -> . relational_expression LE_OP shift_expression
    (56) relational_expression -> . relational_expression GE_OP shift_expression
    (57) shift_expression -> . additive_expression
    (58) shift_expression -> . shift_expression LEFT_OP additive_expression
    (59) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (60) additive_expression -> . multiplicative_expression
    (61) additive_expression -> . additive_expression ADD multiplicative_expression
    (62) additive_expression -> . additive_expression MINUS multiplicative_expression
    (63) multiplicative_expression -> . cast_expression
    (64) multiplicative_expression -> . multiplicative_expression MULT cast_expression
    (65) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (66) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (67) cast_expression -> . unary_expression
    (68) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREMENT unary_expression
    (71) unary_expression -> . DECREMENT unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (73) unary_expression -> . SIZEOF unary_expression
    (74) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (84) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LBIG expression RBIG
    (93) postfix_expression -> . postfix_expression LPAREN RPAREN
    (94) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (75) unary_operator -> . AND_OP
    (76) unary_operator -> . MULT
    (77) unary_operator -> . ADD
    (78) unary_operator -> . MINUS
    (79) unary_operator -> . TILDA
    (80) unary_operator -> . NOT
    (85) primary_expression -> . VARIABLE
    (86) primary_expression -> . constant
    (87) primary_expression -> . LPAREN expression RPAREN
    (88) constant -> . HEX_INT
    (89) constant -> . EXP_REAL
    (90) constant -> . DOT_REAL
    (91) constant -> . DEC_INT

    RBIG            shift and go to state 67
    LPAREN          shift and go to state 52
    INCREMENT       shift and go to state 43
    DECREMENT       shift and go to state 64
    SIZEOF          shift and go to state 47
    AND_OP          shift and go to state 49
    MULT            shift and go to state 57
    ADD             shift and go to state 59
    MINUS           shift and go to state 35
    TILDA           shift and go to state 41
    NOT             shift and go to state 63
    VARIABLE        shift and go to state 53
    HEX_INT         shift and go to state 58
    EXP_REAL        shift and go to state 39
    DOT_REAL        shift and go to state 60
    DEC_INT         shift and go to state 40

    constant                       shift and go to state 32
    unary_expression               shift and go to state 37
    exclusive_or_expression        shift and go to state 33
    additive_expression            shift and go to state 50
    inclusive_or_expression        shift and go to state 38
    postfix_expression             shift and go to state 34
    and_expression                 shift and go to state 36
    cast_expression                shift and go to state 44
    unary_operator                 shift and go to state 61
    relational_expression          shift and go to state 42
    multiplicative_expression      shift and go to state 48
    primary_expression             shift and go to state 51
    logical_and_expression         shift and go to state 54
    shift_expression               shift and go to state 55
    equality_expression            shift and go to state 56
    logical_or_expression          shift and go to state 45
    constant_expression            shift and go to state 66
    conditional_expression         shift and go to state 62

state 27

    (19) direct_declarator -> direct_declarator LPAREN . variable_list RPAREN
    (20) direct_declarator -> direct_declarator LPAREN . RPAREN
    (21) variable_list -> . VARIABLE
    (22) variable_list -> . variable_list COMMA VARIABLE

    RPAREN          shift and go to state 68
    VARIABLE        shift and go to state 69

    variable_list                  shift and go to state 70

state 28

    (2) declaration -> declaration_specifiers init_declarator_list SEMI_COLON .

    $end            reduce using rule 2 (declaration -> declaration_specifiers init_declarator_list SEMI_COLON .)


state 29

    (6) init_declarator_list -> init_declarator_list COMMA . init_declarator
    (7) init_declarator -> . declarator
    (8) init_declarator -> . declarator EQUALS initializer
    (14) declarator -> . direct_declarator
    (15) direct_declarator -> . VARIABLE
    (16) direct_declarator -> . LPAREN declarator RPAREN
    (17) direct_declarator -> . direct_declarator LBIG constant_expression RBIG
    (18) direct_declarator -> . direct_declarator LBIG RBIG
    (19) direct_declarator -> . direct_declarator LPAREN variable_list RPAREN
    (20) direct_declarator -> . direct_declarator LPAREN RPAREN

    VARIABLE        shift and go to state 20
    LPAREN          shift and go to state 16

    direct_declarator              shift and go to state 17
    init_declarator                shift and go to state 71
    declarator                     shift and go to state 21

state 30

    (8) init_declarator -> declarator EQUALS . initializer
    (9) initializer -> . assignment_expression
    (10) initializer -> . LBRACE initializer_list RBRACE
    (11) initializer -> . LBRACE initializer_list COMMA RBRACE
    (102) assignment_expression -> . conditional_expression
    (103) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (37) conditional_expression -> . logical_or_expression
    (38) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREMENT unary_expression
    (71) unary_expression -> . DECREMENT unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (73) unary_expression -> . SIZEOF unary_expression
    (74) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (39) logical_or_expression -> . logical_and_expression
    (40) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (84) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LBIG expression RBIG
    (93) postfix_expression -> . postfix_expression LPAREN RPAREN
    (94) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (75) unary_operator -> . AND_OP
    (76) unary_operator -> . MULT
    (77) unary_operator -> . ADD
    (78) unary_operator -> . MINUS
    (79) unary_operator -> . TILDA
    (80) unary_operator -> . NOT
    (41) logical_and_expression -> . inclusive_or_expression
    (42) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (85) primary_expression -> . VARIABLE
    (86) primary_expression -> . constant
    (87) primary_expression -> . LPAREN expression RPAREN
    (43) inclusive_or_expression -> . exclusive_or_expression
    (44) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (88) constant -> . HEX_INT
    (89) constant -> . EXP_REAL
    (90) constant -> . DOT_REAL
    (91) constant -> . DEC_INT
    (45) exclusive_or_expression -> . and_expression
    (46) exclusive_or_expression -> . exclusive_or_expression AND and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression AND_OP equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQUALS_OP relational_expression
    (51) equality_expression -> . equality_expression NOTEQUALS relational_expression
    (52) relational_expression -> . shift_expression
    (53) relational_expression -> . relational_expression L_OP shift_expression
    (54) relational_expression -> . relational_expression G_OP shift_expression
    (55) relational_expression -> . relational_expression LE_OP shift_expression
    (56) relational_expression -> . relational_expression GE_OP shift_expression
    (57) shift_expression -> . additive_expression
    (58) shift_expression -> . shift_expression LEFT_OP additive_expression
    (59) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (60) additive_expression -> . multiplicative_expression
    (61) additive_expression -> . additive_expression ADD multiplicative_expression
    (62) additive_expression -> . additive_expression MINUS multiplicative_expression
    (63) multiplicative_expression -> . cast_expression
    (64) multiplicative_expression -> . multiplicative_expression MULT cast_expression
    (65) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (66) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (67) cast_expression -> . unary_expression
    (68) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LBRACE          shift and go to state 76
    INCREMENT       shift and go to state 43
    DECREMENT       shift and go to state 64
    SIZEOF          shift and go to state 47
    AND_OP          shift and go to state 49
    MULT            shift and go to state 57
    ADD             shift and go to state 59
    MINUS           shift and go to state 35
    TILDA           shift and go to state 41
    NOT             shift and go to state 63
    VARIABLE        shift and go to state 53
    LPAREN          shift and go to state 75
    HEX_INT         shift and go to state 58
    EXP_REAL        shift and go to state 39
    DOT_REAL        shift and go to state 60
    DEC_INT         shift and go to state 40

    constant                       shift and go to state 32
    unary_expression               shift and go to state 72
    exclusive_or_expression        shift and go to state 33
    initializer                    shift and go to state 73
    and_expression                 shift and go to state 36
    inclusive_or_expression        shift and go to state 38
    postfix_expression             shift and go to state 34
    relational_expression          shift and go to state 42
    cast_expression                shift and go to state 44
    logical_or_expression          shift and go to state 45
    unary_operator                 shift and go to state 61
    assignment_expression          shift and go to state 74
    multiplicative_expression      shift and go to state 48
    conditional_expression         shift and go to state 77
    additive_expression            shift and go to state 50
    primary_expression             shift and go to state 51
    logical_and_expression         shift and go to state 54
    shift_expression               shift and go to state 55
    equality_expression            shift and go to state 56

state 31

    (33) enum_list -> enum_list COMMA enumerator .

    COMMA           reduce using rule 33 (enum_list -> enum_list COMMA enumerator .)
    VOID            reduce using rule 33 (enum_list -> enum_list COMMA enumerator .)
    INT             reduce using rule 33 (enum_list -> enum_list COMMA enumerator .)
    CHAR            reduce using rule 33 (enum_list -> enum_list COMMA enumerator .)
    SHORT           reduce using rule 33 (enum_list -> enum_list COMMA enumerator .)
    LONG            reduce using rule 33 (enum_list -> enum_list COMMA enumerator .)
    FLOAT           reduce using rule 33 (enum_list -> enum_list COMMA enumerator .)
    DOUBLE          reduce using rule 33 (enum_list -> enum_list COMMA enumerator .)
    VARIABLE        reduce using rule 33 (enum_list -> enum_list COMMA enumerator .)
    RPAREN          reduce using rule 33 (enum_list -> enum_list COMMA enumerator .)
    SEMI_COLON      reduce using rule 33 (enum_list -> enum_list COMMA enumerator .)
    LPAREN          reduce using rule 33 (enum_list -> enum_list COMMA enumerator .)


state 32

    (86) primary_expression -> constant .

    LBIG            reduce using rule 86 (primary_expression -> constant .)
    LPAREN          reduce using rule 86 (primary_expression -> constant .)
    MULT            reduce using rule 86 (primary_expression -> constant .)
    DIV             reduce using rule 86 (primary_expression -> constant .)
    MOD             reduce using rule 86 (primary_expression -> constant .)
    ADD             reduce using rule 86 (primary_expression -> constant .)
    MINUS           reduce using rule 86 (primary_expression -> constant .)
    LEFT_OP         reduce using rule 86 (primary_expression -> constant .)
    RIGHT_OP        reduce using rule 86 (primary_expression -> constant .)
    L_OP            reduce using rule 86 (primary_expression -> constant .)
    G_OP            reduce using rule 86 (primary_expression -> constant .)
    LE_OP           reduce using rule 86 (primary_expression -> constant .)
    GE_OP           reduce using rule 86 (primary_expression -> constant .)
    EQUALS_OP       reduce using rule 86 (primary_expression -> constant .)
    NOTEQUALS       reduce using rule 86 (primary_expression -> constant .)
    AND_OP          reduce using rule 86 (primary_expression -> constant .)
    AND             reduce using rule 86 (primary_expression -> constant .)
    OR              reduce using rule 86 (primary_expression -> constant .)
    CONDOP          reduce using rule 86 (primary_expression -> constant .)
    OR_OP           reduce using rule 86 (primary_expression -> constant .)
    COMMA           reduce using rule 86 (primary_expression -> constant .)
    VOID            reduce using rule 86 (primary_expression -> constant .)
    INT             reduce using rule 86 (primary_expression -> constant .)
    CHAR            reduce using rule 86 (primary_expression -> constant .)
    SHORT           reduce using rule 86 (primary_expression -> constant .)
    LONG            reduce using rule 86 (primary_expression -> constant .)
    FLOAT           reduce using rule 86 (primary_expression -> constant .)
    DOUBLE          reduce using rule 86 (primary_expression -> constant .)
    VARIABLE        reduce using rule 86 (primary_expression -> constant .)
    SEMI_COLON      reduce using rule 86 (primary_expression -> constant .)
    RPAREN          reduce using rule 86 (primary_expression -> constant .)
    RBIG            reduce using rule 86 (primary_expression -> constant .)
    RBRACE          reduce using rule 86 (primary_expression -> constant .)
    COLON           reduce using rule 86 (primary_expression -> constant .)
    EQUALS          reduce using rule 86 (primary_expression -> constant .)
    MUL_ASSIGN      reduce using rule 86 (primary_expression -> constant .)
    DIV_ASSIGN      reduce using rule 86 (primary_expression -> constant .)
    MOD_ASSIGN      reduce using rule 86 (primary_expression -> constant .)
    ADD_ASSIGN      reduce using rule 86 (primary_expression -> constant .)
    SUB_ASSIGN      reduce using rule 86 (primary_expression -> constant .)
    LEFT_ASSIGN     reduce using rule 86 (primary_expression -> constant .)
    RIGHT_ASSIGN    reduce using rule 86 (primary_expression -> constant .)
    AND_ASSIGN      reduce using rule 86 (primary_expression -> constant .)
    XOR_ASSIGN      reduce using rule 86 (primary_expression -> constant .)
    OR_ASSIGN       reduce using rule 86 (primary_expression -> constant .)


state 33

    (43) inclusive_or_expression -> exclusive_or_expression .
    (46) exclusive_or_expression -> exclusive_or_expression . AND and_expression

    OR              reduce using rule 43 (inclusive_or_expression -> exclusive_or_expression .)
    AND_OP          reduce using rule 43 (inclusive_or_expression -> exclusive_or_expression .)
    CONDOP          reduce using rule 43 (inclusive_or_expression -> exclusive_or_expression .)
    OR_OP           reduce using rule 43 (inclusive_or_expression -> exclusive_or_expression .)
    RBRACE          reduce using rule 43 (inclusive_or_expression -> exclusive_or_expression .)
    COMMA           reduce using rule 43 (inclusive_or_expression -> exclusive_or_expression .)
    RPAREN          reduce using rule 43 (inclusive_or_expression -> exclusive_or_expression .)
    RBIG            reduce using rule 43 (inclusive_or_expression -> exclusive_or_expression .)
    COLON           reduce using rule 43 (inclusive_or_expression -> exclusive_or_expression .)
    VOID            reduce using rule 43 (inclusive_or_expression -> exclusive_or_expression .)
    INT             reduce using rule 43 (inclusive_or_expression -> exclusive_or_expression .)
    CHAR            reduce using rule 43 (inclusive_or_expression -> exclusive_or_expression .)
    SHORT           reduce using rule 43 (inclusive_or_expression -> exclusive_or_expression .)
    LONG            reduce using rule 43 (inclusive_or_expression -> exclusive_or_expression .)
    FLOAT           reduce using rule 43 (inclusive_or_expression -> exclusive_or_expression .)
    DOUBLE          reduce using rule 43 (inclusive_or_expression -> exclusive_or_expression .)
    VARIABLE        reduce using rule 43 (inclusive_or_expression -> exclusive_or_expression .)
    SEMI_COLON      reduce using rule 43 (inclusive_or_expression -> exclusive_or_expression .)
    LPAREN          reduce using rule 43 (inclusive_or_expression -> exclusive_or_expression .)
    AND             shift and go to state 78


state 34

    (69) unary_expression -> postfix_expression .
    (92) postfix_expression -> postfix_expression . LBIG expression RBIG
    (93) postfix_expression -> postfix_expression . LPAREN RPAREN
    (94) postfix_expression -> postfix_expression . LPAREN argument_expression_list RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
    EQUALS          reduce using rule 69 (unary_expression -> postfix_expression .)
    MUL_ASSIGN      reduce using rule 69 (unary_expression -> postfix_expression .)
    DIV_ASSIGN      reduce using rule 69 (unary_expression -> postfix_expression .)
    MOD_ASSIGN      reduce using rule 69 (unary_expression -> postfix_expression .)
    ADD_ASSIGN      reduce using rule 69 (unary_expression -> postfix_expression .)
    SUB_ASSIGN      reduce using rule 69 (unary_expression -> postfix_expression .)
    LEFT_ASSIGN     reduce using rule 69 (unary_expression -> postfix_expression .)
    RIGHT_ASSIGN    reduce using rule 69 (unary_expression -> postfix_expression .)
    AND_ASSIGN      reduce using rule 69 (unary_expression -> postfix_expression .)
    XOR_ASSIGN      reduce using rule 69 (unary_expression -> postfix_expression .)
    OR_ASSIGN       reduce using rule 69 (unary_expression -> postfix_expression .)
    MULT            reduce using rule 69 (unary_expression -> postfix_expression .)
    DIV             reduce using rule 69 (unary_expression -> postfix_expression .)
    MOD             reduce using rule 69 (unary_expression -> postfix_expression .)
    ADD             reduce using rule 69 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 69 (unary_expression -> postfix_expression .)
    LEFT_OP         reduce using rule 69 (unary_expression -> postfix_expression .)
    RIGHT_OP        reduce using rule 69 (unary_expression -> postfix_expression .)
    L_OP            reduce using rule 69 (unary_expression -> postfix_expression .)
    G_OP            reduce using rule 69 (unary_expression -> postfix_expression .)
    LE_OP           reduce using rule 69 (unary_expression -> postfix_expression .)
    GE_OP           reduce using rule 69 (unary_expression -> postfix_expression .)
    EQUALS_OP       reduce using rule 69 (unary_expression -> postfix_expression .)
    NOTEQUALS       reduce using rule 69 (unary_expression -> postfix_expression .)
    AND_OP          reduce using rule 69 (unary_expression -> postfix_expression .)
    AND             reduce using rule 69 (unary_expression -> postfix_expression .)
    OR              reduce using rule 69 (unary_expression -> postfix_expression .)
    CONDOP          reduce using rule 69 (unary_expression -> postfix_expression .)
    OR_OP           reduce using rule 69 (unary_expression -> postfix_expression .)
    RPAREN          reduce using rule 69 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 69 (unary_expression -> postfix_expression .)
    VOID            reduce using rule 69 (unary_expression -> postfix_expression .)
    INT             reduce using rule 69 (unary_expression -> postfix_expression .)
    CHAR            reduce using rule 69 (unary_expression -> postfix_expression .)
    SHORT           reduce using rule 69 (unary_expression -> postfix_expression .)
    LONG            reduce using rule 69 (unary_expression -> postfix_expression .)
    FLOAT           reduce using rule 69 (unary_expression -> postfix_expression .)
    DOUBLE          reduce using rule 69 (unary_expression -> postfix_expression .)
    VARIABLE        reduce using rule 69 (unary_expression -> postfix_expression .)
    SEMI_COLON      reduce using rule 69 (unary_expression -> postfix_expression .)
    RBIG            reduce using rule 69 (unary_expression -> postfix_expression .)
    RBRACE          reduce using rule 69 (unary_expression -> postfix_expression .)
    COLON           reduce using rule 69 (unary_expression -> postfix_expression .)
    LBIG            shift and go to state 79
    LPAREN          shift and go to state 80

  ! LPAREN          [ reduce using rule 69 (unary_expression -> postfix_expression .) ]


state 35

    (78) unary_operator -> MINUS .

    LPAREN          reduce using rule 78 (unary_operator -> MINUS .)
    INCREMENT       reduce using rule 78 (unary_operator -> MINUS .)
    DECREMENT       reduce using rule 78 (unary_operator -> MINUS .)
    SIZEOF          reduce using rule 78 (unary_operator -> MINUS .)
    AND_OP          reduce using rule 78 (unary_operator -> MINUS .)
    MULT            reduce using rule 78 (unary_operator -> MINUS .)
    ADD             reduce using rule 78 (unary_operator -> MINUS .)
    MINUS           reduce using rule 78 (unary_operator -> MINUS .)
    TILDA           reduce using rule 78 (unary_operator -> MINUS .)
    NOT             reduce using rule 78 (unary_operator -> MINUS .)
    VARIABLE        reduce using rule 78 (unary_operator -> MINUS .)
    HEX_INT         reduce using rule 78 (unary_operator -> MINUS .)
    EXP_REAL        reduce using rule 78 (unary_operator -> MINUS .)
    DOT_REAL        reduce using rule 78 (unary_operator -> MINUS .)
    DEC_INT         reduce using rule 78 (unary_operator -> MINUS .)


state 36

    (45) exclusive_or_expression -> and_expression .
    (48) and_expression -> and_expression . AND_OP equality_expression

  ! shift/reduce conflict for AND_OP resolved as shift
    AND             reduce using rule 45 (exclusive_or_expression -> and_expression .)
    OR              reduce using rule 45 (exclusive_or_expression -> and_expression .)
    CONDOP          reduce using rule 45 (exclusive_or_expression -> and_expression .)
    OR_OP           reduce using rule 45 (exclusive_or_expression -> and_expression .)
    RBIG            reduce using rule 45 (exclusive_or_expression -> and_expression .)
    COMMA           reduce using rule 45 (exclusive_or_expression -> and_expression .)
    RPAREN          reduce using rule 45 (exclusive_or_expression -> and_expression .)
    VOID            reduce using rule 45 (exclusive_or_expression -> and_expression .)
    INT             reduce using rule 45 (exclusive_or_expression -> and_expression .)
    CHAR            reduce using rule 45 (exclusive_or_expression -> and_expression .)
    SHORT           reduce using rule 45 (exclusive_or_expression -> and_expression .)
    LONG            reduce using rule 45 (exclusive_or_expression -> and_expression .)
    FLOAT           reduce using rule 45 (exclusive_or_expression -> and_expression .)
    DOUBLE          reduce using rule 45 (exclusive_or_expression -> and_expression .)
    VARIABLE        reduce using rule 45 (exclusive_or_expression -> and_expression .)
    SEMI_COLON      reduce using rule 45 (exclusive_or_expression -> and_expression .)
    LPAREN          reduce using rule 45 (exclusive_or_expression -> and_expression .)
    RBRACE          reduce using rule 45 (exclusive_or_expression -> and_expression .)
    COLON           reduce using rule 45 (exclusive_or_expression -> and_expression .)
    AND_OP          shift and go to state 81

  ! AND_OP          [ reduce using rule 45 (exclusive_or_expression -> and_expression .) ]


state 37

    (67) cast_expression -> unary_expression .

    MULT            reduce using rule 67 (cast_expression -> unary_expression .)
    DIV             reduce using rule 67 (cast_expression -> unary_expression .)
    MOD             reduce using rule 67 (cast_expression -> unary_expression .)
    ADD             reduce using rule 67 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 67 (cast_expression -> unary_expression .)
    LEFT_OP         reduce using rule 67 (cast_expression -> unary_expression .)
    RIGHT_OP        reduce using rule 67 (cast_expression -> unary_expression .)
    L_OP            reduce using rule 67 (cast_expression -> unary_expression .)
    G_OP            reduce using rule 67 (cast_expression -> unary_expression .)
    LE_OP           reduce using rule 67 (cast_expression -> unary_expression .)
    GE_OP           reduce using rule 67 (cast_expression -> unary_expression .)
    EQUALS_OP       reduce using rule 67 (cast_expression -> unary_expression .)
    NOTEQUALS       reduce using rule 67 (cast_expression -> unary_expression .)
    AND_OP          reduce using rule 67 (cast_expression -> unary_expression .)
    AND             reduce using rule 67 (cast_expression -> unary_expression .)
    OR              reduce using rule 67 (cast_expression -> unary_expression .)
    CONDOP          reduce using rule 67 (cast_expression -> unary_expression .)
    OR_OP           reduce using rule 67 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 67 (cast_expression -> unary_expression .)
    VOID            reduce using rule 67 (cast_expression -> unary_expression .)
    INT             reduce using rule 67 (cast_expression -> unary_expression .)
    CHAR            reduce using rule 67 (cast_expression -> unary_expression .)
    SHORT           reduce using rule 67 (cast_expression -> unary_expression .)
    LONG            reduce using rule 67 (cast_expression -> unary_expression .)
    FLOAT           reduce using rule 67 (cast_expression -> unary_expression .)
    DOUBLE          reduce using rule 67 (cast_expression -> unary_expression .)
    VARIABLE        reduce using rule 67 (cast_expression -> unary_expression .)
    SEMI_COLON      reduce using rule 67 (cast_expression -> unary_expression .)
    LPAREN          reduce using rule 67 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 67 (cast_expression -> unary_expression .)
    RBIG            reduce using rule 67 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 67 (cast_expression -> unary_expression .)
    COLON           reduce using rule 67 (cast_expression -> unary_expression .)
    EQUALS          reduce using rule 67 (cast_expression -> unary_expression .)
    MUL_ASSIGN      reduce using rule 67 (cast_expression -> unary_expression .)
    DIV_ASSIGN      reduce using rule 67 (cast_expression -> unary_expression .)
    MOD_ASSIGN      reduce using rule 67 (cast_expression -> unary_expression .)
    ADD_ASSIGN      reduce using rule 67 (cast_expression -> unary_expression .)
    SUB_ASSIGN      reduce using rule 67 (cast_expression -> unary_expression .)
    LEFT_ASSIGN     reduce using rule 67 (cast_expression -> unary_expression .)
    RIGHT_ASSIGN    reduce using rule 67 (cast_expression -> unary_expression .)
    AND_ASSIGN      reduce using rule 67 (cast_expression -> unary_expression .)
    XOR_ASSIGN      reduce using rule 67 (cast_expression -> unary_expression .)
    OR_ASSIGN       reduce using rule 67 (cast_expression -> unary_expression .)


state 38

    (41) logical_and_expression -> inclusive_or_expression .
    (44) inclusive_or_expression -> inclusive_or_expression . OR exclusive_or_expression

    AND_OP          reduce using rule 41 (logical_and_expression -> inclusive_or_expression .)
    CONDOP          reduce using rule 41 (logical_and_expression -> inclusive_or_expression .)
    OR_OP           reduce using rule 41 (logical_and_expression -> inclusive_or_expression .)
    RPAREN          reduce using rule 41 (logical_and_expression -> inclusive_or_expression .)
    COMMA           reduce using rule 41 (logical_and_expression -> inclusive_or_expression .)
    SEMI_COLON      reduce using rule 41 (logical_and_expression -> inclusive_or_expression .)
    RBRACE          reduce using rule 41 (logical_and_expression -> inclusive_or_expression .)
    RBIG            reduce using rule 41 (logical_and_expression -> inclusive_or_expression .)
    COLON           reduce using rule 41 (logical_and_expression -> inclusive_or_expression .)
    VOID            reduce using rule 41 (logical_and_expression -> inclusive_or_expression .)
    INT             reduce using rule 41 (logical_and_expression -> inclusive_or_expression .)
    CHAR            reduce using rule 41 (logical_and_expression -> inclusive_or_expression .)
    SHORT           reduce using rule 41 (logical_and_expression -> inclusive_or_expression .)
    LONG            reduce using rule 41 (logical_and_expression -> inclusive_or_expression .)
    FLOAT           reduce using rule 41 (logical_and_expression -> inclusive_or_expression .)
    DOUBLE          reduce using rule 41 (logical_and_expression -> inclusive_or_expression .)
    VARIABLE        reduce using rule 41 (logical_and_expression -> inclusive_or_expression .)
    LPAREN          reduce using rule 41 (logical_and_expression -> inclusive_or_expression .)
    OR              shift and go to state 82


state 39

    (89) constant -> EXP_REAL .

    LBIG            reduce using rule 89 (constant -> EXP_REAL .)
    LPAREN          reduce using rule 89 (constant -> EXP_REAL .)
    MULT            reduce using rule 89 (constant -> EXP_REAL .)
    DIV             reduce using rule 89 (constant -> EXP_REAL .)
    MOD             reduce using rule 89 (constant -> EXP_REAL .)
    ADD             reduce using rule 89 (constant -> EXP_REAL .)
    MINUS           reduce using rule 89 (constant -> EXP_REAL .)
    LEFT_OP         reduce using rule 89 (constant -> EXP_REAL .)
    RIGHT_OP        reduce using rule 89 (constant -> EXP_REAL .)
    L_OP            reduce using rule 89 (constant -> EXP_REAL .)
    G_OP            reduce using rule 89 (constant -> EXP_REAL .)
    LE_OP           reduce using rule 89 (constant -> EXP_REAL .)
    GE_OP           reduce using rule 89 (constant -> EXP_REAL .)
    EQUALS_OP       reduce using rule 89 (constant -> EXP_REAL .)
    NOTEQUALS       reduce using rule 89 (constant -> EXP_REAL .)
    AND_OP          reduce using rule 89 (constant -> EXP_REAL .)
    AND             reduce using rule 89 (constant -> EXP_REAL .)
    OR              reduce using rule 89 (constant -> EXP_REAL .)
    CONDOP          reduce using rule 89 (constant -> EXP_REAL .)
    OR_OP           reduce using rule 89 (constant -> EXP_REAL .)
    COMMA           reduce using rule 89 (constant -> EXP_REAL .)
    VOID            reduce using rule 89 (constant -> EXP_REAL .)
    INT             reduce using rule 89 (constant -> EXP_REAL .)
    CHAR            reduce using rule 89 (constant -> EXP_REAL .)
    SHORT           reduce using rule 89 (constant -> EXP_REAL .)
    LONG            reduce using rule 89 (constant -> EXP_REAL .)
    FLOAT           reduce using rule 89 (constant -> EXP_REAL .)
    DOUBLE          reduce using rule 89 (constant -> EXP_REAL .)
    VARIABLE        reduce using rule 89 (constant -> EXP_REAL .)
    SEMI_COLON      reduce using rule 89 (constant -> EXP_REAL .)
    RPAREN          reduce using rule 89 (constant -> EXP_REAL .)
    RBIG            reduce using rule 89 (constant -> EXP_REAL .)
    EQUALS          reduce using rule 89 (constant -> EXP_REAL .)
    MUL_ASSIGN      reduce using rule 89 (constant -> EXP_REAL .)
    DIV_ASSIGN      reduce using rule 89 (constant -> EXP_REAL .)
    MOD_ASSIGN      reduce using rule 89 (constant -> EXP_REAL .)
    ADD_ASSIGN      reduce using rule 89 (constant -> EXP_REAL .)
    SUB_ASSIGN      reduce using rule 89 (constant -> EXP_REAL .)
    LEFT_ASSIGN     reduce using rule 89 (constant -> EXP_REAL .)
    RIGHT_ASSIGN    reduce using rule 89 (constant -> EXP_REAL .)
    AND_ASSIGN      reduce using rule 89 (constant -> EXP_REAL .)
    XOR_ASSIGN      reduce using rule 89 (constant -> EXP_REAL .)
    OR_ASSIGN       reduce using rule 89 (constant -> EXP_REAL .)
    RBRACE          reduce using rule 89 (constant -> EXP_REAL .)
    COLON           reduce using rule 89 (constant -> EXP_REAL .)


state 40

    (91) constant -> DEC_INT .

    LBIG            reduce using rule 91 (constant -> DEC_INT .)
    LPAREN          reduce using rule 91 (constant -> DEC_INT .)
    MULT            reduce using rule 91 (constant -> DEC_INT .)
    DIV             reduce using rule 91 (constant -> DEC_INT .)
    MOD             reduce using rule 91 (constant -> DEC_INT .)
    ADD             reduce using rule 91 (constant -> DEC_INT .)
    MINUS           reduce using rule 91 (constant -> DEC_INT .)
    LEFT_OP         reduce using rule 91 (constant -> DEC_INT .)
    RIGHT_OP        reduce using rule 91 (constant -> DEC_INT .)
    L_OP            reduce using rule 91 (constant -> DEC_INT .)
    G_OP            reduce using rule 91 (constant -> DEC_INT .)
    LE_OP           reduce using rule 91 (constant -> DEC_INT .)
    GE_OP           reduce using rule 91 (constant -> DEC_INT .)
    EQUALS_OP       reduce using rule 91 (constant -> DEC_INT .)
    NOTEQUALS       reduce using rule 91 (constant -> DEC_INT .)
    AND_OP          reduce using rule 91 (constant -> DEC_INT .)
    AND             reduce using rule 91 (constant -> DEC_INT .)
    OR              reduce using rule 91 (constant -> DEC_INT .)
    CONDOP          reduce using rule 91 (constant -> DEC_INT .)
    OR_OP           reduce using rule 91 (constant -> DEC_INT .)
    COMMA           reduce using rule 91 (constant -> DEC_INT .)
    VOID            reduce using rule 91 (constant -> DEC_INT .)
    INT             reduce using rule 91 (constant -> DEC_INT .)
    CHAR            reduce using rule 91 (constant -> DEC_INT .)
    SHORT           reduce using rule 91 (constant -> DEC_INT .)
    LONG            reduce using rule 91 (constant -> DEC_INT .)
    FLOAT           reduce using rule 91 (constant -> DEC_INT .)
    DOUBLE          reduce using rule 91 (constant -> DEC_INT .)
    VARIABLE        reduce using rule 91 (constant -> DEC_INT .)
    SEMI_COLON      reduce using rule 91 (constant -> DEC_INT .)
    RPAREN          reduce using rule 91 (constant -> DEC_INT .)
    RBIG            reduce using rule 91 (constant -> DEC_INT .)
    EQUALS          reduce using rule 91 (constant -> DEC_INT .)
    MUL_ASSIGN      reduce using rule 91 (constant -> DEC_INT .)
    DIV_ASSIGN      reduce using rule 91 (constant -> DEC_INT .)
    MOD_ASSIGN      reduce using rule 91 (constant -> DEC_INT .)
    ADD_ASSIGN      reduce using rule 91 (constant -> DEC_INT .)
    SUB_ASSIGN      reduce using rule 91 (constant -> DEC_INT .)
    LEFT_ASSIGN     reduce using rule 91 (constant -> DEC_INT .)
    RIGHT_ASSIGN    reduce using rule 91 (constant -> DEC_INT .)
    AND_ASSIGN      reduce using rule 91 (constant -> DEC_INT .)
    XOR_ASSIGN      reduce using rule 91 (constant -> DEC_INT .)
    OR_ASSIGN       reduce using rule 91 (constant -> DEC_INT .)
    RBRACE          reduce using rule 91 (constant -> DEC_INT .)
    COLON           reduce using rule 91 (constant -> DEC_INT .)


state 41

    (79) unary_operator -> TILDA .

    LPAREN          reduce using rule 79 (unary_operator -> TILDA .)
    INCREMENT       reduce using rule 79 (unary_operator -> TILDA .)
    DECREMENT       reduce using rule 79 (unary_operator -> TILDA .)
    SIZEOF          reduce using rule 79 (unary_operator -> TILDA .)
    AND_OP          reduce using rule 79 (unary_operator -> TILDA .)
    MULT            reduce using rule 79 (unary_operator -> TILDA .)
    ADD             reduce using rule 79 (unary_operator -> TILDA .)
    MINUS           reduce using rule 79 (unary_operator -> TILDA .)
    TILDA           reduce using rule 79 (unary_operator -> TILDA .)
    NOT             reduce using rule 79 (unary_operator -> TILDA .)
    VARIABLE        reduce using rule 79 (unary_operator -> TILDA .)
    HEX_INT         reduce using rule 79 (unary_operator -> TILDA .)
    EXP_REAL        reduce using rule 79 (unary_operator -> TILDA .)
    DOT_REAL        reduce using rule 79 (unary_operator -> TILDA .)
    DEC_INT         reduce using rule 79 (unary_operator -> TILDA .)


state 42

    (49) equality_expression -> relational_expression .
    (53) relational_expression -> relational_expression . L_OP shift_expression
    (54) relational_expression -> relational_expression . G_OP shift_expression
    (55) relational_expression -> relational_expression . LE_OP shift_expression
    (56) relational_expression -> relational_expression . GE_OP shift_expression

    EQUALS_OP       reduce using rule 49 (equality_expression -> relational_expression .)
    NOTEQUALS       reduce using rule 49 (equality_expression -> relational_expression .)
    AND_OP          reduce using rule 49 (equality_expression -> relational_expression .)
    AND             reduce using rule 49 (equality_expression -> relational_expression .)
    OR              reduce using rule 49 (equality_expression -> relational_expression .)
    CONDOP          reduce using rule 49 (equality_expression -> relational_expression .)
    OR_OP           reduce using rule 49 (equality_expression -> relational_expression .)
    RBIG            reduce using rule 49 (equality_expression -> relational_expression .)
    COMMA           reduce using rule 49 (equality_expression -> relational_expression .)
    VOID            reduce using rule 49 (equality_expression -> relational_expression .)
    INT             reduce using rule 49 (equality_expression -> relational_expression .)
    CHAR            reduce using rule 49 (equality_expression -> relational_expression .)
    SHORT           reduce using rule 49 (equality_expression -> relational_expression .)
    LONG            reduce using rule 49 (equality_expression -> relational_expression .)
    FLOAT           reduce using rule 49 (equality_expression -> relational_expression .)
    DOUBLE          reduce using rule 49 (equality_expression -> relational_expression .)
    VARIABLE        reduce using rule 49 (equality_expression -> relational_expression .)
    SEMI_COLON      reduce using rule 49 (equality_expression -> relational_expression .)
    LPAREN          reduce using rule 49 (equality_expression -> relational_expression .)
    RPAREN          reduce using rule 49 (equality_expression -> relational_expression .)
    RBRACE          reduce using rule 49 (equality_expression -> relational_expression .)
    COLON           reduce using rule 49 (equality_expression -> relational_expression .)
    L_OP            shift and go to state 85
    G_OP            shift and go to state 84
    LE_OP           shift and go to state 83
    GE_OP           shift and go to state 86


state 43

    (70) unary_expression -> INCREMENT . unary_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREMENT unary_expression
    (71) unary_expression -> . DECREMENT unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (73) unary_expression -> . SIZEOF unary_expression
    (74) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (84) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LBIG expression RBIG
    (93) postfix_expression -> . postfix_expression LPAREN RPAREN
    (94) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (75) unary_operator -> . AND_OP
    (76) unary_operator -> . MULT
    (77) unary_operator -> . ADD
    (78) unary_operator -> . MINUS
    (79) unary_operator -> . TILDA
    (80) unary_operator -> . NOT
    (85) primary_expression -> . VARIABLE
    (86) primary_expression -> . constant
    (87) primary_expression -> . LPAREN expression RPAREN
    (88) constant -> . HEX_INT
    (89) constant -> . EXP_REAL
    (90) constant -> . DOT_REAL
    (91) constant -> . DEC_INT

    INCREMENT       shift and go to state 43
    DECREMENT       shift and go to state 64
    SIZEOF          shift and go to state 47
    AND_OP          shift and go to state 49
    MULT            shift and go to state 57
    ADD             shift and go to state 59
    MINUS           shift and go to state 35
    TILDA           shift and go to state 41
    NOT             shift and go to state 63
    VARIABLE        shift and go to state 53
    LPAREN          shift and go to state 88
    HEX_INT         shift and go to state 58
    EXP_REAL        shift and go to state 39
    DOT_REAL        shift and go to state 60
    DEC_INT         shift and go to state 40

    constant                       shift and go to state 32
    unary_expression               shift and go to state 87
    postfix_expression             shift and go to state 34
    primary_expression             shift and go to state 51
    unary_operator                 shift and go to state 61

state 44

    (63) multiplicative_expression -> cast_expression .

    MULT            reduce using rule 63 (multiplicative_expression -> cast_expression .)
    DIV             reduce using rule 63 (multiplicative_expression -> cast_expression .)
    MOD             reduce using rule 63 (multiplicative_expression -> cast_expression .)
    ADD             reduce using rule 63 (multiplicative_expression -> cast_expression .)
    MINUS           reduce using rule 63 (multiplicative_expression -> cast_expression .)
    LEFT_OP         reduce using rule 63 (multiplicative_expression -> cast_expression .)
    RIGHT_OP        reduce using rule 63 (multiplicative_expression -> cast_expression .)
    L_OP            reduce using rule 63 (multiplicative_expression -> cast_expression .)
    G_OP            reduce using rule 63 (multiplicative_expression -> cast_expression .)
    LE_OP           reduce using rule 63 (multiplicative_expression -> cast_expression .)
    GE_OP           reduce using rule 63 (multiplicative_expression -> cast_expression .)
    EQUALS_OP       reduce using rule 63 (multiplicative_expression -> cast_expression .)
    NOTEQUALS       reduce using rule 63 (multiplicative_expression -> cast_expression .)
    AND_OP          reduce using rule 63 (multiplicative_expression -> cast_expression .)
    AND             reduce using rule 63 (multiplicative_expression -> cast_expression .)
    OR              reduce using rule 63 (multiplicative_expression -> cast_expression .)
    CONDOP          reduce using rule 63 (multiplicative_expression -> cast_expression .)
    OR_OP           reduce using rule 63 (multiplicative_expression -> cast_expression .)
    RPAREN          reduce using rule 63 (multiplicative_expression -> cast_expression .)
    COMMA           reduce using rule 63 (multiplicative_expression -> cast_expression .)
    VOID            reduce using rule 63 (multiplicative_expression -> cast_expression .)
    INT             reduce using rule 63 (multiplicative_expression -> cast_expression .)
    CHAR            reduce using rule 63 (multiplicative_expression -> cast_expression .)
    SHORT           reduce using rule 63 (multiplicative_expression -> cast_expression .)
    LONG            reduce using rule 63 (multiplicative_expression -> cast_expression .)
    FLOAT           reduce using rule 63 (multiplicative_expression -> cast_expression .)
    DOUBLE          reduce using rule 63 (multiplicative_expression -> cast_expression .)
    VARIABLE        reduce using rule 63 (multiplicative_expression -> cast_expression .)
    SEMI_COLON      reduce using rule 63 (multiplicative_expression -> cast_expression .)
    LPAREN          reduce using rule 63 (multiplicative_expression -> cast_expression .)
    RBIG            reduce using rule 63 (multiplicative_expression -> cast_expression .)
    RBRACE          reduce using rule 63 (multiplicative_expression -> cast_expression .)
    COLON           reduce using rule 63 (multiplicative_expression -> cast_expression .)


state 45

    (37) conditional_expression -> logical_or_expression .
    (38) conditional_expression -> logical_or_expression . CONDOP expression COLON conditional_expression
    (40) logical_or_expression -> logical_or_expression . OR_OP logical_and_expression

    SEMI_COLON      reduce using rule 37 (conditional_expression -> logical_or_expression .)
    COMMA           reduce using rule 37 (conditional_expression -> logical_or_expression .)
    RBRACE          reduce using rule 37 (conditional_expression -> logical_or_expression .)
    RPAREN          reduce using rule 37 (conditional_expression -> logical_or_expression .)
    RBIG            reduce using rule 37 (conditional_expression -> logical_or_expression .)
    COLON           reduce using rule 37 (conditional_expression -> logical_or_expression .)
    VOID            reduce using rule 37 (conditional_expression -> logical_or_expression .)
    INT             reduce using rule 37 (conditional_expression -> logical_or_expression .)
    CHAR            reduce using rule 37 (conditional_expression -> logical_or_expression .)
    SHORT           reduce using rule 37 (conditional_expression -> logical_or_expression .)
    LONG            reduce using rule 37 (conditional_expression -> logical_or_expression .)
    FLOAT           reduce using rule 37 (conditional_expression -> logical_or_expression .)
    DOUBLE          reduce using rule 37 (conditional_expression -> logical_or_expression .)
    VARIABLE        reduce using rule 37 (conditional_expression -> logical_or_expression .)
    LPAREN          reduce using rule 37 (conditional_expression -> logical_or_expression .)
    CONDOP          shift and go to state 89
    OR_OP           shift and go to state 90


state 46

    (35) enumerator -> VARIABLE EQUALS constant_expression .

    COMMA           reduce using rule 35 (enumerator -> VARIABLE EQUALS constant_expression .)
    VOID            reduce using rule 35 (enumerator -> VARIABLE EQUALS constant_expression .)
    INT             reduce using rule 35 (enumerator -> VARIABLE EQUALS constant_expression .)
    CHAR            reduce using rule 35 (enumerator -> VARIABLE EQUALS constant_expression .)
    SHORT           reduce using rule 35 (enumerator -> VARIABLE EQUALS constant_expression .)
    LONG            reduce using rule 35 (enumerator -> VARIABLE EQUALS constant_expression .)
    FLOAT           reduce using rule 35 (enumerator -> VARIABLE EQUALS constant_expression .)
    DOUBLE          reduce using rule 35 (enumerator -> VARIABLE EQUALS constant_expression .)
    VARIABLE        reduce using rule 35 (enumerator -> VARIABLE EQUALS constant_expression .)
    RPAREN          reduce using rule 35 (enumerator -> VARIABLE EQUALS constant_expression .)
    SEMI_COLON      reduce using rule 35 (enumerator -> VARIABLE EQUALS constant_expression .)
    LPAREN          reduce using rule 35 (enumerator -> VARIABLE EQUALS constant_expression .)


state 47

    (73) unary_expression -> SIZEOF . unary_expression
    (74) unary_expression -> SIZEOF . LPAREN type_name RPAREN
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREMENT unary_expression
    (71) unary_expression -> . DECREMENT unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (73) unary_expression -> . SIZEOF unary_expression
    (74) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (84) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LBIG expression RBIG
    (93) postfix_expression -> . postfix_expression LPAREN RPAREN
    (94) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (75) unary_operator -> . AND_OP
    (76) unary_operator -> . MULT
    (77) unary_operator -> . ADD
    (78) unary_operator -> . MINUS
    (79) unary_operator -> . TILDA
    (80) unary_operator -> . NOT
    (85) primary_expression -> . VARIABLE
    (86) primary_expression -> . constant
    (87) primary_expression -> . LPAREN expression RPAREN
    (88) constant -> . HEX_INT
    (89) constant -> . EXP_REAL
    (90) constant -> . DOT_REAL
    (91) constant -> . DEC_INT

    LPAREN          shift and go to state 92
    INCREMENT       shift and go to state 43
    DECREMENT       shift and go to state 64
    SIZEOF          shift and go to state 47
    AND_OP          shift and go to state 49
    MULT            shift and go to state 57
    ADD             shift and go to state 59
    MINUS           shift and go to state 35
    TILDA           shift and go to state 41
    NOT             shift and go to state 63
    VARIABLE        shift and go to state 53
    HEX_INT         shift and go to state 58
    EXP_REAL        shift and go to state 39
    DOT_REAL        shift and go to state 60
    DEC_INT         shift and go to state 40

    constant                       shift and go to state 32
    unary_expression               shift and go to state 91
    postfix_expression             shift and go to state 34
    primary_expression             shift and go to state 51
    unary_operator                 shift and go to state 61

state 48

    (60) additive_expression -> multiplicative_expression .
    (64) multiplicative_expression -> multiplicative_expression . MULT cast_expression
    (65) multiplicative_expression -> multiplicative_expression . DIV cast_expression
    (66) multiplicative_expression -> multiplicative_expression . MOD cast_expression

    ADD             reduce using rule 60 (additive_expression -> multiplicative_expression .)
    MINUS           reduce using rule 60 (additive_expression -> multiplicative_expression .)
    LEFT_OP         reduce using rule 60 (additive_expression -> multiplicative_expression .)
    RIGHT_OP        reduce using rule 60 (additive_expression -> multiplicative_expression .)
    L_OP            reduce using rule 60 (additive_expression -> multiplicative_expression .)
    G_OP            reduce using rule 60 (additive_expression -> multiplicative_expression .)
    LE_OP           reduce using rule 60 (additive_expression -> multiplicative_expression .)
    GE_OP           reduce using rule 60 (additive_expression -> multiplicative_expression .)
    EQUALS_OP       reduce using rule 60 (additive_expression -> multiplicative_expression .)
    NOTEQUALS       reduce using rule 60 (additive_expression -> multiplicative_expression .)
    AND_OP          reduce using rule 60 (additive_expression -> multiplicative_expression .)
    AND             reduce using rule 60 (additive_expression -> multiplicative_expression .)
    OR              reduce using rule 60 (additive_expression -> multiplicative_expression .)
    CONDOP          reduce using rule 60 (additive_expression -> multiplicative_expression .)
    OR_OP           reduce using rule 60 (additive_expression -> multiplicative_expression .)
    COMMA           reduce using rule 60 (additive_expression -> multiplicative_expression .)
    VOID            reduce using rule 60 (additive_expression -> multiplicative_expression .)
    INT             reduce using rule 60 (additive_expression -> multiplicative_expression .)
    CHAR            reduce using rule 60 (additive_expression -> multiplicative_expression .)
    SHORT           reduce using rule 60 (additive_expression -> multiplicative_expression .)
    LONG            reduce using rule 60 (additive_expression -> multiplicative_expression .)
    FLOAT           reduce using rule 60 (additive_expression -> multiplicative_expression .)
    DOUBLE          reduce using rule 60 (additive_expression -> multiplicative_expression .)
    VARIABLE        reduce using rule 60 (additive_expression -> multiplicative_expression .)
    SEMI_COLON      reduce using rule 60 (additive_expression -> multiplicative_expression .)
    LPAREN          reduce using rule 60 (additive_expression -> multiplicative_expression .)
    RPAREN          reduce using rule 60 (additive_expression -> multiplicative_expression .)
    RBIG            reduce using rule 60 (additive_expression -> multiplicative_expression .)
    RBRACE          reduce using rule 60 (additive_expression -> multiplicative_expression .)
    COLON           reduce using rule 60 (additive_expression -> multiplicative_expression .)
    MULT            shift and go to state 94
    DIV             shift and go to state 93
    MOD             shift and go to state 95


state 49

    (75) unary_operator -> AND_OP .

    LPAREN          reduce using rule 75 (unary_operator -> AND_OP .)
    INCREMENT       reduce using rule 75 (unary_operator -> AND_OP .)
    DECREMENT       reduce using rule 75 (unary_operator -> AND_OP .)
    SIZEOF          reduce using rule 75 (unary_operator -> AND_OP .)
    AND_OP          reduce using rule 75 (unary_operator -> AND_OP .)
    MULT            reduce using rule 75 (unary_operator -> AND_OP .)
    ADD             reduce using rule 75 (unary_operator -> AND_OP .)
    MINUS           reduce using rule 75 (unary_operator -> AND_OP .)
    TILDA           reduce using rule 75 (unary_operator -> AND_OP .)
    NOT             reduce using rule 75 (unary_operator -> AND_OP .)
    VARIABLE        reduce using rule 75 (unary_operator -> AND_OP .)
    HEX_INT         reduce using rule 75 (unary_operator -> AND_OP .)
    EXP_REAL        reduce using rule 75 (unary_operator -> AND_OP .)
    DOT_REAL        reduce using rule 75 (unary_operator -> AND_OP .)
    DEC_INT         reduce using rule 75 (unary_operator -> AND_OP .)


state 50

    (57) shift_expression -> additive_expression .
    (61) additive_expression -> additive_expression . ADD multiplicative_expression
    (62) additive_expression -> additive_expression . MINUS multiplicative_expression

    LEFT_OP         reduce using rule 57 (shift_expression -> additive_expression .)
    RIGHT_OP        reduce using rule 57 (shift_expression -> additive_expression .)
    L_OP            reduce using rule 57 (shift_expression -> additive_expression .)
    G_OP            reduce using rule 57 (shift_expression -> additive_expression .)
    LE_OP           reduce using rule 57 (shift_expression -> additive_expression .)
    GE_OP           reduce using rule 57 (shift_expression -> additive_expression .)
    EQUALS_OP       reduce using rule 57 (shift_expression -> additive_expression .)
    NOTEQUALS       reduce using rule 57 (shift_expression -> additive_expression .)
    AND_OP          reduce using rule 57 (shift_expression -> additive_expression .)
    AND             reduce using rule 57 (shift_expression -> additive_expression .)
    OR              reduce using rule 57 (shift_expression -> additive_expression .)
    CONDOP          reduce using rule 57 (shift_expression -> additive_expression .)
    OR_OP           reduce using rule 57 (shift_expression -> additive_expression .)
    SEMI_COLON      reduce using rule 57 (shift_expression -> additive_expression .)
    COMMA           reduce using rule 57 (shift_expression -> additive_expression .)
    RPAREN          reduce using rule 57 (shift_expression -> additive_expression .)
    RBRACE          reduce using rule 57 (shift_expression -> additive_expression .)
    RBIG            reduce using rule 57 (shift_expression -> additive_expression .)
    COLON           reduce using rule 57 (shift_expression -> additive_expression .)
    VOID            reduce using rule 57 (shift_expression -> additive_expression .)
    INT             reduce using rule 57 (shift_expression -> additive_expression .)
    CHAR            reduce using rule 57 (shift_expression -> additive_expression .)
    SHORT           reduce using rule 57 (shift_expression -> additive_expression .)
    LONG            reduce using rule 57 (shift_expression -> additive_expression .)
    FLOAT           reduce using rule 57 (shift_expression -> additive_expression .)
    DOUBLE          reduce using rule 57 (shift_expression -> additive_expression .)
    VARIABLE        reduce using rule 57 (shift_expression -> additive_expression .)
    LPAREN          reduce using rule 57 (shift_expression -> additive_expression .)
    ADD             shift and go to state 96
    MINUS           shift and go to state 97


state 51

    (84) postfix_expression -> primary_expression .

    LBIG            reduce using rule 84 (postfix_expression -> primary_expression .)
    LPAREN          reduce using rule 84 (postfix_expression -> primary_expression .)
    MULT            reduce using rule 84 (postfix_expression -> primary_expression .)
    DIV             reduce using rule 84 (postfix_expression -> primary_expression .)
    MOD             reduce using rule 84 (postfix_expression -> primary_expression .)
    ADD             reduce using rule 84 (postfix_expression -> primary_expression .)
    MINUS           reduce using rule 84 (postfix_expression -> primary_expression .)
    LEFT_OP         reduce using rule 84 (postfix_expression -> primary_expression .)
    RIGHT_OP        reduce using rule 84 (postfix_expression -> primary_expression .)
    L_OP            reduce using rule 84 (postfix_expression -> primary_expression .)
    G_OP            reduce using rule 84 (postfix_expression -> primary_expression .)
    LE_OP           reduce using rule 84 (postfix_expression -> primary_expression .)
    GE_OP           reduce using rule 84 (postfix_expression -> primary_expression .)
    EQUALS_OP       reduce using rule 84 (postfix_expression -> primary_expression .)
    NOTEQUALS       reduce using rule 84 (postfix_expression -> primary_expression .)
    AND_OP          reduce using rule 84 (postfix_expression -> primary_expression .)
    AND             reduce using rule 84 (postfix_expression -> primary_expression .)
    OR              reduce using rule 84 (postfix_expression -> primary_expression .)
    CONDOP          reduce using rule 84 (postfix_expression -> primary_expression .)
    OR_OP           reduce using rule 84 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 84 (postfix_expression -> primary_expression .)
    VOID            reduce using rule 84 (postfix_expression -> primary_expression .)
    INT             reduce using rule 84 (postfix_expression -> primary_expression .)
    CHAR            reduce using rule 84 (postfix_expression -> primary_expression .)
    SHORT           reduce using rule 84 (postfix_expression -> primary_expression .)
    LONG            reduce using rule 84 (postfix_expression -> primary_expression .)
    FLOAT           reduce using rule 84 (postfix_expression -> primary_expression .)
    DOUBLE          reduce using rule 84 (postfix_expression -> primary_expression .)
    VARIABLE        reduce using rule 84 (postfix_expression -> primary_expression .)
    SEMI_COLON      reduce using rule 84 (postfix_expression -> primary_expression .)
    RPAREN          reduce using rule 84 (postfix_expression -> primary_expression .)
    RBIG            reduce using rule 84 (postfix_expression -> primary_expression .)
    RBRACE          reduce using rule 84 (postfix_expression -> primary_expression .)
    COLON           reduce using rule 84 (postfix_expression -> primary_expression .)
    EQUALS          reduce using rule 84 (postfix_expression -> primary_expression .)
    MUL_ASSIGN      reduce using rule 84 (postfix_expression -> primary_expression .)
    DIV_ASSIGN      reduce using rule 84 (postfix_expression -> primary_expression .)
    MOD_ASSIGN      reduce using rule 84 (postfix_expression -> primary_expression .)
    ADD_ASSIGN      reduce using rule 84 (postfix_expression -> primary_expression .)
    SUB_ASSIGN      reduce using rule 84 (postfix_expression -> primary_expression .)
    LEFT_ASSIGN     reduce using rule 84 (postfix_expression -> primary_expression .)
    RIGHT_ASSIGN    reduce using rule 84 (postfix_expression -> primary_expression .)
    AND_ASSIGN      reduce using rule 84 (postfix_expression -> primary_expression .)
    XOR_ASSIGN      reduce using rule 84 (postfix_expression -> primary_expression .)
    OR_ASSIGN       reduce using rule 84 (postfix_expression -> primary_expression .)


state 52

    (68) cast_expression -> LPAREN . type_name RPAREN cast_expression
    (87) primary_expression -> LPAREN . expression RPAREN
    (81) type_name -> . specifier_qualifier_list
    (100) expression -> . assignment_expression
    (101) expression -> . expression COMMA assignment_expression
    (82) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (83) specifier_qualifier_list -> . type_specifier
    (102) assignment_expression -> . conditional_expression
    (103) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (23) type_specifier -> . VOID
    (24) type_specifier -> . INT
    (25) type_specifier -> . CHAR
    (26) type_specifier -> . SHORT
    (27) type_specifier -> . LONG
    (28) type_specifier -> . FLOAT
    (29) type_specifier -> . DOUBLE
    (30) type_specifier -> . enum_specifier
    (37) conditional_expression -> . logical_or_expression
    (38) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREMENT unary_expression
    (71) unary_expression -> . DECREMENT unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (73) unary_expression -> . SIZEOF unary_expression
    (74) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (31) enum_specifier -> . type_specifier enum_list
    (39) logical_or_expression -> . logical_and_expression
    (40) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (84) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LBIG expression RBIG
    (93) postfix_expression -> . postfix_expression LPAREN RPAREN
    (94) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (75) unary_operator -> . AND_OP
    (76) unary_operator -> . MULT
    (77) unary_operator -> . ADD
    (78) unary_operator -> . MINUS
    (79) unary_operator -> . TILDA
    (80) unary_operator -> . NOT
    (41) logical_and_expression -> . inclusive_or_expression
    (42) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (85) primary_expression -> . VARIABLE
    (86) primary_expression -> . constant
    (87) primary_expression -> . LPAREN expression RPAREN
    (43) inclusive_or_expression -> . exclusive_or_expression
    (44) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (88) constant -> . HEX_INT
    (89) constant -> . EXP_REAL
    (90) constant -> . DOT_REAL
    (91) constant -> . DEC_INT
    (45) exclusive_or_expression -> . and_expression
    (46) exclusive_or_expression -> . exclusive_or_expression AND and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression AND_OP equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQUALS_OP relational_expression
    (51) equality_expression -> . equality_expression NOTEQUALS relational_expression
    (52) relational_expression -> . shift_expression
    (53) relational_expression -> . relational_expression L_OP shift_expression
    (54) relational_expression -> . relational_expression G_OP shift_expression
    (55) relational_expression -> . relational_expression LE_OP shift_expression
    (56) relational_expression -> . relational_expression GE_OP shift_expression
    (57) shift_expression -> . additive_expression
    (58) shift_expression -> . shift_expression LEFT_OP additive_expression
    (59) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (60) additive_expression -> . multiplicative_expression
    (61) additive_expression -> . additive_expression ADD multiplicative_expression
    (62) additive_expression -> . additive_expression MINUS multiplicative_expression
    (63) multiplicative_expression -> . cast_expression
    (64) multiplicative_expression -> . multiplicative_expression MULT cast_expression
    (65) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (66) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (67) cast_expression -> . unary_expression
    (68) cast_expression -> . LPAREN type_name RPAREN cast_expression

    VOID            shift and go to state 4
    INT             shift and go to state 2
    CHAR            shift and go to state 7
    SHORT           shift and go to state 9
    LONG            shift and go to state 6
    FLOAT           shift and go to state 5
    DOUBLE          shift and go to state 3
    INCREMENT       shift and go to state 43
    DECREMENT       shift and go to state 64
    SIZEOF          shift and go to state 47
    AND_OP          shift and go to state 49
    MULT            shift and go to state 57
    ADD             shift and go to state 59
    MINUS           shift and go to state 35
    TILDA           shift and go to state 41
    NOT             shift and go to state 63
    VARIABLE        shift and go to state 53
    LPAREN          shift and go to state 75
    HEX_INT         shift and go to state 58
    EXP_REAL        shift and go to state 39
    DOT_REAL        shift and go to state 60
    DEC_INT         shift and go to state 40

    constant                       shift and go to state 32
    unary_expression               shift and go to state 72
    exclusive_or_expression        shift and go to state 33
    and_expression                 shift and go to state 36
    type_specifier                 shift and go to state 98
    inclusive_or_expression        shift and go to state 38
    type_name                      shift and go to state 99
    postfix_expression             shift and go to state 34
    relational_expression          shift and go to state 42
    cast_expression                shift and go to state 44
    logical_or_expression          shift and go to state 45
    unary_operator                 shift and go to state 61
    assignment_expression          shift and go to state 100
    multiplicative_expression      shift and go to state 48
    additive_expression            shift and go to state 50
    primary_expression             shift and go to state 51
    logical_and_expression         shift and go to state 54
    shift_expression               shift and go to state 55
    equality_expression            shift and go to state 56
    enum_specifier                 shift and go to state 8
    specifier_qualifier_list       shift and go to state 101
    conditional_expression         shift and go to state 77
    expression                     shift and go to state 102

state 53

    (85) primary_expression -> VARIABLE .

    LBIG            reduce using rule 85 (primary_expression -> VARIABLE .)
    LPAREN          reduce using rule 85 (primary_expression -> VARIABLE .)
    MULT            reduce using rule 85 (primary_expression -> VARIABLE .)
    DIV             reduce using rule 85 (primary_expression -> VARIABLE .)
    MOD             reduce using rule 85 (primary_expression -> VARIABLE .)
    ADD             reduce using rule 85 (primary_expression -> VARIABLE .)
    MINUS           reduce using rule 85 (primary_expression -> VARIABLE .)
    LEFT_OP         reduce using rule 85 (primary_expression -> VARIABLE .)
    RIGHT_OP        reduce using rule 85 (primary_expression -> VARIABLE .)
    L_OP            reduce using rule 85 (primary_expression -> VARIABLE .)
    G_OP            reduce using rule 85 (primary_expression -> VARIABLE .)
    LE_OP           reduce using rule 85 (primary_expression -> VARIABLE .)
    GE_OP           reduce using rule 85 (primary_expression -> VARIABLE .)
    EQUALS_OP       reduce using rule 85 (primary_expression -> VARIABLE .)
    NOTEQUALS       reduce using rule 85 (primary_expression -> VARIABLE .)
    AND_OP          reduce using rule 85 (primary_expression -> VARIABLE .)
    AND             reduce using rule 85 (primary_expression -> VARIABLE .)
    OR              reduce using rule 85 (primary_expression -> VARIABLE .)
    CONDOP          reduce using rule 85 (primary_expression -> VARIABLE .)
    OR_OP           reduce using rule 85 (primary_expression -> VARIABLE .)
    COMMA           reduce using rule 85 (primary_expression -> VARIABLE .)
    VOID            reduce using rule 85 (primary_expression -> VARIABLE .)
    INT             reduce using rule 85 (primary_expression -> VARIABLE .)
    CHAR            reduce using rule 85 (primary_expression -> VARIABLE .)
    SHORT           reduce using rule 85 (primary_expression -> VARIABLE .)
    LONG            reduce using rule 85 (primary_expression -> VARIABLE .)
    FLOAT           reduce using rule 85 (primary_expression -> VARIABLE .)
    DOUBLE          reduce using rule 85 (primary_expression -> VARIABLE .)
    VARIABLE        reduce using rule 85 (primary_expression -> VARIABLE .)
    SEMI_COLON      reduce using rule 85 (primary_expression -> VARIABLE .)
    RPAREN          reduce using rule 85 (primary_expression -> VARIABLE .)
    RBIG            reduce using rule 85 (primary_expression -> VARIABLE .)
    RBRACE          reduce using rule 85 (primary_expression -> VARIABLE .)
    COLON           reduce using rule 85 (primary_expression -> VARIABLE .)
    EQUALS          reduce using rule 85 (primary_expression -> VARIABLE .)
    MUL_ASSIGN      reduce using rule 85 (primary_expression -> VARIABLE .)
    DIV_ASSIGN      reduce using rule 85 (primary_expression -> VARIABLE .)
    MOD_ASSIGN      reduce using rule 85 (primary_expression -> VARIABLE .)
    ADD_ASSIGN      reduce using rule 85 (primary_expression -> VARIABLE .)
    SUB_ASSIGN      reduce using rule 85 (primary_expression -> VARIABLE .)
    LEFT_ASSIGN     reduce using rule 85 (primary_expression -> VARIABLE .)
    RIGHT_ASSIGN    reduce using rule 85 (primary_expression -> VARIABLE .)
    AND_ASSIGN      reduce using rule 85 (primary_expression -> VARIABLE .)
    XOR_ASSIGN      reduce using rule 85 (primary_expression -> VARIABLE .)
    OR_ASSIGN       reduce using rule 85 (primary_expression -> VARIABLE .)


state 54

    (39) logical_or_expression -> logical_and_expression .
    (42) logical_and_expression -> logical_and_expression . AND_OP inclusive_or_expression

    CONDOP          reduce using rule 39 (logical_or_expression -> logical_and_expression .)
    OR_OP           reduce using rule 39 (logical_or_expression -> logical_and_expression .)
    RPAREN          reduce using rule 39 (logical_or_expression -> logical_and_expression .)
    COMMA           reduce using rule 39 (logical_or_expression -> logical_and_expression .)
    RBIG            reduce using rule 39 (logical_or_expression -> logical_and_expression .)
    COLON           reduce using rule 39 (logical_or_expression -> logical_and_expression .)
    SEMI_COLON      reduce using rule 39 (logical_or_expression -> logical_and_expression .)
    RBRACE          reduce using rule 39 (logical_or_expression -> logical_and_expression .)
    VOID            reduce using rule 39 (logical_or_expression -> logical_and_expression .)
    INT             reduce using rule 39 (logical_or_expression -> logical_and_expression .)
    CHAR            reduce using rule 39 (logical_or_expression -> logical_and_expression .)
    SHORT           reduce using rule 39 (logical_or_expression -> logical_and_expression .)
    LONG            reduce using rule 39 (logical_or_expression -> logical_and_expression .)
    FLOAT           reduce using rule 39 (logical_or_expression -> logical_and_expression .)
    DOUBLE          reduce using rule 39 (logical_or_expression -> logical_and_expression .)
    VARIABLE        reduce using rule 39 (logical_or_expression -> logical_and_expression .)
    LPAREN          reduce using rule 39 (logical_or_expression -> logical_and_expression .)
    AND_OP          shift and go to state 103


state 55

    (52) relational_expression -> shift_expression .
    (58) shift_expression -> shift_expression . LEFT_OP additive_expression
    (59) shift_expression -> shift_expression . RIGHT_OP additive_expression

    L_OP            reduce using rule 52 (relational_expression -> shift_expression .)
    G_OP            reduce using rule 52 (relational_expression -> shift_expression .)
    LE_OP           reduce using rule 52 (relational_expression -> shift_expression .)
    GE_OP           reduce using rule 52 (relational_expression -> shift_expression .)
    EQUALS_OP       reduce using rule 52 (relational_expression -> shift_expression .)
    NOTEQUALS       reduce using rule 52 (relational_expression -> shift_expression .)
    AND_OP          reduce using rule 52 (relational_expression -> shift_expression .)
    AND             reduce using rule 52 (relational_expression -> shift_expression .)
    OR              reduce using rule 52 (relational_expression -> shift_expression .)
    CONDOP          reduce using rule 52 (relational_expression -> shift_expression .)
    OR_OP           reduce using rule 52 (relational_expression -> shift_expression .)
    RPAREN          reduce using rule 52 (relational_expression -> shift_expression .)
    COMMA           reduce using rule 52 (relational_expression -> shift_expression .)
    RBIG            reduce using rule 52 (relational_expression -> shift_expression .)
    COLON           reduce using rule 52 (relational_expression -> shift_expression .)
    VOID            reduce using rule 52 (relational_expression -> shift_expression .)
    INT             reduce using rule 52 (relational_expression -> shift_expression .)
    CHAR            reduce using rule 52 (relational_expression -> shift_expression .)
    SHORT           reduce using rule 52 (relational_expression -> shift_expression .)
    LONG            reduce using rule 52 (relational_expression -> shift_expression .)
    FLOAT           reduce using rule 52 (relational_expression -> shift_expression .)
    DOUBLE          reduce using rule 52 (relational_expression -> shift_expression .)
    VARIABLE        reduce using rule 52 (relational_expression -> shift_expression .)
    SEMI_COLON      reduce using rule 52 (relational_expression -> shift_expression .)
    LPAREN          reduce using rule 52 (relational_expression -> shift_expression .)
    RBRACE          reduce using rule 52 (relational_expression -> shift_expression .)
    LEFT_OP         shift and go to state 104
    RIGHT_OP        shift and go to state 105


state 56

    (47) and_expression -> equality_expression .
    (50) equality_expression -> equality_expression . EQUALS_OP relational_expression
    (51) equality_expression -> equality_expression . NOTEQUALS relational_expression

    AND_OP          reduce using rule 47 (and_expression -> equality_expression .)
    AND             reduce using rule 47 (and_expression -> equality_expression .)
    OR              reduce using rule 47 (and_expression -> equality_expression .)
    CONDOP          reduce using rule 47 (and_expression -> equality_expression .)
    OR_OP           reduce using rule 47 (and_expression -> equality_expression .)
    RPAREN          reduce using rule 47 (and_expression -> equality_expression .)
    COMMA           reduce using rule 47 (and_expression -> equality_expression .)
    VOID            reduce using rule 47 (and_expression -> equality_expression .)
    INT             reduce using rule 47 (and_expression -> equality_expression .)
    CHAR            reduce using rule 47 (and_expression -> equality_expression .)
    SHORT           reduce using rule 47 (and_expression -> equality_expression .)
    LONG            reduce using rule 47 (and_expression -> equality_expression .)
    FLOAT           reduce using rule 47 (and_expression -> equality_expression .)
    DOUBLE          reduce using rule 47 (and_expression -> equality_expression .)
    VARIABLE        reduce using rule 47 (and_expression -> equality_expression .)
    SEMI_COLON      reduce using rule 47 (and_expression -> equality_expression .)
    LPAREN          reduce using rule 47 (and_expression -> equality_expression .)
    RBIG            reduce using rule 47 (and_expression -> equality_expression .)
    RBRACE          reduce using rule 47 (and_expression -> equality_expression .)
    COLON           reduce using rule 47 (and_expression -> equality_expression .)
    EQUALS_OP       shift and go to state 107
    NOTEQUALS       shift and go to state 106


state 57

    (76) unary_operator -> MULT .

    LPAREN          reduce using rule 76 (unary_operator -> MULT .)
    INCREMENT       reduce using rule 76 (unary_operator -> MULT .)
    DECREMENT       reduce using rule 76 (unary_operator -> MULT .)
    SIZEOF          reduce using rule 76 (unary_operator -> MULT .)
    AND_OP          reduce using rule 76 (unary_operator -> MULT .)
    MULT            reduce using rule 76 (unary_operator -> MULT .)
    ADD             reduce using rule 76 (unary_operator -> MULT .)
    MINUS           reduce using rule 76 (unary_operator -> MULT .)
    TILDA           reduce using rule 76 (unary_operator -> MULT .)
    NOT             reduce using rule 76 (unary_operator -> MULT .)
    VARIABLE        reduce using rule 76 (unary_operator -> MULT .)
    HEX_INT         reduce using rule 76 (unary_operator -> MULT .)
    EXP_REAL        reduce using rule 76 (unary_operator -> MULT .)
    DOT_REAL        reduce using rule 76 (unary_operator -> MULT .)
    DEC_INT         reduce using rule 76 (unary_operator -> MULT .)


state 58

    (88) constant -> HEX_INT .

    LBIG            reduce using rule 88 (constant -> HEX_INT .)
    LPAREN          reduce using rule 88 (constant -> HEX_INT .)
    MULT            reduce using rule 88 (constant -> HEX_INT .)
    DIV             reduce using rule 88 (constant -> HEX_INT .)
    MOD             reduce using rule 88 (constant -> HEX_INT .)
    ADD             reduce using rule 88 (constant -> HEX_INT .)
    MINUS           reduce using rule 88 (constant -> HEX_INT .)
    LEFT_OP         reduce using rule 88 (constant -> HEX_INT .)
    RIGHT_OP        reduce using rule 88 (constant -> HEX_INT .)
    L_OP            reduce using rule 88 (constant -> HEX_INT .)
    G_OP            reduce using rule 88 (constant -> HEX_INT .)
    LE_OP           reduce using rule 88 (constant -> HEX_INT .)
    GE_OP           reduce using rule 88 (constant -> HEX_INT .)
    EQUALS_OP       reduce using rule 88 (constant -> HEX_INT .)
    NOTEQUALS       reduce using rule 88 (constant -> HEX_INT .)
    AND_OP          reduce using rule 88 (constant -> HEX_INT .)
    AND             reduce using rule 88 (constant -> HEX_INT .)
    OR              reduce using rule 88 (constant -> HEX_INT .)
    CONDOP          reduce using rule 88 (constant -> HEX_INT .)
    OR_OP           reduce using rule 88 (constant -> HEX_INT .)
    COMMA           reduce using rule 88 (constant -> HEX_INT .)
    VOID            reduce using rule 88 (constant -> HEX_INT .)
    INT             reduce using rule 88 (constant -> HEX_INT .)
    CHAR            reduce using rule 88 (constant -> HEX_INT .)
    SHORT           reduce using rule 88 (constant -> HEX_INT .)
    LONG            reduce using rule 88 (constant -> HEX_INT .)
    FLOAT           reduce using rule 88 (constant -> HEX_INT .)
    DOUBLE          reduce using rule 88 (constant -> HEX_INT .)
    VARIABLE        reduce using rule 88 (constant -> HEX_INT .)
    SEMI_COLON      reduce using rule 88 (constant -> HEX_INT .)
    RPAREN          reduce using rule 88 (constant -> HEX_INT .)
    RBIG            reduce using rule 88 (constant -> HEX_INT .)
    EQUALS          reduce using rule 88 (constant -> HEX_INT .)
    MUL_ASSIGN      reduce using rule 88 (constant -> HEX_INT .)
    DIV_ASSIGN      reduce using rule 88 (constant -> HEX_INT .)
    MOD_ASSIGN      reduce using rule 88 (constant -> HEX_INT .)
    ADD_ASSIGN      reduce using rule 88 (constant -> HEX_INT .)
    SUB_ASSIGN      reduce using rule 88 (constant -> HEX_INT .)
    LEFT_ASSIGN     reduce using rule 88 (constant -> HEX_INT .)
    RIGHT_ASSIGN    reduce using rule 88 (constant -> HEX_INT .)
    AND_ASSIGN      reduce using rule 88 (constant -> HEX_INT .)
    XOR_ASSIGN      reduce using rule 88 (constant -> HEX_INT .)
    OR_ASSIGN       reduce using rule 88 (constant -> HEX_INT .)
    RBRACE          reduce using rule 88 (constant -> HEX_INT .)
    COLON           reduce using rule 88 (constant -> HEX_INT .)


state 59

    (77) unary_operator -> ADD .

    LPAREN          reduce using rule 77 (unary_operator -> ADD .)
    INCREMENT       reduce using rule 77 (unary_operator -> ADD .)
    DECREMENT       reduce using rule 77 (unary_operator -> ADD .)
    SIZEOF          reduce using rule 77 (unary_operator -> ADD .)
    AND_OP          reduce using rule 77 (unary_operator -> ADD .)
    MULT            reduce using rule 77 (unary_operator -> ADD .)
    ADD             reduce using rule 77 (unary_operator -> ADD .)
    MINUS           reduce using rule 77 (unary_operator -> ADD .)
    TILDA           reduce using rule 77 (unary_operator -> ADD .)
    NOT             reduce using rule 77 (unary_operator -> ADD .)
    VARIABLE        reduce using rule 77 (unary_operator -> ADD .)
    HEX_INT         reduce using rule 77 (unary_operator -> ADD .)
    EXP_REAL        reduce using rule 77 (unary_operator -> ADD .)
    DOT_REAL        reduce using rule 77 (unary_operator -> ADD .)
    DEC_INT         reduce using rule 77 (unary_operator -> ADD .)


state 60

    (90) constant -> DOT_REAL .

    LBIG            reduce using rule 90 (constant -> DOT_REAL .)
    LPAREN          reduce using rule 90 (constant -> DOT_REAL .)
    MULT            reduce using rule 90 (constant -> DOT_REAL .)
    DIV             reduce using rule 90 (constant -> DOT_REAL .)
    MOD             reduce using rule 90 (constant -> DOT_REAL .)
    ADD             reduce using rule 90 (constant -> DOT_REAL .)
    MINUS           reduce using rule 90 (constant -> DOT_REAL .)
    LEFT_OP         reduce using rule 90 (constant -> DOT_REAL .)
    RIGHT_OP        reduce using rule 90 (constant -> DOT_REAL .)
    L_OP            reduce using rule 90 (constant -> DOT_REAL .)
    G_OP            reduce using rule 90 (constant -> DOT_REAL .)
    LE_OP           reduce using rule 90 (constant -> DOT_REAL .)
    GE_OP           reduce using rule 90 (constant -> DOT_REAL .)
    EQUALS_OP       reduce using rule 90 (constant -> DOT_REAL .)
    NOTEQUALS       reduce using rule 90 (constant -> DOT_REAL .)
    AND_OP          reduce using rule 90 (constant -> DOT_REAL .)
    AND             reduce using rule 90 (constant -> DOT_REAL .)
    OR              reduce using rule 90 (constant -> DOT_REAL .)
    CONDOP          reduce using rule 90 (constant -> DOT_REAL .)
    OR_OP           reduce using rule 90 (constant -> DOT_REAL .)
    COMMA           reduce using rule 90 (constant -> DOT_REAL .)
    VOID            reduce using rule 90 (constant -> DOT_REAL .)
    INT             reduce using rule 90 (constant -> DOT_REAL .)
    CHAR            reduce using rule 90 (constant -> DOT_REAL .)
    SHORT           reduce using rule 90 (constant -> DOT_REAL .)
    LONG            reduce using rule 90 (constant -> DOT_REAL .)
    FLOAT           reduce using rule 90 (constant -> DOT_REAL .)
    DOUBLE          reduce using rule 90 (constant -> DOT_REAL .)
    VARIABLE        reduce using rule 90 (constant -> DOT_REAL .)
    SEMI_COLON      reduce using rule 90 (constant -> DOT_REAL .)
    RPAREN          reduce using rule 90 (constant -> DOT_REAL .)
    RBIG            reduce using rule 90 (constant -> DOT_REAL .)
    EQUALS          reduce using rule 90 (constant -> DOT_REAL .)
    MUL_ASSIGN      reduce using rule 90 (constant -> DOT_REAL .)
    DIV_ASSIGN      reduce using rule 90 (constant -> DOT_REAL .)
    MOD_ASSIGN      reduce using rule 90 (constant -> DOT_REAL .)
    ADD_ASSIGN      reduce using rule 90 (constant -> DOT_REAL .)
    SUB_ASSIGN      reduce using rule 90 (constant -> DOT_REAL .)
    LEFT_ASSIGN     reduce using rule 90 (constant -> DOT_REAL .)
    RIGHT_ASSIGN    reduce using rule 90 (constant -> DOT_REAL .)
    AND_ASSIGN      reduce using rule 90 (constant -> DOT_REAL .)
    XOR_ASSIGN      reduce using rule 90 (constant -> DOT_REAL .)
    OR_ASSIGN       reduce using rule 90 (constant -> DOT_REAL .)
    RBRACE          reduce using rule 90 (constant -> DOT_REAL .)
    COLON           reduce using rule 90 (constant -> DOT_REAL .)


state 61

    (72) unary_expression -> unary_operator . cast_expression
    (67) cast_expression -> . unary_expression
    (68) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREMENT unary_expression
    (71) unary_expression -> . DECREMENT unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (73) unary_expression -> . SIZEOF unary_expression
    (74) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (84) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LBIG expression RBIG
    (93) postfix_expression -> . postfix_expression LPAREN RPAREN
    (94) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (75) unary_operator -> . AND_OP
    (76) unary_operator -> . MULT
    (77) unary_operator -> . ADD
    (78) unary_operator -> . MINUS
    (79) unary_operator -> . TILDA
    (80) unary_operator -> . NOT
    (85) primary_expression -> . VARIABLE
    (86) primary_expression -> . constant
    (87) primary_expression -> . LPAREN expression RPAREN
    (88) constant -> . HEX_INT
    (89) constant -> . EXP_REAL
    (90) constant -> . DOT_REAL
    (91) constant -> . DEC_INT

    LPAREN          shift and go to state 52
    INCREMENT       shift and go to state 43
    DECREMENT       shift and go to state 64
    SIZEOF          shift and go to state 47
    AND_OP          shift and go to state 49
    MULT            shift and go to state 57
    ADD             shift and go to state 59
    MINUS           shift and go to state 35
    TILDA           shift and go to state 41
    NOT             shift and go to state 63
    VARIABLE        shift and go to state 53
    HEX_INT         shift and go to state 58
    EXP_REAL        shift and go to state 39
    DOT_REAL        shift and go to state 60
    DEC_INT         shift and go to state 40

    constant                       shift and go to state 32
    unary_expression               shift and go to state 37
    postfix_expression             shift and go to state 34
    primary_expression             shift and go to state 51
    cast_expression                shift and go to state 108
    unary_operator                 shift and go to state 61

state 62

    (36) constant_expression -> conditional_expression .

    RBIG            reduce using rule 36 (constant_expression -> conditional_expression .)
    COMMA           reduce using rule 36 (constant_expression -> conditional_expression .)
    VOID            reduce using rule 36 (constant_expression -> conditional_expression .)
    INT             reduce using rule 36 (constant_expression -> conditional_expression .)
    CHAR            reduce using rule 36 (constant_expression -> conditional_expression .)
    SHORT           reduce using rule 36 (constant_expression -> conditional_expression .)
    LONG            reduce using rule 36 (constant_expression -> conditional_expression .)
    FLOAT           reduce using rule 36 (constant_expression -> conditional_expression .)
    DOUBLE          reduce using rule 36 (constant_expression -> conditional_expression .)
    VARIABLE        reduce using rule 36 (constant_expression -> conditional_expression .)
    SEMI_COLON      reduce using rule 36 (constant_expression -> conditional_expression .)
    LPAREN          reduce using rule 36 (constant_expression -> conditional_expression .)
    RPAREN          reduce using rule 36 (constant_expression -> conditional_expression .)


state 63

    (80) unary_operator -> NOT .

    LPAREN          reduce using rule 80 (unary_operator -> NOT .)
    INCREMENT       reduce using rule 80 (unary_operator -> NOT .)
    DECREMENT       reduce using rule 80 (unary_operator -> NOT .)
    SIZEOF          reduce using rule 80 (unary_operator -> NOT .)
    AND_OP          reduce using rule 80 (unary_operator -> NOT .)
    MULT            reduce using rule 80 (unary_operator -> NOT .)
    ADD             reduce using rule 80 (unary_operator -> NOT .)
    MINUS           reduce using rule 80 (unary_operator -> NOT .)
    TILDA           reduce using rule 80 (unary_operator -> NOT .)
    NOT             reduce using rule 80 (unary_operator -> NOT .)
    VARIABLE        reduce using rule 80 (unary_operator -> NOT .)
    HEX_INT         reduce using rule 80 (unary_operator -> NOT .)
    EXP_REAL        reduce using rule 80 (unary_operator -> NOT .)
    DOT_REAL        reduce using rule 80 (unary_operator -> NOT .)
    DEC_INT         reduce using rule 80 (unary_operator -> NOT .)


state 64

    (71) unary_expression -> DECREMENT . unary_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREMENT unary_expression
    (71) unary_expression -> . DECREMENT unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (73) unary_expression -> . SIZEOF unary_expression
    (74) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (84) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LBIG expression RBIG
    (93) postfix_expression -> . postfix_expression LPAREN RPAREN
    (94) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (75) unary_operator -> . AND_OP
    (76) unary_operator -> . MULT
    (77) unary_operator -> . ADD
    (78) unary_operator -> . MINUS
    (79) unary_operator -> . TILDA
    (80) unary_operator -> . NOT
    (85) primary_expression -> . VARIABLE
    (86) primary_expression -> . constant
    (87) primary_expression -> . LPAREN expression RPAREN
    (88) constant -> . HEX_INT
    (89) constant -> . EXP_REAL
    (90) constant -> . DOT_REAL
    (91) constant -> . DEC_INT

    INCREMENT       shift and go to state 43
    DECREMENT       shift and go to state 64
    SIZEOF          shift and go to state 47
    AND_OP          shift and go to state 49
    MULT            shift and go to state 57
    ADD             shift and go to state 59
    MINUS           shift and go to state 35
    TILDA           shift and go to state 41
    NOT             shift and go to state 63
    VARIABLE        shift and go to state 53
    LPAREN          shift and go to state 88
    HEX_INT         shift and go to state 58
    EXP_REAL        shift and go to state 39
    DOT_REAL        shift and go to state 60
    DEC_INT         shift and go to state 40

    constant                       shift and go to state 32
    unary_expression               shift and go to state 109
    postfix_expression             shift and go to state 34
    primary_expression             shift and go to state 51
    unary_operator                 shift and go to state 61

state 65

    (16) direct_declarator -> LPAREN declarator RPAREN .

    LBIG            reduce using rule 16 (direct_declarator -> LPAREN declarator RPAREN .)
    LPAREN          reduce using rule 16 (direct_declarator -> LPAREN declarator RPAREN .)
    EQUALS          reduce using rule 16 (direct_declarator -> LPAREN declarator RPAREN .)
    SEMI_COLON      reduce using rule 16 (direct_declarator -> LPAREN declarator RPAREN .)
    COMMA           reduce using rule 16 (direct_declarator -> LPAREN declarator RPAREN .)
    RPAREN          reduce using rule 16 (direct_declarator -> LPAREN declarator RPAREN .)


state 66

    (17) direct_declarator -> direct_declarator LBIG constant_expression . RBIG

    RBIG            shift and go to state 110


state 67

    (18) direct_declarator -> direct_declarator LBIG RBIG .

    LBIG            reduce using rule 18 (direct_declarator -> direct_declarator LBIG RBIG .)
    LPAREN          reduce using rule 18 (direct_declarator -> direct_declarator LBIG RBIG .)
    EQUALS          reduce using rule 18 (direct_declarator -> direct_declarator LBIG RBIG .)
    SEMI_COLON      reduce using rule 18 (direct_declarator -> direct_declarator LBIG RBIG .)
    COMMA           reduce using rule 18 (direct_declarator -> direct_declarator LBIG RBIG .)
    RPAREN          reduce using rule 18 (direct_declarator -> direct_declarator LBIG RBIG .)


state 68

    (20) direct_declarator -> direct_declarator LPAREN RPAREN .

    LBIG            reduce using rule 20 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    LPAREN          reduce using rule 20 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    EQUALS          reduce using rule 20 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    SEMI_COLON      reduce using rule 20 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    COMMA           reduce using rule 20 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    RPAREN          reduce using rule 20 (direct_declarator -> direct_declarator LPAREN RPAREN .)


state 69

    (21) variable_list -> VARIABLE .

    RPAREN          reduce using rule 21 (variable_list -> VARIABLE .)
    COMMA           reduce using rule 21 (variable_list -> VARIABLE .)


state 70

    (19) direct_declarator -> direct_declarator LPAREN variable_list . RPAREN
    (22) variable_list -> variable_list . COMMA VARIABLE

    RPAREN          shift and go to state 111
    COMMA           shift and go to state 112


state 71

    (6) init_declarator_list -> init_declarator_list COMMA init_declarator .

    SEMI_COLON      reduce using rule 6 (init_declarator_list -> init_declarator_list COMMA init_declarator .)
    COMMA           reduce using rule 6 (init_declarator_list -> init_declarator_list COMMA init_declarator .)


state 72

    (103) assignment_expression -> unary_expression . assignment_operator assignment_expression
    (67) cast_expression -> unary_expression .
    (104) assignment_operator -> . EQUALS
    (105) assignment_operator -> . MUL_ASSIGN
    (106) assignment_operator -> . DIV_ASSIGN
    (107) assignment_operator -> . MOD_ASSIGN
    (108) assignment_operator -> . ADD_ASSIGN
    (109) assignment_operator -> . SUB_ASSIGN
    (110) assignment_operator -> . LEFT_ASSIGN
    (111) assignment_operator -> . RIGHT_ASSIGN
    (112) assignment_operator -> . AND_ASSIGN
    (113) assignment_operator -> . XOR_ASSIGN
    (114) assignment_operator -> . OR_ASSIGN

    MULT            reduce using rule 67 (cast_expression -> unary_expression .)
    DIV             reduce using rule 67 (cast_expression -> unary_expression .)
    MOD             reduce using rule 67 (cast_expression -> unary_expression .)
    ADD             reduce using rule 67 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 67 (cast_expression -> unary_expression .)
    LEFT_OP         reduce using rule 67 (cast_expression -> unary_expression .)
    RIGHT_OP        reduce using rule 67 (cast_expression -> unary_expression .)
    L_OP            reduce using rule 67 (cast_expression -> unary_expression .)
    G_OP            reduce using rule 67 (cast_expression -> unary_expression .)
    LE_OP           reduce using rule 67 (cast_expression -> unary_expression .)
    GE_OP           reduce using rule 67 (cast_expression -> unary_expression .)
    EQUALS_OP       reduce using rule 67 (cast_expression -> unary_expression .)
    NOTEQUALS       reduce using rule 67 (cast_expression -> unary_expression .)
    AND_OP          reduce using rule 67 (cast_expression -> unary_expression .)
    AND             reduce using rule 67 (cast_expression -> unary_expression .)
    OR              reduce using rule 67 (cast_expression -> unary_expression .)
    CONDOP          reduce using rule 67 (cast_expression -> unary_expression .)
    OR_OP           reduce using rule 67 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 67 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 67 (cast_expression -> unary_expression .)
    RBIG            reduce using rule 67 (cast_expression -> unary_expression .)
    COLON           reduce using rule 67 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 67 (cast_expression -> unary_expression .)
    SEMI_COLON      reduce using rule 67 (cast_expression -> unary_expression .)
    EQUALS          shift and go to state 117
    MUL_ASSIGN      shift and go to state 119
    DIV_ASSIGN      shift and go to state 120
    MOD_ASSIGN      shift and go to state 114
    ADD_ASSIGN      shift and go to state 122
    SUB_ASSIGN      shift and go to state 113
    LEFT_ASSIGN     shift and go to state 121
    RIGHT_ASSIGN    shift and go to state 123
    AND_ASSIGN      shift and go to state 118
    XOR_ASSIGN      shift and go to state 115
    OR_ASSIGN       shift and go to state 116

    assignment_operator            shift and go to state 124

state 73

    (8) init_declarator -> declarator EQUALS initializer .

    SEMI_COLON      reduce using rule 8 (init_declarator -> declarator EQUALS initializer .)
    COMMA           reduce using rule 8 (init_declarator -> declarator EQUALS initializer .)


state 74

    (9) initializer -> assignment_expression .

    RBRACE          reduce using rule 9 (initializer -> assignment_expression .)
    COMMA           reduce using rule 9 (initializer -> assignment_expression .)
    SEMI_COLON      reduce using rule 9 (initializer -> assignment_expression .)


state 75

    (87) primary_expression -> LPAREN . expression RPAREN
    (68) cast_expression -> LPAREN . type_name RPAREN cast_expression
    (100) expression -> . assignment_expression
    (101) expression -> . expression COMMA assignment_expression
    (81) type_name -> . specifier_qualifier_list
    (102) assignment_expression -> . conditional_expression
    (103) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (82) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (83) specifier_qualifier_list -> . type_specifier
    (37) conditional_expression -> . logical_or_expression
    (38) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREMENT unary_expression
    (71) unary_expression -> . DECREMENT unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (73) unary_expression -> . SIZEOF unary_expression
    (74) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (23) type_specifier -> . VOID
    (24) type_specifier -> . INT
    (25) type_specifier -> . CHAR
    (26) type_specifier -> . SHORT
    (27) type_specifier -> . LONG
    (28) type_specifier -> . FLOAT
    (29) type_specifier -> . DOUBLE
    (30) type_specifier -> . enum_specifier
    (39) logical_or_expression -> . logical_and_expression
    (40) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (84) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LBIG expression RBIG
    (93) postfix_expression -> . postfix_expression LPAREN RPAREN
    (94) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (75) unary_operator -> . AND_OP
    (76) unary_operator -> . MULT
    (77) unary_operator -> . ADD
    (78) unary_operator -> . MINUS
    (79) unary_operator -> . TILDA
    (80) unary_operator -> . NOT
    (31) enum_specifier -> . type_specifier enum_list
    (41) logical_and_expression -> . inclusive_or_expression
    (42) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (85) primary_expression -> . VARIABLE
    (86) primary_expression -> . constant
    (87) primary_expression -> . LPAREN expression RPAREN
    (43) inclusive_or_expression -> . exclusive_or_expression
    (44) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (88) constant -> . HEX_INT
    (89) constant -> . EXP_REAL
    (90) constant -> . DOT_REAL
    (91) constant -> . DEC_INT
    (45) exclusive_or_expression -> . and_expression
    (46) exclusive_or_expression -> . exclusive_or_expression AND and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression AND_OP equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQUALS_OP relational_expression
    (51) equality_expression -> . equality_expression NOTEQUALS relational_expression
    (52) relational_expression -> . shift_expression
    (53) relational_expression -> . relational_expression L_OP shift_expression
    (54) relational_expression -> . relational_expression G_OP shift_expression
    (55) relational_expression -> . relational_expression LE_OP shift_expression
    (56) relational_expression -> . relational_expression GE_OP shift_expression
    (57) shift_expression -> . additive_expression
    (58) shift_expression -> . shift_expression LEFT_OP additive_expression
    (59) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (60) additive_expression -> . multiplicative_expression
    (61) additive_expression -> . additive_expression ADD multiplicative_expression
    (62) additive_expression -> . additive_expression MINUS multiplicative_expression
    (63) multiplicative_expression -> . cast_expression
    (64) multiplicative_expression -> . multiplicative_expression MULT cast_expression
    (65) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (66) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (67) cast_expression -> . unary_expression
    (68) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INCREMENT       shift and go to state 43
    DECREMENT       shift and go to state 64
    SIZEOF          shift and go to state 47
    VOID            shift and go to state 4
    INT             shift and go to state 2
    CHAR            shift and go to state 7
    SHORT           shift and go to state 9
    LONG            shift and go to state 6
    FLOAT           shift and go to state 5
    DOUBLE          shift and go to state 3
    AND_OP          shift and go to state 49
    MULT            shift and go to state 57
    ADD             shift and go to state 59
    MINUS           shift and go to state 35
    TILDA           shift and go to state 41
    NOT             shift and go to state 63
    VARIABLE        shift and go to state 53
    LPAREN          shift and go to state 75
    HEX_INT         shift and go to state 58
    EXP_REAL        shift and go to state 39
    DOT_REAL        shift and go to state 60
    DEC_INT         shift and go to state 40

    constant                       shift and go to state 32
    unary_expression               shift and go to state 72
    exclusive_or_expression        shift and go to state 33
    and_expression                 shift and go to state 36
    type_specifier                 shift and go to state 98
    inclusive_or_expression        shift and go to state 38
    type_name                      shift and go to state 99
    postfix_expression             shift and go to state 34
    relational_expression          shift and go to state 42
    cast_expression                shift and go to state 44
    logical_or_expression          shift and go to state 45
    unary_operator                 shift and go to state 61
    assignment_expression          shift and go to state 100
    multiplicative_expression      shift and go to state 48
    additive_expression            shift and go to state 50
    primary_expression             shift and go to state 51
    logical_and_expression         shift and go to state 54
    shift_expression               shift and go to state 55
    equality_expression            shift and go to state 56
    enum_specifier                 shift and go to state 8
    specifier_qualifier_list       shift and go to state 101
    conditional_expression         shift and go to state 77
    expression                     shift and go to state 102

state 76

    (10) initializer -> LBRACE . initializer_list RBRACE
    (11) initializer -> LBRACE . initializer_list COMMA RBRACE
    (12) initializer_list -> . initializer
    (13) initializer_list -> . initializer_list COMMA initializer
    (9) initializer -> . assignment_expression
    (10) initializer -> . LBRACE initializer_list RBRACE
    (11) initializer -> . LBRACE initializer_list COMMA RBRACE
    (102) assignment_expression -> . conditional_expression
    (103) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (37) conditional_expression -> . logical_or_expression
    (38) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREMENT unary_expression
    (71) unary_expression -> . DECREMENT unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (73) unary_expression -> . SIZEOF unary_expression
    (74) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (39) logical_or_expression -> . logical_and_expression
    (40) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (84) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LBIG expression RBIG
    (93) postfix_expression -> . postfix_expression LPAREN RPAREN
    (94) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (75) unary_operator -> . AND_OP
    (76) unary_operator -> . MULT
    (77) unary_operator -> . ADD
    (78) unary_operator -> . MINUS
    (79) unary_operator -> . TILDA
    (80) unary_operator -> . NOT
    (41) logical_and_expression -> . inclusive_or_expression
    (42) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (85) primary_expression -> . VARIABLE
    (86) primary_expression -> . constant
    (87) primary_expression -> . LPAREN expression RPAREN
    (43) inclusive_or_expression -> . exclusive_or_expression
    (44) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (88) constant -> . HEX_INT
    (89) constant -> . EXP_REAL
    (90) constant -> . DOT_REAL
    (91) constant -> . DEC_INT
    (45) exclusive_or_expression -> . and_expression
    (46) exclusive_or_expression -> . exclusive_or_expression AND and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression AND_OP equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQUALS_OP relational_expression
    (51) equality_expression -> . equality_expression NOTEQUALS relational_expression
    (52) relational_expression -> . shift_expression
    (53) relational_expression -> . relational_expression L_OP shift_expression
    (54) relational_expression -> . relational_expression G_OP shift_expression
    (55) relational_expression -> . relational_expression LE_OP shift_expression
    (56) relational_expression -> . relational_expression GE_OP shift_expression
    (57) shift_expression -> . additive_expression
    (58) shift_expression -> . shift_expression LEFT_OP additive_expression
    (59) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (60) additive_expression -> . multiplicative_expression
    (61) additive_expression -> . additive_expression ADD multiplicative_expression
    (62) additive_expression -> . additive_expression MINUS multiplicative_expression
    (63) multiplicative_expression -> . cast_expression
    (64) multiplicative_expression -> . multiplicative_expression MULT cast_expression
    (65) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (66) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (67) cast_expression -> . unary_expression
    (68) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LBRACE          shift and go to state 76
    INCREMENT       shift and go to state 43
    DECREMENT       shift and go to state 64
    SIZEOF          shift and go to state 47
    AND_OP          shift and go to state 49
    MULT            shift and go to state 57
    ADD             shift and go to state 59
    MINUS           shift and go to state 35
    TILDA           shift and go to state 41
    NOT             shift and go to state 63
    VARIABLE        shift and go to state 53
    LPAREN          shift and go to state 75
    HEX_INT         shift and go to state 58
    EXP_REAL        shift and go to state 39
    DOT_REAL        shift and go to state 60
    DEC_INT         shift and go to state 40

    constant                       shift and go to state 32
    unary_expression               shift and go to state 72
    exclusive_or_expression        shift and go to state 33
    initializer                    shift and go to state 125
    and_expression                 shift and go to state 36
    inclusive_or_expression        shift and go to state 38
    postfix_expression             shift and go to state 34
    relational_expression          shift and go to state 42
    cast_expression                shift and go to state 44
    logical_or_expression          shift and go to state 45
    unary_operator                 shift and go to state 61
    assignment_expression          shift and go to state 74
    multiplicative_expression      shift and go to state 48
    conditional_expression         shift and go to state 77
    additive_expression            shift and go to state 50
    primary_expression             shift and go to state 51
    logical_and_expression         shift and go to state 54
    shift_expression               shift and go to state 55
    equality_expression            shift and go to state 56
    initializer_list               shift and go to state 126

state 77

    (102) assignment_expression -> conditional_expression .

    RPAREN          reduce using rule 102 (assignment_expression -> conditional_expression .)
    COMMA           reduce using rule 102 (assignment_expression -> conditional_expression .)
    RBIG            reduce using rule 102 (assignment_expression -> conditional_expression .)
    COLON           reduce using rule 102 (assignment_expression -> conditional_expression .)
    RBRACE          reduce using rule 102 (assignment_expression -> conditional_expression .)
    SEMI_COLON      reduce using rule 102 (assignment_expression -> conditional_expression .)


state 78

    (46) exclusive_or_expression -> exclusive_or_expression AND . and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression AND_OP equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQUALS_OP relational_expression
    (51) equality_expression -> . equality_expression NOTEQUALS relational_expression
    (52) relational_expression -> . shift_expression
    (53) relational_expression -> . relational_expression L_OP shift_expression
    (54) relational_expression -> . relational_expression G_OP shift_expression
    (55) relational_expression -> . relational_expression LE_OP shift_expression
    (56) relational_expression -> . relational_expression GE_OP shift_expression
    (57) shift_expression -> . additive_expression
    (58) shift_expression -> . shift_expression LEFT_OP additive_expression
    (59) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (60) additive_expression -> . multiplicative_expression
    (61) additive_expression -> . additive_expression ADD multiplicative_expression
    (62) additive_expression -> . additive_expression MINUS multiplicative_expression
    (63) multiplicative_expression -> . cast_expression
    (64) multiplicative_expression -> . multiplicative_expression MULT cast_expression
    (65) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (66) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (67) cast_expression -> . unary_expression
    (68) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREMENT unary_expression
    (71) unary_expression -> . DECREMENT unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (73) unary_expression -> . SIZEOF unary_expression
    (74) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (84) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LBIG expression RBIG
    (93) postfix_expression -> . postfix_expression LPAREN RPAREN
    (94) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (75) unary_operator -> . AND_OP
    (76) unary_operator -> . MULT
    (77) unary_operator -> . ADD
    (78) unary_operator -> . MINUS
    (79) unary_operator -> . TILDA
    (80) unary_operator -> . NOT
    (85) primary_expression -> . VARIABLE
    (86) primary_expression -> . constant
    (87) primary_expression -> . LPAREN expression RPAREN
    (88) constant -> . HEX_INT
    (89) constant -> . EXP_REAL
    (90) constant -> . DOT_REAL
    (91) constant -> . DEC_INT

    LPAREN          shift and go to state 52
    INCREMENT       shift and go to state 43
    DECREMENT       shift and go to state 64
    SIZEOF          shift and go to state 47
    AND_OP          shift and go to state 49
    MULT            shift and go to state 57
    ADD             shift and go to state 59
    MINUS           shift and go to state 35
    TILDA           shift and go to state 41
    NOT             shift and go to state 63
    VARIABLE        shift and go to state 53
    HEX_INT         shift and go to state 58
    EXP_REAL        shift and go to state 39
    DOT_REAL        shift and go to state 60
    DEC_INT         shift and go to state 40

    constant                       shift and go to state 32
    unary_expression               shift and go to state 37
    and_expression                 shift and go to state 127
    multiplicative_expression      shift and go to state 48
    postfix_expression             shift and go to state 34
    equality_expression            shift and go to state 56
    primary_expression             shift and go to state 51
    unary_operator                 shift and go to state 61
    cast_expression                shift and go to state 44
    shift_expression               shift and go to state 55
    additive_expression            shift and go to state 50
    relational_expression          shift and go to state 42

state 79

    (92) postfix_expression -> postfix_expression LBIG . expression RBIG
    (100) expression -> . assignment_expression
    (101) expression -> . expression COMMA assignment_expression
    (102) assignment_expression -> . conditional_expression
    (103) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (37) conditional_expression -> . logical_or_expression
    (38) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREMENT unary_expression
    (71) unary_expression -> . DECREMENT unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (73) unary_expression -> . SIZEOF unary_expression
    (74) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (39) logical_or_expression -> . logical_and_expression
    (40) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (84) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LBIG expression RBIG
    (93) postfix_expression -> . postfix_expression LPAREN RPAREN
    (94) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (75) unary_operator -> . AND_OP
    (76) unary_operator -> . MULT
    (77) unary_operator -> . ADD
    (78) unary_operator -> . MINUS
    (79) unary_operator -> . TILDA
    (80) unary_operator -> . NOT
    (41) logical_and_expression -> . inclusive_or_expression
    (42) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (85) primary_expression -> . VARIABLE
    (86) primary_expression -> . constant
    (87) primary_expression -> . LPAREN expression RPAREN
    (43) inclusive_or_expression -> . exclusive_or_expression
    (44) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (88) constant -> . HEX_INT
    (89) constant -> . EXP_REAL
    (90) constant -> . DOT_REAL
    (91) constant -> . DEC_INT
    (45) exclusive_or_expression -> . and_expression
    (46) exclusive_or_expression -> . exclusive_or_expression AND and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression AND_OP equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQUALS_OP relational_expression
    (51) equality_expression -> . equality_expression NOTEQUALS relational_expression
    (52) relational_expression -> . shift_expression
    (53) relational_expression -> . relational_expression L_OP shift_expression
    (54) relational_expression -> . relational_expression G_OP shift_expression
    (55) relational_expression -> . relational_expression LE_OP shift_expression
    (56) relational_expression -> . relational_expression GE_OP shift_expression
    (57) shift_expression -> . additive_expression
    (58) shift_expression -> . shift_expression LEFT_OP additive_expression
    (59) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (60) additive_expression -> . multiplicative_expression
    (61) additive_expression -> . additive_expression ADD multiplicative_expression
    (62) additive_expression -> . additive_expression MINUS multiplicative_expression
    (63) multiplicative_expression -> . cast_expression
    (64) multiplicative_expression -> . multiplicative_expression MULT cast_expression
    (65) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (66) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (67) cast_expression -> . unary_expression
    (68) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INCREMENT       shift and go to state 43
    DECREMENT       shift and go to state 64
    SIZEOF          shift and go to state 47
    AND_OP          shift and go to state 49
    MULT            shift and go to state 57
    ADD             shift and go to state 59
    MINUS           shift and go to state 35
    TILDA           shift and go to state 41
    NOT             shift and go to state 63
    VARIABLE        shift and go to state 53
    LPAREN          shift and go to state 75
    HEX_INT         shift and go to state 58
    EXP_REAL        shift and go to state 39
    DOT_REAL        shift and go to state 60
    DEC_INT         shift and go to state 40

    constant                       shift and go to state 32
    unary_expression               shift and go to state 72
    exclusive_or_expression        shift and go to state 33
    additive_expression            shift and go to state 50
    inclusive_or_expression        shift and go to state 38
    postfix_expression             shift and go to state 34
    and_expression                 shift and go to state 36
    relational_expression          shift and go to state 42
    cast_expression                shift and go to state 44
    logical_or_expression          shift and go to state 45
    unary_operator                 shift and go to state 61
    assignment_expression          shift and go to state 100
    multiplicative_expression      shift and go to state 48
    primary_expression             shift and go to state 51
    logical_and_expression         shift and go to state 54
    shift_expression               shift and go to state 55
    equality_expression            shift and go to state 56
    conditional_expression         shift and go to state 77
    expression                     shift and go to state 128

state 80

    (93) postfix_expression -> postfix_expression LPAREN . RPAREN
    (94) postfix_expression -> postfix_expression LPAREN . argument_expression_list RPAREN
    (98) argument_expression_list -> . assignment_expression
    (99) argument_expression_list -> . argument_expression_list COMMA assignment_expression
    (102) assignment_expression -> . conditional_expression
    (103) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (37) conditional_expression -> . logical_or_expression
    (38) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREMENT unary_expression
    (71) unary_expression -> . DECREMENT unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (73) unary_expression -> . SIZEOF unary_expression
    (74) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (39) logical_or_expression -> . logical_and_expression
    (40) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (84) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LBIG expression RBIG
    (93) postfix_expression -> . postfix_expression LPAREN RPAREN
    (94) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (75) unary_operator -> . AND_OP
    (76) unary_operator -> . MULT
    (77) unary_operator -> . ADD
    (78) unary_operator -> . MINUS
    (79) unary_operator -> . TILDA
    (80) unary_operator -> . NOT
    (41) logical_and_expression -> . inclusive_or_expression
    (42) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (85) primary_expression -> . VARIABLE
    (86) primary_expression -> . constant
    (87) primary_expression -> . LPAREN expression RPAREN
    (43) inclusive_or_expression -> . exclusive_or_expression
    (44) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (88) constant -> . HEX_INT
    (89) constant -> . EXP_REAL
    (90) constant -> . DOT_REAL
    (91) constant -> . DEC_INT
    (45) exclusive_or_expression -> . and_expression
    (46) exclusive_or_expression -> . exclusive_or_expression AND and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression AND_OP equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQUALS_OP relational_expression
    (51) equality_expression -> . equality_expression NOTEQUALS relational_expression
    (52) relational_expression -> . shift_expression
    (53) relational_expression -> . relational_expression L_OP shift_expression
    (54) relational_expression -> . relational_expression G_OP shift_expression
    (55) relational_expression -> . relational_expression LE_OP shift_expression
    (56) relational_expression -> . relational_expression GE_OP shift_expression
    (57) shift_expression -> . additive_expression
    (58) shift_expression -> . shift_expression LEFT_OP additive_expression
    (59) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (60) additive_expression -> . multiplicative_expression
    (61) additive_expression -> . additive_expression ADD multiplicative_expression
    (62) additive_expression -> . additive_expression MINUS multiplicative_expression
    (63) multiplicative_expression -> . cast_expression
    (64) multiplicative_expression -> . multiplicative_expression MULT cast_expression
    (65) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (66) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (67) cast_expression -> . unary_expression
    (68) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          shift and go to state 129
    INCREMENT       shift and go to state 43
    DECREMENT       shift and go to state 64
    SIZEOF          shift and go to state 47
    AND_OP          shift and go to state 49
    MULT            shift and go to state 57
    ADD             shift and go to state 59
    MINUS           shift and go to state 35
    TILDA           shift and go to state 41
    NOT             shift and go to state 63
    VARIABLE        shift and go to state 53
    LPAREN          shift and go to state 75
    HEX_INT         shift and go to state 58
    EXP_REAL        shift and go to state 39
    DOT_REAL        shift and go to state 60
    DEC_INT         shift and go to state 40

    constant                       shift and go to state 32
    unary_expression               shift and go to state 72
    exclusive_or_expression        shift and go to state 33
    additive_expression            shift and go to state 50
    inclusive_or_expression        shift and go to state 38
    postfix_expression             shift and go to state 34
    and_expression                 shift and go to state 36
    relational_expression          shift and go to state 42
    cast_expression                shift and go to state 44
    logical_or_expression          shift and go to state 45
    unary_operator                 shift and go to state 61
    assignment_expression          shift and go to state 130
    multiplicative_expression      shift and go to state 48
    argument_expression_list       shift and go to state 131
    primary_expression             shift and go to state 51
    logical_and_expression         shift and go to state 54
    shift_expression               shift and go to state 55
    equality_expression            shift and go to state 56
    conditional_expression         shift and go to state 77

state 81

    (48) and_expression -> and_expression AND_OP . equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQUALS_OP relational_expression
    (51) equality_expression -> . equality_expression NOTEQUALS relational_expression
    (52) relational_expression -> . shift_expression
    (53) relational_expression -> . relational_expression L_OP shift_expression
    (54) relational_expression -> . relational_expression G_OP shift_expression
    (55) relational_expression -> . relational_expression LE_OP shift_expression
    (56) relational_expression -> . relational_expression GE_OP shift_expression
    (57) shift_expression -> . additive_expression
    (58) shift_expression -> . shift_expression LEFT_OP additive_expression
    (59) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (60) additive_expression -> . multiplicative_expression
    (61) additive_expression -> . additive_expression ADD multiplicative_expression
    (62) additive_expression -> . additive_expression MINUS multiplicative_expression
    (63) multiplicative_expression -> . cast_expression
    (64) multiplicative_expression -> . multiplicative_expression MULT cast_expression
    (65) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (66) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (67) cast_expression -> . unary_expression
    (68) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREMENT unary_expression
    (71) unary_expression -> . DECREMENT unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (73) unary_expression -> . SIZEOF unary_expression
    (74) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (84) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LBIG expression RBIG
    (93) postfix_expression -> . postfix_expression LPAREN RPAREN
    (94) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (75) unary_operator -> . AND_OP
    (76) unary_operator -> . MULT
    (77) unary_operator -> . ADD
    (78) unary_operator -> . MINUS
    (79) unary_operator -> . TILDA
    (80) unary_operator -> . NOT
    (85) primary_expression -> . VARIABLE
    (86) primary_expression -> . constant
    (87) primary_expression -> . LPAREN expression RPAREN
    (88) constant -> . HEX_INT
    (89) constant -> . EXP_REAL
    (90) constant -> . DOT_REAL
    (91) constant -> . DEC_INT

    LPAREN          shift and go to state 52
    INCREMENT       shift and go to state 43
    DECREMENT       shift and go to state 64
    SIZEOF          shift and go to state 47
    AND_OP          shift and go to state 49
    MULT            shift and go to state 57
    ADD             shift and go to state 59
    MINUS           shift and go to state 35
    TILDA           shift and go to state 41
    NOT             shift and go to state 63
    VARIABLE        shift and go to state 53
    HEX_INT         shift and go to state 58
    EXP_REAL        shift and go to state 39
    DOT_REAL        shift and go to state 60
    DEC_INT         shift and go to state 40

    constant                       shift and go to state 32
    unary_expression               shift and go to state 37
    multiplicative_expression      shift and go to state 48
    postfix_expression             shift and go to state 34
    equality_expression            shift and go to state 132
    primary_expression             shift and go to state 51
    unary_operator                 shift and go to state 61
    cast_expression                shift and go to state 44
    shift_expression               shift and go to state 55
    additive_expression            shift and go to state 50
    relational_expression          shift and go to state 42

state 82

    (44) inclusive_or_expression -> inclusive_or_expression OR . exclusive_or_expression
    (45) exclusive_or_expression -> . and_expression
    (46) exclusive_or_expression -> . exclusive_or_expression AND and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression AND_OP equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQUALS_OP relational_expression
    (51) equality_expression -> . equality_expression NOTEQUALS relational_expression
    (52) relational_expression -> . shift_expression
    (53) relational_expression -> . relational_expression L_OP shift_expression
    (54) relational_expression -> . relational_expression G_OP shift_expression
    (55) relational_expression -> . relational_expression LE_OP shift_expression
    (56) relational_expression -> . relational_expression GE_OP shift_expression
    (57) shift_expression -> . additive_expression
    (58) shift_expression -> . shift_expression LEFT_OP additive_expression
    (59) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (60) additive_expression -> . multiplicative_expression
    (61) additive_expression -> . additive_expression ADD multiplicative_expression
    (62) additive_expression -> . additive_expression MINUS multiplicative_expression
    (63) multiplicative_expression -> . cast_expression
    (64) multiplicative_expression -> . multiplicative_expression MULT cast_expression
    (65) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (66) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (67) cast_expression -> . unary_expression
    (68) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREMENT unary_expression
    (71) unary_expression -> . DECREMENT unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (73) unary_expression -> . SIZEOF unary_expression
    (74) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (84) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LBIG expression RBIG
    (93) postfix_expression -> . postfix_expression LPAREN RPAREN
    (94) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (75) unary_operator -> . AND_OP
    (76) unary_operator -> . MULT
    (77) unary_operator -> . ADD
    (78) unary_operator -> . MINUS
    (79) unary_operator -> . TILDA
    (80) unary_operator -> . NOT
    (85) primary_expression -> . VARIABLE
    (86) primary_expression -> . constant
    (87) primary_expression -> . LPAREN expression RPAREN
    (88) constant -> . HEX_INT
    (89) constant -> . EXP_REAL
    (90) constant -> . DOT_REAL
    (91) constant -> . DEC_INT

    LPAREN          shift and go to state 52
    INCREMENT       shift and go to state 43
    DECREMENT       shift and go to state 64
    SIZEOF          shift and go to state 47
    AND_OP          shift and go to state 49
    MULT            shift and go to state 57
    ADD             shift and go to state 59
    MINUS           shift and go to state 35
    TILDA           shift and go to state 41
    NOT             shift and go to state 63
    VARIABLE        shift and go to state 53
    HEX_INT         shift and go to state 58
    EXP_REAL        shift and go to state 39
    DOT_REAL        shift and go to state 60
    DEC_INT         shift and go to state 40

    constant                       shift and go to state 32
    unary_expression               shift and go to state 37
    multiplicative_expression      shift and go to state 48
    exclusive_or_expression        shift and go to state 133
    postfix_expression             shift and go to state 34
    additive_expression            shift and go to state 50
    and_expression                 shift and go to state 36
    primary_expression             shift and go to state 51
    unary_operator                 shift and go to state 61
    cast_expression                shift and go to state 44
    shift_expression               shift and go to state 55
    equality_expression            shift and go to state 56
    relational_expression          shift and go to state 42

state 83

    (55) relational_expression -> relational_expression LE_OP . shift_expression
    (57) shift_expression -> . additive_expression
    (58) shift_expression -> . shift_expression LEFT_OP additive_expression
    (59) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (60) additive_expression -> . multiplicative_expression
    (61) additive_expression -> . additive_expression ADD multiplicative_expression
    (62) additive_expression -> . additive_expression MINUS multiplicative_expression
    (63) multiplicative_expression -> . cast_expression
    (64) multiplicative_expression -> . multiplicative_expression MULT cast_expression
    (65) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (66) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (67) cast_expression -> . unary_expression
    (68) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREMENT unary_expression
    (71) unary_expression -> . DECREMENT unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (73) unary_expression -> . SIZEOF unary_expression
    (74) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (84) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LBIG expression RBIG
    (93) postfix_expression -> . postfix_expression LPAREN RPAREN
    (94) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (75) unary_operator -> . AND_OP
    (76) unary_operator -> . MULT
    (77) unary_operator -> . ADD
    (78) unary_operator -> . MINUS
    (79) unary_operator -> . TILDA
    (80) unary_operator -> . NOT
    (85) primary_expression -> . VARIABLE
    (86) primary_expression -> . constant
    (87) primary_expression -> . LPAREN expression RPAREN
    (88) constant -> . HEX_INT
    (89) constant -> . EXP_REAL
    (90) constant -> . DOT_REAL
    (91) constant -> . DEC_INT

    LPAREN          shift and go to state 52
    INCREMENT       shift and go to state 43
    DECREMENT       shift and go to state 64
    SIZEOF          shift and go to state 47
    AND_OP          shift and go to state 49
    MULT            shift and go to state 57
    ADD             shift and go to state 59
    MINUS           shift and go to state 35
    TILDA           shift and go to state 41
    NOT             shift and go to state 63
    VARIABLE        shift and go to state 53
    HEX_INT         shift and go to state 58
    EXP_REAL        shift and go to state 39
    DOT_REAL        shift and go to state 60
    DEC_INT         shift and go to state 40

    constant                       shift and go to state 32
    unary_expression               shift and go to state 37
    multiplicative_expression      shift and go to state 48
    postfix_expression             shift and go to state 34
    unary_operator                 shift and go to state 61
    cast_expression                shift and go to state 44
    shift_expression               shift and go to state 134
    additive_expression            shift and go to state 50
    primary_expression             shift and go to state 51

state 84

    (54) relational_expression -> relational_expression G_OP . shift_expression
    (57) shift_expression -> . additive_expression
    (58) shift_expression -> . shift_expression LEFT_OP additive_expression
    (59) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (60) additive_expression -> . multiplicative_expression
    (61) additive_expression -> . additive_expression ADD multiplicative_expression
    (62) additive_expression -> . additive_expression MINUS multiplicative_expression
    (63) multiplicative_expression -> . cast_expression
    (64) multiplicative_expression -> . multiplicative_expression MULT cast_expression
    (65) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (66) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (67) cast_expression -> . unary_expression
    (68) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREMENT unary_expression
    (71) unary_expression -> . DECREMENT unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (73) unary_expression -> . SIZEOF unary_expression
    (74) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (84) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LBIG expression RBIG
    (93) postfix_expression -> . postfix_expression LPAREN RPAREN
    (94) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (75) unary_operator -> . AND_OP
    (76) unary_operator -> . MULT
    (77) unary_operator -> . ADD
    (78) unary_operator -> . MINUS
    (79) unary_operator -> . TILDA
    (80) unary_operator -> . NOT
    (85) primary_expression -> . VARIABLE
    (86) primary_expression -> . constant
    (87) primary_expression -> . LPAREN expression RPAREN
    (88) constant -> . HEX_INT
    (89) constant -> . EXP_REAL
    (90) constant -> . DOT_REAL
    (91) constant -> . DEC_INT

    LPAREN          shift and go to state 52
    INCREMENT       shift and go to state 43
    DECREMENT       shift and go to state 64
    SIZEOF          shift and go to state 47
    AND_OP          shift and go to state 49
    MULT            shift and go to state 57
    ADD             shift and go to state 59
    MINUS           shift and go to state 35
    TILDA           shift and go to state 41
    NOT             shift and go to state 63
    VARIABLE        shift and go to state 53
    HEX_INT         shift and go to state 58
    EXP_REAL        shift and go to state 39
    DOT_REAL        shift and go to state 60
    DEC_INT         shift and go to state 40

    constant                       shift and go to state 32
    unary_expression               shift and go to state 37
    multiplicative_expression      shift and go to state 48
    postfix_expression             shift and go to state 34
    unary_operator                 shift and go to state 61
    cast_expression                shift and go to state 44
    shift_expression               shift and go to state 135
    additive_expression            shift and go to state 50
    primary_expression             shift and go to state 51

state 85

    (53) relational_expression -> relational_expression L_OP . shift_expression
    (57) shift_expression -> . additive_expression
    (58) shift_expression -> . shift_expression LEFT_OP additive_expression
    (59) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (60) additive_expression -> . multiplicative_expression
    (61) additive_expression -> . additive_expression ADD multiplicative_expression
    (62) additive_expression -> . additive_expression MINUS multiplicative_expression
    (63) multiplicative_expression -> . cast_expression
    (64) multiplicative_expression -> . multiplicative_expression MULT cast_expression
    (65) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (66) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (67) cast_expression -> . unary_expression
    (68) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREMENT unary_expression
    (71) unary_expression -> . DECREMENT unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (73) unary_expression -> . SIZEOF unary_expression
    (74) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (84) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LBIG expression RBIG
    (93) postfix_expression -> . postfix_expression LPAREN RPAREN
    (94) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (75) unary_operator -> . AND_OP
    (76) unary_operator -> . MULT
    (77) unary_operator -> . ADD
    (78) unary_operator -> . MINUS
    (79) unary_operator -> . TILDA
    (80) unary_operator -> . NOT
    (85) primary_expression -> . VARIABLE
    (86) primary_expression -> . constant
    (87) primary_expression -> . LPAREN expression RPAREN
    (88) constant -> . HEX_INT
    (89) constant -> . EXP_REAL
    (90) constant -> . DOT_REAL
    (91) constant -> . DEC_INT

    LPAREN          shift and go to state 52
    INCREMENT       shift and go to state 43
    DECREMENT       shift and go to state 64
    SIZEOF          shift and go to state 47
    AND_OP          shift and go to state 49
    MULT            shift and go to state 57
    ADD             shift and go to state 59
    MINUS           shift and go to state 35
    TILDA           shift and go to state 41
    NOT             shift and go to state 63
    VARIABLE        shift and go to state 53
    HEX_INT         shift and go to state 58
    EXP_REAL        shift and go to state 39
    DOT_REAL        shift and go to state 60
    DEC_INT         shift and go to state 40

    constant                       shift and go to state 32
    unary_expression               shift and go to state 37
    multiplicative_expression      shift and go to state 48
    postfix_expression             shift and go to state 34
    unary_operator                 shift and go to state 61
    cast_expression                shift and go to state 44
    shift_expression               shift and go to state 136
    additive_expression            shift and go to state 50
    primary_expression             shift and go to state 51

state 86

    (56) relational_expression -> relational_expression GE_OP . shift_expression
    (57) shift_expression -> . additive_expression
    (58) shift_expression -> . shift_expression LEFT_OP additive_expression
    (59) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (60) additive_expression -> . multiplicative_expression
    (61) additive_expression -> . additive_expression ADD multiplicative_expression
    (62) additive_expression -> . additive_expression MINUS multiplicative_expression
    (63) multiplicative_expression -> . cast_expression
    (64) multiplicative_expression -> . multiplicative_expression MULT cast_expression
    (65) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (66) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (67) cast_expression -> . unary_expression
    (68) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREMENT unary_expression
    (71) unary_expression -> . DECREMENT unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (73) unary_expression -> . SIZEOF unary_expression
    (74) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (84) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LBIG expression RBIG
    (93) postfix_expression -> . postfix_expression LPAREN RPAREN
    (94) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (75) unary_operator -> . AND_OP
    (76) unary_operator -> . MULT
    (77) unary_operator -> . ADD
    (78) unary_operator -> . MINUS
    (79) unary_operator -> . TILDA
    (80) unary_operator -> . NOT
    (85) primary_expression -> . VARIABLE
    (86) primary_expression -> . constant
    (87) primary_expression -> . LPAREN expression RPAREN
    (88) constant -> . HEX_INT
    (89) constant -> . EXP_REAL
    (90) constant -> . DOT_REAL
    (91) constant -> . DEC_INT

    LPAREN          shift and go to state 52
    INCREMENT       shift and go to state 43
    DECREMENT       shift and go to state 64
    SIZEOF          shift and go to state 47
    AND_OP          shift and go to state 49
    MULT            shift and go to state 57
    ADD             shift and go to state 59
    MINUS           shift and go to state 35
    TILDA           shift and go to state 41
    NOT             shift and go to state 63
    VARIABLE        shift and go to state 53
    HEX_INT         shift and go to state 58
    EXP_REAL        shift and go to state 39
    DOT_REAL        shift and go to state 60
    DEC_INT         shift and go to state 40

    constant                       shift and go to state 32
    unary_expression               shift and go to state 37
    multiplicative_expression      shift and go to state 48
    postfix_expression             shift and go to state 34
    unary_operator                 shift and go to state 61
    cast_expression                shift and go to state 44
    shift_expression               shift and go to state 137
    additive_expression            shift and go to state 50
    primary_expression             shift and go to state 51

state 87

    (70) unary_expression -> INCREMENT unary_expression .

    EQUALS          reduce using rule 70 (unary_expression -> INCREMENT unary_expression .)
    MUL_ASSIGN      reduce using rule 70 (unary_expression -> INCREMENT unary_expression .)
    DIV_ASSIGN      reduce using rule 70 (unary_expression -> INCREMENT unary_expression .)
    MOD_ASSIGN      reduce using rule 70 (unary_expression -> INCREMENT unary_expression .)
    ADD_ASSIGN      reduce using rule 70 (unary_expression -> INCREMENT unary_expression .)
    SUB_ASSIGN      reduce using rule 70 (unary_expression -> INCREMENT unary_expression .)
    LEFT_ASSIGN     reduce using rule 70 (unary_expression -> INCREMENT unary_expression .)
    RIGHT_ASSIGN    reduce using rule 70 (unary_expression -> INCREMENT unary_expression .)
    AND_ASSIGN      reduce using rule 70 (unary_expression -> INCREMENT unary_expression .)
    XOR_ASSIGN      reduce using rule 70 (unary_expression -> INCREMENT unary_expression .)
    OR_ASSIGN       reduce using rule 70 (unary_expression -> INCREMENT unary_expression .)
    MULT            reduce using rule 70 (unary_expression -> INCREMENT unary_expression .)
    DIV             reduce using rule 70 (unary_expression -> INCREMENT unary_expression .)
    MOD             reduce using rule 70 (unary_expression -> INCREMENT unary_expression .)
    ADD             reduce using rule 70 (unary_expression -> INCREMENT unary_expression .)
    MINUS           reduce using rule 70 (unary_expression -> INCREMENT unary_expression .)
    LEFT_OP         reduce using rule 70 (unary_expression -> INCREMENT unary_expression .)
    RIGHT_OP        reduce using rule 70 (unary_expression -> INCREMENT unary_expression .)
    L_OP            reduce using rule 70 (unary_expression -> INCREMENT unary_expression .)
    G_OP            reduce using rule 70 (unary_expression -> INCREMENT unary_expression .)
    LE_OP           reduce using rule 70 (unary_expression -> INCREMENT unary_expression .)
    GE_OP           reduce using rule 70 (unary_expression -> INCREMENT unary_expression .)
    EQUALS_OP       reduce using rule 70 (unary_expression -> INCREMENT unary_expression .)
    NOTEQUALS       reduce using rule 70 (unary_expression -> INCREMENT unary_expression .)
    AND_OP          reduce using rule 70 (unary_expression -> INCREMENT unary_expression .)
    AND             reduce using rule 70 (unary_expression -> INCREMENT unary_expression .)
    OR              reduce using rule 70 (unary_expression -> INCREMENT unary_expression .)
    CONDOP          reduce using rule 70 (unary_expression -> INCREMENT unary_expression .)
    OR_OP           reduce using rule 70 (unary_expression -> INCREMENT unary_expression .)
    RPAREN          reduce using rule 70 (unary_expression -> INCREMENT unary_expression .)
    COMMA           reduce using rule 70 (unary_expression -> INCREMENT unary_expression .)
    VOID            reduce using rule 70 (unary_expression -> INCREMENT unary_expression .)
    INT             reduce using rule 70 (unary_expression -> INCREMENT unary_expression .)
    CHAR            reduce using rule 70 (unary_expression -> INCREMENT unary_expression .)
    SHORT           reduce using rule 70 (unary_expression -> INCREMENT unary_expression .)
    LONG            reduce using rule 70 (unary_expression -> INCREMENT unary_expression .)
    FLOAT           reduce using rule 70 (unary_expression -> INCREMENT unary_expression .)
    DOUBLE          reduce using rule 70 (unary_expression -> INCREMENT unary_expression .)
    VARIABLE        reduce using rule 70 (unary_expression -> INCREMENT unary_expression .)
    SEMI_COLON      reduce using rule 70 (unary_expression -> INCREMENT unary_expression .)
    LPAREN          reduce using rule 70 (unary_expression -> INCREMENT unary_expression .)
    RBIG            reduce using rule 70 (unary_expression -> INCREMENT unary_expression .)
    RBRACE          reduce using rule 70 (unary_expression -> INCREMENT unary_expression .)
    COLON           reduce using rule 70 (unary_expression -> INCREMENT unary_expression .)


state 88

    (87) primary_expression -> LPAREN . expression RPAREN
    (100) expression -> . assignment_expression
    (101) expression -> . expression COMMA assignment_expression
    (102) assignment_expression -> . conditional_expression
    (103) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (37) conditional_expression -> . logical_or_expression
    (38) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREMENT unary_expression
    (71) unary_expression -> . DECREMENT unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (73) unary_expression -> . SIZEOF unary_expression
    (74) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (39) logical_or_expression -> . logical_and_expression
    (40) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (84) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LBIG expression RBIG
    (93) postfix_expression -> . postfix_expression LPAREN RPAREN
    (94) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (75) unary_operator -> . AND_OP
    (76) unary_operator -> . MULT
    (77) unary_operator -> . ADD
    (78) unary_operator -> . MINUS
    (79) unary_operator -> . TILDA
    (80) unary_operator -> . NOT
    (41) logical_and_expression -> . inclusive_or_expression
    (42) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (85) primary_expression -> . VARIABLE
    (86) primary_expression -> . constant
    (87) primary_expression -> . LPAREN expression RPAREN
    (43) inclusive_or_expression -> . exclusive_or_expression
    (44) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (88) constant -> . HEX_INT
    (89) constant -> . EXP_REAL
    (90) constant -> . DOT_REAL
    (91) constant -> . DEC_INT
    (45) exclusive_or_expression -> . and_expression
    (46) exclusive_or_expression -> . exclusive_or_expression AND and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression AND_OP equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQUALS_OP relational_expression
    (51) equality_expression -> . equality_expression NOTEQUALS relational_expression
    (52) relational_expression -> . shift_expression
    (53) relational_expression -> . relational_expression L_OP shift_expression
    (54) relational_expression -> . relational_expression G_OP shift_expression
    (55) relational_expression -> . relational_expression LE_OP shift_expression
    (56) relational_expression -> . relational_expression GE_OP shift_expression
    (57) shift_expression -> . additive_expression
    (58) shift_expression -> . shift_expression LEFT_OP additive_expression
    (59) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (60) additive_expression -> . multiplicative_expression
    (61) additive_expression -> . additive_expression ADD multiplicative_expression
    (62) additive_expression -> . additive_expression MINUS multiplicative_expression
    (63) multiplicative_expression -> . cast_expression
    (64) multiplicative_expression -> . multiplicative_expression MULT cast_expression
    (65) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (66) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (67) cast_expression -> . unary_expression
    (68) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INCREMENT       shift and go to state 43
    DECREMENT       shift and go to state 64
    SIZEOF          shift and go to state 47
    AND_OP          shift and go to state 49
    MULT            shift and go to state 57
    ADD             shift and go to state 59
    MINUS           shift and go to state 35
    TILDA           shift and go to state 41
    NOT             shift and go to state 63
    VARIABLE        shift and go to state 53
    LPAREN          shift and go to state 75
    HEX_INT         shift and go to state 58
    EXP_REAL        shift and go to state 39
    DOT_REAL        shift and go to state 60
    DEC_INT         shift and go to state 40

    constant                       shift and go to state 32
    unary_expression               shift and go to state 72
    exclusive_or_expression        shift and go to state 33
    additive_expression            shift and go to state 50
    inclusive_or_expression        shift and go to state 38
    postfix_expression             shift and go to state 34
    and_expression                 shift and go to state 36
    relational_expression          shift and go to state 42
    cast_expression                shift and go to state 44
    logical_or_expression          shift and go to state 45
    unary_operator                 shift and go to state 61
    assignment_expression          shift and go to state 100
    multiplicative_expression      shift and go to state 48
    primary_expression             shift and go to state 51
    logical_and_expression         shift and go to state 54
    shift_expression               shift and go to state 55
    equality_expression            shift and go to state 56
    conditional_expression         shift and go to state 77
    expression                     shift and go to state 102

state 89

    (38) conditional_expression -> logical_or_expression CONDOP . expression COLON conditional_expression
    (100) expression -> . assignment_expression
    (101) expression -> . expression COMMA assignment_expression
    (102) assignment_expression -> . conditional_expression
    (103) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (37) conditional_expression -> . logical_or_expression
    (38) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREMENT unary_expression
    (71) unary_expression -> . DECREMENT unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (73) unary_expression -> . SIZEOF unary_expression
    (74) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (39) logical_or_expression -> . logical_and_expression
    (40) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (84) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LBIG expression RBIG
    (93) postfix_expression -> . postfix_expression LPAREN RPAREN
    (94) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (75) unary_operator -> . AND_OP
    (76) unary_operator -> . MULT
    (77) unary_operator -> . ADD
    (78) unary_operator -> . MINUS
    (79) unary_operator -> . TILDA
    (80) unary_operator -> . NOT
    (41) logical_and_expression -> . inclusive_or_expression
    (42) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (85) primary_expression -> . VARIABLE
    (86) primary_expression -> . constant
    (87) primary_expression -> . LPAREN expression RPAREN
    (43) inclusive_or_expression -> . exclusive_or_expression
    (44) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (88) constant -> . HEX_INT
    (89) constant -> . EXP_REAL
    (90) constant -> . DOT_REAL
    (91) constant -> . DEC_INT
    (45) exclusive_or_expression -> . and_expression
    (46) exclusive_or_expression -> . exclusive_or_expression AND and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression AND_OP equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQUALS_OP relational_expression
    (51) equality_expression -> . equality_expression NOTEQUALS relational_expression
    (52) relational_expression -> . shift_expression
    (53) relational_expression -> . relational_expression L_OP shift_expression
    (54) relational_expression -> . relational_expression G_OP shift_expression
    (55) relational_expression -> . relational_expression LE_OP shift_expression
    (56) relational_expression -> . relational_expression GE_OP shift_expression
    (57) shift_expression -> . additive_expression
    (58) shift_expression -> . shift_expression LEFT_OP additive_expression
    (59) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (60) additive_expression -> . multiplicative_expression
    (61) additive_expression -> . additive_expression ADD multiplicative_expression
    (62) additive_expression -> . additive_expression MINUS multiplicative_expression
    (63) multiplicative_expression -> . cast_expression
    (64) multiplicative_expression -> . multiplicative_expression MULT cast_expression
    (65) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (66) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (67) cast_expression -> . unary_expression
    (68) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INCREMENT       shift and go to state 43
    DECREMENT       shift and go to state 64
    SIZEOF          shift and go to state 47
    AND_OP          shift and go to state 49
    MULT            shift and go to state 57
    ADD             shift and go to state 59
    MINUS           shift and go to state 35
    TILDA           shift and go to state 41
    NOT             shift and go to state 63
    VARIABLE        shift and go to state 53
    LPAREN          shift and go to state 75
    HEX_INT         shift and go to state 58
    EXP_REAL        shift and go to state 39
    DOT_REAL        shift and go to state 60
    DEC_INT         shift and go to state 40

    constant                       shift and go to state 32
    unary_expression               shift and go to state 72
    exclusive_or_expression        shift and go to state 33
    additive_expression            shift and go to state 50
    inclusive_or_expression        shift and go to state 38
    postfix_expression             shift and go to state 34
    and_expression                 shift and go to state 36
    relational_expression          shift and go to state 42
    cast_expression                shift and go to state 44
    logical_or_expression          shift and go to state 45
    unary_operator                 shift and go to state 61
    assignment_expression          shift and go to state 100
    multiplicative_expression      shift and go to state 48
    primary_expression             shift and go to state 51
    logical_and_expression         shift and go to state 54
    shift_expression               shift and go to state 55
    equality_expression            shift and go to state 56
    conditional_expression         shift and go to state 77
    expression                     shift and go to state 138

state 90

    (40) logical_or_expression -> logical_or_expression OR_OP . logical_and_expression
    (41) logical_and_expression -> . inclusive_or_expression
    (42) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (43) inclusive_or_expression -> . exclusive_or_expression
    (44) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (45) exclusive_or_expression -> . and_expression
    (46) exclusive_or_expression -> . exclusive_or_expression AND and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression AND_OP equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQUALS_OP relational_expression
    (51) equality_expression -> . equality_expression NOTEQUALS relational_expression
    (52) relational_expression -> . shift_expression
    (53) relational_expression -> . relational_expression L_OP shift_expression
    (54) relational_expression -> . relational_expression G_OP shift_expression
    (55) relational_expression -> . relational_expression LE_OP shift_expression
    (56) relational_expression -> . relational_expression GE_OP shift_expression
    (57) shift_expression -> . additive_expression
    (58) shift_expression -> . shift_expression LEFT_OP additive_expression
    (59) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (60) additive_expression -> . multiplicative_expression
    (61) additive_expression -> . additive_expression ADD multiplicative_expression
    (62) additive_expression -> . additive_expression MINUS multiplicative_expression
    (63) multiplicative_expression -> . cast_expression
    (64) multiplicative_expression -> . multiplicative_expression MULT cast_expression
    (65) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (66) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (67) cast_expression -> . unary_expression
    (68) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREMENT unary_expression
    (71) unary_expression -> . DECREMENT unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (73) unary_expression -> . SIZEOF unary_expression
    (74) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (84) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LBIG expression RBIG
    (93) postfix_expression -> . postfix_expression LPAREN RPAREN
    (94) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (75) unary_operator -> . AND_OP
    (76) unary_operator -> . MULT
    (77) unary_operator -> . ADD
    (78) unary_operator -> . MINUS
    (79) unary_operator -> . TILDA
    (80) unary_operator -> . NOT
    (85) primary_expression -> . VARIABLE
    (86) primary_expression -> . constant
    (87) primary_expression -> . LPAREN expression RPAREN
    (88) constant -> . HEX_INT
    (89) constant -> . EXP_REAL
    (90) constant -> . DOT_REAL
    (91) constant -> . DEC_INT

    LPAREN          shift and go to state 52
    INCREMENT       shift and go to state 43
    DECREMENT       shift and go to state 64
    SIZEOF          shift and go to state 47
    AND_OP          shift and go to state 49
    MULT            shift and go to state 57
    ADD             shift and go to state 59
    MINUS           shift and go to state 35
    TILDA           shift and go to state 41
    NOT             shift and go to state 63
    VARIABLE        shift and go to state 53
    HEX_INT         shift and go to state 58
    EXP_REAL        shift and go to state 39
    DOT_REAL        shift and go to state 60
    DEC_INT         shift and go to state 40

    constant                       shift and go to state 32
    unary_expression               shift and go to state 37
    multiplicative_expression      shift and go to state 48
    inclusive_or_expression        shift and go to state 38
    exclusive_or_expression        shift and go to state 33
    postfix_expression             shift and go to state 34
    shift_expression               shift and go to state 55
    additive_expression            shift and go to state 50
    and_expression                 shift and go to state 36
    primary_expression             shift and go to state 51
    unary_operator                 shift and go to state 61
    cast_expression                shift and go to state 44
    logical_and_expression         shift and go to state 139
    equality_expression            shift and go to state 56
    relational_expression          shift and go to state 42

state 91

    (73) unary_expression -> SIZEOF unary_expression .

    EQUALS          reduce using rule 73 (unary_expression -> SIZEOF unary_expression .)
    MUL_ASSIGN      reduce using rule 73 (unary_expression -> SIZEOF unary_expression .)
    DIV_ASSIGN      reduce using rule 73 (unary_expression -> SIZEOF unary_expression .)
    MOD_ASSIGN      reduce using rule 73 (unary_expression -> SIZEOF unary_expression .)
    ADD_ASSIGN      reduce using rule 73 (unary_expression -> SIZEOF unary_expression .)
    SUB_ASSIGN      reduce using rule 73 (unary_expression -> SIZEOF unary_expression .)
    LEFT_ASSIGN     reduce using rule 73 (unary_expression -> SIZEOF unary_expression .)
    RIGHT_ASSIGN    reduce using rule 73 (unary_expression -> SIZEOF unary_expression .)
    AND_ASSIGN      reduce using rule 73 (unary_expression -> SIZEOF unary_expression .)
    XOR_ASSIGN      reduce using rule 73 (unary_expression -> SIZEOF unary_expression .)
    OR_ASSIGN       reduce using rule 73 (unary_expression -> SIZEOF unary_expression .)
    MULT            reduce using rule 73 (unary_expression -> SIZEOF unary_expression .)
    DIV             reduce using rule 73 (unary_expression -> SIZEOF unary_expression .)
    MOD             reduce using rule 73 (unary_expression -> SIZEOF unary_expression .)
    ADD             reduce using rule 73 (unary_expression -> SIZEOF unary_expression .)
    MINUS           reduce using rule 73 (unary_expression -> SIZEOF unary_expression .)
    LEFT_OP         reduce using rule 73 (unary_expression -> SIZEOF unary_expression .)
    RIGHT_OP        reduce using rule 73 (unary_expression -> SIZEOF unary_expression .)
    L_OP            reduce using rule 73 (unary_expression -> SIZEOF unary_expression .)
    G_OP            reduce using rule 73 (unary_expression -> SIZEOF unary_expression .)
    LE_OP           reduce using rule 73 (unary_expression -> SIZEOF unary_expression .)
    GE_OP           reduce using rule 73 (unary_expression -> SIZEOF unary_expression .)
    EQUALS_OP       reduce using rule 73 (unary_expression -> SIZEOF unary_expression .)
    NOTEQUALS       reduce using rule 73 (unary_expression -> SIZEOF unary_expression .)
    AND_OP          reduce using rule 73 (unary_expression -> SIZEOF unary_expression .)
    AND             reduce using rule 73 (unary_expression -> SIZEOF unary_expression .)
    OR              reduce using rule 73 (unary_expression -> SIZEOF unary_expression .)
    CONDOP          reduce using rule 73 (unary_expression -> SIZEOF unary_expression .)
    OR_OP           reduce using rule 73 (unary_expression -> SIZEOF unary_expression .)
    RPAREN          reduce using rule 73 (unary_expression -> SIZEOF unary_expression .)
    COMMA           reduce using rule 73 (unary_expression -> SIZEOF unary_expression .)
    VOID            reduce using rule 73 (unary_expression -> SIZEOF unary_expression .)
    INT             reduce using rule 73 (unary_expression -> SIZEOF unary_expression .)
    CHAR            reduce using rule 73 (unary_expression -> SIZEOF unary_expression .)
    SHORT           reduce using rule 73 (unary_expression -> SIZEOF unary_expression .)
    LONG            reduce using rule 73 (unary_expression -> SIZEOF unary_expression .)
    FLOAT           reduce using rule 73 (unary_expression -> SIZEOF unary_expression .)
    DOUBLE          reduce using rule 73 (unary_expression -> SIZEOF unary_expression .)
    VARIABLE        reduce using rule 73 (unary_expression -> SIZEOF unary_expression .)
    SEMI_COLON      reduce using rule 73 (unary_expression -> SIZEOF unary_expression .)
    LPAREN          reduce using rule 73 (unary_expression -> SIZEOF unary_expression .)
    RBIG            reduce using rule 73 (unary_expression -> SIZEOF unary_expression .)
    RBRACE          reduce using rule 73 (unary_expression -> SIZEOF unary_expression .)
    COLON           reduce using rule 73 (unary_expression -> SIZEOF unary_expression .)


state 92

    (74) unary_expression -> SIZEOF LPAREN . type_name RPAREN
    (87) primary_expression -> LPAREN . expression RPAREN
    (81) type_name -> . specifier_qualifier_list
    (100) expression -> . assignment_expression
    (101) expression -> . expression COMMA assignment_expression
    (82) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (83) specifier_qualifier_list -> . type_specifier
    (102) assignment_expression -> . conditional_expression
    (103) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (23) type_specifier -> . VOID
    (24) type_specifier -> . INT
    (25) type_specifier -> . CHAR
    (26) type_specifier -> . SHORT
    (27) type_specifier -> . LONG
    (28) type_specifier -> . FLOAT
    (29) type_specifier -> . DOUBLE
    (30) type_specifier -> . enum_specifier
    (37) conditional_expression -> . logical_or_expression
    (38) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREMENT unary_expression
    (71) unary_expression -> . DECREMENT unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (73) unary_expression -> . SIZEOF unary_expression
    (74) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (31) enum_specifier -> . type_specifier enum_list
    (39) logical_or_expression -> . logical_and_expression
    (40) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (84) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LBIG expression RBIG
    (93) postfix_expression -> . postfix_expression LPAREN RPAREN
    (94) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (75) unary_operator -> . AND_OP
    (76) unary_operator -> . MULT
    (77) unary_operator -> . ADD
    (78) unary_operator -> . MINUS
    (79) unary_operator -> . TILDA
    (80) unary_operator -> . NOT
    (41) logical_and_expression -> . inclusive_or_expression
    (42) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (85) primary_expression -> . VARIABLE
    (86) primary_expression -> . constant
    (87) primary_expression -> . LPAREN expression RPAREN
    (43) inclusive_or_expression -> . exclusive_or_expression
    (44) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (88) constant -> . HEX_INT
    (89) constant -> . EXP_REAL
    (90) constant -> . DOT_REAL
    (91) constant -> . DEC_INT
    (45) exclusive_or_expression -> . and_expression
    (46) exclusive_or_expression -> . exclusive_or_expression AND and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression AND_OP equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQUALS_OP relational_expression
    (51) equality_expression -> . equality_expression NOTEQUALS relational_expression
    (52) relational_expression -> . shift_expression
    (53) relational_expression -> . relational_expression L_OP shift_expression
    (54) relational_expression -> . relational_expression G_OP shift_expression
    (55) relational_expression -> . relational_expression LE_OP shift_expression
    (56) relational_expression -> . relational_expression GE_OP shift_expression
    (57) shift_expression -> . additive_expression
    (58) shift_expression -> . shift_expression LEFT_OP additive_expression
    (59) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (60) additive_expression -> . multiplicative_expression
    (61) additive_expression -> . additive_expression ADD multiplicative_expression
    (62) additive_expression -> . additive_expression MINUS multiplicative_expression
    (63) multiplicative_expression -> . cast_expression
    (64) multiplicative_expression -> . multiplicative_expression MULT cast_expression
    (65) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (66) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (67) cast_expression -> . unary_expression
    (68) cast_expression -> . LPAREN type_name RPAREN cast_expression

    VOID            shift and go to state 4
    INT             shift and go to state 2
    CHAR            shift and go to state 7
    SHORT           shift and go to state 9
    LONG            shift and go to state 6
    FLOAT           shift and go to state 5
    DOUBLE          shift and go to state 3
    INCREMENT       shift and go to state 43
    DECREMENT       shift and go to state 64
    SIZEOF          shift and go to state 47
    AND_OP          shift and go to state 49
    MULT            shift and go to state 57
    ADD             shift and go to state 59
    MINUS           shift and go to state 35
    TILDA           shift and go to state 41
    NOT             shift and go to state 63
    VARIABLE        shift and go to state 53
    LPAREN          shift and go to state 75
    HEX_INT         shift and go to state 58
    EXP_REAL        shift and go to state 39
    DOT_REAL        shift and go to state 60
    DEC_INT         shift and go to state 40

    constant                       shift and go to state 32
    unary_expression               shift and go to state 72
    exclusive_or_expression        shift and go to state 33
    and_expression                 shift and go to state 36
    type_specifier                 shift and go to state 98
    inclusive_or_expression        shift and go to state 38
    type_name                      shift and go to state 140
    postfix_expression             shift and go to state 34
    relational_expression          shift and go to state 42
    cast_expression                shift and go to state 44
    logical_or_expression          shift and go to state 45
    unary_operator                 shift and go to state 61
    assignment_expression          shift and go to state 100
    multiplicative_expression      shift and go to state 48
    additive_expression            shift and go to state 50
    primary_expression             shift and go to state 51
    logical_and_expression         shift and go to state 54
    shift_expression               shift and go to state 55
    equality_expression            shift and go to state 56
    enum_specifier                 shift and go to state 8
    specifier_qualifier_list       shift and go to state 101
    conditional_expression         shift and go to state 77
    expression                     shift and go to state 102

state 93

    (65) multiplicative_expression -> multiplicative_expression DIV . cast_expression
    (67) cast_expression -> . unary_expression
    (68) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREMENT unary_expression
    (71) unary_expression -> . DECREMENT unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (73) unary_expression -> . SIZEOF unary_expression
    (74) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (84) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LBIG expression RBIG
    (93) postfix_expression -> . postfix_expression LPAREN RPAREN
    (94) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (75) unary_operator -> . AND_OP
    (76) unary_operator -> . MULT
    (77) unary_operator -> . ADD
    (78) unary_operator -> . MINUS
    (79) unary_operator -> . TILDA
    (80) unary_operator -> . NOT
    (85) primary_expression -> . VARIABLE
    (86) primary_expression -> . constant
    (87) primary_expression -> . LPAREN expression RPAREN
    (88) constant -> . HEX_INT
    (89) constant -> . EXP_REAL
    (90) constant -> . DOT_REAL
    (91) constant -> . DEC_INT

    LPAREN          shift and go to state 52
    INCREMENT       shift and go to state 43
    DECREMENT       shift and go to state 64
    SIZEOF          shift and go to state 47
    AND_OP          shift and go to state 49
    MULT            shift and go to state 57
    ADD             shift and go to state 59
    MINUS           shift and go to state 35
    TILDA           shift and go to state 41
    NOT             shift and go to state 63
    VARIABLE        shift and go to state 53
    HEX_INT         shift and go to state 58
    EXP_REAL        shift and go to state 39
    DOT_REAL        shift and go to state 60
    DEC_INT         shift and go to state 40

    constant                       shift and go to state 32
    unary_expression               shift and go to state 37
    postfix_expression             shift and go to state 34
    primary_expression             shift and go to state 51
    cast_expression                shift and go to state 141
    unary_operator                 shift and go to state 61

state 94

    (64) multiplicative_expression -> multiplicative_expression MULT . cast_expression
    (67) cast_expression -> . unary_expression
    (68) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREMENT unary_expression
    (71) unary_expression -> . DECREMENT unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (73) unary_expression -> . SIZEOF unary_expression
    (74) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (84) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LBIG expression RBIG
    (93) postfix_expression -> . postfix_expression LPAREN RPAREN
    (94) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (75) unary_operator -> . AND_OP
    (76) unary_operator -> . MULT
    (77) unary_operator -> . ADD
    (78) unary_operator -> . MINUS
    (79) unary_operator -> . TILDA
    (80) unary_operator -> . NOT
    (85) primary_expression -> . VARIABLE
    (86) primary_expression -> . constant
    (87) primary_expression -> . LPAREN expression RPAREN
    (88) constant -> . HEX_INT
    (89) constant -> . EXP_REAL
    (90) constant -> . DOT_REAL
    (91) constant -> . DEC_INT

    LPAREN          shift and go to state 52
    INCREMENT       shift and go to state 43
    DECREMENT       shift and go to state 64
    SIZEOF          shift and go to state 47
    AND_OP          shift and go to state 49
    MULT            shift and go to state 57
    ADD             shift and go to state 59
    MINUS           shift and go to state 35
    TILDA           shift and go to state 41
    NOT             shift and go to state 63
    VARIABLE        shift and go to state 53
    HEX_INT         shift and go to state 58
    EXP_REAL        shift and go to state 39
    DOT_REAL        shift and go to state 60
    DEC_INT         shift and go to state 40

    constant                       shift and go to state 32
    unary_expression               shift and go to state 37
    postfix_expression             shift and go to state 34
    primary_expression             shift and go to state 51
    cast_expression                shift and go to state 142
    unary_operator                 shift and go to state 61

state 95

    (66) multiplicative_expression -> multiplicative_expression MOD . cast_expression
    (67) cast_expression -> . unary_expression
    (68) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREMENT unary_expression
    (71) unary_expression -> . DECREMENT unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (73) unary_expression -> . SIZEOF unary_expression
    (74) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (84) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LBIG expression RBIG
    (93) postfix_expression -> . postfix_expression LPAREN RPAREN
    (94) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (75) unary_operator -> . AND_OP
    (76) unary_operator -> . MULT
    (77) unary_operator -> . ADD
    (78) unary_operator -> . MINUS
    (79) unary_operator -> . TILDA
    (80) unary_operator -> . NOT
    (85) primary_expression -> . VARIABLE
    (86) primary_expression -> . constant
    (87) primary_expression -> . LPAREN expression RPAREN
    (88) constant -> . HEX_INT
    (89) constant -> . EXP_REAL
    (90) constant -> . DOT_REAL
    (91) constant -> . DEC_INT

    LPAREN          shift and go to state 52
    INCREMENT       shift and go to state 43
    DECREMENT       shift and go to state 64
    SIZEOF          shift and go to state 47
    AND_OP          shift and go to state 49
    MULT            shift and go to state 57
    ADD             shift and go to state 59
    MINUS           shift and go to state 35
    TILDA           shift and go to state 41
    NOT             shift and go to state 63
    VARIABLE        shift and go to state 53
    HEX_INT         shift and go to state 58
    EXP_REAL        shift and go to state 39
    DOT_REAL        shift and go to state 60
    DEC_INT         shift and go to state 40

    constant                       shift and go to state 32
    unary_expression               shift and go to state 37
    postfix_expression             shift and go to state 34
    primary_expression             shift and go to state 51
    cast_expression                shift and go to state 143
    unary_operator                 shift and go to state 61

state 96

    (61) additive_expression -> additive_expression ADD . multiplicative_expression
    (63) multiplicative_expression -> . cast_expression
    (64) multiplicative_expression -> . multiplicative_expression MULT cast_expression
    (65) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (66) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (67) cast_expression -> . unary_expression
    (68) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREMENT unary_expression
    (71) unary_expression -> . DECREMENT unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (73) unary_expression -> . SIZEOF unary_expression
    (74) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (84) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LBIG expression RBIG
    (93) postfix_expression -> . postfix_expression LPAREN RPAREN
    (94) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (75) unary_operator -> . AND_OP
    (76) unary_operator -> . MULT
    (77) unary_operator -> . ADD
    (78) unary_operator -> . MINUS
    (79) unary_operator -> . TILDA
    (80) unary_operator -> . NOT
    (85) primary_expression -> . VARIABLE
    (86) primary_expression -> . constant
    (87) primary_expression -> . LPAREN expression RPAREN
    (88) constant -> . HEX_INT
    (89) constant -> . EXP_REAL
    (90) constant -> . DOT_REAL
    (91) constant -> . DEC_INT

    LPAREN          shift and go to state 52
    INCREMENT       shift and go to state 43
    DECREMENT       shift and go to state 64
    SIZEOF          shift and go to state 47
    AND_OP          shift and go to state 49
    MULT            shift and go to state 57
    ADD             shift and go to state 59
    MINUS           shift and go to state 35
    TILDA           shift and go to state 41
    NOT             shift and go to state 63
    VARIABLE        shift and go to state 53
    HEX_INT         shift and go to state 58
    EXP_REAL        shift and go to state 39
    DOT_REAL        shift and go to state 60
    DEC_INT         shift and go to state 40

    constant                       shift and go to state 32
    unary_expression               shift and go to state 37
    multiplicative_expression      shift and go to state 144
    postfix_expression             shift and go to state 34
    unary_operator                 shift and go to state 61
    cast_expression                shift and go to state 44
    primary_expression             shift and go to state 51

state 97

    (62) additive_expression -> additive_expression MINUS . multiplicative_expression
    (63) multiplicative_expression -> . cast_expression
    (64) multiplicative_expression -> . multiplicative_expression MULT cast_expression
    (65) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (66) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (67) cast_expression -> . unary_expression
    (68) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREMENT unary_expression
    (71) unary_expression -> . DECREMENT unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (73) unary_expression -> . SIZEOF unary_expression
    (74) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (84) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LBIG expression RBIG
    (93) postfix_expression -> . postfix_expression LPAREN RPAREN
    (94) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (75) unary_operator -> . AND_OP
    (76) unary_operator -> . MULT
    (77) unary_operator -> . ADD
    (78) unary_operator -> . MINUS
    (79) unary_operator -> . TILDA
    (80) unary_operator -> . NOT
    (85) primary_expression -> . VARIABLE
    (86) primary_expression -> . constant
    (87) primary_expression -> . LPAREN expression RPAREN
    (88) constant -> . HEX_INT
    (89) constant -> . EXP_REAL
    (90) constant -> . DOT_REAL
    (91) constant -> . DEC_INT

    LPAREN          shift and go to state 52
    INCREMENT       shift and go to state 43
    DECREMENT       shift and go to state 64
    SIZEOF          shift and go to state 47
    AND_OP          shift and go to state 49
    MULT            shift and go to state 57
    ADD             shift and go to state 59
    MINUS           shift and go to state 35
    TILDA           shift and go to state 41
    NOT             shift and go to state 63
    VARIABLE        shift and go to state 53
    HEX_INT         shift and go to state 58
    EXP_REAL        shift and go to state 39
    DOT_REAL        shift and go to state 60
    DEC_INT         shift and go to state 40

    constant                       shift and go to state 32
    unary_expression               shift and go to state 37
    multiplicative_expression      shift and go to state 145
    postfix_expression             shift and go to state 34
    unary_operator                 shift and go to state 61
    cast_expression                shift and go to state 44
    primary_expression             shift and go to state 51

state 98

    (82) specifier_qualifier_list -> type_specifier . specifier_qualifier_list
    (83) specifier_qualifier_list -> type_specifier .
    (31) enum_specifier -> type_specifier . enum_list
    (82) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (83) specifier_qualifier_list -> . type_specifier
    (32) enum_list -> . enumerator
    (33) enum_list -> . enum_list COMMA enumerator
    (23) type_specifier -> . VOID
    (24) type_specifier -> . INT
    (25) type_specifier -> . CHAR
    (26) type_specifier -> . SHORT
    (27) type_specifier -> . LONG
    (28) type_specifier -> . FLOAT
    (29) type_specifier -> . DOUBLE
    (30) type_specifier -> . enum_specifier
    (34) enumerator -> . VARIABLE
    (35) enumerator -> . VARIABLE EQUALS constant_expression
    (31) enum_specifier -> . type_specifier enum_list

    RPAREN          reduce using rule 83 (specifier_qualifier_list -> type_specifier .)
    VOID            shift and go to state 4
    INT             shift and go to state 2
    CHAR            shift and go to state 7
    SHORT           shift and go to state 9
    LONG            shift and go to state 6
    FLOAT           shift and go to state 5
    DOUBLE          shift and go to state 3
    VARIABLE        shift and go to state 15

    type_specifier                 shift and go to state 98
    enumerator                     shift and go to state 12
    enum_specifier                 shift and go to state 8
    enum_list                      shift and go to state 13
    specifier_qualifier_list       shift and go to state 146

state 99

    (68) cast_expression -> LPAREN type_name . RPAREN cast_expression

    RPAREN          shift and go to state 147


state 100

    (100) expression -> assignment_expression .

    RPAREN          reduce using rule 100 (expression -> assignment_expression .)
    COMMA           reduce using rule 100 (expression -> assignment_expression .)
    RBIG            reduce using rule 100 (expression -> assignment_expression .)
    COLON           reduce using rule 100 (expression -> assignment_expression .)


state 101

    (81) type_name -> specifier_qualifier_list .

    RPAREN          reduce using rule 81 (type_name -> specifier_qualifier_list .)


state 102

    (87) primary_expression -> LPAREN expression . RPAREN
    (101) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 148
    COMMA           shift and go to state 149


state 103

    (42) logical_and_expression -> logical_and_expression AND_OP . inclusive_or_expression
    (43) inclusive_or_expression -> . exclusive_or_expression
    (44) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (45) exclusive_or_expression -> . and_expression
    (46) exclusive_or_expression -> . exclusive_or_expression AND and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression AND_OP equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQUALS_OP relational_expression
    (51) equality_expression -> . equality_expression NOTEQUALS relational_expression
    (52) relational_expression -> . shift_expression
    (53) relational_expression -> . relational_expression L_OP shift_expression
    (54) relational_expression -> . relational_expression G_OP shift_expression
    (55) relational_expression -> . relational_expression LE_OP shift_expression
    (56) relational_expression -> . relational_expression GE_OP shift_expression
    (57) shift_expression -> . additive_expression
    (58) shift_expression -> . shift_expression LEFT_OP additive_expression
    (59) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (60) additive_expression -> . multiplicative_expression
    (61) additive_expression -> . additive_expression ADD multiplicative_expression
    (62) additive_expression -> . additive_expression MINUS multiplicative_expression
    (63) multiplicative_expression -> . cast_expression
    (64) multiplicative_expression -> . multiplicative_expression MULT cast_expression
    (65) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (66) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (67) cast_expression -> . unary_expression
    (68) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREMENT unary_expression
    (71) unary_expression -> . DECREMENT unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (73) unary_expression -> . SIZEOF unary_expression
    (74) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (84) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LBIG expression RBIG
    (93) postfix_expression -> . postfix_expression LPAREN RPAREN
    (94) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (75) unary_operator -> . AND_OP
    (76) unary_operator -> . MULT
    (77) unary_operator -> . ADD
    (78) unary_operator -> . MINUS
    (79) unary_operator -> . TILDA
    (80) unary_operator -> . NOT
    (85) primary_expression -> . VARIABLE
    (86) primary_expression -> . constant
    (87) primary_expression -> . LPAREN expression RPAREN
    (88) constant -> . HEX_INT
    (89) constant -> . EXP_REAL
    (90) constant -> . DOT_REAL
    (91) constant -> . DEC_INT

    LPAREN          shift and go to state 52
    INCREMENT       shift and go to state 43
    DECREMENT       shift and go to state 64
    SIZEOF          shift and go to state 47
    AND_OP          shift and go to state 49
    MULT            shift and go to state 57
    ADD             shift and go to state 59
    MINUS           shift and go to state 35
    TILDA           shift and go to state 41
    NOT             shift and go to state 63
    VARIABLE        shift and go to state 53
    HEX_INT         shift and go to state 58
    EXP_REAL        shift and go to state 39
    DOT_REAL        shift and go to state 60
    DEC_INT         shift and go to state 40

    constant                       shift and go to state 32
    unary_expression               shift and go to state 37
    multiplicative_expression      shift and go to state 48
    inclusive_or_expression        shift and go to state 150
    exclusive_or_expression        shift and go to state 33
    postfix_expression             shift and go to state 34
    additive_expression            shift and go to state 50
    and_expression                 shift and go to state 36
    primary_expression             shift and go to state 51
    unary_operator                 shift and go to state 61
    cast_expression                shift and go to state 44
    shift_expression               shift and go to state 55
    equality_expression            shift and go to state 56
    relational_expression          shift and go to state 42

state 104

    (58) shift_expression -> shift_expression LEFT_OP . additive_expression
    (60) additive_expression -> . multiplicative_expression
    (61) additive_expression -> . additive_expression ADD multiplicative_expression
    (62) additive_expression -> . additive_expression MINUS multiplicative_expression
    (63) multiplicative_expression -> . cast_expression
    (64) multiplicative_expression -> . multiplicative_expression MULT cast_expression
    (65) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (66) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (67) cast_expression -> . unary_expression
    (68) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREMENT unary_expression
    (71) unary_expression -> . DECREMENT unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (73) unary_expression -> . SIZEOF unary_expression
    (74) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (84) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LBIG expression RBIG
    (93) postfix_expression -> . postfix_expression LPAREN RPAREN
    (94) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (75) unary_operator -> . AND_OP
    (76) unary_operator -> . MULT
    (77) unary_operator -> . ADD
    (78) unary_operator -> . MINUS
    (79) unary_operator -> . TILDA
    (80) unary_operator -> . NOT
    (85) primary_expression -> . VARIABLE
    (86) primary_expression -> . constant
    (87) primary_expression -> . LPAREN expression RPAREN
    (88) constant -> . HEX_INT
    (89) constant -> . EXP_REAL
    (90) constant -> . DOT_REAL
    (91) constant -> . DEC_INT

    LPAREN          shift and go to state 52
    INCREMENT       shift and go to state 43
    DECREMENT       shift and go to state 64
    SIZEOF          shift and go to state 47
    AND_OP          shift and go to state 49
    MULT            shift and go to state 57
    ADD             shift and go to state 59
    MINUS           shift and go to state 35
    TILDA           shift and go to state 41
    NOT             shift and go to state 63
    VARIABLE        shift and go to state 53
    HEX_INT         shift and go to state 58
    EXP_REAL        shift and go to state 39
    DOT_REAL        shift and go to state 60
    DEC_INT         shift and go to state 40

    constant                       shift and go to state 32
    unary_expression               shift and go to state 37
    multiplicative_expression      shift and go to state 48
    postfix_expression             shift and go to state 34
    unary_operator                 shift and go to state 61
    cast_expression                shift and go to state 44
    additive_expression            shift and go to state 151
    primary_expression             shift and go to state 51

state 105

    (59) shift_expression -> shift_expression RIGHT_OP . additive_expression
    (60) additive_expression -> . multiplicative_expression
    (61) additive_expression -> . additive_expression ADD multiplicative_expression
    (62) additive_expression -> . additive_expression MINUS multiplicative_expression
    (63) multiplicative_expression -> . cast_expression
    (64) multiplicative_expression -> . multiplicative_expression MULT cast_expression
    (65) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (66) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (67) cast_expression -> . unary_expression
    (68) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREMENT unary_expression
    (71) unary_expression -> . DECREMENT unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (73) unary_expression -> . SIZEOF unary_expression
    (74) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (84) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LBIG expression RBIG
    (93) postfix_expression -> . postfix_expression LPAREN RPAREN
    (94) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (75) unary_operator -> . AND_OP
    (76) unary_operator -> . MULT
    (77) unary_operator -> . ADD
    (78) unary_operator -> . MINUS
    (79) unary_operator -> . TILDA
    (80) unary_operator -> . NOT
    (85) primary_expression -> . VARIABLE
    (86) primary_expression -> . constant
    (87) primary_expression -> . LPAREN expression RPAREN
    (88) constant -> . HEX_INT
    (89) constant -> . EXP_REAL
    (90) constant -> . DOT_REAL
    (91) constant -> . DEC_INT

    LPAREN          shift and go to state 52
    INCREMENT       shift and go to state 43
    DECREMENT       shift and go to state 64
    SIZEOF          shift and go to state 47
    AND_OP          shift and go to state 49
    MULT            shift and go to state 57
    ADD             shift and go to state 59
    MINUS           shift and go to state 35
    TILDA           shift and go to state 41
    NOT             shift and go to state 63
    VARIABLE        shift and go to state 53
    HEX_INT         shift and go to state 58
    EXP_REAL        shift and go to state 39
    DOT_REAL        shift and go to state 60
    DEC_INT         shift and go to state 40

    constant                       shift and go to state 32
    unary_expression               shift and go to state 37
    multiplicative_expression      shift and go to state 48
    postfix_expression             shift and go to state 34
    unary_operator                 shift and go to state 61
    cast_expression                shift and go to state 44
    additive_expression            shift and go to state 152
    primary_expression             shift and go to state 51

state 106

    (51) equality_expression -> equality_expression NOTEQUALS . relational_expression
    (52) relational_expression -> . shift_expression
    (53) relational_expression -> . relational_expression L_OP shift_expression
    (54) relational_expression -> . relational_expression G_OP shift_expression
    (55) relational_expression -> . relational_expression LE_OP shift_expression
    (56) relational_expression -> . relational_expression GE_OP shift_expression
    (57) shift_expression -> . additive_expression
    (58) shift_expression -> . shift_expression LEFT_OP additive_expression
    (59) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (60) additive_expression -> . multiplicative_expression
    (61) additive_expression -> . additive_expression ADD multiplicative_expression
    (62) additive_expression -> . additive_expression MINUS multiplicative_expression
    (63) multiplicative_expression -> . cast_expression
    (64) multiplicative_expression -> . multiplicative_expression MULT cast_expression
    (65) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (66) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (67) cast_expression -> . unary_expression
    (68) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREMENT unary_expression
    (71) unary_expression -> . DECREMENT unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (73) unary_expression -> . SIZEOF unary_expression
    (74) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (84) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LBIG expression RBIG
    (93) postfix_expression -> . postfix_expression LPAREN RPAREN
    (94) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (75) unary_operator -> . AND_OP
    (76) unary_operator -> . MULT
    (77) unary_operator -> . ADD
    (78) unary_operator -> . MINUS
    (79) unary_operator -> . TILDA
    (80) unary_operator -> . NOT
    (85) primary_expression -> . VARIABLE
    (86) primary_expression -> . constant
    (87) primary_expression -> . LPAREN expression RPAREN
    (88) constant -> . HEX_INT
    (89) constant -> . EXP_REAL
    (90) constant -> . DOT_REAL
    (91) constant -> . DEC_INT

    LPAREN          shift and go to state 52
    INCREMENT       shift and go to state 43
    DECREMENT       shift and go to state 64
    SIZEOF          shift and go to state 47
    AND_OP          shift and go to state 49
    MULT            shift and go to state 57
    ADD             shift and go to state 59
    MINUS           shift and go to state 35
    TILDA           shift and go to state 41
    NOT             shift and go to state 63
    VARIABLE        shift and go to state 53
    HEX_INT         shift and go to state 58
    EXP_REAL        shift and go to state 39
    DOT_REAL        shift and go to state 60
    DEC_INT         shift and go to state 40

    constant                       shift and go to state 32
    unary_expression               shift and go to state 37
    multiplicative_expression      shift and go to state 48
    postfix_expression             shift and go to state 34
    relational_expression          shift and go to state 153
    unary_operator                 shift and go to state 61
    cast_expression                shift and go to state 44
    shift_expression               shift and go to state 55
    additive_expression            shift and go to state 50
    primary_expression             shift and go to state 51

state 107

    (50) equality_expression -> equality_expression EQUALS_OP . relational_expression
    (52) relational_expression -> . shift_expression
    (53) relational_expression -> . relational_expression L_OP shift_expression
    (54) relational_expression -> . relational_expression G_OP shift_expression
    (55) relational_expression -> . relational_expression LE_OP shift_expression
    (56) relational_expression -> . relational_expression GE_OP shift_expression
    (57) shift_expression -> . additive_expression
    (58) shift_expression -> . shift_expression LEFT_OP additive_expression
    (59) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (60) additive_expression -> . multiplicative_expression
    (61) additive_expression -> . additive_expression ADD multiplicative_expression
    (62) additive_expression -> . additive_expression MINUS multiplicative_expression
    (63) multiplicative_expression -> . cast_expression
    (64) multiplicative_expression -> . multiplicative_expression MULT cast_expression
    (65) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (66) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (67) cast_expression -> . unary_expression
    (68) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREMENT unary_expression
    (71) unary_expression -> . DECREMENT unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (73) unary_expression -> . SIZEOF unary_expression
    (74) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (84) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LBIG expression RBIG
    (93) postfix_expression -> . postfix_expression LPAREN RPAREN
    (94) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (75) unary_operator -> . AND_OP
    (76) unary_operator -> . MULT
    (77) unary_operator -> . ADD
    (78) unary_operator -> . MINUS
    (79) unary_operator -> . TILDA
    (80) unary_operator -> . NOT
    (85) primary_expression -> . VARIABLE
    (86) primary_expression -> . constant
    (87) primary_expression -> . LPAREN expression RPAREN
    (88) constant -> . HEX_INT
    (89) constant -> . EXP_REAL
    (90) constant -> . DOT_REAL
    (91) constant -> . DEC_INT

    LPAREN          shift and go to state 52
    INCREMENT       shift and go to state 43
    DECREMENT       shift and go to state 64
    SIZEOF          shift and go to state 47
    AND_OP          shift and go to state 49
    MULT            shift and go to state 57
    ADD             shift and go to state 59
    MINUS           shift and go to state 35
    TILDA           shift and go to state 41
    NOT             shift and go to state 63
    VARIABLE        shift and go to state 53
    HEX_INT         shift and go to state 58
    EXP_REAL        shift and go to state 39
    DOT_REAL        shift and go to state 60
    DEC_INT         shift and go to state 40

    constant                       shift and go to state 32
    unary_expression               shift and go to state 37
    multiplicative_expression      shift and go to state 48
    postfix_expression             shift and go to state 34
    relational_expression          shift and go to state 154
    unary_operator                 shift and go to state 61
    cast_expression                shift and go to state 44
    shift_expression               shift and go to state 55
    additive_expression            shift and go to state 50
    primary_expression             shift and go to state 51

state 108

    (72) unary_expression -> unary_operator cast_expression .

    EQUALS          reduce using rule 72 (unary_expression -> unary_operator cast_expression .)
    MUL_ASSIGN      reduce using rule 72 (unary_expression -> unary_operator cast_expression .)
    DIV_ASSIGN      reduce using rule 72 (unary_expression -> unary_operator cast_expression .)
    MOD_ASSIGN      reduce using rule 72 (unary_expression -> unary_operator cast_expression .)
    ADD_ASSIGN      reduce using rule 72 (unary_expression -> unary_operator cast_expression .)
    SUB_ASSIGN      reduce using rule 72 (unary_expression -> unary_operator cast_expression .)
    LEFT_ASSIGN     reduce using rule 72 (unary_expression -> unary_operator cast_expression .)
    RIGHT_ASSIGN    reduce using rule 72 (unary_expression -> unary_operator cast_expression .)
    AND_ASSIGN      reduce using rule 72 (unary_expression -> unary_operator cast_expression .)
    XOR_ASSIGN      reduce using rule 72 (unary_expression -> unary_operator cast_expression .)
    OR_ASSIGN       reduce using rule 72 (unary_expression -> unary_operator cast_expression .)
    MULT            reduce using rule 72 (unary_expression -> unary_operator cast_expression .)
    DIV             reduce using rule 72 (unary_expression -> unary_operator cast_expression .)
    MOD             reduce using rule 72 (unary_expression -> unary_operator cast_expression .)
    ADD             reduce using rule 72 (unary_expression -> unary_operator cast_expression .)
    MINUS           reduce using rule 72 (unary_expression -> unary_operator cast_expression .)
    LEFT_OP         reduce using rule 72 (unary_expression -> unary_operator cast_expression .)
    RIGHT_OP        reduce using rule 72 (unary_expression -> unary_operator cast_expression .)
    L_OP            reduce using rule 72 (unary_expression -> unary_operator cast_expression .)
    G_OP            reduce using rule 72 (unary_expression -> unary_operator cast_expression .)
    LE_OP           reduce using rule 72 (unary_expression -> unary_operator cast_expression .)
    GE_OP           reduce using rule 72 (unary_expression -> unary_operator cast_expression .)
    EQUALS_OP       reduce using rule 72 (unary_expression -> unary_operator cast_expression .)
    NOTEQUALS       reduce using rule 72 (unary_expression -> unary_operator cast_expression .)
    AND_OP          reduce using rule 72 (unary_expression -> unary_operator cast_expression .)
    AND             reduce using rule 72 (unary_expression -> unary_operator cast_expression .)
    OR              reduce using rule 72 (unary_expression -> unary_operator cast_expression .)
    CONDOP          reduce using rule 72 (unary_expression -> unary_operator cast_expression .)
    OR_OP           reduce using rule 72 (unary_expression -> unary_operator cast_expression .)
    RPAREN          reduce using rule 72 (unary_expression -> unary_operator cast_expression .)
    COMMA           reduce using rule 72 (unary_expression -> unary_operator cast_expression .)
    VOID            reduce using rule 72 (unary_expression -> unary_operator cast_expression .)
    INT             reduce using rule 72 (unary_expression -> unary_operator cast_expression .)
    CHAR            reduce using rule 72 (unary_expression -> unary_operator cast_expression .)
    SHORT           reduce using rule 72 (unary_expression -> unary_operator cast_expression .)
    LONG            reduce using rule 72 (unary_expression -> unary_operator cast_expression .)
    FLOAT           reduce using rule 72 (unary_expression -> unary_operator cast_expression .)
    DOUBLE          reduce using rule 72 (unary_expression -> unary_operator cast_expression .)
    VARIABLE        reduce using rule 72 (unary_expression -> unary_operator cast_expression .)
    SEMI_COLON      reduce using rule 72 (unary_expression -> unary_operator cast_expression .)
    LPAREN          reduce using rule 72 (unary_expression -> unary_operator cast_expression .)
    RBIG            reduce using rule 72 (unary_expression -> unary_operator cast_expression .)
    RBRACE          reduce using rule 72 (unary_expression -> unary_operator cast_expression .)
    COLON           reduce using rule 72 (unary_expression -> unary_operator cast_expression .)


state 109

    (71) unary_expression -> DECREMENT unary_expression .

    EQUALS          reduce using rule 71 (unary_expression -> DECREMENT unary_expression .)
    MUL_ASSIGN      reduce using rule 71 (unary_expression -> DECREMENT unary_expression .)
    DIV_ASSIGN      reduce using rule 71 (unary_expression -> DECREMENT unary_expression .)
    MOD_ASSIGN      reduce using rule 71 (unary_expression -> DECREMENT unary_expression .)
    ADD_ASSIGN      reduce using rule 71 (unary_expression -> DECREMENT unary_expression .)
    SUB_ASSIGN      reduce using rule 71 (unary_expression -> DECREMENT unary_expression .)
    LEFT_ASSIGN     reduce using rule 71 (unary_expression -> DECREMENT unary_expression .)
    RIGHT_ASSIGN    reduce using rule 71 (unary_expression -> DECREMENT unary_expression .)
    AND_ASSIGN      reduce using rule 71 (unary_expression -> DECREMENT unary_expression .)
    XOR_ASSIGN      reduce using rule 71 (unary_expression -> DECREMENT unary_expression .)
    OR_ASSIGN       reduce using rule 71 (unary_expression -> DECREMENT unary_expression .)
    MULT            reduce using rule 71 (unary_expression -> DECREMENT unary_expression .)
    DIV             reduce using rule 71 (unary_expression -> DECREMENT unary_expression .)
    MOD             reduce using rule 71 (unary_expression -> DECREMENT unary_expression .)
    ADD             reduce using rule 71 (unary_expression -> DECREMENT unary_expression .)
    MINUS           reduce using rule 71 (unary_expression -> DECREMENT unary_expression .)
    LEFT_OP         reduce using rule 71 (unary_expression -> DECREMENT unary_expression .)
    RIGHT_OP        reduce using rule 71 (unary_expression -> DECREMENT unary_expression .)
    L_OP            reduce using rule 71 (unary_expression -> DECREMENT unary_expression .)
    G_OP            reduce using rule 71 (unary_expression -> DECREMENT unary_expression .)
    LE_OP           reduce using rule 71 (unary_expression -> DECREMENT unary_expression .)
    GE_OP           reduce using rule 71 (unary_expression -> DECREMENT unary_expression .)
    EQUALS_OP       reduce using rule 71 (unary_expression -> DECREMENT unary_expression .)
    NOTEQUALS       reduce using rule 71 (unary_expression -> DECREMENT unary_expression .)
    AND_OP          reduce using rule 71 (unary_expression -> DECREMENT unary_expression .)
    AND             reduce using rule 71 (unary_expression -> DECREMENT unary_expression .)
    OR              reduce using rule 71 (unary_expression -> DECREMENT unary_expression .)
    CONDOP          reduce using rule 71 (unary_expression -> DECREMENT unary_expression .)
    OR_OP           reduce using rule 71 (unary_expression -> DECREMENT unary_expression .)
    RPAREN          reduce using rule 71 (unary_expression -> DECREMENT unary_expression .)
    COMMA           reduce using rule 71 (unary_expression -> DECREMENT unary_expression .)
    VOID            reduce using rule 71 (unary_expression -> DECREMENT unary_expression .)
    INT             reduce using rule 71 (unary_expression -> DECREMENT unary_expression .)
    CHAR            reduce using rule 71 (unary_expression -> DECREMENT unary_expression .)
    SHORT           reduce using rule 71 (unary_expression -> DECREMENT unary_expression .)
    LONG            reduce using rule 71 (unary_expression -> DECREMENT unary_expression .)
    FLOAT           reduce using rule 71 (unary_expression -> DECREMENT unary_expression .)
    DOUBLE          reduce using rule 71 (unary_expression -> DECREMENT unary_expression .)
    VARIABLE        reduce using rule 71 (unary_expression -> DECREMENT unary_expression .)
    SEMI_COLON      reduce using rule 71 (unary_expression -> DECREMENT unary_expression .)
    LPAREN          reduce using rule 71 (unary_expression -> DECREMENT unary_expression .)
    RBIG            reduce using rule 71 (unary_expression -> DECREMENT unary_expression .)
    RBRACE          reduce using rule 71 (unary_expression -> DECREMENT unary_expression .)
    COLON           reduce using rule 71 (unary_expression -> DECREMENT unary_expression .)


state 110

    (17) direct_declarator -> direct_declarator LBIG constant_expression RBIG .

    LBIG            reduce using rule 17 (direct_declarator -> direct_declarator LBIG constant_expression RBIG .)
    LPAREN          reduce using rule 17 (direct_declarator -> direct_declarator LBIG constant_expression RBIG .)
    EQUALS          reduce using rule 17 (direct_declarator -> direct_declarator LBIG constant_expression RBIG .)
    SEMI_COLON      reduce using rule 17 (direct_declarator -> direct_declarator LBIG constant_expression RBIG .)
    COMMA           reduce using rule 17 (direct_declarator -> direct_declarator LBIG constant_expression RBIG .)
    RPAREN          reduce using rule 17 (direct_declarator -> direct_declarator LBIG constant_expression RBIG .)


state 111

    (19) direct_declarator -> direct_declarator LPAREN variable_list RPAREN .

    LBIG            reduce using rule 19 (direct_declarator -> direct_declarator LPAREN variable_list RPAREN .)
    LPAREN          reduce using rule 19 (direct_declarator -> direct_declarator LPAREN variable_list RPAREN .)
    EQUALS          reduce using rule 19 (direct_declarator -> direct_declarator LPAREN variable_list RPAREN .)
    SEMI_COLON      reduce using rule 19 (direct_declarator -> direct_declarator LPAREN variable_list RPAREN .)
    COMMA           reduce using rule 19 (direct_declarator -> direct_declarator LPAREN variable_list RPAREN .)
    RPAREN          reduce using rule 19 (direct_declarator -> direct_declarator LPAREN variable_list RPAREN .)


state 112

    (22) variable_list -> variable_list COMMA . VARIABLE

    VARIABLE        shift and go to state 155


state 113

    (109) assignment_operator -> SUB_ASSIGN .

    INCREMENT       reduce using rule 109 (assignment_operator -> SUB_ASSIGN .)
    DECREMENT       reduce using rule 109 (assignment_operator -> SUB_ASSIGN .)
    SIZEOF          reduce using rule 109 (assignment_operator -> SUB_ASSIGN .)
    AND_OP          reduce using rule 109 (assignment_operator -> SUB_ASSIGN .)
    MULT            reduce using rule 109 (assignment_operator -> SUB_ASSIGN .)
    ADD             reduce using rule 109 (assignment_operator -> SUB_ASSIGN .)
    MINUS           reduce using rule 109 (assignment_operator -> SUB_ASSIGN .)
    TILDA           reduce using rule 109 (assignment_operator -> SUB_ASSIGN .)
    NOT             reduce using rule 109 (assignment_operator -> SUB_ASSIGN .)
    VARIABLE        reduce using rule 109 (assignment_operator -> SUB_ASSIGN .)
    LPAREN          reduce using rule 109 (assignment_operator -> SUB_ASSIGN .)
    HEX_INT         reduce using rule 109 (assignment_operator -> SUB_ASSIGN .)
    EXP_REAL        reduce using rule 109 (assignment_operator -> SUB_ASSIGN .)
    DOT_REAL        reduce using rule 109 (assignment_operator -> SUB_ASSIGN .)
    DEC_INT         reduce using rule 109 (assignment_operator -> SUB_ASSIGN .)


state 114

    (107) assignment_operator -> MOD_ASSIGN .

    INCREMENT       reduce using rule 107 (assignment_operator -> MOD_ASSIGN .)
    DECREMENT       reduce using rule 107 (assignment_operator -> MOD_ASSIGN .)
    SIZEOF          reduce using rule 107 (assignment_operator -> MOD_ASSIGN .)
    AND_OP          reduce using rule 107 (assignment_operator -> MOD_ASSIGN .)
    MULT            reduce using rule 107 (assignment_operator -> MOD_ASSIGN .)
    ADD             reduce using rule 107 (assignment_operator -> MOD_ASSIGN .)
    MINUS           reduce using rule 107 (assignment_operator -> MOD_ASSIGN .)
    TILDA           reduce using rule 107 (assignment_operator -> MOD_ASSIGN .)
    NOT             reduce using rule 107 (assignment_operator -> MOD_ASSIGN .)
    VARIABLE        reduce using rule 107 (assignment_operator -> MOD_ASSIGN .)
    LPAREN          reduce using rule 107 (assignment_operator -> MOD_ASSIGN .)
    HEX_INT         reduce using rule 107 (assignment_operator -> MOD_ASSIGN .)
    EXP_REAL        reduce using rule 107 (assignment_operator -> MOD_ASSIGN .)
    DOT_REAL        reduce using rule 107 (assignment_operator -> MOD_ASSIGN .)
    DEC_INT         reduce using rule 107 (assignment_operator -> MOD_ASSIGN .)


state 115

    (113) assignment_operator -> XOR_ASSIGN .

    INCREMENT       reduce using rule 113 (assignment_operator -> XOR_ASSIGN .)
    DECREMENT       reduce using rule 113 (assignment_operator -> XOR_ASSIGN .)
    SIZEOF          reduce using rule 113 (assignment_operator -> XOR_ASSIGN .)
    AND_OP          reduce using rule 113 (assignment_operator -> XOR_ASSIGN .)
    MULT            reduce using rule 113 (assignment_operator -> XOR_ASSIGN .)
    ADD             reduce using rule 113 (assignment_operator -> XOR_ASSIGN .)
    MINUS           reduce using rule 113 (assignment_operator -> XOR_ASSIGN .)
    TILDA           reduce using rule 113 (assignment_operator -> XOR_ASSIGN .)
    NOT             reduce using rule 113 (assignment_operator -> XOR_ASSIGN .)
    VARIABLE        reduce using rule 113 (assignment_operator -> XOR_ASSIGN .)
    LPAREN          reduce using rule 113 (assignment_operator -> XOR_ASSIGN .)
    HEX_INT         reduce using rule 113 (assignment_operator -> XOR_ASSIGN .)
    EXP_REAL        reduce using rule 113 (assignment_operator -> XOR_ASSIGN .)
    DOT_REAL        reduce using rule 113 (assignment_operator -> XOR_ASSIGN .)
    DEC_INT         reduce using rule 113 (assignment_operator -> XOR_ASSIGN .)


state 116

    (114) assignment_operator -> OR_ASSIGN .

    INCREMENT       reduce using rule 114 (assignment_operator -> OR_ASSIGN .)
    DECREMENT       reduce using rule 114 (assignment_operator -> OR_ASSIGN .)
    SIZEOF          reduce using rule 114 (assignment_operator -> OR_ASSIGN .)
    AND_OP          reduce using rule 114 (assignment_operator -> OR_ASSIGN .)
    MULT            reduce using rule 114 (assignment_operator -> OR_ASSIGN .)
    ADD             reduce using rule 114 (assignment_operator -> OR_ASSIGN .)
    MINUS           reduce using rule 114 (assignment_operator -> OR_ASSIGN .)
    TILDA           reduce using rule 114 (assignment_operator -> OR_ASSIGN .)
    NOT             reduce using rule 114 (assignment_operator -> OR_ASSIGN .)
    VARIABLE        reduce using rule 114 (assignment_operator -> OR_ASSIGN .)
    LPAREN          reduce using rule 114 (assignment_operator -> OR_ASSIGN .)
    HEX_INT         reduce using rule 114 (assignment_operator -> OR_ASSIGN .)
    EXP_REAL        reduce using rule 114 (assignment_operator -> OR_ASSIGN .)
    DOT_REAL        reduce using rule 114 (assignment_operator -> OR_ASSIGN .)
    DEC_INT         reduce using rule 114 (assignment_operator -> OR_ASSIGN .)


state 117

    (104) assignment_operator -> EQUALS .

    INCREMENT       reduce using rule 104 (assignment_operator -> EQUALS .)
    DECREMENT       reduce using rule 104 (assignment_operator -> EQUALS .)
    SIZEOF          reduce using rule 104 (assignment_operator -> EQUALS .)
    AND_OP          reduce using rule 104 (assignment_operator -> EQUALS .)
    MULT            reduce using rule 104 (assignment_operator -> EQUALS .)
    ADD             reduce using rule 104 (assignment_operator -> EQUALS .)
    MINUS           reduce using rule 104 (assignment_operator -> EQUALS .)
    TILDA           reduce using rule 104 (assignment_operator -> EQUALS .)
    NOT             reduce using rule 104 (assignment_operator -> EQUALS .)
    VARIABLE        reduce using rule 104 (assignment_operator -> EQUALS .)
    LPAREN          reduce using rule 104 (assignment_operator -> EQUALS .)
    HEX_INT         reduce using rule 104 (assignment_operator -> EQUALS .)
    EXP_REAL        reduce using rule 104 (assignment_operator -> EQUALS .)
    DOT_REAL        reduce using rule 104 (assignment_operator -> EQUALS .)
    DEC_INT         reduce using rule 104 (assignment_operator -> EQUALS .)


state 118

    (112) assignment_operator -> AND_ASSIGN .

    INCREMENT       reduce using rule 112 (assignment_operator -> AND_ASSIGN .)
    DECREMENT       reduce using rule 112 (assignment_operator -> AND_ASSIGN .)
    SIZEOF          reduce using rule 112 (assignment_operator -> AND_ASSIGN .)
    AND_OP          reduce using rule 112 (assignment_operator -> AND_ASSIGN .)
    MULT            reduce using rule 112 (assignment_operator -> AND_ASSIGN .)
    ADD             reduce using rule 112 (assignment_operator -> AND_ASSIGN .)
    MINUS           reduce using rule 112 (assignment_operator -> AND_ASSIGN .)
    TILDA           reduce using rule 112 (assignment_operator -> AND_ASSIGN .)
    NOT             reduce using rule 112 (assignment_operator -> AND_ASSIGN .)
    VARIABLE        reduce using rule 112 (assignment_operator -> AND_ASSIGN .)
    LPAREN          reduce using rule 112 (assignment_operator -> AND_ASSIGN .)
    HEX_INT         reduce using rule 112 (assignment_operator -> AND_ASSIGN .)
    EXP_REAL        reduce using rule 112 (assignment_operator -> AND_ASSIGN .)
    DOT_REAL        reduce using rule 112 (assignment_operator -> AND_ASSIGN .)
    DEC_INT         reduce using rule 112 (assignment_operator -> AND_ASSIGN .)


state 119

    (105) assignment_operator -> MUL_ASSIGN .

    INCREMENT       reduce using rule 105 (assignment_operator -> MUL_ASSIGN .)
    DECREMENT       reduce using rule 105 (assignment_operator -> MUL_ASSIGN .)
    SIZEOF          reduce using rule 105 (assignment_operator -> MUL_ASSIGN .)
    AND_OP          reduce using rule 105 (assignment_operator -> MUL_ASSIGN .)
    MULT            reduce using rule 105 (assignment_operator -> MUL_ASSIGN .)
    ADD             reduce using rule 105 (assignment_operator -> MUL_ASSIGN .)
    MINUS           reduce using rule 105 (assignment_operator -> MUL_ASSIGN .)
    TILDA           reduce using rule 105 (assignment_operator -> MUL_ASSIGN .)
    NOT             reduce using rule 105 (assignment_operator -> MUL_ASSIGN .)
    VARIABLE        reduce using rule 105 (assignment_operator -> MUL_ASSIGN .)
    LPAREN          reduce using rule 105 (assignment_operator -> MUL_ASSIGN .)
    HEX_INT         reduce using rule 105 (assignment_operator -> MUL_ASSIGN .)
    EXP_REAL        reduce using rule 105 (assignment_operator -> MUL_ASSIGN .)
    DOT_REAL        reduce using rule 105 (assignment_operator -> MUL_ASSIGN .)
    DEC_INT         reduce using rule 105 (assignment_operator -> MUL_ASSIGN .)


state 120

    (106) assignment_operator -> DIV_ASSIGN .

    INCREMENT       reduce using rule 106 (assignment_operator -> DIV_ASSIGN .)
    DECREMENT       reduce using rule 106 (assignment_operator -> DIV_ASSIGN .)
    SIZEOF          reduce using rule 106 (assignment_operator -> DIV_ASSIGN .)
    AND_OP          reduce using rule 106 (assignment_operator -> DIV_ASSIGN .)
    MULT            reduce using rule 106 (assignment_operator -> DIV_ASSIGN .)
    ADD             reduce using rule 106 (assignment_operator -> DIV_ASSIGN .)
    MINUS           reduce using rule 106 (assignment_operator -> DIV_ASSIGN .)
    TILDA           reduce using rule 106 (assignment_operator -> DIV_ASSIGN .)
    NOT             reduce using rule 106 (assignment_operator -> DIV_ASSIGN .)
    VARIABLE        reduce using rule 106 (assignment_operator -> DIV_ASSIGN .)
    LPAREN          reduce using rule 106 (assignment_operator -> DIV_ASSIGN .)
    HEX_INT         reduce using rule 106 (assignment_operator -> DIV_ASSIGN .)
    EXP_REAL        reduce using rule 106 (assignment_operator -> DIV_ASSIGN .)
    DOT_REAL        reduce using rule 106 (assignment_operator -> DIV_ASSIGN .)
    DEC_INT         reduce using rule 106 (assignment_operator -> DIV_ASSIGN .)


state 121

    (110) assignment_operator -> LEFT_ASSIGN .

    INCREMENT       reduce using rule 110 (assignment_operator -> LEFT_ASSIGN .)
    DECREMENT       reduce using rule 110 (assignment_operator -> LEFT_ASSIGN .)
    SIZEOF          reduce using rule 110 (assignment_operator -> LEFT_ASSIGN .)
    AND_OP          reduce using rule 110 (assignment_operator -> LEFT_ASSIGN .)
    MULT            reduce using rule 110 (assignment_operator -> LEFT_ASSIGN .)
    ADD             reduce using rule 110 (assignment_operator -> LEFT_ASSIGN .)
    MINUS           reduce using rule 110 (assignment_operator -> LEFT_ASSIGN .)
    TILDA           reduce using rule 110 (assignment_operator -> LEFT_ASSIGN .)
    NOT             reduce using rule 110 (assignment_operator -> LEFT_ASSIGN .)
    VARIABLE        reduce using rule 110 (assignment_operator -> LEFT_ASSIGN .)
    LPAREN          reduce using rule 110 (assignment_operator -> LEFT_ASSIGN .)
    HEX_INT         reduce using rule 110 (assignment_operator -> LEFT_ASSIGN .)
    EXP_REAL        reduce using rule 110 (assignment_operator -> LEFT_ASSIGN .)
    DOT_REAL        reduce using rule 110 (assignment_operator -> LEFT_ASSIGN .)
    DEC_INT         reduce using rule 110 (assignment_operator -> LEFT_ASSIGN .)


state 122

    (108) assignment_operator -> ADD_ASSIGN .

    INCREMENT       reduce using rule 108 (assignment_operator -> ADD_ASSIGN .)
    DECREMENT       reduce using rule 108 (assignment_operator -> ADD_ASSIGN .)
    SIZEOF          reduce using rule 108 (assignment_operator -> ADD_ASSIGN .)
    AND_OP          reduce using rule 108 (assignment_operator -> ADD_ASSIGN .)
    MULT            reduce using rule 108 (assignment_operator -> ADD_ASSIGN .)
    ADD             reduce using rule 108 (assignment_operator -> ADD_ASSIGN .)
    MINUS           reduce using rule 108 (assignment_operator -> ADD_ASSIGN .)
    TILDA           reduce using rule 108 (assignment_operator -> ADD_ASSIGN .)
    NOT             reduce using rule 108 (assignment_operator -> ADD_ASSIGN .)
    VARIABLE        reduce using rule 108 (assignment_operator -> ADD_ASSIGN .)
    LPAREN          reduce using rule 108 (assignment_operator -> ADD_ASSIGN .)
    HEX_INT         reduce using rule 108 (assignment_operator -> ADD_ASSIGN .)
    EXP_REAL        reduce using rule 108 (assignment_operator -> ADD_ASSIGN .)
    DOT_REAL        reduce using rule 108 (assignment_operator -> ADD_ASSIGN .)
    DEC_INT         reduce using rule 108 (assignment_operator -> ADD_ASSIGN .)


state 123

    (111) assignment_operator -> RIGHT_ASSIGN .

    INCREMENT       reduce using rule 111 (assignment_operator -> RIGHT_ASSIGN .)
    DECREMENT       reduce using rule 111 (assignment_operator -> RIGHT_ASSIGN .)
    SIZEOF          reduce using rule 111 (assignment_operator -> RIGHT_ASSIGN .)
    AND_OP          reduce using rule 111 (assignment_operator -> RIGHT_ASSIGN .)
    MULT            reduce using rule 111 (assignment_operator -> RIGHT_ASSIGN .)
    ADD             reduce using rule 111 (assignment_operator -> RIGHT_ASSIGN .)
    MINUS           reduce using rule 111 (assignment_operator -> RIGHT_ASSIGN .)
    TILDA           reduce using rule 111 (assignment_operator -> RIGHT_ASSIGN .)
    NOT             reduce using rule 111 (assignment_operator -> RIGHT_ASSIGN .)
    VARIABLE        reduce using rule 111 (assignment_operator -> RIGHT_ASSIGN .)
    LPAREN          reduce using rule 111 (assignment_operator -> RIGHT_ASSIGN .)
    HEX_INT         reduce using rule 111 (assignment_operator -> RIGHT_ASSIGN .)
    EXP_REAL        reduce using rule 111 (assignment_operator -> RIGHT_ASSIGN .)
    DOT_REAL        reduce using rule 111 (assignment_operator -> RIGHT_ASSIGN .)
    DEC_INT         reduce using rule 111 (assignment_operator -> RIGHT_ASSIGN .)


state 124

    (103) assignment_expression -> unary_expression assignment_operator . assignment_expression
    (102) assignment_expression -> . conditional_expression
    (103) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (37) conditional_expression -> . logical_or_expression
    (38) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREMENT unary_expression
    (71) unary_expression -> . DECREMENT unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (73) unary_expression -> . SIZEOF unary_expression
    (74) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (39) logical_or_expression -> . logical_and_expression
    (40) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (84) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LBIG expression RBIG
    (93) postfix_expression -> . postfix_expression LPAREN RPAREN
    (94) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (75) unary_operator -> . AND_OP
    (76) unary_operator -> . MULT
    (77) unary_operator -> . ADD
    (78) unary_operator -> . MINUS
    (79) unary_operator -> . TILDA
    (80) unary_operator -> . NOT
    (41) logical_and_expression -> . inclusive_or_expression
    (42) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (85) primary_expression -> . VARIABLE
    (86) primary_expression -> . constant
    (87) primary_expression -> . LPAREN expression RPAREN
    (43) inclusive_or_expression -> . exclusive_or_expression
    (44) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (88) constant -> . HEX_INT
    (89) constant -> . EXP_REAL
    (90) constant -> . DOT_REAL
    (91) constant -> . DEC_INT
    (45) exclusive_or_expression -> . and_expression
    (46) exclusive_or_expression -> . exclusive_or_expression AND and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression AND_OP equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQUALS_OP relational_expression
    (51) equality_expression -> . equality_expression NOTEQUALS relational_expression
    (52) relational_expression -> . shift_expression
    (53) relational_expression -> . relational_expression L_OP shift_expression
    (54) relational_expression -> . relational_expression G_OP shift_expression
    (55) relational_expression -> . relational_expression LE_OP shift_expression
    (56) relational_expression -> . relational_expression GE_OP shift_expression
    (57) shift_expression -> . additive_expression
    (58) shift_expression -> . shift_expression LEFT_OP additive_expression
    (59) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (60) additive_expression -> . multiplicative_expression
    (61) additive_expression -> . additive_expression ADD multiplicative_expression
    (62) additive_expression -> . additive_expression MINUS multiplicative_expression
    (63) multiplicative_expression -> . cast_expression
    (64) multiplicative_expression -> . multiplicative_expression MULT cast_expression
    (65) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (66) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (67) cast_expression -> . unary_expression
    (68) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INCREMENT       shift and go to state 43
    DECREMENT       shift and go to state 64
    SIZEOF          shift and go to state 47
    AND_OP          shift and go to state 49
    MULT            shift and go to state 57
    ADD             shift and go to state 59
    MINUS           shift and go to state 35
    TILDA           shift and go to state 41
    NOT             shift and go to state 63
    VARIABLE        shift and go to state 53
    LPAREN          shift and go to state 75
    HEX_INT         shift and go to state 58
    EXP_REAL        shift and go to state 39
    DOT_REAL        shift and go to state 60
    DEC_INT         shift and go to state 40

    constant                       shift and go to state 32
    unary_expression               shift and go to state 72
    exclusive_or_expression        shift and go to state 33
    additive_expression            shift and go to state 50
    inclusive_or_expression        shift and go to state 38
    postfix_expression             shift and go to state 34
    and_expression                 shift and go to state 36
    relational_expression          shift and go to state 42
    cast_expression                shift and go to state 44
    logical_or_expression          shift and go to state 45
    unary_operator                 shift and go to state 61
    assignment_expression          shift and go to state 156
    multiplicative_expression      shift and go to state 48
    primary_expression             shift and go to state 51
    logical_and_expression         shift and go to state 54
    shift_expression               shift and go to state 55
    equality_expression            shift and go to state 56
    conditional_expression         shift and go to state 77

state 125

    (12) initializer_list -> initializer .

    RBRACE          reduce using rule 12 (initializer_list -> initializer .)
    COMMA           reduce using rule 12 (initializer_list -> initializer .)


state 126

    (10) initializer -> LBRACE initializer_list . RBRACE
    (11) initializer -> LBRACE initializer_list . COMMA RBRACE
    (13) initializer_list -> initializer_list . COMMA initializer

    RBRACE          shift and go to state 158
    COMMA           shift and go to state 157


state 127

    (46) exclusive_or_expression -> exclusive_or_expression AND and_expression .
    (48) and_expression -> and_expression . AND_OP equality_expression

  ! shift/reduce conflict for AND_OP resolved as shift
    AND             reduce using rule 46 (exclusive_or_expression -> exclusive_or_expression AND and_expression .)
    OR              reduce using rule 46 (exclusive_or_expression -> exclusive_or_expression AND and_expression .)
    CONDOP          reduce using rule 46 (exclusive_or_expression -> exclusive_or_expression AND and_expression .)
    OR_OP           reduce using rule 46 (exclusive_or_expression -> exclusive_or_expression AND and_expression .)
    RBIG            reduce using rule 46 (exclusive_or_expression -> exclusive_or_expression AND and_expression .)
    COMMA           reduce using rule 46 (exclusive_or_expression -> exclusive_or_expression AND and_expression .)
    RPAREN          reduce using rule 46 (exclusive_or_expression -> exclusive_or_expression AND and_expression .)
    VOID            reduce using rule 46 (exclusive_or_expression -> exclusive_or_expression AND and_expression .)
    INT             reduce using rule 46 (exclusive_or_expression -> exclusive_or_expression AND and_expression .)
    CHAR            reduce using rule 46 (exclusive_or_expression -> exclusive_or_expression AND and_expression .)
    SHORT           reduce using rule 46 (exclusive_or_expression -> exclusive_or_expression AND and_expression .)
    LONG            reduce using rule 46 (exclusive_or_expression -> exclusive_or_expression AND and_expression .)
    FLOAT           reduce using rule 46 (exclusive_or_expression -> exclusive_or_expression AND and_expression .)
    DOUBLE          reduce using rule 46 (exclusive_or_expression -> exclusive_or_expression AND and_expression .)
    VARIABLE        reduce using rule 46 (exclusive_or_expression -> exclusive_or_expression AND and_expression .)
    SEMI_COLON      reduce using rule 46 (exclusive_or_expression -> exclusive_or_expression AND and_expression .)
    LPAREN          reduce using rule 46 (exclusive_or_expression -> exclusive_or_expression AND and_expression .)
    RBRACE          reduce using rule 46 (exclusive_or_expression -> exclusive_or_expression AND and_expression .)
    COLON           reduce using rule 46 (exclusive_or_expression -> exclusive_or_expression AND and_expression .)
    AND_OP          shift and go to state 81

  ! AND_OP          [ reduce using rule 46 (exclusive_or_expression -> exclusive_or_expression AND and_expression .) ]


state 128

    (92) postfix_expression -> postfix_expression LBIG expression . RBIG
    (101) expression -> expression . COMMA assignment_expression

    RBIG            shift and go to state 159
    COMMA           shift and go to state 149


state 129

    (93) postfix_expression -> postfix_expression LPAREN RPAREN .

    LBIG            reduce using rule 93 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LPAREN          reduce using rule 93 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MULT            reduce using rule 93 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIV             reduce using rule 93 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MOD             reduce using rule 93 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ADD             reduce using rule 93 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUS           reduce using rule 93 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LEFT_OP         reduce using rule 93 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RIGHT_OP        reduce using rule 93 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    L_OP            reduce using rule 93 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    G_OP            reduce using rule 93 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LE_OP           reduce using rule 93 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GE_OP           reduce using rule 93 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQUALS_OP       reduce using rule 93 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    NOTEQUALS       reduce using rule 93 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    AND_OP          reduce using rule 93 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    AND             reduce using rule 93 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    OR              reduce using rule 93 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    CONDOP          reduce using rule 93 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    OR_OP           reduce using rule 93 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COMMA           reduce using rule 93 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    VOID            reduce using rule 93 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    INT             reduce using rule 93 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    CHAR            reduce using rule 93 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    SHORT           reduce using rule 93 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LONG            reduce using rule 93 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    FLOAT           reduce using rule 93 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DOUBLE          reduce using rule 93 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    VARIABLE        reduce using rule 93 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    SEMI_COLON      reduce using rule 93 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RPAREN          reduce using rule 93 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RBIG            reduce using rule 93 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RBRACE          reduce using rule 93 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COLON           reduce using rule 93 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQUALS          reduce using rule 93 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MUL_ASSIGN      reduce using rule 93 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIV_ASSIGN      reduce using rule 93 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MOD_ASSIGN      reduce using rule 93 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ADD_ASSIGN      reduce using rule 93 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    SUB_ASSIGN      reduce using rule 93 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LEFT_ASSIGN     reduce using rule 93 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RIGHT_ASSIGN    reduce using rule 93 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    AND_ASSIGN      reduce using rule 93 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    XOR_ASSIGN      reduce using rule 93 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    OR_ASSIGN       reduce using rule 93 (postfix_expression -> postfix_expression LPAREN RPAREN .)


state 130

    (98) argument_expression_list -> assignment_expression .

    RPAREN          reduce using rule 98 (argument_expression_list -> assignment_expression .)
    COMMA           reduce using rule 98 (argument_expression_list -> assignment_expression .)


state 131

    (94) postfix_expression -> postfix_expression LPAREN argument_expression_list . RPAREN
    (99) argument_expression_list -> argument_expression_list . COMMA assignment_expression

    RPAREN          shift and go to state 160
    COMMA           shift and go to state 161


state 132

    (48) and_expression -> and_expression AND_OP equality_expression .
    (50) equality_expression -> equality_expression . EQUALS_OP relational_expression
    (51) equality_expression -> equality_expression . NOTEQUALS relational_expression

    AND_OP          reduce using rule 48 (and_expression -> and_expression AND_OP equality_expression .)
    AND             reduce using rule 48 (and_expression -> and_expression AND_OP equality_expression .)
    OR              reduce using rule 48 (and_expression -> and_expression AND_OP equality_expression .)
    CONDOP          reduce using rule 48 (and_expression -> and_expression AND_OP equality_expression .)
    OR_OP           reduce using rule 48 (and_expression -> and_expression AND_OP equality_expression .)
    RPAREN          reduce using rule 48 (and_expression -> and_expression AND_OP equality_expression .)
    COMMA           reduce using rule 48 (and_expression -> and_expression AND_OP equality_expression .)
    VOID            reduce using rule 48 (and_expression -> and_expression AND_OP equality_expression .)
    INT             reduce using rule 48 (and_expression -> and_expression AND_OP equality_expression .)
    CHAR            reduce using rule 48 (and_expression -> and_expression AND_OP equality_expression .)
    SHORT           reduce using rule 48 (and_expression -> and_expression AND_OP equality_expression .)
    LONG            reduce using rule 48 (and_expression -> and_expression AND_OP equality_expression .)
    FLOAT           reduce using rule 48 (and_expression -> and_expression AND_OP equality_expression .)
    DOUBLE          reduce using rule 48 (and_expression -> and_expression AND_OP equality_expression .)
    VARIABLE        reduce using rule 48 (and_expression -> and_expression AND_OP equality_expression .)
    SEMI_COLON      reduce using rule 48 (and_expression -> and_expression AND_OP equality_expression .)
    LPAREN          reduce using rule 48 (and_expression -> and_expression AND_OP equality_expression .)
    RBIG            reduce using rule 48 (and_expression -> and_expression AND_OP equality_expression .)
    RBRACE          reduce using rule 48 (and_expression -> and_expression AND_OP equality_expression .)
    COLON           reduce using rule 48 (and_expression -> and_expression AND_OP equality_expression .)
    EQUALS_OP       shift and go to state 107
    NOTEQUALS       shift and go to state 106


state 133

    (44) inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .
    (46) exclusive_or_expression -> exclusive_or_expression . AND and_expression

    OR              reduce using rule 44 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    AND_OP          reduce using rule 44 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    CONDOP          reduce using rule 44 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    OR_OP           reduce using rule 44 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    RBRACE          reduce using rule 44 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    COMMA           reduce using rule 44 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    RPAREN          reduce using rule 44 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    RBIG            reduce using rule 44 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    COLON           reduce using rule 44 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    VOID            reduce using rule 44 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    INT             reduce using rule 44 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    CHAR            reduce using rule 44 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    SHORT           reduce using rule 44 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    LONG            reduce using rule 44 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    FLOAT           reduce using rule 44 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    DOUBLE          reduce using rule 44 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    VARIABLE        reduce using rule 44 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    SEMI_COLON      reduce using rule 44 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    LPAREN          reduce using rule 44 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    AND             shift and go to state 78


state 134

    (55) relational_expression -> relational_expression LE_OP shift_expression .
    (58) shift_expression -> shift_expression . LEFT_OP additive_expression
    (59) shift_expression -> shift_expression . RIGHT_OP additive_expression

    L_OP            reduce using rule 55 (relational_expression -> relational_expression LE_OP shift_expression .)
    G_OP            reduce using rule 55 (relational_expression -> relational_expression LE_OP shift_expression .)
    LE_OP           reduce using rule 55 (relational_expression -> relational_expression LE_OP shift_expression .)
    GE_OP           reduce using rule 55 (relational_expression -> relational_expression LE_OP shift_expression .)
    EQUALS_OP       reduce using rule 55 (relational_expression -> relational_expression LE_OP shift_expression .)
    NOTEQUALS       reduce using rule 55 (relational_expression -> relational_expression LE_OP shift_expression .)
    AND_OP          reduce using rule 55 (relational_expression -> relational_expression LE_OP shift_expression .)
    AND             reduce using rule 55 (relational_expression -> relational_expression LE_OP shift_expression .)
    OR              reduce using rule 55 (relational_expression -> relational_expression LE_OP shift_expression .)
    CONDOP          reduce using rule 55 (relational_expression -> relational_expression LE_OP shift_expression .)
    OR_OP           reduce using rule 55 (relational_expression -> relational_expression LE_OP shift_expression .)
    RPAREN          reduce using rule 55 (relational_expression -> relational_expression LE_OP shift_expression .)
    COMMA           reduce using rule 55 (relational_expression -> relational_expression LE_OP shift_expression .)
    RBIG            reduce using rule 55 (relational_expression -> relational_expression LE_OP shift_expression .)
    COLON           reduce using rule 55 (relational_expression -> relational_expression LE_OP shift_expression .)
    VOID            reduce using rule 55 (relational_expression -> relational_expression LE_OP shift_expression .)
    INT             reduce using rule 55 (relational_expression -> relational_expression LE_OP shift_expression .)
    CHAR            reduce using rule 55 (relational_expression -> relational_expression LE_OP shift_expression .)
    SHORT           reduce using rule 55 (relational_expression -> relational_expression LE_OP shift_expression .)
    LONG            reduce using rule 55 (relational_expression -> relational_expression LE_OP shift_expression .)
    FLOAT           reduce using rule 55 (relational_expression -> relational_expression LE_OP shift_expression .)
    DOUBLE          reduce using rule 55 (relational_expression -> relational_expression LE_OP shift_expression .)
    VARIABLE        reduce using rule 55 (relational_expression -> relational_expression LE_OP shift_expression .)
    SEMI_COLON      reduce using rule 55 (relational_expression -> relational_expression LE_OP shift_expression .)
    LPAREN          reduce using rule 55 (relational_expression -> relational_expression LE_OP shift_expression .)
    RBRACE          reduce using rule 55 (relational_expression -> relational_expression LE_OP shift_expression .)
    LEFT_OP         shift and go to state 104
    RIGHT_OP        shift and go to state 105


state 135

    (54) relational_expression -> relational_expression G_OP shift_expression .
    (58) shift_expression -> shift_expression . LEFT_OP additive_expression
    (59) shift_expression -> shift_expression . RIGHT_OP additive_expression

    L_OP            reduce using rule 54 (relational_expression -> relational_expression G_OP shift_expression .)
    G_OP            reduce using rule 54 (relational_expression -> relational_expression G_OP shift_expression .)
    LE_OP           reduce using rule 54 (relational_expression -> relational_expression G_OP shift_expression .)
    GE_OP           reduce using rule 54 (relational_expression -> relational_expression G_OP shift_expression .)
    EQUALS_OP       reduce using rule 54 (relational_expression -> relational_expression G_OP shift_expression .)
    NOTEQUALS       reduce using rule 54 (relational_expression -> relational_expression G_OP shift_expression .)
    AND_OP          reduce using rule 54 (relational_expression -> relational_expression G_OP shift_expression .)
    AND             reduce using rule 54 (relational_expression -> relational_expression G_OP shift_expression .)
    OR              reduce using rule 54 (relational_expression -> relational_expression G_OP shift_expression .)
    CONDOP          reduce using rule 54 (relational_expression -> relational_expression G_OP shift_expression .)
    OR_OP           reduce using rule 54 (relational_expression -> relational_expression G_OP shift_expression .)
    RPAREN          reduce using rule 54 (relational_expression -> relational_expression G_OP shift_expression .)
    COMMA           reduce using rule 54 (relational_expression -> relational_expression G_OP shift_expression .)
    RBIG            reduce using rule 54 (relational_expression -> relational_expression G_OP shift_expression .)
    COLON           reduce using rule 54 (relational_expression -> relational_expression G_OP shift_expression .)
    VOID            reduce using rule 54 (relational_expression -> relational_expression G_OP shift_expression .)
    INT             reduce using rule 54 (relational_expression -> relational_expression G_OP shift_expression .)
    CHAR            reduce using rule 54 (relational_expression -> relational_expression G_OP shift_expression .)
    SHORT           reduce using rule 54 (relational_expression -> relational_expression G_OP shift_expression .)
    LONG            reduce using rule 54 (relational_expression -> relational_expression G_OP shift_expression .)
    FLOAT           reduce using rule 54 (relational_expression -> relational_expression G_OP shift_expression .)
    DOUBLE          reduce using rule 54 (relational_expression -> relational_expression G_OP shift_expression .)
    VARIABLE        reduce using rule 54 (relational_expression -> relational_expression G_OP shift_expression .)
    SEMI_COLON      reduce using rule 54 (relational_expression -> relational_expression G_OP shift_expression .)
    LPAREN          reduce using rule 54 (relational_expression -> relational_expression G_OP shift_expression .)
    RBRACE          reduce using rule 54 (relational_expression -> relational_expression G_OP shift_expression .)
    LEFT_OP         shift and go to state 104
    RIGHT_OP        shift and go to state 105


state 136

    (53) relational_expression -> relational_expression L_OP shift_expression .
    (58) shift_expression -> shift_expression . LEFT_OP additive_expression
    (59) shift_expression -> shift_expression . RIGHT_OP additive_expression

    L_OP            reduce using rule 53 (relational_expression -> relational_expression L_OP shift_expression .)
    G_OP            reduce using rule 53 (relational_expression -> relational_expression L_OP shift_expression .)
    LE_OP           reduce using rule 53 (relational_expression -> relational_expression L_OP shift_expression .)
    GE_OP           reduce using rule 53 (relational_expression -> relational_expression L_OP shift_expression .)
    EQUALS_OP       reduce using rule 53 (relational_expression -> relational_expression L_OP shift_expression .)
    NOTEQUALS       reduce using rule 53 (relational_expression -> relational_expression L_OP shift_expression .)
    AND_OP          reduce using rule 53 (relational_expression -> relational_expression L_OP shift_expression .)
    AND             reduce using rule 53 (relational_expression -> relational_expression L_OP shift_expression .)
    OR              reduce using rule 53 (relational_expression -> relational_expression L_OP shift_expression .)
    CONDOP          reduce using rule 53 (relational_expression -> relational_expression L_OP shift_expression .)
    OR_OP           reduce using rule 53 (relational_expression -> relational_expression L_OP shift_expression .)
    RPAREN          reduce using rule 53 (relational_expression -> relational_expression L_OP shift_expression .)
    COMMA           reduce using rule 53 (relational_expression -> relational_expression L_OP shift_expression .)
    RBIG            reduce using rule 53 (relational_expression -> relational_expression L_OP shift_expression .)
    COLON           reduce using rule 53 (relational_expression -> relational_expression L_OP shift_expression .)
    VOID            reduce using rule 53 (relational_expression -> relational_expression L_OP shift_expression .)
    INT             reduce using rule 53 (relational_expression -> relational_expression L_OP shift_expression .)
    CHAR            reduce using rule 53 (relational_expression -> relational_expression L_OP shift_expression .)
    SHORT           reduce using rule 53 (relational_expression -> relational_expression L_OP shift_expression .)
    LONG            reduce using rule 53 (relational_expression -> relational_expression L_OP shift_expression .)
    FLOAT           reduce using rule 53 (relational_expression -> relational_expression L_OP shift_expression .)
    DOUBLE          reduce using rule 53 (relational_expression -> relational_expression L_OP shift_expression .)
    VARIABLE        reduce using rule 53 (relational_expression -> relational_expression L_OP shift_expression .)
    SEMI_COLON      reduce using rule 53 (relational_expression -> relational_expression L_OP shift_expression .)
    LPAREN          reduce using rule 53 (relational_expression -> relational_expression L_OP shift_expression .)
    RBRACE          reduce using rule 53 (relational_expression -> relational_expression L_OP shift_expression .)
    LEFT_OP         shift and go to state 104
    RIGHT_OP        shift and go to state 105


state 137

    (56) relational_expression -> relational_expression GE_OP shift_expression .
    (58) shift_expression -> shift_expression . LEFT_OP additive_expression
    (59) shift_expression -> shift_expression . RIGHT_OP additive_expression

    L_OP            reduce using rule 56 (relational_expression -> relational_expression GE_OP shift_expression .)
    G_OP            reduce using rule 56 (relational_expression -> relational_expression GE_OP shift_expression .)
    LE_OP           reduce using rule 56 (relational_expression -> relational_expression GE_OP shift_expression .)
    GE_OP           reduce using rule 56 (relational_expression -> relational_expression GE_OP shift_expression .)
    EQUALS_OP       reduce using rule 56 (relational_expression -> relational_expression GE_OP shift_expression .)
    NOTEQUALS       reduce using rule 56 (relational_expression -> relational_expression GE_OP shift_expression .)
    AND_OP          reduce using rule 56 (relational_expression -> relational_expression GE_OP shift_expression .)
    AND             reduce using rule 56 (relational_expression -> relational_expression GE_OP shift_expression .)
    OR              reduce using rule 56 (relational_expression -> relational_expression GE_OP shift_expression .)
    CONDOP          reduce using rule 56 (relational_expression -> relational_expression GE_OP shift_expression .)
    OR_OP           reduce using rule 56 (relational_expression -> relational_expression GE_OP shift_expression .)
    RPAREN          reduce using rule 56 (relational_expression -> relational_expression GE_OP shift_expression .)
    COMMA           reduce using rule 56 (relational_expression -> relational_expression GE_OP shift_expression .)
    RBIG            reduce using rule 56 (relational_expression -> relational_expression GE_OP shift_expression .)
    COLON           reduce using rule 56 (relational_expression -> relational_expression GE_OP shift_expression .)
    VOID            reduce using rule 56 (relational_expression -> relational_expression GE_OP shift_expression .)
    INT             reduce using rule 56 (relational_expression -> relational_expression GE_OP shift_expression .)
    CHAR            reduce using rule 56 (relational_expression -> relational_expression GE_OP shift_expression .)
    SHORT           reduce using rule 56 (relational_expression -> relational_expression GE_OP shift_expression .)
    LONG            reduce using rule 56 (relational_expression -> relational_expression GE_OP shift_expression .)
    FLOAT           reduce using rule 56 (relational_expression -> relational_expression GE_OP shift_expression .)
    DOUBLE          reduce using rule 56 (relational_expression -> relational_expression GE_OP shift_expression .)
    VARIABLE        reduce using rule 56 (relational_expression -> relational_expression GE_OP shift_expression .)
    SEMI_COLON      reduce using rule 56 (relational_expression -> relational_expression GE_OP shift_expression .)
    LPAREN          reduce using rule 56 (relational_expression -> relational_expression GE_OP shift_expression .)
    RBRACE          reduce using rule 56 (relational_expression -> relational_expression GE_OP shift_expression .)
    LEFT_OP         shift and go to state 104
    RIGHT_OP        shift and go to state 105


state 138

    (38) conditional_expression -> logical_or_expression CONDOP expression . COLON conditional_expression
    (101) expression -> expression . COMMA assignment_expression

    COLON           shift and go to state 162
    COMMA           shift and go to state 149


state 139

    (40) logical_or_expression -> logical_or_expression OR_OP logical_and_expression .
    (42) logical_and_expression -> logical_and_expression . AND_OP inclusive_or_expression

    CONDOP          reduce using rule 40 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    OR_OP           reduce using rule 40 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    RPAREN          reduce using rule 40 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    COMMA           reduce using rule 40 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    RBIG            reduce using rule 40 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    COLON           reduce using rule 40 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    SEMI_COLON      reduce using rule 40 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    RBRACE          reduce using rule 40 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    VOID            reduce using rule 40 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    INT             reduce using rule 40 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    CHAR            reduce using rule 40 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    SHORT           reduce using rule 40 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    LONG            reduce using rule 40 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    FLOAT           reduce using rule 40 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    DOUBLE          reduce using rule 40 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    VARIABLE        reduce using rule 40 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    LPAREN          reduce using rule 40 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    AND_OP          shift and go to state 103


state 140

    (74) unary_expression -> SIZEOF LPAREN type_name . RPAREN

    RPAREN          shift and go to state 163


state 141

    (65) multiplicative_expression -> multiplicative_expression DIV cast_expression .

    MULT            reduce using rule 65 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    DIV             reduce using rule 65 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    MOD             reduce using rule 65 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    ADD             reduce using rule 65 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    MINUS           reduce using rule 65 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    LEFT_OP         reduce using rule 65 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    RIGHT_OP        reduce using rule 65 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    L_OP            reduce using rule 65 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    G_OP            reduce using rule 65 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    LE_OP           reduce using rule 65 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    GE_OP           reduce using rule 65 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    EQUALS_OP       reduce using rule 65 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    NOTEQUALS       reduce using rule 65 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    AND_OP          reduce using rule 65 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    AND             reduce using rule 65 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    OR              reduce using rule 65 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    CONDOP          reduce using rule 65 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    OR_OP           reduce using rule 65 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    RPAREN          reduce using rule 65 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    COMMA           reduce using rule 65 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    VOID            reduce using rule 65 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    INT             reduce using rule 65 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    CHAR            reduce using rule 65 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    SHORT           reduce using rule 65 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    LONG            reduce using rule 65 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    FLOAT           reduce using rule 65 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    DOUBLE          reduce using rule 65 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    VARIABLE        reduce using rule 65 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    SEMI_COLON      reduce using rule 65 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    LPAREN          reduce using rule 65 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    RBIG            reduce using rule 65 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    RBRACE          reduce using rule 65 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    COLON           reduce using rule 65 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)


state 142

    (64) multiplicative_expression -> multiplicative_expression MULT cast_expression .

    MULT            reduce using rule 64 (multiplicative_expression -> multiplicative_expression MULT cast_expression .)
    DIV             reduce using rule 64 (multiplicative_expression -> multiplicative_expression MULT cast_expression .)
    MOD             reduce using rule 64 (multiplicative_expression -> multiplicative_expression MULT cast_expression .)
    ADD             reduce using rule 64 (multiplicative_expression -> multiplicative_expression MULT cast_expression .)
    MINUS           reduce using rule 64 (multiplicative_expression -> multiplicative_expression MULT cast_expression .)
    LEFT_OP         reduce using rule 64 (multiplicative_expression -> multiplicative_expression MULT cast_expression .)
    RIGHT_OP        reduce using rule 64 (multiplicative_expression -> multiplicative_expression MULT cast_expression .)
    L_OP            reduce using rule 64 (multiplicative_expression -> multiplicative_expression MULT cast_expression .)
    G_OP            reduce using rule 64 (multiplicative_expression -> multiplicative_expression MULT cast_expression .)
    LE_OP           reduce using rule 64 (multiplicative_expression -> multiplicative_expression MULT cast_expression .)
    GE_OP           reduce using rule 64 (multiplicative_expression -> multiplicative_expression MULT cast_expression .)
    EQUALS_OP       reduce using rule 64 (multiplicative_expression -> multiplicative_expression MULT cast_expression .)
    NOTEQUALS       reduce using rule 64 (multiplicative_expression -> multiplicative_expression MULT cast_expression .)
    AND_OP          reduce using rule 64 (multiplicative_expression -> multiplicative_expression MULT cast_expression .)
    AND             reduce using rule 64 (multiplicative_expression -> multiplicative_expression MULT cast_expression .)
    OR              reduce using rule 64 (multiplicative_expression -> multiplicative_expression MULT cast_expression .)
    CONDOP          reduce using rule 64 (multiplicative_expression -> multiplicative_expression MULT cast_expression .)
    OR_OP           reduce using rule 64 (multiplicative_expression -> multiplicative_expression MULT cast_expression .)
    RPAREN          reduce using rule 64 (multiplicative_expression -> multiplicative_expression MULT cast_expression .)
    COMMA           reduce using rule 64 (multiplicative_expression -> multiplicative_expression MULT cast_expression .)
    VOID            reduce using rule 64 (multiplicative_expression -> multiplicative_expression MULT cast_expression .)
    INT             reduce using rule 64 (multiplicative_expression -> multiplicative_expression MULT cast_expression .)
    CHAR            reduce using rule 64 (multiplicative_expression -> multiplicative_expression MULT cast_expression .)
    SHORT           reduce using rule 64 (multiplicative_expression -> multiplicative_expression MULT cast_expression .)
    LONG            reduce using rule 64 (multiplicative_expression -> multiplicative_expression MULT cast_expression .)
    FLOAT           reduce using rule 64 (multiplicative_expression -> multiplicative_expression MULT cast_expression .)
    DOUBLE          reduce using rule 64 (multiplicative_expression -> multiplicative_expression MULT cast_expression .)
    VARIABLE        reduce using rule 64 (multiplicative_expression -> multiplicative_expression MULT cast_expression .)
    SEMI_COLON      reduce using rule 64 (multiplicative_expression -> multiplicative_expression MULT cast_expression .)
    LPAREN          reduce using rule 64 (multiplicative_expression -> multiplicative_expression MULT cast_expression .)
    RBIG            reduce using rule 64 (multiplicative_expression -> multiplicative_expression MULT cast_expression .)
    RBRACE          reduce using rule 64 (multiplicative_expression -> multiplicative_expression MULT cast_expression .)
    COLON           reduce using rule 64 (multiplicative_expression -> multiplicative_expression MULT cast_expression .)


state 143

    (66) multiplicative_expression -> multiplicative_expression MOD cast_expression .

    MULT            reduce using rule 66 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    DIV             reduce using rule 66 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    MOD             reduce using rule 66 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    ADD             reduce using rule 66 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    MINUS           reduce using rule 66 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LEFT_OP         reduce using rule 66 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    RIGHT_OP        reduce using rule 66 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    L_OP            reduce using rule 66 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    G_OP            reduce using rule 66 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LE_OP           reduce using rule 66 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    GE_OP           reduce using rule 66 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    EQUALS_OP       reduce using rule 66 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    NOTEQUALS       reduce using rule 66 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    AND_OP          reduce using rule 66 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    AND             reduce using rule 66 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    OR              reduce using rule 66 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    CONDOP          reduce using rule 66 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    OR_OP           reduce using rule 66 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    RPAREN          reduce using rule 66 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    COMMA           reduce using rule 66 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    VOID            reduce using rule 66 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    INT             reduce using rule 66 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    CHAR            reduce using rule 66 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    SHORT           reduce using rule 66 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LONG            reduce using rule 66 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    FLOAT           reduce using rule 66 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    DOUBLE          reduce using rule 66 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    VARIABLE        reduce using rule 66 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    SEMI_COLON      reduce using rule 66 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LPAREN          reduce using rule 66 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    RBIG            reduce using rule 66 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    RBRACE          reduce using rule 66 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    COLON           reduce using rule 66 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)


state 144

    (61) additive_expression -> additive_expression ADD multiplicative_expression .
    (64) multiplicative_expression -> multiplicative_expression . MULT cast_expression
    (65) multiplicative_expression -> multiplicative_expression . DIV cast_expression
    (66) multiplicative_expression -> multiplicative_expression . MOD cast_expression

    ADD             reduce using rule 61 (additive_expression -> additive_expression ADD multiplicative_expression .)
    MINUS           reduce using rule 61 (additive_expression -> additive_expression ADD multiplicative_expression .)
    LEFT_OP         reduce using rule 61 (additive_expression -> additive_expression ADD multiplicative_expression .)
    RIGHT_OP        reduce using rule 61 (additive_expression -> additive_expression ADD multiplicative_expression .)
    L_OP            reduce using rule 61 (additive_expression -> additive_expression ADD multiplicative_expression .)
    G_OP            reduce using rule 61 (additive_expression -> additive_expression ADD multiplicative_expression .)
    LE_OP           reduce using rule 61 (additive_expression -> additive_expression ADD multiplicative_expression .)
    GE_OP           reduce using rule 61 (additive_expression -> additive_expression ADD multiplicative_expression .)
    EQUALS_OP       reduce using rule 61 (additive_expression -> additive_expression ADD multiplicative_expression .)
    NOTEQUALS       reduce using rule 61 (additive_expression -> additive_expression ADD multiplicative_expression .)
    AND_OP          reduce using rule 61 (additive_expression -> additive_expression ADD multiplicative_expression .)
    AND             reduce using rule 61 (additive_expression -> additive_expression ADD multiplicative_expression .)
    OR              reduce using rule 61 (additive_expression -> additive_expression ADD multiplicative_expression .)
    CONDOP          reduce using rule 61 (additive_expression -> additive_expression ADD multiplicative_expression .)
    OR_OP           reduce using rule 61 (additive_expression -> additive_expression ADD multiplicative_expression .)
    COMMA           reduce using rule 61 (additive_expression -> additive_expression ADD multiplicative_expression .)
    VOID            reduce using rule 61 (additive_expression -> additive_expression ADD multiplicative_expression .)
    INT             reduce using rule 61 (additive_expression -> additive_expression ADD multiplicative_expression .)
    CHAR            reduce using rule 61 (additive_expression -> additive_expression ADD multiplicative_expression .)
    SHORT           reduce using rule 61 (additive_expression -> additive_expression ADD multiplicative_expression .)
    LONG            reduce using rule 61 (additive_expression -> additive_expression ADD multiplicative_expression .)
    FLOAT           reduce using rule 61 (additive_expression -> additive_expression ADD multiplicative_expression .)
    DOUBLE          reduce using rule 61 (additive_expression -> additive_expression ADD multiplicative_expression .)
    VARIABLE        reduce using rule 61 (additive_expression -> additive_expression ADD multiplicative_expression .)
    SEMI_COLON      reduce using rule 61 (additive_expression -> additive_expression ADD multiplicative_expression .)
    LPAREN          reduce using rule 61 (additive_expression -> additive_expression ADD multiplicative_expression .)
    RPAREN          reduce using rule 61 (additive_expression -> additive_expression ADD multiplicative_expression .)
    RBIG            reduce using rule 61 (additive_expression -> additive_expression ADD multiplicative_expression .)
    RBRACE          reduce using rule 61 (additive_expression -> additive_expression ADD multiplicative_expression .)
    COLON           reduce using rule 61 (additive_expression -> additive_expression ADD multiplicative_expression .)
    MULT            shift and go to state 94
    DIV             shift and go to state 93
    MOD             shift and go to state 95


state 145

    (62) additive_expression -> additive_expression MINUS multiplicative_expression .
    (64) multiplicative_expression -> multiplicative_expression . MULT cast_expression
    (65) multiplicative_expression -> multiplicative_expression . DIV cast_expression
    (66) multiplicative_expression -> multiplicative_expression . MOD cast_expression

    ADD             reduce using rule 62 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MINUS           reduce using rule 62 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LEFT_OP         reduce using rule 62 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RIGHT_OP        reduce using rule 62 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    L_OP            reduce using rule 62 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    G_OP            reduce using rule 62 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LE_OP           reduce using rule 62 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GE_OP           reduce using rule 62 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    EQUALS_OP       reduce using rule 62 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    NOTEQUALS       reduce using rule 62 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    AND_OP          reduce using rule 62 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    AND             reduce using rule 62 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    OR              reduce using rule 62 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    CONDOP          reduce using rule 62 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    OR_OP           reduce using rule 62 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COMMA           reduce using rule 62 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    VOID            reduce using rule 62 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    INT             reduce using rule 62 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    CHAR            reduce using rule 62 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    SHORT           reduce using rule 62 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LONG            reduce using rule 62 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    FLOAT           reduce using rule 62 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    DOUBLE          reduce using rule 62 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    VARIABLE        reduce using rule 62 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    SEMI_COLON      reduce using rule 62 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LPAREN          reduce using rule 62 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RPAREN          reduce using rule 62 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RBIG            reduce using rule 62 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RBRACE          reduce using rule 62 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COLON           reduce using rule 62 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MULT            shift and go to state 94
    DIV             shift and go to state 93
    MOD             shift and go to state 95


state 146

    (82) specifier_qualifier_list -> type_specifier specifier_qualifier_list .

    RPAREN          reduce using rule 82 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)


state 147

    (68) cast_expression -> LPAREN type_name RPAREN . cast_expression
    (67) cast_expression -> . unary_expression
    (68) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREMENT unary_expression
    (71) unary_expression -> . DECREMENT unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (73) unary_expression -> . SIZEOF unary_expression
    (74) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (84) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LBIG expression RBIG
    (93) postfix_expression -> . postfix_expression LPAREN RPAREN
    (94) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (75) unary_operator -> . AND_OP
    (76) unary_operator -> . MULT
    (77) unary_operator -> . ADD
    (78) unary_operator -> . MINUS
    (79) unary_operator -> . TILDA
    (80) unary_operator -> . NOT
    (85) primary_expression -> . VARIABLE
    (86) primary_expression -> . constant
    (87) primary_expression -> . LPAREN expression RPAREN
    (88) constant -> . HEX_INT
    (89) constant -> . EXP_REAL
    (90) constant -> . DOT_REAL
    (91) constant -> . DEC_INT

    LPAREN          shift and go to state 52
    INCREMENT       shift and go to state 43
    DECREMENT       shift and go to state 64
    SIZEOF          shift and go to state 47
    AND_OP          shift and go to state 49
    MULT            shift and go to state 57
    ADD             shift and go to state 59
    MINUS           shift and go to state 35
    TILDA           shift and go to state 41
    NOT             shift and go to state 63
    VARIABLE        shift and go to state 53
    HEX_INT         shift and go to state 58
    EXP_REAL        shift and go to state 39
    DOT_REAL        shift and go to state 60
    DEC_INT         shift and go to state 40

    constant                       shift and go to state 32
    unary_expression               shift and go to state 37
    postfix_expression             shift and go to state 34
    primary_expression             shift and go to state 51
    cast_expression                shift and go to state 164
    unary_operator                 shift and go to state 61

state 148

    (87) primary_expression -> LPAREN expression RPAREN .

    LBIG            reduce using rule 87 (primary_expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 87 (primary_expression -> LPAREN expression RPAREN .)
    MULT            reduce using rule 87 (primary_expression -> LPAREN expression RPAREN .)
    DIV             reduce using rule 87 (primary_expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 87 (primary_expression -> LPAREN expression RPAREN .)
    ADD             reduce using rule 87 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 87 (primary_expression -> LPAREN expression RPAREN .)
    LEFT_OP         reduce using rule 87 (primary_expression -> LPAREN expression RPAREN .)
    RIGHT_OP        reduce using rule 87 (primary_expression -> LPAREN expression RPAREN .)
    L_OP            reduce using rule 87 (primary_expression -> LPAREN expression RPAREN .)
    G_OP            reduce using rule 87 (primary_expression -> LPAREN expression RPAREN .)
    LE_OP           reduce using rule 87 (primary_expression -> LPAREN expression RPAREN .)
    GE_OP           reduce using rule 87 (primary_expression -> LPAREN expression RPAREN .)
    EQUALS_OP       reduce using rule 87 (primary_expression -> LPAREN expression RPAREN .)
    NOTEQUALS       reduce using rule 87 (primary_expression -> LPAREN expression RPAREN .)
    AND_OP          reduce using rule 87 (primary_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 87 (primary_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 87 (primary_expression -> LPAREN expression RPAREN .)
    CONDOP          reduce using rule 87 (primary_expression -> LPAREN expression RPAREN .)
    OR_OP           reduce using rule 87 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 87 (primary_expression -> LPAREN expression RPAREN .)
    VOID            reduce using rule 87 (primary_expression -> LPAREN expression RPAREN .)
    INT             reduce using rule 87 (primary_expression -> LPAREN expression RPAREN .)
    CHAR            reduce using rule 87 (primary_expression -> LPAREN expression RPAREN .)
    SHORT           reduce using rule 87 (primary_expression -> LPAREN expression RPAREN .)
    LONG            reduce using rule 87 (primary_expression -> LPAREN expression RPAREN .)
    FLOAT           reduce using rule 87 (primary_expression -> LPAREN expression RPAREN .)
    DOUBLE          reduce using rule 87 (primary_expression -> LPAREN expression RPAREN .)
    VARIABLE        reduce using rule 87 (primary_expression -> LPAREN expression RPAREN .)
    SEMI_COLON      reduce using rule 87 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 87 (primary_expression -> LPAREN expression RPAREN .)
    RBIG            reduce using rule 87 (primary_expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 87 (primary_expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 87 (primary_expression -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 87 (primary_expression -> LPAREN expression RPAREN .)
    MUL_ASSIGN      reduce using rule 87 (primary_expression -> LPAREN expression RPAREN .)
    DIV_ASSIGN      reduce using rule 87 (primary_expression -> LPAREN expression RPAREN .)
    MOD_ASSIGN      reduce using rule 87 (primary_expression -> LPAREN expression RPAREN .)
    ADD_ASSIGN      reduce using rule 87 (primary_expression -> LPAREN expression RPAREN .)
    SUB_ASSIGN      reduce using rule 87 (primary_expression -> LPAREN expression RPAREN .)
    LEFT_ASSIGN     reduce using rule 87 (primary_expression -> LPAREN expression RPAREN .)
    RIGHT_ASSIGN    reduce using rule 87 (primary_expression -> LPAREN expression RPAREN .)
    AND_ASSIGN      reduce using rule 87 (primary_expression -> LPAREN expression RPAREN .)
    XOR_ASSIGN      reduce using rule 87 (primary_expression -> LPAREN expression RPAREN .)
    OR_ASSIGN       reduce using rule 87 (primary_expression -> LPAREN expression RPAREN .)


state 149

    (101) expression -> expression COMMA . assignment_expression
    (102) assignment_expression -> . conditional_expression
    (103) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (37) conditional_expression -> . logical_or_expression
    (38) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREMENT unary_expression
    (71) unary_expression -> . DECREMENT unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (73) unary_expression -> . SIZEOF unary_expression
    (74) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (39) logical_or_expression -> . logical_and_expression
    (40) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (84) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LBIG expression RBIG
    (93) postfix_expression -> . postfix_expression LPAREN RPAREN
    (94) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (75) unary_operator -> . AND_OP
    (76) unary_operator -> . MULT
    (77) unary_operator -> . ADD
    (78) unary_operator -> . MINUS
    (79) unary_operator -> . TILDA
    (80) unary_operator -> . NOT
    (41) logical_and_expression -> . inclusive_or_expression
    (42) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (85) primary_expression -> . VARIABLE
    (86) primary_expression -> . constant
    (87) primary_expression -> . LPAREN expression RPAREN
    (43) inclusive_or_expression -> . exclusive_or_expression
    (44) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (88) constant -> . HEX_INT
    (89) constant -> . EXP_REAL
    (90) constant -> . DOT_REAL
    (91) constant -> . DEC_INT
    (45) exclusive_or_expression -> . and_expression
    (46) exclusive_or_expression -> . exclusive_or_expression AND and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression AND_OP equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQUALS_OP relational_expression
    (51) equality_expression -> . equality_expression NOTEQUALS relational_expression
    (52) relational_expression -> . shift_expression
    (53) relational_expression -> . relational_expression L_OP shift_expression
    (54) relational_expression -> . relational_expression G_OP shift_expression
    (55) relational_expression -> . relational_expression LE_OP shift_expression
    (56) relational_expression -> . relational_expression GE_OP shift_expression
    (57) shift_expression -> . additive_expression
    (58) shift_expression -> . shift_expression LEFT_OP additive_expression
    (59) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (60) additive_expression -> . multiplicative_expression
    (61) additive_expression -> . additive_expression ADD multiplicative_expression
    (62) additive_expression -> . additive_expression MINUS multiplicative_expression
    (63) multiplicative_expression -> . cast_expression
    (64) multiplicative_expression -> . multiplicative_expression MULT cast_expression
    (65) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (66) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (67) cast_expression -> . unary_expression
    (68) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INCREMENT       shift and go to state 43
    DECREMENT       shift and go to state 64
    SIZEOF          shift and go to state 47
    AND_OP          shift and go to state 49
    MULT            shift and go to state 57
    ADD             shift and go to state 59
    MINUS           shift and go to state 35
    TILDA           shift and go to state 41
    NOT             shift and go to state 63
    VARIABLE        shift and go to state 53
    LPAREN          shift and go to state 75
    HEX_INT         shift and go to state 58
    EXP_REAL        shift and go to state 39
    DOT_REAL        shift and go to state 60
    DEC_INT         shift and go to state 40

    constant                       shift and go to state 32
    unary_expression               shift and go to state 72
    exclusive_or_expression        shift and go to state 33
    additive_expression            shift and go to state 50
    inclusive_or_expression        shift and go to state 38
    postfix_expression             shift and go to state 34
    and_expression                 shift and go to state 36
    relational_expression          shift and go to state 42
    cast_expression                shift and go to state 44
    logical_or_expression          shift and go to state 45
    unary_operator                 shift and go to state 61
    assignment_expression          shift and go to state 165
    multiplicative_expression      shift and go to state 48
    primary_expression             shift and go to state 51
    logical_and_expression         shift and go to state 54
    shift_expression               shift and go to state 55
    equality_expression            shift and go to state 56
    conditional_expression         shift and go to state 77

state 150

    (42) logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .
    (44) inclusive_or_expression -> inclusive_or_expression . OR exclusive_or_expression

    AND_OP          reduce using rule 42 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    CONDOP          reduce using rule 42 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    OR_OP           reduce using rule 42 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    RPAREN          reduce using rule 42 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    COMMA           reduce using rule 42 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    SEMI_COLON      reduce using rule 42 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    RBRACE          reduce using rule 42 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    RBIG            reduce using rule 42 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    COLON           reduce using rule 42 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    VOID            reduce using rule 42 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    INT             reduce using rule 42 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    CHAR            reduce using rule 42 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    SHORT           reduce using rule 42 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    LONG            reduce using rule 42 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    FLOAT           reduce using rule 42 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    DOUBLE          reduce using rule 42 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    VARIABLE        reduce using rule 42 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    LPAREN          reduce using rule 42 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    OR              shift and go to state 82


state 151

    (58) shift_expression -> shift_expression LEFT_OP additive_expression .
    (61) additive_expression -> additive_expression . ADD multiplicative_expression
    (62) additive_expression -> additive_expression . MINUS multiplicative_expression

    LEFT_OP         reduce using rule 58 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    RIGHT_OP        reduce using rule 58 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    L_OP            reduce using rule 58 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    G_OP            reduce using rule 58 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    LE_OP           reduce using rule 58 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    GE_OP           reduce using rule 58 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    EQUALS_OP       reduce using rule 58 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    NOTEQUALS       reduce using rule 58 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    AND_OP          reduce using rule 58 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    AND             reduce using rule 58 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    OR              reduce using rule 58 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    CONDOP          reduce using rule 58 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    OR_OP           reduce using rule 58 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    SEMI_COLON      reduce using rule 58 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    COMMA           reduce using rule 58 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    RPAREN          reduce using rule 58 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    RBRACE          reduce using rule 58 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    RBIG            reduce using rule 58 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    COLON           reduce using rule 58 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    VOID            reduce using rule 58 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    INT             reduce using rule 58 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    CHAR            reduce using rule 58 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    SHORT           reduce using rule 58 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    LONG            reduce using rule 58 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    FLOAT           reduce using rule 58 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    DOUBLE          reduce using rule 58 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    VARIABLE        reduce using rule 58 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    LPAREN          reduce using rule 58 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    ADD             shift and go to state 96
    MINUS           shift and go to state 97


state 152

    (59) shift_expression -> shift_expression RIGHT_OP additive_expression .
    (61) additive_expression -> additive_expression . ADD multiplicative_expression
    (62) additive_expression -> additive_expression . MINUS multiplicative_expression

    LEFT_OP         reduce using rule 59 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    RIGHT_OP        reduce using rule 59 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    L_OP            reduce using rule 59 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    G_OP            reduce using rule 59 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    LE_OP           reduce using rule 59 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    GE_OP           reduce using rule 59 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    EQUALS_OP       reduce using rule 59 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    NOTEQUALS       reduce using rule 59 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    AND_OP          reduce using rule 59 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    AND             reduce using rule 59 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    OR              reduce using rule 59 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    CONDOP          reduce using rule 59 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    OR_OP           reduce using rule 59 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    SEMI_COLON      reduce using rule 59 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    COMMA           reduce using rule 59 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    RPAREN          reduce using rule 59 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    RBRACE          reduce using rule 59 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    RBIG            reduce using rule 59 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    COLON           reduce using rule 59 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    VOID            reduce using rule 59 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    INT             reduce using rule 59 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    CHAR            reduce using rule 59 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    SHORT           reduce using rule 59 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    LONG            reduce using rule 59 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    FLOAT           reduce using rule 59 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    DOUBLE          reduce using rule 59 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    VARIABLE        reduce using rule 59 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    LPAREN          reduce using rule 59 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    ADD             shift and go to state 96
    MINUS           shift and go to state 97


state 153

    (51) equality_expression -> equality_expression NOTEQUALS relational_expression .
    (53) relational_expression -> relational_expression . L_OP shift_expression
    (54) relational_expression -> relational_expression . G_OP shift_expression
    (55) relational_expression -> relational_expression . LE_OP shift_expression
    (56) relational_expression -> relational_expression . GE_OP shift_expression

    EQUALS_OP       reduce using rule 51 (equality_expression -> equality_expression NOTEQUALS relational_expression .)
    NOTEQUALS       reduce using rule 51 (equality_expression -> equality_expression NOTEQUALS relational_expression .)
    AND_OP          reduce using rule 51 (equality_expression -> equality_expression NOTEQUALS relational_expression .)
    AND             reduce using rule 51 (equality_expression -> equality_expression NOTEQUALS relational_expression .)
    OR              reduce using rule 51 (equality_expression -> equality_expression NOTEQUALS relational_expression .)
    CONDOP          reduce using rule 51 (equality_expression -> equality_expression NOTEQUALS relational_expression .)
    OR_OP           reduce using rule 51 (equality_expression -> equality_expression NOTEQUALS relational_expression .)
    RBIG            reduce using rule 51 (equality_expression -> equality_expression NOTEQUALS relational_expression .)
    COMMA           reduce using rule 51 (equality_expression -> equality_expression NOTEQUALS relational_expression .)
    VOID            reduce using rule 51 (equality_expression -> equality_expression NOTEQUALS relational_expression .)
    INT             reduce using rule 51 (equality_expression -> equality_expression NOTEQUALS relational_expression .)
    CHAR            reduce using rule 51 (equality_expression -> equality_expression NOTEQUALS relational_expression .)
    SHORT           reduce using rule 51 (equality_expression -> equality_expression NOTEQUALS relational_expression .)
    LONG            reduce using rule 51 (equality_expression -> equality_expression NOTEQUALS relational_expression .)
    FLOAT           reduce using rule 51 (equality_expression -> equality_expression NOTEQUALS relational_expression .)
    DOUBLE          reduce using rule 51 (equality_expression -> equality_expression NOTEQUALS relational_expression .)
    VARIABLE        reduce using rule 51 (equality_expression -> equality_expression NOTEQUALS relational_expression .)
    SEMI_COLON      reduce using rule 51 (equality_expression -> equality_expression NOTEQUALS relational_expression .)
    LPAREN          reduce using rule 51 (equality_expression -> equality_expression NOTEQUALS relational_expression .)
    RPAREN          reduce using rule 51 (equality_expression -> equality_expression NOTEQUALS relational_expression .)
    RBRACE          reduce using rule 51 (equality_expression -> equality_expression NOTEQUALS relational_expression .)
    COLON           reduce using rule 51 (equality_expression -> equality_expression NOTEQUALS relational_expression .)
    L_OP            shift and go to state 85
    G_OP            shift and go to state 84
    LE_OP           shift and go to state 83
    GE_OP           shift and go to state 86


state 154

    (50) equality_expression -> equality_expression EQUALS_OP relational_expression .
    (53) relational_expression -> relational_expression . L_OP shift_expression
    (54) relational_expression -> relational_expression . G_OP shift_expression
    (55) relational_expression -> relational_expression . LE_OP shift_expression
    (56) relational_expression -> relational_expression . GE_OP shift_expression

    EQUALS_OP       reduce using rule 50 (equality_expression -> equality_expression EQUALS_OP relational_expression .)
    NOTEQUALS       reduce using rule 50 (equality_expression -> equality_expression EQUALS_OP relational_expression .)
    AND_OP          reduce using rule 50 (equality_expression -> equality_expression EQUALS_OP relational_expression .)
    AND             reduce using rule 50 (equality_expression -> equality_expression EQUALS_OP relational_expression .)
    OR              reduce using rule 50 (equality_expression -> equality_expression EQUALS_OP relational_expression .)
    CONDOP          reduce using rule 50 (equality_expression -> equality_expression EQUALS_OP relational_expression .)
    OR_OP           reduce using rule 50 (equality_expression -> equality_expression EQUALS_OP relational_expression .)
    RBIG            reduce using rule 50 (equality_expression -> equality_expression EQUALS_OP relational_expression .)
    COMMA           reduce using rule 50 (equality_expression -> equality_expression EQUALS_OP relational_expression .)
    VOID            reduce using rule 50 (equality_expression -> equality_expression EQUALS_OP relational_expression .)
    INT             reduce using rule 50 (equality_expression -> equality_expression EQUALS_OP relational_expression .)
    CHAR            reduce using rule 50 (equality_expression -> equality_expression EQUALS_OP relational_expression .)
    SHORT           reduce using rule 50 (equality_expression -> equality_expression EQUALS_OP relational_expression .)
    LONG            reduce using rule 50 (equality_expression -> equality_expression EQUALS_OP relational_expression .)
    FLOAT           reduce using rule 50 (equality_expression -> equality_expression EQUALS_OP relational_expression .)
    DOUBLE          reduce using rule 50 (equality_expression -> equality_expression EQUALS_OP relational_expression .)
    VARIABLE        reduce using rule 50 (equality_expression -> equality_expression EQUALS_OP relational_expression .)
    SEMI_COLON      reduce using rule 50 (equality_expression -> equality_expression EQUALS_OP relational_expression .)
    LPAREN          reduce using rule 50 (equality_expression -> equality_expression EQUALS_OP relational_expression .)
    RPAREN          reduce using rule 50 (equality_expression -> equality_expression EQUALS_OP relational_expression .)
    RBRACE          reduce using rule 50 (equality_expression -> equality_expression EQUALS_OP relational_expression .)
    COLON           reduce using rule 50 (equality_expression -> equality_expression EQUALS_OP relational_expression .)
    L_OP            shift and go to state 85
    G_OP            shift and go to state 84
    LE_OP           shift and go to state 83
    GE_OP           shift and go to state 86


state 155

    (22) variable_list -> variable_list COMMA VARIABLE .

    RPAREN          reduce using rule 22 (variable_list -> variable_list COMMA VARIABLE .)
    COMMA           reduce using rule 22 (variable_list -> variable_list COMMA VARIABLE .)


state 156

    (103) assignment_expression -> unary_expression assignment_operator assignment_expression .

    RPAREN          reduce using rule 103 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    COMMA           reduce using rule 103 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RBIG            reduce using rule 103 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    COLON           reduce using rule 103 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RBRACE          reduce using rule 103 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    SEMI_COLON      reduce using rule 103 (assignment_expression -> unary_expression assignment_operator assignment_expression .)


state 157

    (11) initializer -> LBRACE initializer_list COMMA . RBRACE
    (13) initializer_list -> initializer_list COMMA . initializer
    (9) initializer -> . assignment_expression
    (10) initializer -> . LBRACE initializer_list RBRACE
    (11) initializer -> . LBRACE initializer_list COMMA RBRACE
    (102) assignment_expression -> . conditional_expression
    (103) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (37) conditional_expression -> . logical_or_expression
    (38) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREMENT unary_expression
    (71) unary_expression -> . DECREMENT unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (73) unary_expression -> . SIZEOF unary_expression
    (74) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (39) logical_or_expression -> . logical_and_expression
    (40) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (84) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LBIG expression RBIG
    (93) postfix_expression -> . postfix_expression LPAREN RPAREN
    (94) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (75) unary_operator -> . AND_OP
    (76) unary_operator -> . MULT
    (77) unary_operator -> . ADD
    (78) unary_operator -> . MINUS
    (79) unary_operator -> . TILDA
    (80) unary_operator -> . NOT
    (41) logical_and_expression -> . inclusive_or_expression
    (42) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (85) primary_expression -> . VARIABLE
    (86) primary_expression -> . constant
    (87) primary_expression -> . LPAREN expression RPAREN
    (43) inclusive_or_expression -> . exclusive_or_expression
    (44) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (88) constant -> . HEX_INT
    (89) constant -> . EXP_REAL
    (90) constant -> . DOT_REAL
    (91) constant -> . DEC_INT
    (45) exclusive_or_expression -> . and_expression
    (46) exclusive_or_expression -> . exclusive_or_expression AND and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression AND_OP equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQUALS_OP relational_expression
    (51) equality_expression -> . equality_expression NOTEQUALS relational_expression
    (52) relational_expression -> . shift_expression
    (53) relational_expression -> . relational_expression L_OP shift_expression
    (54) relational_expression -> . relational_expression G_OP shift_expression
    (55) relational_expression -> . relational_expression LE_OP shift_expression
    (56) relational_expression -> . relational_expression GE_OP shift_expression
    (57) shift_expression -> . additive_expression
    (58) shift_expression -> . shift_expression LEFT_OP additive_expression
    (59) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (60) additive_expression -> . multiplicative_expression
    (61) additive_expression -> . additive_expression ADD multiplicative_expression
    (62) additive_expression -> . additive_expression MINUS multiplicative_expression
    (63) multiplicative_expression -> . cast_expression
    (64) multiplicative_expression -> . multiplicative_expression MULT cast_expression
    (65) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (66) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (67) cast_expression -> . unary_expression
    (68) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RBRACE          shift and go to state 167
    LBRACE          shift and go to state 76
    INCREMENT       shift and go to state 43
    DECREMENT       shift and go to state 64
    SIZEOF          shift and go to state 47
    AND_OP          shift and go to state 49
    MULT            shift and go to state 57
    ADD             shift and go to state 59
    MINUS           shift and go to state 35
    TILDA           shift and go to state 41
    NOT             shift and go to state 63
    VARIABLE        shift and go to state 53
    LPAREN          shift and go to state 75
    HEX_INT         shift and go to state 58
    EXP_REAL        shift and go to state 39
    DOT_REAL        shift and go to state 60
    DEC_INT         shift and go to state 40

    constant                       shift and go to state 32
    unary_expression               shift and go to state 72
    exclusive_or_expression        shift and go to state 33
    initializer                    shift and go to state 166
    and_expression                 shift and go to state 36
    inclusive_or_expression        shift and go to state 38
    postfix_expression             shift and go to state 34
    relational_expression          shift and go to state 42
    cast_expression                shift and go to state 44
    logical_or_expression          shift and go to state 45
    unary_operator                 shift and go to state 61
    assignment_expression          shift and go to state 74
    multiplicative_expression      shift and go to state 48
    conditional_expression         shift and go to state 77
    additive_expression            shift and go to state 50
    primary_expression             shift and go to state 51
    logical_and_expression         shift and go to state 54
    shift_expression               shift and go to state 55
    equality_expression            shift and go to state 56

state 158

    (10) initializer -> LBRACE initializer_list RBRACE .

    RBRACE          reduce using rule 10 (initializer -> LBRACE initializer_list RBRACE .)
    COMMA           reduce using rule 10 (initializer -> LBRACE initializer_list RBRACE .)
    SEMI_COLON      reduce using rule 10 (initializer -> LBRACE initializer_list RBRACE .)


state 159

    (92) postfix_expression -> postfix_expression LBIG expression RBIG .

    LBIG            reduce using rule 92 (postfix_expression -> postfix_expression LBIG expression RBIG .)
    LPAREN          reduce using rule 92 (postfix_expression -> postfix_expression LBIG expression RBIG .)
    MULT            reduce using rule 92 (postfix_expression -> postfix_expression LBIG expression RBIG .)
    DIV             reduce using rule 92 (postfix_expression -> postfix_expression LBIG expression RBIG .)
    MOD             reduce using rule 92 (postfix_expression -> postfix_expression LBIG expression RBIG .)
    ADD             reduce using rule 92 (postfix_expression -> postfix_expression LBIG expression RBIG .)
    MINUS           reduce using rule 92 (postfix_expression -> postfix_expression LBIG expression RBIG .)
    LEFT_OP         reduce using rule 92 (postfix_expression -> postfix_expression LBIG expression RBIG .)
    RIGHT_OP        reduce using rule 92 (postfix_expression -> postfix_expression LBIG expression RBIG .)
    L_OP            reduce using rule 92 (postfix_expression -> postfix_expression LBIG expression RBIG .)
    G_OP            reduce using rule 92 (postfix_expression -> postfix_expression LBIG expression RBIG .)
    LE_OP           reduce using rule 92 (postfix_expression -> postfix_expression LBIG expression RBIG .)
    GE_OP           reduce using rule 92 (postfix_expression -> postfix_expression LBIG expression RBIG .)
    EQUALS_OP       reduce using rule 92 (postfix_expression -> postfix_expression LBIG expression RBIG .)
    NOTEQUALS       reduce using rule 92 (postfix_expression -> postfix_expression LBIG expression RBIG .)
    AND_OP          reduce using rule 92 (postfix_expression -> postfix_expression LBIG expression RBIG .)
    AND             reduce using rule 92 (postfix_expression -> postfix_expression LBIG expression RBIG .)
    OR              reduce using rule 92 (postfix_expression -> postfix_expression LBIG expression RBIG .)
    CONDOP          reduce using rule 92 (postfix_expression -> postfix_expression LBIG expression RBIG .)
    OR_OP           reduce using rule 92 (postfix_expression -> postfix_expression LBIG expression RBIG .)
    COMMA           reduce using rule 92 (postfix_expression -> postfix_expression LBIG expression RBIG .)
    VOID            reduce using rule 92 (postfix_expression -> postfix_expression LBIG expression RBIG .)
    INT             reduce using rule 92 (postfix_expression -> postfix_expression LBIG expression RBIG .)
    CHAR            reduce using rule 92 (postfix_expression -> postfix_expression LBIG expression RBIG .)
    SHORT           reduce using rule 92 (postfix_expression -> postfix_expression LBIG expression RBIG .)
    LONG            reduce using rule 92 (postfix_expression -> postfix_expression LBIG expression RBIG .)
    FLOAT           reduce using rule 92 (postfix_expression -> postfix_expression LBIG expression RBIG .)
    DOUBLE          reduce using rule 92 (postfix_expression -> postfix_expression LBIG expression RBIG .)
    VARIABLE        reduce using rule 92 (postfix_expression -> postfix_expression LBIG expression RBIG .)
    SEMI_COLON      reduce using rule 92 (postfix_expression -> postfix_expression LBIG expression RBIG .)
    RPAREN          reduce using rule 92 (postfix_expression -> postfix_expression LBIG expression RBIG .)
    RBIG            reduce using rule 92 (postfix_expression -> postfix_expression LBIG expression RBIG .)
    RBRACE          reduce using rule 92 (postfix_expression -> postfix_expression LBIG expression RBIG .)
    COLON           reduce using rule 92 (postfix_expression -> postfix_expression LBIG expression RBIG .)
    EQUALS          reduce using rule 92 (postfix_expression -> postfix_expression LBIG expression RBIG .)
    MUL_ASSIGN      reduce using rule 92 (postfix_expression -> postfix_expression LBIG expression RBIG .)
    DIV_ASSIGN      reduce using rule 92 (postfix_expression -> postfix_expression LBIG expression RBIG .)
    MOD_ASSIGN      reduce using rule 92 (postfix_expression -> postfix_expression LBIG expression RBIG .)
    ADD_ASSIGN      reduce using rule 92 (postfix_expression -> postfix_expression LBIG expression RBIG .)
    SUB_ASSIGN      reduce using rule 92 (postfix_expression -> postfix_expression LBIG expression RBIG .)
    LEFT_ASSIGN     reduce using rule 92 (postfix_expression -> postfix_expression LBIG expression RBIG .)
    RIGHT_ASSIGN    reduce using rule 92 (postfix_expression -> postfix_expression LBIG expression RBIG .)
    AND_ASSIGN      reduce using rule 92 (postfix_expression -> postfix_expression LBIG expression RBIG .)
    XOR_ASSIGN      reduce using rule 92 (postfix_expression -> postfix_expression LBIG expression RBIG .)
    OR_ASSIGN       reduce using rule 92 (postfix_expression -> postfix_expression LBIG expression RBIG .)


state 160

    (94) postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .

    LBIG            reduce using rule 94 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LPAREN          reduce using rule 94 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MULT            reduce using rule 94 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    DIV             reduce using rule 94 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MOD             reduce using rule 94 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    ADD             reduce using rule 94 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MINUS           reduce using rule 94 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LEFT_OP         reduce using rule 94 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RIGHT_OP        reduce using rule 94 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    L_OP            reduce using rule 94 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    G_OP            reduce using rule 94 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LE_OP           reduce using rule 94 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    GE_OP           reduce using rule 94 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    EQUALS_OP       reduce using rule 94 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    NOTEQUALS       reduce using rule 94 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    AND_OP          reduce using rule 94 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    AND             reduce using rule 94 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    OR              reduce using rule 94 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    CONDOP          reduce using rule 94 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    OR_OP           reduce using rule 94 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    COMMA           reduce using rule 94 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    VOID            reduce using rule 94 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    INT             reduce using rule 94 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    CHAR            reduce using rule 94 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    SHORT           reduce using rule 94 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LONG            reduce using rule 94 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    FLOAT           reduce using rule 94 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    DOUBLE          reduce using rule 94 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    VARIABLE        reduce using rule 94 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    SEMI_COLON      reduce using rule 94 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RPAREN          reduce using rule 94 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RBIG            reduce using rule 94 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RBRACE          reduce using rule 94 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    COLON           reduce using rule 94 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    EQUALS          reduce using rule 94 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MUL_ASSIGN      reduce using rule 94 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    DIV_ASSIGN      reduce using rule 94 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MOD_ASSIGN      reduce using rule 94 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    ADD_ASSIGN      reduce using rule 94 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    SUB_ASSIGN      reduce using rule 94 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LEFT_ASSIGN     reduce using rule 94 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RIGHT_ASSIGN    reduce using rule 94 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    AND_ASSIGN      reduce using rule 94 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    XOR_ASSIGN      reduce using rule 94 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    OR_ASSIGN       reduce using rule 94 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)


state 161

    (99) argument_expression_list -> argument_expression_list COMMA . assignment_expression
    (102) assignment_expression -> . conditional_expression
    (103) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (37) conditional_expression -> . logical_or_expression
    (38) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREMENT unary_expression
    (71) unary_expression -> . DECREMENT unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (73) unary_expression -> . SIZEOF unary_expression
    (74) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (39) logical_or_expression -> . logical_and_expression
    (40) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (84) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LBIG expression RBIG
    (93) postfix_expression -> . postfix_expression LPAREN RPAREN
    (94) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (75) unary_operator -> . AND_OP
    (76) unary_operator -> . MULT
    (77) unary_operator -> . ADD
    (78) unary_operator -> . MINUS
    (79) unary_operator -> . TILDA
    (80) unary_operator -> . NOT
    (41) logical_and_expression -> . inclusive_or_expression
    (42) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (85) primary_expression -> . VARIABLE
    (86) primary_expression -> . constant
    (87) primary_expression -> . LPAREN expression RPAREN
    (43) inclusive_or_expression -> . exclusive_or_expression
    (44) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (88) constant -> . HEX_INT
    (89) constant -> . EXP_REAL
    (90) constant -> . DOT_REAL
    (91) constant -> . DEC_INT
    (45) exclusive_or_expression -> . and_expression
    (46) exclusive_or_expression -> . exclusive_or_expression AND and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression AND_OP equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQUALS_OP relational_expression
    (51) equality_expression -> . equality_expression NOTEQUALS relational_expression
    (52) relational_expression -> . shift_expression
    (53) relational_expression -> . relational_expression L_OP shift_expression
    (54) relational_expression -> . relational_expression G_OP shift_expression
    (55) relational_expression -> . relational_expression LE_OP shift_expression
    (56) relational_expression -> . relational_expression GE_OP shift_expression
    (57) shift_expression -> . additive_expression
    (58) shift_expression -> . shift_expression LEFT_OP additive_expression
    (59) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (60) additive_expression -> . multiplicative_expression
    (61) additive_expression -> . additive_expression ADD multiplicative_expression
    (62) additive_expression -> . additive_expression MINUS multiplicative_expression
    (63) multiplicative_expression -> . cast_expression
    (64) multiplicative_expression -> . multiplicative_expression MULT cast_expression
    (65) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (66) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (67) cast_expression -> . unary_expression
    (68) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INCREMENT       shift and go to state 43
    DECREMENT       shift and go to state 64
    SIZEOF          shift and go to state 47
    AND_OP          shift and go to state 49
    MULT            shift and go to state 57
    ADD             shift and go to state 59
    MINUS           shift and go to state 35
    TILDA           shift and go to state 41
    NOT             shift and go to state 63
    VARIABLE        shift and go to state 53
    LPAREN          shift and go to state 75
    HEX_INT         shift and go to state 58
    EXP_REAL        shift and go to state 39
    DOT_REAL        shift and go to state 60
    DEC_INT         shift and go to state 40

    constant                       shift and go to state 32
    unary_expression               shift and go to state 72
    exclusive_or_expression        shift and go to state 33
    additive_expression            shift and go to state 50
    inclusive_or_expression        shift and go to state 38
    postfix_expression             shift and go to state 34
    and_expression                 shift and go to state 36
    relational_expression          shift and go to state 42
    cast_expression                shift and go to state 44
    logical_or_expression          shift and go to state 45
    unary_operator                 shift and go to state 61
    assignment_expression          shift and go to state 168
    multiplicative_expression      shift and go to state 48
    primary_expression             shift and go to state 51
    logical_and_expression         shift and go to state 54
    shift_expression               shift and go to state 55
    equality_expression            shift and go to state 56
    conditional_expression         shift and go to state 77

state 162

    (38) conditional_expression -> logical_or_expression CONDOP expression COLON . conditional_expression
    (37) conditional_expression -> . logical_or_expression
    (38) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (39) logical_or_expression -> . logical_and_expression
    (40) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (41) logical_and_expression -> . inclusive_or_expression
    (42) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (43) inclusive_or_expression -> . exclusive_or_expression
    (44) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (45) exclusive_or_expression -> . and_expression
    (46) exclusive_or_expression -> . exclusive_or_expression AND and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression AND_OP equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQUALS_OP relational_expression
    (51) equality_expression -> . equality_expression NOTEQUALS relational_expression
    (52) relational_expression -> . shift_expression
    (53) relational_expression -> . relational_expression L_OP shift_expression
    (54) relational_expression -> . relational_expression G_OP shift_expression
    (55) relational_expression -> . relational_expression LE_OP shift_expression
    (56) relational_expression -> . relational_expression GE_OP shift_expression
    (57) shift_expression -> . additive_expression
    (58) shift_expression -> . shift_expression LEFT_OP additive_expression
    (59) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (60) additive_expression -> . multiplicative_expression
    (61) additive_expression -> . additive_expression ADD multiplicative_expression
    (62) additive_expression -> . additive_expression MINUS multiplicative_expression
    (63) multiplicative_expression -> . cast_expression
    (64) multiplicative_expression -> . multiplicative_expression MULT cast_expression
    (65) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (66) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (67) cast_expression -> . unary_expression
    (68) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREMENT unary_expression
    (71) unary_expression -> . DECREMENT unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (73) unary_expression -> . SIZEOF unary_expression
    (74) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (84) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LBIG expression RBIG
    (93) postfix_expression -> . postfix_expression LPAREN RPAREN
    (94) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (75) unary_operator -> . AND_OP
    (76) unary_operator -> . MULT
    (77) unary_operator -> . ADD
    (78) unary_operator -> . MINUS
    (79) unary_operator -> . TILDA
    (80) unary_operator -> . NOT
    (85) primary_expression -> . VARIABLE
    (86) primary_expression -> . constant
    (87) primary_expression -> . LPAREN expression RPAREN
    (88) constant -> . HEX_INT
    (89) constant -> . EXP_REAL
    (90) constant -> . DOT_REAL
    (91) constant -> . DEC_INT

    LPAREN          shift and go to state 52
    INCREMENT       shift and go to state 43
    DECREMENT       shift and go to state 64
    SIZEOF          shift and go to state 47
    AND_OP          shift and go to state 49
    MULT            shift and go to state 57
    ADD             shift and go to state 59
    MINUS           shift and go to state 35
    TILDA           shift and go to state 41
    NOT             shift and go to state 63
    VARIABLE        shift and go to state 53
    HEX_INT         shift and go to state 58
    EXP_REAL        shift and go to state 39
    DOT_REAL        shift and go to state 60
    DEC_INT         shift and go to state 40

    constant                       shift and go to state 32
    unary_expression               shift and go to state 37
    multiplicative_expression      shift and go to state 48
    inclusive_or_expression        shift and go to state 38
    exclusive_or_expression        shift and go to state 33
    postfix_expression             shift and go to state 34
    shift_expression               shift and go to state 55
    additive_expression            shift and go to state 50
    equality_expression            shift and go to state 56
    unary_operator                 shift and go to state 61
    conditional_expression         shift and go to state 169
    cast_expression                shift and go to state 44
    logical_and_expression         shift and go to state 54
    primary_expression             shift and go to state 51
    logical_or_expression          shift and go to state 45
    and_expression                 shift and go to state 36
    relational_expression          shift and go to state 42

state 163

    (74) unary_expression -> SIZEOF LPAREN type_name RPAREN .

    EQUALS          reduce using rule 74 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MUL_ASSIGN      reduce using rule 74 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    DIV_ASSIGN      reduce using rule 74 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MOD_ASSIGN      reduce using rule 74 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    ADD_ASSIGN      reduce using rule 74 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    SUB_ASSIGN      reduce using rule 74 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LEFT_ASSIGN     reduce using rule 74 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RIGHT_ASSIGN    reduce using rule 74 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    AND_ASSIGN      reduce using rule 74 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    XOR_ASSIGN      reduce using rule 74 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    OR_ASSIGN       reduce using rule 74 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MULT            reduce using rule 74 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    DIV             reduce using rule 74 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MOD             reduce using rule 74 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    ADD             reduce using rule 74 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MINUS           reduce using rule 74 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LEFT_OP         reduce using rule 74 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RIGHT_OP        reduce using rule 74 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    L_OP            reduce using rule 74 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    G_OP            reduce using rule 74 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LE_OP           reduce using rule 74 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    GE_OP           reduce using rule 74 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    EQUALS_OP       reduce using rule 74 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    NOTEQUALS       reduce using rule 74 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    AND_OP          reduce using rule 74 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    AND             reduce using rule 74 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    OR              reduce using rule 74 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    CONDOP          reduce using rule 74 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    OR_OP           reduce using rule 74 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RPAREN          reduce using rule 74 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    COMMA           reduce using rule 74 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    VOID            reduce using rule 74 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    INT             reduce using rule 74 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    CHAR            reduce using rule 74 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    SHORT           reduce using rule 74 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LONG            reduce using rule 74 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    FLOAT           reduce using rule 74 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    DOUBLE          reduce using rule 74 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    VARIABLE        reduce using rule 74 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    SEMI_COLON      reduce using rule 74 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LPAREN          reduce using rule 74 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RBIG            reduce using rule 74 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RBRACE          reduce using rule 74 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    COLON           reduce using rule 74 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)


state 164

    (68) cast_expression -> LPAREN type_name RPAREN cast_expression .

    MULT            reduce using rule 68 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    DIV             reduce using rule 68 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MOD             reduce using rule 68 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    ADD             reduce using rule 68 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MINUS           reduce using rule 68 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LEFT_OP         reduce using rule 68 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RIGHT_OP        reduce using rule 68 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    L_OP            reduce using rule 68 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    G_OP            reduce using rule 68 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LE_OP           reduce using rule 68 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    GE_OP           reduce using rule 68 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    EQUALS_OP       reduce using rule 68 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    NOTEQUALS       reduce using rule 68 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    AND_OP          reduce using rule 68 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    AND             reduce using rule 68 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    OR              reduce using rule 68 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    CONDOP          reduce using rule 68 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    OR_OP           reduce using rule 68 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RPAREN          reduce using rule 68 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    COMMA           reduce using rule 68 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RBIG            reduce using rule 68 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    COLON           reduce using rule 68 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RBRACE          reduce using rule 68 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    VOID            reduce using rule 68 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    INT             reduce using rule 68 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    CHAR            reduce using rule 68 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    SHORT           reduce using rule 68 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LONG            reduce using rule 68 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    FLOAT           reduce using rule 68 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    DOUBLE          reduce using rule 68 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    VARIABLE        reduce using rule 68 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    SEMI_COLON      reduce using rule 68 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LPAREN          reduce using rule 68 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    EQUALS          reduce using rule 68 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MUL_ASSIGN      reduce using rule 68 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    DIV_ASSIGN      reduce using rule 68 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MOD_ASSIGN      reduce using rule 68 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    ADD_ASSIGN      reduce using rule 68 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    SUB_ASSIGN      reduce using rule 68 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LEFT_ASSIGN     reduce using rule 68 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RIGHT_ASSIGN    reduce using rule 68 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    AND_ASSIGN      reduce using rule 68 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    XOR_ASSIGN      reduce using rule 68 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    OR_ASSIGN       reduce using rule 68 (cast_expression -> LPAREN type_name RPAREN cast_expression .)


state 165

    (101) expression -> expression COMMA assignment_expression .

    RPAREN          reduce using rule 101 (expression -> expression COMMA assignment_expression .)
    COMMA           reduce using rule 101 (expression -> expression COMMA assignment_expression .)
    RBIG            reduce using rule 101 (expression -> expression COMMA assignment_expression .)
    COLON           reduce using rule 101 (expression -> expression COMMA assignment_expression .)


state 166

    (13) initializer_list -> initializer_list COMMA initializer .

    RBRACE          reduce using rule 13 (initializer_list -> initializer_list COMMA initializer .)
    COMMA           reduce using rule 13 (initializer_list -> initializer_list COMMA initializer .)


state 167

    (11) initializer -> LBRACE initializer_list COMMA RBRACE .

    RBRACE          reduce using rule 11 (initializer -> LBRACE initializer_list COMMA RBRACE .)
    COMMA           reduce using rule 11 (initializer -> LBRACE initializer_list COMMA RBRACE .)
    SEMI_COLON      reduce using rule 11 (initializer -> LBRACE initializer_list COMMA RBRACE .)


state 168

    (99) argument_expression_list -> argument_expression_list COMMA assignment_expression .

    RPAREN          reduce using rule 99 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)
    COMMA           reduce using rule 99 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)


state 169

    (38) conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .

    SEMI_COLON      reduce using rule 38 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)
    COMMA           reduce using rule 38 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)
    RBRACE          reduce using rule 38 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)
    RPAREN          reduce using rule 38 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)
    RBIG            reduce using rule 38 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)
    COLON           reduce using rule 38 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)
    VOID            reduce using rule 38 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)
    INT             reduce using rule 38 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)
    CHAR            reduce using rule 38 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)
    SHORT           reduce using rule 38 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)
    LONG            reduce using rule 38 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)
    FLOAT           reduce using rule 38 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)
    DOUBLE          reduce using rule 38 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)
    VARIABLE        reduce using rule 38 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)
    LPAREN          reduce using rule 38 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for VARIABLE in state 1 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 34 resolved as shift
WARNING: shift/reduce conflict for AND_OP in state 36 resolved as shift
WARNING: shift/reduce conflict for AND_OP in state 127 resolved as shift
