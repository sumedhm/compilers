Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    RIGHT_OP
    RETURN
    DO
    DEFAULT
    FOR
    LEFT_OP
    WHILE
    COLON
    TRUE
    COMMENT
    MAIN
    RPAREN
    NEWLINE
    CASE
    LBIG
    TILDA
    COMMA
    DOT
    INCREMENT
    IF
    ADD_ASSIGN
    RBRACE
    SIZEOF
    SINGLE_QUOTES
    LPAREN
    ANDI
    ELSE
    AND
    LBRACE
    CONDOP
    BREAK
    CONTINUE
    DOUBLE_QUOTES
    NOT
    DECREMENT
    SWITCH
    RBIG
    OR

Grammar

Rule 0     S' -> statements
Rule 1     statements -> statements statement
Rule 2     statements -> statement
Rule 3     statement -> declaration
Rule 4     statement -> exp SEMI_COLON
Rule 5     declaration -> type VARIABLE SEMI_COLON
Rule 6     declaration -> type VARIABLE EQUALS exp SEMI_COLON
Rule 7     type -> INT
Rule 8     type -> FLOAT
Rule 9     type -> CHAR
Rule 10    type -> DOUBLE
Rule 11    type -> VOID
Rule 12    type -> SHORT
Rule 13    type -> LONG
Rule 14    constant -> HEX_INT
Rule 15    constant -> DOT_REAL
Rule 16    constant -> EXP_REAL
Rule 17    constant -> DEC_INT
Rule 18    constant -> CHARACTER
Rule 19    constant -> VARIABLE
Rule 20    exp -> exp ADD exp
Rule 21    exp -> exp MINUS exp
Rule 22    exp -> exp MULT exp
Rule 23    exp -> exp DIV exp
Rule 24    exp -> exp MOD exp
Rule 25    exp -> exp L_OP exp
Rule 26    exp -> exp G_OP exp
Rule 27    exp -> exp LE_OP exp
Rule 28    exp -> exp GE_OP exp
Rule 29    exp -> exp NOTEQUALS exp
Rule 30    exp -> exp EQUALS_OP exp
Rule 31    exp -> exp OR_OP exp
Rule 32    exp -> exp AND_OP exp
Rule 33    exp -> exp MUL_ASSIGN exp
Rule 34    exp -> exp DIV_ASSIGN exp
Rule 35    exp -> exp MOD_ASSIGN exp
Rule 36    exp -> exp AND_ASSIGN exp
Rule 37    exp -> exp SUB_ASSIGN exp
Rule 38    exp -> exp LEFT_ASSIGN exp
Rule 39    exp -> exp RIGHT_ASSIGN exp
Rule 40    exp -> exp XOR_ASSIGN exp
Rule 41    exp -> exp OR_ASSIGN exp
Rule 42    exp -> exp EQUALS exp
Rule 43    exp -> constant
Rule 44    empty -> <empty>

Terminals, with rules where they appear

ADD                  : 20
ADD_ASSIGN           : 
AND                  : 
ANDI                 : 
AND_ASSIGN           : 36
AND_OP               : 32
BREAK                : 
CASE                 : 
CHAR                 : 9
CHARACTER            : 18
COLON                : 
COMMA                : 
COMMENT              : 
CONDOP               : 
CONTINUE             : 
DECREMENT            : 
DEC_INT              : 17
DEFAULT              : 
DIV                  : 23
DIV_ASSIGN           : 34
DO                   : 
DOT                  : 
DOT_REAL             : 15
DOUBLE               : 10
DOUBLE_QUOTES        : 
ELSE                 : 
EQUALS               : 6 42
EQUALS_OP            : 30
EXP_REAL             : 16
FLOAT                : 8
FOR                  : 
GE_OP                : 28
G_OP                 : 26
HEX_INT              : 14
IF                   : 
INCREMENT            : 
INT                  : 7
LBIG                 : 
LBRACE               : 
LEFT_ASSIGN          : 38
LEFT_OP              : 
LE_OP                : 27
LONG                 : 13
LPAREN               : 
L_OP                 : 25
MAIN                 : 
MINUS                : 21
MOD                  : 24
MOD_ASSIGN           : 35
MULT                 : 22
MUL_ASSIGN           : 33
NEWLINE              : 
NOT                  : 
NOTEQUALS            : 29
OR                   : 
OR_ASSIGN            : 41
OR_OP                : 31
RBIG                 : 
RBRACE               : 
RETURN               : 
RIGHT_ASSIGN         : 39
RIGHT_OP             : 
RPAREN               : 
SEMI_COLON           : 4 5 6
SHORT                : 12
SINGLE_QUOTES        : 
SIZEOF               : 
SUB_ASSIGN           : 37
SWITCH               : 
TILDA                : 
TRUE                 : 
VARIABLE             : 5 6 19
VOID                 : 11
WHILE                : 
XOR_ASSIGN           : 40
error                : 

Nonterminals, with rules where they appear

constant             : 43
declaration          : 3
empty                : 
exp                  : 4 6 20 20 21 21 22 22 23 23 24 24 25 25 26 26 27 27 28 28 29 29 30 30 31 31 32 32 33 33 34 34 35 35 36 36 37 37 38 38 39 39 40 40 41 41 42 42
statement            : 1 2
statements           : 1 0
type                 : 5 6

Parsing method: LALR

state 0

    (0) S' -> . statements
    (1) statements -> . statements statement
    (2) statements -> . statement
    (3) statement -> . declaration
    (4) statement -> . exp SEMI_COLON
    (5) declaration -> . type VARIABLE SEMI_COLON
    (6) declaration -> . type VARIABLE EQUALS exp SEMI_COLON
    (20) exp -> . exp ADD exp
    (21) exp -> . exp MINUS exp
    (22) exp -> . exp MULT exp
    (23) exp -> . exp DIV exp
    (24) exp -> . exp MOD exp
    (25) exp -> . exp L_OP exp
    (26) exp -> . exp G_OP exp
    (27) exp -> . exp LE_OP exp
    (28) exp -> . exp GE_OP exp
    (29) exp -> . exp NOTEQUALS exp
    (30) exp -> . exp EQUALS_OP exp
    (31) exp -> . exp OR_OP exp
    (32) exp -> . exp AND_OP exp
    (33) exp -> . exp MUL_ASSIGN exp
    (34) exp -> . exp DIV_ASSIGN exp
    (35) exp -> . exp MOD_ASSIGN exp
    (36) exp -> . exp AND_ASSIGN exp
    (37) exp -> . exp SUB_ASSIGN exp
    (38) exp -> . exp LEFT_ASSIGN exp
    (39) exp -> . exp RIGHT_ASSIGN exp
    (40) exp -> . exp XOR_ASSIGN exp
    (41) exp -> . exp OR_ASSIGN exp
    (42) exp -> . exp EQUALS exp
    (43) exp -> . constant
    (7) type -> . INT
    (8) type -> . FLOAT
    (9) type -> . CHAR
    (10) type -> . DOUBLE
    (11) type -> . VOID
    (12) type -> . SHORT
    (13) type -> . LONG
    (14) constant -> . HEX_INT
    (15) constant -> . DOT_REAL
    (16) constant -> . EXP_REAL
    (17) constant -> . DEC_INT
    (18) constant -> . CHARACTER
    (19) constant -> . VARIABLE

    INT             shift and go to state 14
    FLOAT           shift and go to state 17
    CHAR            shift and go to state 5
    DOUBLE          shift and go to state 15
    VOID            shift and go to state 3
    SHORT           shift and go to state 1
    LONG            shift and go to state 19
    HEX_INT         shift and go to state 16
    DOT_REAL        shift and go to state 10
    EXP_REAL        shift and go to state 7
    DEC_INT         shift and go to state 8
    CHARACTER       shift and go to state 4
    VARIABLE        shift and go to state 13

    constant                       shift and go to state 6
    statement                      shift and go to state 9
    exp                            shift and go to state 18
    declaration                    shift and go to state 12
    statements                     shift and go to state 2
    type                           shift and go to state 11

state 1

    (12) type -> SHORT .

    VARIABLE        reduce using rule 12 (type -> SHORT .)


state 2

    (0) S' -> statements .
    (1) statements -> statements . statement
    (3) statement -> . declaration
    (4) statement -> . exp SEMI_COLON
    (5) declaration -> . type VARIABLE SEMI_COLON
    (6) declaration -> . type VARIABLE EQUALS exp SEMI_COLON
    (20) exp -> . exp ADD exp
    (21) exp -> . exp MINUS exp
    (22) exp -> . exp MULT exp
    (23) exp -> . exp DIV exp
    (24) exp -> . exp MOD exp
    (25) exp -> . exp L_OP exp
    (26) exp -> . exp G_OP exp
    (27) exp -> . exp LE_OP exp
    (28) exp -> . exp GE_OP exp
    (29) exp -> . exp NOTEQUALS exp
    (30) exp -> . exp EQUALS_OP exp
    (31) exp -> . exp OR_OP exp
    (32) exp -> . exp AND_OP exp
    (33) exp -> . exp MUL_ASSIGN exp
    (34) exp -> . exp DIV_ASSIGN exp
    (35) exp -> . exp MOD_ASSIGN exp
    (36) exp -> . exp AND_ASSIGN exp
    (37) exp -> . exp SUB_ASSIGN exp
    (38) exp -> . exp LEFT_ASSIGN exp
    (39) exp -> . exp RIGHT_ASSIGN exp
    (40) exp -> . exp XOR_ASSIGN exp
    (41) exp -> . exp OR_ASSIGN exp
    (42) exp -> . exp EQUALS exp
    (43) exp -> . constant
    (7) type -> . INT
    (8) type -> . FLOAT
    (9) type -> . CHAR
    (10) type -> . DOUBLE
    (11) type -> . VOID
    (12) type -> . SHORT
    (13) type -> . LONG
    (14) constant -> . HEX_INT
    (15) constant -> . DOT_REAL
    (16) constant -> . EXP_REAL
    (17) constant -> . DEC_INT
    (18) constant -> . CHARACTER
    (19) constant -> . VARIABLE

    INT             shift and go to state 14
    FLOAT           shift and go to state 17
    CHAR            shift and go to state 5
    DOUBLE          shift and go to state 15
    VOID            shift and go to state 3
    SHORT           shift and go to state 1
    LONG            shift and go to state 19
    HEX_INT         shift and go to state 16
    DOT_REAL        shift and go to state 10
    EXP_REAL        shift and go to state 7
    DEC_INT         shift and go to state 8
    CHARACTER       shift and go to state 4
    VARIABLE        shift and go to state 13

    constant                       shift and go to state 6
    statement                      shift and go to state 20
    exp                            shift and go to state 18
    declaration                    shift and go to state 12
    type                           shift and go to state 11

state 3

    (11) type -> VOID .

    VARIABLE        reduce using rule 11 (type -> VOID .)


state 4

    (18) constant -> CHARACTER .

    ADD             reduce using rule 18 (constant -> CHARACTER .)
    MINUS           reduce using rule 18 (constant -> CHARACTER .)
    MULT            reduce using rule 18 (constant -> CHARACTER .)
    DIV             reduce using rule 18 (constant -> CHARACTER .)
    MOD             reduce using rule 18 (constant -> CHARACTER .)
    L_OP            reduce using rule 18 (constant -> CHARACTER .)
    G_OP            reduce using rule 18 (constant -> CHARACTER .)
    LE_OP           reduce using rule 18 (constant -> CHARACTER .)
    GE_OP           reduce using rule 18 (constant -> CHARACTER .)
    NOTEQUALS       reduce using rule 18 (constant -> CHARACTER .)
    EQUALS_OP       reduce using rule 18 (constant -> CHARACTER .)
    OR_OP           reduce using rule 18 (constant -> CHARACTER .)
    AND_OP          reduce using rule 18 (constant -> CHARACTER .)
    MUL_ASSIGN      reduce using rule 18 (constant -> CHARACTER .)
    DIV_ASSIGN      reduce using rule 18 (constant -> CHARACTER .)
    MOD_ASSIGN      reduce using rule 18 (constant -> CHARACTER .)
    AND_ASSIGN      reduce using rule 18 (constant -> CHARACTER .)
    SUB_ASSIGN      reduce using rule 18 (constant -> CHARACTER .)
    LEFT_ASSIGN     reduce using rule 18 (constant -> CHARACTER .)
    RIGHT_ASSIGN    reduce using rule 18 (constant -> CHARACTER .)
    XOR_ASSIGN      reduce using rule 18 (constant -> CHARACTER .)
    OR_ASSIGN       reduce using rule 18 (constant -> CHARACTER .)
    EQUALS          reduce using rule 18 (constant -> CHARACTER .)
    SEMI_COLON      reduce using rule 18 (constant -> CHARACTER .)


state 5

    (9) type -> CHAR .

    VARIABLE        reduce using rule 9 (type -> CHAR .)


state 6

    (43) exp -> constant .

    ADD             reduce using rule 43 (exp -> constant .)
    MINUS           reduce using rule 43 (exp -> constant .)
    MULT            reduce using rule 43 (exp -> constant .)
    DIV             reduce using rule 43 (exp -> constant .)
    MOD             reduce using rule 43 (exp -> constant .)
    L_OP            reduce using rule 43 (exp -> constant .)
    G_OP            reduce using rule 43 (exp -> constant .)
    LE_OP           reduce using rule 43 (exp -> constant .)
    GE_OP           reduce using rule 43 (exp -> constant .)
    NOTEQUALS       reduce using rule 43 (exp -> constant .)
    EQUALS_OP       reduce using rule 43 (exp -> constant .)
    OR_OP           reduce using rule 43 (exp -> constant .)
    AND_OP          reduce using rule 43 (exp -> constant .)
    MUL_ASSIGN      reduce using rule 43 (exp -> constant .)
    DIV_ASSIGN      reduce using rule 43 (exp -> constant .)
    MOD_ASSIGN      reduce using rule 43 (exp -> constant .)
    AND_ASSIGN      reduce using rule 43 (exp -> constant .)
    SUB_ASSIGN      reduce using rule 43 (exp -> constant .)
    LEFT_ASSIGN     reduce using rule 43 (exp -> constant .)
    RIGHT_ASSIGN    reduce using rule 43 (exp -> constant .)
    XOR_ASSIGN      reduce using rule 43 (exp -> constant .)
    OR_ASSIGN       reduce using rule 43 (exp -> constant .)
    EQUALS          reduce using rule 43 (exp -> constant .)
    SEMI_COLON      reduce using rule 43 (exp -> constant .)


state 7

    (16) constant -> EXP_REAL .

    ADD             reduce using rule 16 (constant -> EXP_REAL .)
    MINUS           reduce using rule 16 (constant -> EXP_REAL .)
    MULT            reduce using rule 16 (constant -> EXP_REAL .)
    DIV             reduce using rule 16 (constant -> EXP_REAL .)
    MOD             reduce using rule 16 (constant -> EXP_REAL .)
    L_OP            reduce using rule 16 (constant -> EXP_REAL .)
    G_OP            reduce using rule 16 (constant -> EXP_REAL .)
    LE_OP           reduce using rule 16 (constant -> EXP_REAL .)
    GE_OP           reduce using rule 16 (constant -> EXP_REAL .)
    NOTEQUALS       reduce using rule 16 (constant -> EXP_REAL .)
    EQUALS_OP       reduce using rule 16 (constant -> EXP_REAL .)
    OR_OP           reduce using rule 16 (constant -> EXP_REAL .)
    AND_OP          reduce using rule 16 (constant -> EXP_REAL .)
    MUL_ASSIGN      reduce using rule 16 (constant -> EXP_REAL .)
    DIV_ASSIGN      reduce using rule 16 (constant -> EXP_REAL .)
    MOD_ASSIGN      reduce using rule 16 (constant -> EXP_REAL .)
    AND_ASSIGN      reduce using rule 16 (constant -> EXP_REAL .)
    SUB_ASSIGN      reduce using rule 16 (constant -> EXP_REAL .)
    LEFT_ASSIGN     reduce using rule 16 (constant -> EXP_REAL .)
    RIGHT_ASSIGN    reduce using rule 16 (constant -> EXP_REAL .)
    XOR_ASSIGN      reduce using rule 16 (constant -> EXP_REAL .)
    OR_ASSIGN       reduce using rule 16 (constant -> EXP_REAL .)
    EQUALS          reduce using rule 16 (constant -> EXP_REAL .)
    SEMI_COLON      reduce using rule 16 (constant -> EXP_REAL .)


state 8

    (17) constant -> DEC_INT .

    ADD             reduce using rule 17 (constant -> DEC_INT .)
    MINUS           reduce using rule 17 (constant -> DEC_INT .)
    MULT            reduce using rule 17 (constant -> DEC_INT .)
    DIV             reduce using rule 17 (constant -> DEC_INT .)
    MOD             reduce using rule 17 (constant -> DEC_INT .)
    L_OP            reduce using rule 17 (constant -> DEC_INT .)
    G_OP            reduce using rule 17 (constant -> DEC_INT .)
    LE_OP           reduce using rule 17 (constant -> DEC_INT .)
    GE_OP           reduce using rule 17 (constant -> DEC_INT .)
    NOTEQUALS       reduce using rule 17 (constant -> DEC_INT .)
    EQUALS_OP       reduce using rule 17 (constant -> DEC_INT .)
    OR_OP           reduce using rule 17 (constant -> DEC_INT .)
    AND_OP          reduce using rule 17 (constant -> DEC_INT .)
    MUL_ASSIGN      reduce using rule 17 (constant -> DEC_INT .)
    DIV_ASSIGN      reduce using rule 17 (constant -> DEC_INT .)
    MOD_ASSIGN      reduce using rule 17 (constant -> DEC_INT .)
    AND_ASSIGN      reduce using rule 17 (constant -> DEC_INT .)
    SUB_ASSIGN      reduce using rule 17 (constant -> DEC_INT .)
    LEFT_ASSIGN     reduce using rule 17 (constant -> DEC_INT .)
    RIGHT_ASSIGN    reduce using rule 17 (constant -> DEC_INT .)
    XOR_ASSIGN      reduce using rule 17 (constant -> DEC_INT .)
    OR_ASSIGN       reduce using rule 17 (constant -> DEC_INT .)
    EQUALS          reduce using rule 17 (constant -> DEC_INT .)
    SEMI_COLON      reduce using rule 17 (constant -> DEC_INT .)


state 9

    (2) statements -> statement .

    INT             reduce using rule 2 (statements -> statement .)
    FLOAT           reduce using rule 2 (statements -> statement .)
    CHAR            reduce using rule 2 (statements -> statement .)
    DOUBLE          reduce using rule 2 (statements -> statement .)
    VOID            reduce using rule 2 (statements -> statement .)
    SHORT           reduce using rule 2 (statements -> statement .)
    LONG            reduce using rule 2 (statements -> statement .)
    HEX_INT         reduce using rule 2 (statements -> statement .)
    DOT_REAL        reduce using rule 2 (statements -> statement .)
    EXP_REAL        reduce using rule 2 (statements -> statement .)
    DEC_INT         reduce using rule 2 (statements -> statement .)
    CHARACTER       reduce using rule 2 (statements -> statement .)
    VARIABLE        reduce using rule 2 (statements -> statement .)
    $end            reduce using rule 2 (statements -> statement .)


state 10

    (15) constant -> DOT_REAL .

    ADD             reduce using rule 15 (constant -> DOT_REAL .)
    MINUS           reduce using rule 15 (constant -> DOT_REAL .)
    MULT            reduce using rule 15 (constant -> DOT_REAL .)
    DIV             reduce using rule 15 (constant -> DOT_REAL .)
    MOD             reduce using rule 15 (constant -> DOT_REAL .)
    L_OP            reduce using rule 15 (constant -> DOT_REAL .)
    G_OP            reduce using rule 15 (constant -> DOT_REAL .)
    LE_OP           reduce using rule 15 (constant -> DOT_REAL .)
    GE_OP           reduce using rule 15 (constant -> DOT_REAL .)
    NOTEQUALS       reduce using rule 15 (constant -> DOT_REAL .)
    EQUALS_OP       reduce using rule 15 (constant -> DOT_REAL .)
    OR_OP           reduce using rule 15 (constant -> DOT_REAL .)
    AND_OP          reduce using rule 15 (constant -> DOT_REAL .)
    MUL_ASSIGN      reduce using rule 15 (constant -> DOT_REAL .)
    DIV_ASSIGN      reduce using rule 15 (constant -> DOT_REAL .)
    MOD_ASSIGN      reduce using rule 15 (constant -> DOT_REAL .)
    AND_ASSIGN      reduce using rule 15 (constant -> DOT_REAL .)
    SUB_ASSIGN      reduce using rule 15 (constant -> DOT_REAL .)
    LEFT_ASSIGN     reduce using rule 15 (constant -> DOT_REAL .)
    RIGHT_ASSIGN    reduce using rule 15 (constant -> DOT_REAL .)
    XOR_ASSIGN      reduce using rule 15 (constant -> DOT_REAL .)
    OR_ASSIGN       reduce using rule 15 (constant -> DOT_REAL .)
    EQUALS          reduce using rule 15 (constant -> DOT_REAL .)
    SEMI_COLON      reduce using rule 15 (constant -> DOT_REAL .)


state 11

    (5) declaration -> type . VARIABLE SEMI_COLON
    (6) declaration -> type . VARIABLE EQUALS exp SEMI_COLON

    VARIABLE        shift and go to state 21


state 12

    (3) statement -> declaration .

    INT             reduce using rule 3 (statement -> declaration .)
    FLOAT           reduce using rule 3 (statement -> declaration .)
    CHAR            reduce using rule 3 (statement -> declaration .)
    DOUBLE          reduce using rule 3 (statement -> declaration .)
    VOID            reduce using rule 3 (statement -> declaration .)
    SHORT           reduce using rule 3 (statement -> declaration .)
    LONG            reduce using rule 3 (statement -> declaration .)
    HEX_INT         reduce using rule 3 (statement -> declaration .)
    DOT_REAL        reduce using rule 3 (statement -> declaration .)
    EXP_REAL        reduce using rule 3 (statement -> declaration .)
    DEC_INT         reduce using rule 3 (statement -> declaration .)
    CHARACTER       reduce using rule 3 (statement -> declaration .)
    VARIABLE        reduce using rule 3 (statement -> declaration .)
    $end            reduce using rule 3 (statement -> declaration .)


state 13

    (19) constant -> VARIABLE .

    ADD             reduce using rule 19 (constant -> VARIABLE .)
    MINUS           reduce using rule 19 (constant -> VARIABLE .)
    MULT            reduce using rule 19 (constant -> VARIABLE .)
    DIV             reduce using rule 19 (constant -> VARIABLE .)
    MOD             reduce using rule 19 (constant -> VARIABLE .)
    L_OP            reduce using rule 19 (constant -> VARIABLE .)
    G_OP            reduce using rule 19 (constant -> VARIABLE .)
    LE_OP           reduce using rule 19 (constant -> VARIABLE .)
    GE_OP           reduce using rule 19 (constant -> VARIABLE .)
    NOTEQUALS       reduce using rule 19 (constant -> VARIABLE .)
    EQUALS_OP       reduce using rule 19 (constant -> VARIABLE .)
    OR_OP           reduce using rule 19 (constant -> VARIABLE .)
    AND_OP          reduce using rule 19 (constant -> VARIABLE .)
    MUL_ASSIGN      reduce using rule 19 (constant -> VARIABLE .)
    DIV_ASSIGN      reduce using rule 19 (constant -> VARIABLE .)
    MOD_ASSIGN      reduce using rule 19 (constant -> VARIABLE .)
    AND_ASSIGN      reduce using rule 19 (constant -> VARIABLE .)
    SUB_ASSIGN      reduce using rule 19 (constant -> VARIABLE .)
    LEFT_ASSIGN     reduce using rule 19 (constant -> VARIABLE .)
    RIGHT_ASSIGN    reduce using rule 19 (constant -> VARIABLE .)
    XOR_ASSIGN      reduce using rule 19 (constant -> VARIABLE .)
    OR_ASSIGN       reduce using rule 19 (constant -> VARIABLE .)
    EQUALS          reduce using rule 19 (constant -> VARIABLE .)
    SEMI_COLON      reduce using rule 19 (constant -> VARIABLE .)


state 14

    (7) type -> INT .

    VARIABLE        reduce using rule 7 (type -> INT .)


state 15

    (10) type -> DOUBLE .

    VARIABLE        reduce using rule 10 (type -> DOUBLE .)


state 16

    (14) constant -> HEX_INT .

    ADD             reduce using rule 14 (constant -> HEX_INT .)
    MINUS           reduce using rule 14 (constant -> HEX_INT .)
    MULT            reduce using rule 14 (constant -> HEX_INT .)
    DIV             reduce using rule 14 (constant -> HEX_INT .)
    MOD             reduce using rule 14 (constant -> HEX_INT .)
    L_OP            reduce using rule 14 (constant -> HEX_INT .)
    G_OP            reduce using rule 14 (constant -> HEX_INT .)
    LE_OP           reduce using rule 14 (constant -> HEX_INT .)
    GE_OP           reduce using rule 14 (constant -> HEX_INT .)
    NOTEQUALS       reduce using rule 14 (constant -> HEX_INT .)
    EQUALS_OP       reduce using rule 14 (constant -> HEX_INT .)
    OR_OP           reduce using rule 14 (constant -> HEX_INT .)
    AND_OP          reduce using rule 14 (constant -> HEX_INT .)
    MUL_ASSIGN      reduce using rule 14 (constant -> HEX_INT .)
    DIV_ASSIGN      reduce using rule 14 (constant -> HEX_INT .)
    MOD_ASSIGN      reduce using rule 14 (constant -> HEX_INT .)
    AND_ASSIGN      reduce using rule 14 (constant -> HEX_INT .)
    SUB_ASSIGN      reduce using rule 14 (constant -> HEX_INT .)
    LEFT_ASSIGN     reduce using rule 14 (constant -> HEX_INT .)
    RIGHT_ASSIGN    reduce using rule 14 (constant -> HEX_INT .)
    XOR_ASSIGN      reduce using rule 14 (constant -> HEX_INT .)
    OR_ASSIGN       reduce using rule 14 (constant -> HEX_INT .)
    EQUALS          reduce using rule 14 (constant -> HEX_INT .)
    SEMI_COLON      reduce using rule 14 (constant -> HEX_INT .)


state 17

    (8) type -> FLOAT .

    VARIABLE        reduce using rule 8 (type -> FLOAT .)


state 18

    (4) statement -> exp . SEMI_COLON
    (20) exp -> exp . ADD exp
    (21) exp -> exp . MINUS exp
    (22) exp -> exp . MULT exp
    (23) exp -> exp . DIV exp
    (24) exp -> exp . MOD exp
    (25) exp -> exp . L_OP exp
    (26) exp -> exp . G_OP exp
    (27) exp -> exp . LE_OP exp
    (28) exp -> exp . GE_OP exp
    (29) exp -> exp . NOTEQUALS exp
    (30) exp -> exp . EQUALS_OP exp
    (31) exp -> exp . OR_OP exp
    (32) exp -> exp . AND_OP exp
    (33) exp -> exp . MUL_ASSIGN exp
    (34) exp -> exp . DIV_ASSIGN exp
    (35) exp -> exp . MOD_ASSIGN exp
    (36) exp -> exp . AND_ASSIGN exp
    (37) exp -> exp . SUB_ASSIGN exp
    (38) exp -> exp . LEFT_ASSIGN exp
    (39) exp -> exp . RIGHT_ASSIGN exp
    (40) exp -> exp . XOR_ASSIGN exp
    (41) exp -> exp . OR_ASSIGN exp
    (42) exp -> exp . EQUALS exp

    SEMI_COLON      shift and go to state 25
    ADD             shift and go to state 36
    MINUS           shift and go to state 27
    MULT            shift and go to state 28
    DIV             shift and go to state 26
    MOD             shift and go to state 45
    L_OP            shift and go to state 42
    G_OP            shift and go to state 31
    LE_OP           shift and go to state 29
    GE_OP           shift and go to state 37
    NOTEQUALS       shift and go to state 22
    EQUALS_OP       shift and go to state 23
    OR_OP           shift and go to state 32
    AND_OP          shift and go to state 35
    MUL_ASSIGN      shift and go to state 43
    DIV_ASSIGN      shift and go to state 24
    MOD_ASSIGN      shift and go to state 39
    AND_ASSIGN      shift and go to state 33
    SUB_ASSIGN      shift and go to state 38
    LEFT_ASSIGN     shift and go to state 44
    RIGHT_ASSIGN    shift and go to state 30
    XOR_ASSIGN      shift and go to state 40
    OR_ASSIGN       shift and go to state 41
    EQUALS          shift and go to state 34


state 19

    (13) type -> LONG .

    VARIABLE        reduce using rule 13 (type -> LONG .)


state 20

    (1) statements -> statements statement .

    INT             reduce using rule 1 (statements -> statements statement .)
    FLOAT           reduce using rule 1 (statements -> statements statement .)
    CHAR            reduce using rule 1 (statements -> statements statement .)
    DOUBLE          reduce using rule 1 (statements -> statements statement .)
    VOID            reduce using rule 1 (statements -> statements statement .)
    SHORT           reduce using rule 1 (statements -> statements statement .)
    LONG            reduce using rule 1 (statements -> statements statement .)
    HEX_INT         reduce using rule 1 (statements -> statements statement .)
    DOT_REAL        reduce using rule 1 (statements -> statements statement .)
    EXP_REAL        reduce using rule 1 (statements -> statements statement .)
    DEC_INT         reduce using rule 1 (statements -> statements statement .)
    CHARACTER       reduce using rule 1 (statements -> statements statement .)
    VARIABLE        reduce using rule 1 (statements -> statements statement .)
    $end            reduce using rule 1 (statements -> statements statement .)


state 21

    (5) declaration -> type VARIABLE . SEMI_COLON
    (6) declaration -> type VARIABLE . EQUALS exp SEMI_COLON

    SEMI_COLON      shift and go to state 46
    EQUALS          shift and go to state 47


state 22

    (29) exp -> exp NOTEQUALS . exp
    (20) exp -> . exp ADD exp
    (21) exp -> . exp MINUS exp
    (22) exp -> . exp MULT exp
    (23) exp -> . exp DIV exp
    (24) exp -> . exp MOD exp
    (25) exp -> . exp L_OP exp
    (26) exp -> . exp G_OP exp
    (27) exp -> . exp LE_OP exp
    (28) exp -> . exp GE_OP exp
    (29) exp -> . exp NOTEQUALS exp
    (30) exp -> . exp EQUALS_OP exp
    (31) exp -> . exp OR_OP exp
    (32) exp -> . exp AND_OP exp
    (33) exp -> . exp MUL_ASSIGN exp
    (34) exp -> . exp DIV_ASSIGN exp
    (35) exp -> . exp MOD_ASSIGN exp
    (36) exp -> . exp AND_ASSIGN exp
    (37) exp -> . exp SUB_ASSIGN exp
    (38) exp -> . exp LEFT_ASSIGN exp
    (39) exp -> . exp RIGHT_ASSIGN exp
    (40) exp -> . exp XOR_ASSIGN exp
    (41) exp -> . exp OR_ASSIGN exp
    (42) exp -> . exp EQUALS exp
    (43) exp -> . constant
    (14) constant -> . HEX_INT
    (15) constant -> . DOT_REAL
    (16) constant -> . EXP_REAL
    (17) constant -> . DEC_INT
    (18) constant -> . CHARACTER
    (19) constant -> . VARIABLE

    HEX_INT         shift and go to state 16
    DOT_REAL        shift and go to state 10
    EXP_REAL        shift and go to state 7
    DEC_INT         shift and go to state 8
    CHARACTER       shift and go to state 4
    VARIABLE        shift and go to state 13

    constant                       shift and go to state 6
    exp                            shift and go to state 48

state 23

    (30) exp -> exp EQUALS_OP . exp
    (20) exp -> . exp ADD exp
    (21) exp -> . exp MINUS exp
    (22) exp -> . exp MULT exp
    (23) exp -> . exp DIV exp
    (24) exp -> . exp MOD exp
    (25) exp -> . exp L_OP exp
    (26) exp -> . exp G_OP exp
    (27) exp -> . exp LE_OP exp
    (28) exp -> . exp GE_OP exp
    (29) exp -> . exp NOTEQUALS exp
    (30) exp -> . exp EQUALS_OP exp
    (31) exp -> . exp OR_OP exp
    (32) exp -> . exp AND_OP exp
    (33) exp -> . exp MUL_ASSIGN exp
    (34) exp -> . exp DIV_ASSIGN exp
    (35) exp -> . exp MOD_ASSIGN exp
    (36) exp -> . exp AND_ASSIGN exp
    (37) exp -> . exp SUB_ASSIGN exp
    (38) exp -> . exp LEFT_ASSIGN exp
    (39) exp -> . exp RIGHT_ASSIGN exp
    (40) exp -> . exp XOR_ASSIGN exp
    (41) exp -> . exp OR_ASSIGN exp
    (42) exp -> . exp EQUALS exp
    (43) exp -> . constant
    (14) constant -> . HEX_INT
    (15) constant -> . DOT_REAL
    (16) constant -> . EXP_REAL
    (17) constant -> . DEC_INT
    (18) constant -> . CHARACTER
    (19) constant -> . VARIABLE

    HEX_INT         shift and go to state 16
    DOT_REAL        shift and go to state 10
    EXP_REAL        shift and go to state 7
    DEC_INT         shift and go to state 8
    CHARACTER       shift and go to state 4
    VARIABLE        shift and go to state 13

    constant                       shift and go to state 6
    exp                            shift and go to state 49

state 24

    (34) exp -> exp DIV_ASSIGN . exp
    (20) exp -> . exp ADD exp
    (21) exp -> . exp MINUS exp
    (22) exp -> . exp MULT exp
    (23) exp -> . exp DIV exp
    (24) exp -> . exp MOD exp
    (25) exp -> . exp L_OP exp
    (26) exp -> . exp G_OP exp
    (27) exp -> . exp LE_OP exp
    (28) exp -> . exp GE_OP exp
    (29) exp -> . exp NOTEQUALS exp
    (30) exp -> . exp EQUALS_OP exp
    (31) exp -> . exp OR_OP exp
    (32) exp -> . exp AND_OP exp
    (33) exp -> . exp MUL_ASSIGN exp
    (34) exp -> . exp DIV_ASSIGN exp
    (35) exp -> . exp MOD_ASSIGN exp
    (36) exp -> . exp AND_ASSIGN exp
    (37) exp -> . exp SUB_ASSIGN exp
    (38) exp -> . exp LEFT_ASSIGN exp
    (39) exp -> . exp RIGHT_ASSIGN exp
    (40) exp -> . exp XOR_ASSIGN exp
    (41) exp -> . exp OR_ASSIGN exp
    (42) exp -> . exp EQUALS exp
    (43) exp -> . constant
    (14) constant -> . HEX_INT
    (15) constant -> . DOT_REAL
    (16) constant -> . EXP_REAL
    (17) constant -> . DEC_INT
    (18) constant -> . CHARACTER
    (19) constant -> . VARIABLE

    HEX_INT         shift and go to state 16
    DOT_REAL        shift and go to state 10
    EXP_REAL        shift and go to state 7
    DEC_INT         shift and go to state 8
    CHARACTER       shift and go to state 4
    VARIABLE        shift and go to state 13

    constant                       shift and go to state 6
    exp                            shift and go to state 50

state 25

    (4) statement -> exp SEMI_COLON .

    INT             reduce using rule 4 (statement -> exp SEMI_COLON .)
    FLOAT           reduce using rule 4 (statement -> exp SEMI_COLON .)
    CHAR            reduce using rule 4 (statement -> exp SEMI_COLON .)
    DOUBLE          reduce using rule 4 (statement -> exp SEMI_COLON .)
    VOID            reduce using rule 4 (statement -> exp SEMI_COLON .)
    SHORT           reduce using rule 4 (statement -> exp SEMI_COLON .)
    LONG            reduce using rule 4 (statement -> exp SEMI_COLON .)
    HEX_INT         reduce using rule 4 (statement -> exp SEMI_COLON .)
    DOT_REAL        reduce using rule 4 (statement -> exp SEMI_COLON .)
    EXP_REAL        reduce using rule 4 (statement -> exp SEMI_COLON .)
    DEC_INT         reduce using rule 4 (statement -> exp SEMI_COLON .)
    CHARACTER       reduce using rule 4 (statement -> exp SEMI_COLON .)
    VARIABLE        reduce using rule 4 (statement -> exp SEMI_COLON .)
    $end            reduce using rule 4 (statement -> exp SEMI_COLON .)


state 26

    (23) exp -> exp DIV . exp
    (20) exp -> . exp ADD exp
    (21) exp -> . exp MINUS exp
    (22) exp -> . exp MULT exp
    (23) exp -> . exp DIV exp
    (24) exp -> . exp MOD exp
    (25) exp -> . exp L_OP exp
    (26) exp -> . exp G_OP exp
    (27) exp -> . exp LE_OP exp
    (28) exp -> . exp GE_OP exp
    (29) exp -> . exp NOTEQUALS exp
    (30) exp -> . exp EQUALS_OP exp
    (31) exp -> . exp OR_OP exp
    (32) exp -> . exp AND_OP exp
    (33) exp -> . exp MUL_ASSIGN exp
    (34) exp -> . exp DIV_ASSIGN exp
    (35) exp -> . exp MOD_ASSIGN exp
    (36) exp -> . exp AND_ASSIGN exp
    (37) exp -> . exp SUB_ASSIGN exp
    (38) exp -> . exp LEFT_ASSIGN exp
    (39) exp -> . exp RIGHT_ASSIGN exp
    (40) exp -> . exp XOR_ASSIGN exp
    (41) exp -> . exp OR_ASSIGN exp
    (42) exp -> . exp EQUALS exp
    (43) exp -> . constant
    (14) constant -> . HEX_INT
    (15) constant -> . DOT_REAL
    (16) constant -> . EXP_REAL
    (17) constant -> . DEC_INT
    (18) constant -> . CHARACTER
    (19) constant -> . VARIABLE

    HEX_INT         shift and go to state 16
    DOT_REAL        shift and go to state 10
    EXP_REAL        shift and go to state 7
    DEC_INT         shift and go to state 8
    CHARACTER       shift and go to state 4
    VARIABLE        shift and go to state 13

    constant                       shift and go to state 6
    exp                            shift and go to state 51

state 27

    (21) exp -> exp MINUS . exp
    (20) exp -> . exp ADD exp
    (21) exp -> . exp MINUS exp
    (22) exp -> . exp MULT exp
    (23) exp -> . exp DIV exp
    (24) exp -> . exp MOD exp
    (25) exp -> . exp L_OP exp
    (26) exp -> . exp G_OP exp
    (27) exp -> . exp LE_OP exp
    (28) exp -> . exp GE_OP exp
    (29) exp -> . exp NOTEQUALS exp
    (30) exp -> . exp EQUALS_OP exp
    (31) exp -> . exp OR_OP exp
    (32) exp -> . exp AND_OP exp
    (33) exp -> . exp MUL_ASSIGN exp
    (34) exp -> . exp DIV_ASSIGN exp
    (35) exp -> . exp MOD_ASSIGN exp
    (36) exp -> . exp AND_ASSIGN exp
    (37) exp -> . exp SUB_ASSIGN exp
    (38) exp -> . exp LEFT_ASSIGN exp
    (39) exp -> . exp RIGHT_ASSIGN exp
    (40) exp -> . exp XOR_ASSIGN exp
    (41) exp -> . exp OR_ASSIGN exp
    (42) exp -> . exp EQUALS exp
    (43) exp -> . constant
    (14) constant -> . HEX_INT
    (15) constant -> . DOT_REAL
    (16) constant -> . EXP_REAL
    (17) constant -> . DEC_INT
    (18) constant -> . CHARACTER
    (19) constant -> . VARIABLE

    HEX_INT         shift and go to state 16
    DOT_REAL        shift and go to state 10
    EXP_REAL        shift and go to state 7
    DEC_INT         shift and go to state 8
    CHARACTER       shift and go to state 4
    VARIABLE        shift and go to state 13

    constant                       shift and go to state 6
    exp                            shift and go to state 52

state 28

    (22) exp -> exp MULT . exp
    (20) exp -> . exp ADD exp
    (21) exp -> . exp MINUS exp
    (22) exp -> . exp MULT exp
    (23) exp -> . exp DIV exp
    (24) exp -> . exp MOD exp
    (25) exp -> . exp L_OP exp
    (26) exp -> . exp G_OP exp
    (27) exp -> . exp LE_OP exp
    (28) exp -> . exp GE_OP exp
    (29) exp -> . exp NOTEQUALS exp
    (30) exp -> . exp EQUALS_OP exp
    (31) exp -> . exp OR_OP exp
    (32) exp -> . exp AND_OP exp
    (33) exp -> . exp MUL_ASSIGN exp
    (34) exp -> . exp DIV_ASSIGN exp
    (35) exp -> . exp MOD_ASSIGN exp
    (36) exp -> . exp AND_ASSIGN exp
    (37) exp -> . exp SUB_ASSIGN exp
    (38) exp -> . exp LEFT_ASSIGN exp
    (39) exp -> . exp RIGHT_ASSIGN exp
    (40) exp -> . exp XOR_ASSIGN exp
    (41) exp -> . exp OR_ASSIGN exp
    (42) exp -> . exp EQUALS exp
    (43) exp -> . constant
    (14) constant -> . HEX_INT
    (15) constant -> . DOT_REAL
    (16) constant -> . EXP_REAL
    (17) constant -> . DEC_INT
    (18) constant -> . CHARACTER
    (19) constant -> . VARIABLE

    HEX_INT         shift and go to state 16
    DOT_REAL        shift and go to state 10
    EXP_REAL        shift and go to state 7
    DEC_INT         shift and go to state 8
    CHARACTER       shift and go to state 4
    VARIABLE        shift and go to state 13

    constant                       shift and go to state 6
    exp                            shift and go to state 53

state 29

    (27) exp -> exp LE_OP . exp
    (20) exp -> . exp ADD exp
    (21) exp -> . exp MINUS exp
    (22) exp -> . exp MULT exp
    (23) exp -> . exp DIV exp
    (24) exp -> . exp MOD exp
    (25) exp -> . exp L_OP exp
    (26) exp -> . exp G_OP exp
    (27) exp -> . exp LE_OP exp
    (28) exp -> . exp GE_OP exp
    (29) exp -> . exp NOTEQUALS exp
    (30) exp -> . exp EQUALS_OP exp
    (31) exp -> . exp OR_OP exp
    (32) exp -> . exp AND_OP exp
    (33) exp -> . exp MUL_ASSIGN exp
    (34) exp -> . exp DIV_ASSIGN exp
    (35) exp -> . exp MOD_ASSIGN exp
    (36) exp -> . exp AND_ASSIGN exp
    (37) exp -> . exp SUB_ASSIGN exp
    (38) exp -> . exp LEFT_ASSIGN exp
    (39) exp -> . exp RIGHT_ASSIGN exp
    (40) exp -> . exp XOR_ASSIGN exp
    (41) exp -> . exp OR_ASSIGN exp
    (42) exp -> . exp EQUALS exp
    (43) exp -> . constant
    (14) constant -> . HEX_INT
    (15) constant -> . DOT_REAL
    (16) constant -> . EXP_REAL
    (17) constant -> . DEC_INT
    (18) constant -> . CHARACTER
    (19) constant -> . VARIABLE

    HEX_INT         shift and go to state 16
    DOT_REAL        shift and go to state 10
    EXP_REAL        shift and go to state 7
    DEC_INT         shift and go to state 8
    CHARACTER       shift and go to state 4
    VARIABLE        shift and go to state 13

    constant                       shift and go to state 6
    exp                            shift and go to state 54

state 30

    (39) exp -> exp RIGHT_ASSIGN . exp
    (20) exp -> . exp ADD exp
    (21) exp -> . exp MINUS exp
    (22) exp -> . exp MULT exp
    (23) exp -> . exp DIV exp
    (24) exp -> . exp MOD exp
    (25) exp -> . exp L_OP exp
    (26) exp -> . exp G_OP exp
    (27) exp -> . exp LE_OP exp
    (28) exp -> . exp GE_OP exp
    (29) exp -> . exp NOTEQUALS exp
    (30) exp -> . exp EQUALS_OP exp
    (31) exp -> . exp OR_OP exp
    (32) exp -> . exp AND_OP exp
    (33) exp -> . exp MUL_ASSIGN exp
    (34) exp -> . exp DIV_ASSIGN exp
    (35) exp -> . exp MOD_ASSIGN exp
    (36) exp -> . exp AND_ASSIGN exp
    (37) exp -> . exp SUB_ASSIGN exp
    (38) exp -> . exp LEFT_ASSIGN exp
    (39) exp -> . exp RIGHT_ASSIGN exp
    (40) exp -> . exp XOR_ASSIGN exp
    (41) exp -> . exp OR_ASSIGN exp
    (42) exp -> . exp EQUALS exp
    (43) exp -> . constant
    (14) constant -> . HEX_INT
    (15) constant -> . DOT_REAL
    (16) constant -> . EXP_REAL
    (17) constant -> . DEC_INT
    (18) constant -> . CHARACTER
    (19) constant -> . VARIABLE

    HEX_INT         shift and go to state 16
    DOT_REAL        shift and go to state 10
    EXP_REAL        shift and go to state 7
    DEC_INT         shift and go to state 8
    CHARACTER       shift and go to state 4
    VARIABLE        shift and go to state 13

    constant                       shift and go to state 6
    exp                            shift and go to state 55

state 31

    (26) exp -> exp G_OP . exp
    (20) exp -> . exp ADD exp
    (21) exp -> . exp MINUS exp
    (22) exp -> . exp MULT exp
    (23) exp -> . exp DIV exp
    (24) exp -> . exp MOD exp
    (25) exp -> . exp L_OP exp
    (26) exp -> . exp G_OP exp
    (27) exp -> . exp LE_OP exp
    (28) exp -> . exp GE_OP exp
    (29) exp -> . exp NOTEQUALS exp
    (30) exp -> . exp EQUALS_OP exp
    (31) exp -> . exp OR_OP exp
    (32) exp -> . exp AND_OP exp
    (33) exp -> . exp MUL_ASSIGN exp
    (34) exp -> . exp DIV_ASSIGN exp
    (35) exp -> . exp MOD_ASSIGN exp
    (36) exp -> . exp AND_ASSIGN exp
    (37) exp -> . exp SUB_ASSIGN exp
    (38) exp -> . exp LEFT_ASSIGN exp
    (39) exp -> . exp RIGHT_ASSIGN exp
    (40) exp -> . exp XOR_ASSIGN exp
    (41) exp -> . exp OR_ASSIGN exp
    (42) exp -> . exp EQUALS exp
    (43) exp -> . constant
    (14) constant -> . HEX_INT
    (15) constant -> . DOT_REAL
    (16) constant -> . EXP_REAL
    (17) constant -> . DEC_INT
    (18) constant -> . CHARACTER
    (19) constant -> . VARIABLE

    HEX_INT         shift and go to state 16
    DOT_REAL        shift and go to state 10
    EXP_REAL        shift and go to state 7
    DEC_INT         shift and go to state 8
    CHARACTER       shift and go to state 4
    VARIABLE        shift and go to state 13

    constant                       shift and go to state 6
    exp                            shift and go to state 56

state 32

    (31) exp -> exp OR_OP . exp
    (20) exp -> . exp ADD exp
    (21) exp -> . exp MINUS exp
    (22) exp -> . exp MULT exp
    (23) exp -> . exp DIV exp
    (24) exp -> . exp MOD exp
    (25) exp -> . exp L_OP exp
    (26) exp -> . exp G_OP exp
    (27) exp -> . exp LE_OP exp
    (28) exp -> . exp GE_OP exp
    (29) exp -> . exp NOTEQUALS exp
    (30) exp -> . exp EQUALS_OP exp
    (31) exp -> . exp OR_OP exp
    (32) exp -> . exp AND_OP exp
    (33) exp -> . exp MUL_ASSIGN exp
    (34) exp -> . exp DIV_ASSIGN exp
    (35) exp -> . exp MOD_ASSIGN exp
    (36) exp -> . exp AND_ASSIGN exp
    (37) exp -> . exp SUB_ASSIGN exp
    (38) exp -> . exp LEFT_ASSIGN exp
    (39) exp -> . exp RIGHT_ASSIGN exp
    (40) exp -> . exp XOR_ASSIGN exp
    (41) exp -> . exp OR_ASSIGN exp
    (42) exp -> . exp EQUALS exp
    (43) exp -> . constant
    (14) constant -> . HEX_INT
    (15) constant -> . DOT_REAL
    (16) constant -> . EXP_REAL
    (17) constant -> . DEC_INT
    (18) constant -> . CHARACTER
    (19) constant -> . VARIABLE

    HEX_INT         shift and go to state 16
    DOT_REAL        shift and go to state 10
    EXP_REAL        shift and go to state 7
    DEC_INT         shift and go to state 8
    CHARACTER       shift and go to state 4
    VARIABLE        shift and go to state 13

    constant                       shift and go to state 6
    exp                            shift and go to state 57

state 33

    (36) exp -> exp AND_ASSIGN . exp
    (20) exp -> . exp ADD exp
    (21) exp -> . exp MINUS exp
    (22) exp -> . exp MULT exp
    (23) exp -> . exp DIV exp
    (24) exp -> . exp MOD exp
    (25) exp -> . exp L_OP exp
    (26) exp -> . exp G_OP exp
    (27) exp -> . exp LE_OP exp
    (28) exp -> . exp GE_OP exp
    (29) exp -> . exp NOTEQUALS exp
    (30) exp -> . exp EQUALS_OP exp
    (31) exp -> . exp OR_OP exp
    (32) exp -> . exp AND_OP exp
    (33) exp -> . exp MUL_ASSIGN exp
    (34) exp -> . exp DIV_ASSIGN exp
    (35) exp -> . exp MOD_ASSIGN exp
    (36) exp -> . exp AND_ASSIGN exp
    (37) exp -> . exp SUB_ASSIGN exp
    (38) exp -> . exp LEFT_ASSIGN exp
    (39) exp -> . exp RIGHT_ASSIGN exp
    (40) exp -> . exp XOR_ASSIGN exp
    (41) exp -> . exp OR_ASSIGN exp
    (42) exp -> . exp EQUALS exp
    (43) exp -> . constant
    (14) constant -> . HEX_INT
    (15) constant -> . DOT_REAL
    (16) constant -> . EXP_REAL
    (17) constant -> . DEC_INT
    (18) constant -> . CHARACTER
    (19) constant -> . VARIABLE

    HEX_INT         shift and go to state 16
    DOT_REAL        shift and go to state 10
    EXP_REAL        shift and go to state 7
    DEC_INT         shift and go to state 8
    CHARACTER       shift and go to state 4
    VARIABLE        shift and go to state 13

    constant                       shift and go to state 6
    exp                            shift and go to state 58

state 34

    (42) exp -> exp EQUALS . exp
    (20) exp -> . exp ADD exp
    (21) exp -> . exp MINUS exp
    (22) exp -> . exp MULT exp
    (23) exp -> . exp DIV exp
    (24) exp -> . exp MOD exp
    (25) exp -> . exp L_OP exp
    (26) exp -> . exp G_OP exp
    (27) exp -> . exp LE_OP exp
    (28) exp -> . exp GE_OP exp
    (29) exp -> . exp NOTEQUALS exp
    (30) exp -> . exp EQUALS_OP exp
    (31) exp -> . exp OR_OP exp
    (32) exp -> . exp AND_OP exp
    (33) exp -> . exp MUL_ASSIGN exp
    (34) exp -> . exp DIV_ASSIGN exp
    (35) exp -> . exp MOD_ASSIGN exp
    (36) exp -> . exp AND_ASSIGN exp
    (37) exp -> . exp SUB_ASSIGN exp
    (38) exp -> . exp LEFT_ASSIGN exp
    (39) exp -> . exp RIGHT_ASSIGN exp
    (40) exp -> . exp XOR_ASSIGN exp
    (41) exp -> . exp OR_ASSIGN exp
    (42) exp -> . exp EQUALS exp
    (43) exp -> . constant
    (14) constant -> . HEX_INT
    (15) constant -> . DOT_REAL
    (16) constant -> . EXP_REAL
    (17) constant -> . DEC_INT
    (18) constant -> . CHARACTER
    (19) constant -> . VARIABLE

    HEX_INT         shift and go to state 16
    DOT_REAL        shift and go to state 10
    EXP_REAL        shift and go to state 7
    DEC_INT         shift and go to state 8
    CHARACTER       shift and go to state 4
    VARIABLE        shift and go to state 13

    constant                       shift and go to state 6
    exp                            shift and go to state 59

state 35

    (32) exp -> exp AND_OP . exp
    (20) exp -> . exp ADD exp
    (21) exp -> . exp MINUS exp
    (22) exp -> . exp MULT exp
    (23) exp -> . exp DIV exp
    (24) exp -> . exp MOD exp
    (25) exp -> . exp L_OP exp
    (26) exp -> . exp G_OP exp
    (27) exp -> . exp LE_OP exp
    (28) exp -> . exp GE_OP exp
    (29) exp -> . exp NOTEQUALS exp
    (30) exp -> . exp EQUALS_OP exp
    (31) exp -> . exp OR_OP exp
    (32) exp -> . exp AND_OP exp
    (33) exp -> . exp MUL_ASSIGN exp
    (34) exp -> . exp DIV_ASSIGN exp
    (35) exp -> . exp MOD_ASSIGN exp
    (36) exp -> . exp AND_ASSIGN exp
    (37) exp -> . exp SUB_ASSIGN exp
    (38) exp -> . exp LEFT_ASSIGN exp
    (39) exp -> . exp RIGHT_ASSIGN exp
    (40) exp -> . exp XOR_ASSIGN exp
    (41) exp -> . exp OR_ASSIGN exp
    (42) exp -> . exp EQUALS exp
    (43) exp -> . constant
    (14) constant -> . HEX_INT
    (15) constant -> . DOT_REAL
    (16) constant -> . EXP_REAL
    (17) constant -> . DEC_INT
    (18) constant -> . CHARACTER
    (19) constant -> . VARIABLE

    HEX_INT         shift and go to state 16
    DOT_REAL        shift and go to state 10
    EXP_REAL        shift and go to state 7
    DEC_INT         shift and go to state 8
    CHARACTER       shift and go to state 4
    VARIABLE        shift and go to state 13

    constant                       shift and go to state 6
    exp                            shift and go to state 60

state 36

    (20) exp -> exp ADD . exp
    (20) exp -> . exp ADD exp
    (21) exp -> . exp MINUS exp
    (22) exp -> . exp MULT exp
    (23) exp -> . exp DIV exp
    (24) exp -> . exp MOD exp
    (25) exp -> . exp L_OP exp
    (26) exp -> . exp G_OP exp
    (27) exp -> . exp LE_OP exp
    (28) exp -> . exp GE_OP exp
    (29) exp -> . exp NOTEQUALS exp
    (30) exp -> . exp EQUALS_OP exp
    (31) exp -> . exp OR_OP exp
    (32) exp -> . exp AND_OP exp
    (33) exp -> . exp MUL_ASSIGN exp
    (34) exp -> . exp DIV_ASSIGN exp
    (35) exp -> . exp MOD_ASSIGN exp
    (36) exp -> . exp AND_ASSIGN exp
    (37) exp -> . exp SUB_ASSIGN exp
    (38) exp -> . exp LEFT_ASSIGN exp
    (39) exp -> . exp RIGHT_ASSIGN exp
    (40) exp -> . exp XOR_ASSIGN exp
    (41) exp -> . exp OR_ASSIGN exp
    (42) exp -> . exp EQUALS exp
    (43) exp -> . constant
    (14) constant -> . HEX_INT
    (15) constant -> . DOT_REAL
    (16) constant -> . EXP_REAL
    (17) constant -> . DEC_INT
    (18) constant -> . CHARACTER
    (19) constant -> . VARIABLE

    HEX_INT         shift and go to state 16
    DOT_REAL        shift and go to state 10
    EXP_REAL        shift and go to state 7
    DEC_INT         shift and go to state 8
    CHARACTER       shift and go to state 4
    VARIABLE        shift and go to state 13

    constant                       shift and go to state 6
    exp                            shift and go to state 61

state 37

    (28) exp -> exp GE_OP . exp
    (20) exp -> . exp ADD exp
    (21) exp -> . exp MINUS exp
    (22) exp -> . exp MULT exp
    (23) exp -> . exp DIV exp
    (24) exp -> . exp MOD exp
    (25) exp -> . exp L_OP exp
    (26) exp -> . exp G_OP exp
    (27) exp -> . exp LE_OP exp
    (28) exp -> . exp GE_OP exp
    (29) exp -> . exp NOTEQUALS exp
    (30) exp -> . exp EQUALS_OP exp
    (31) exp -> . exp OR_OP exp
    (32) exp -> . exp AND_OP exp
    (33) exp -> . exp MUL_ASSIGN exp
    (34) exp -> . exp DIV_ASSIGN exp
    (35) exp -> . exp MOD_ASSIGN exp
    (36) exp -> . exp AND_ASSIGN exp
    (37) exp -> . exp SUB_ASSIGN exp
    (38) exp -> . exp LEFT_ASSIGN exp
    (39) exp -> . exp RIGHT_ASSIGN exp
    (40) exp -> . exp XOR_ASSIGN exp
    (41) exp -> . exp OR_ASSIGN exp
    (42) exp -> . exp EQUALS exp
    (43) exp -> . constant
    (14) constant -> . HEX_INT
    (15) constant -> . DOT_REAL
    (16) constant -> . EXP_REAL
    (17) constant -> . DEC_INT
    (18) constant -> . CHARACTER
    (19) constant -> . VARIABLE

    HEX_INT         shift and go to state 16
    DOT_REAL        shift and go to state 10
    EXP_REAL        shift and go to state 7
    DEC_INT         shift and go to state 8
    CHARACTER       shift and go to state 4
    VARIABLE        shift and go to state 13

    constant                       shift and go to state 6
    exp                            shift and go to state 62

state 38

    (37) exp -> exp SUB_ASSIGN . exp
    (20) exp -> . exp ADD exp
    (21) exp -> . exp MINUS exp
    (22) exp -> . exp MULT exp
    (23) exp -> . exp DIV exp
    (24) exp -> . exp MOD exp
    (25) exp -> . exp L_OP exp
    (26) exp -> . exp G_OP exp
    (27) exp -> . exp LE_OP exp
    (28) exp -> . exp GE_OP exp
    (29) exp -> . exp NOTEQUALS exp
    (30) exp -> . exp EQUALS_OP exp
    (31) exp -> . exp OR_OP exp
    (32) exp -> . exp AND_OP exp
    (33) exp -> . exp MUL_ASSIGN exp
    (34) exp -> . exp DIV_ASSIGN exp
    (35) exp -> . exp MOD_ASSIGN exp
    (36) exp -> . exp AND_ASSIGN exp
    (37) exp -> . exp SUB_ASSIGN exp
    (38) exp -> . exp LEFT_ASSIGN exp
    (39) exp -> . exp RIGHT_ASSIGN exp
    (40) exp -> . exp XOR_ASSIGN exp
    (41) exp -> . exp OR_ASSIGN exp
    (42) exp -> . exp EQUALS exp
    (43) exp -> . constant
    (14) constant -> . HEX_INT
    (15) constant -> . DOT_REAL
    (16) constant -> . EXP_REAL
    (17) constant -> . DEC_INT
    (18) constant -> . CHARACTER
    (19) constant -> . VARIABLE

    HEX_INT         shift and go to state 16
    DOT_REAL        shift and go to state 10
    EXP_REAL        shift and go to state 7
    DEC_INT         shift and go to state 8
    CHARACTER       shift and go to state 4
    VARIABLE        shift and go to state 13

    constant                       shift and go to state 6
    exp                            shift and go to state 63

state 39

    (35) exp -> exp MOD_ASSIGN . exp
    (20) exp -> . exp ADD exp
    (21) exp -> . exp MINUS exp
    (22) exp -> . exp MULT exp
    (23) exp -> . exp DIV exp
    (24) exp -> . exp MOD exp
    (25) exp -> . exp L_OP exp
    (26) exp -> . exp G_OP exp
    (27) exp -> . exp LE_OP exp
    (28) exp -> . exp GE_OP exp
    (29) exp -> . exp NOTEQUALS exp
    (30) exp -> . exp EQUALS_OP exp
    (31) exp -> . exp OR_OP exp
    (32) exp -> . exp AND_OP exp
    (33) exp -> . exp MUL_ASSIGN exp
    (34) exp -> . exp DIV_ASSIGN exp
    (35) exp -> . exp MOD_ASSIGN exp
    (36) exp -> . exp AND_ASSIGN exp
    (37) exp -> . exp SUB_ASSIGN exp
    (38) exp -> . exp LEFT_ASSIGN exp
    (39) exp -> . exp RIGHT_ASSIGN exp
    (40) exp -> . exp XOR_ASSIGN exp
    (41) exp -> . exp OR_ASSIGN exp
    (42) exp -> . exp EQUALS exp
    (43) exp -> . constant
    (14) constant -> . HEX_INT
    (15) constant -> . DOT_REAL
    (16) constant -> . EXP_REAL
    (17) constant -> . DEC_INT
    (18) constant -> . CHARACTER
    (19) constant -> . VARIABLE

    HEX_INT         shift and go to state 16
    DOT_REAL        shift and go to state 10
    EXP_REAL        shift and go to state 7
    DEC_INT         shift and go to state 8
    CHARACTER       shift and go to state 4
    VARIABLE        shift and go to state 13

    constant                       shift and go to state 6
    exp                            shift and go to state 64

state 40

    (40) exp -> exp XOR_ASSIGN . exp
    (20) exp -> . exp ADD exp
    (21) exp -> . exp MINUS exp
    (22) exp -> . exp MULT exp
    (23) exp -> . exp DIV exp
    (24) exp -> . exp MOD exp
    (25) exp -> . exp L_OP exp
    (26) exp -> . exp G_OP exp
    (27) exp -> . exp LE_OP exp
    (28) exp -> . exp GE_OP exp
    (29) exp -> . exp NOTEQUALS exp
    (30) exp -> . exp EQUALS_OP exp
    (31) exp -> . exp OR_OP exp
    (32) exp -> . exp AND_OP exp
    (33) exp -> . exp MUL_ASSIGN exp
    (34) exp -> . exp DIV_ASSIGN exp
    (35) exp -> . exp MOD_ASSIGN exp
    (36) exp -> . exp AND_ASSIGN exp
    (37) exp -> . exp SUB_ASSIGN exp
    (38) exp -> . exp LEFT_ASSIGN exp
    (39) exp -> . exp RIGHT_ASSIGN exp
    (40) exp -> . exp XOR_ASSIGN exp
    (41) exp -> . exp OR_ASSIGN exp
    (42) exp -> . exp EQUALS exp
    (43) exp -> . constant
    (14) constant -> . HEX_INT
    (15) constant -> . DOT_REAL
    (16) constant -> . EXP_REAL
    (17) constant -> . DEC_INT
    (18) constant -> . CHARACTER
    (19) constant -> . VARIABLE

    HEX_INT         shift and go to state 16
    DOT_REAL        shift and go to state 10
    EXP_REAL        shift and go to state 7
    DEC_INT         shift and go to state 8
    CHARACTER       shift and go to state 4
    VARIABLE        shift and go to state 13

    constant                       shift and go to state 6
    exp                            shift and go to state 65

state 41

    (41) exp -> exp OR_ASSIGN . exp
    (20) exp -> . exp ADD exp
    (21) exp -> . exp MINUS exp
    (22) exp -> . exp MULT exp
    (23) exp -> . exp DIV exp
    (24) exp -> . exp MOD exp
    (25) exp -> . exp L_OP exp
    (26) exp -> . exp G_OP exp
    (27) exp -> . exp LE_OP exp
    (28) exp -> . exp GE_OP exp
    (29) exp -> . exp NOTEQUALS exp
    (30) exp -> . exp EQUALS_OP exp
    (31) exp -> . exp OR_OP exp
    (32) exp -> . exp AND_OP exp
    (33) exp -> . exp MUL_ASSIGN exp
    (34) exp -> . exp DIV_ASSIGN exp
    (35) exp -> . exp MOD_ASSIGN exp
    (36) exp -> . exp AND_ASSIGN exp
    (37) exp -> . exp SUB_ASSIGN exp
    (38) exp -> . exp LEFT_ASSIGN exp
    (39) exp -> . exp RIGHT_ASSIGN exp
    (40) exp -> . exp XOR_ASSIGN exp
    (41) exp -> . exp OR_ASSIGN exp
    (42) exp -> . exp EQUALS exp
    (43) exp -> . constant
    (14) constant -> . HEX_INT
    (15) constant -> . DOT_REAL
    (16) constant -> . EXP_REAL
    (17) constant -> . DEC_INT
    (18) constant -> . CHARACTER
    (19) constant -> . VARIABLE

    HEX_INT         shift and go to state 16
    DOT_REAL        shift and go to state 10
    EXP_REAL        shift and go to state 7
    DEC_INT         shift and go to state 8
    CHARACTER       shift and go to state 4
    VARIABLE        shift and go to state 13

    constant                       shift and go to state 6
    exp                            shift and go to state 66

state 42

    (25) exp -> exp L_OP . exp
    (20) exp -> . exp ADD exp
    (21) exp -> . exp MINUS exp
    (22) exp -> . exp MULT exp
    (23) exp -> . exp DIV exp
    (24) exp -> . exp MOD exp
    (25) exp -> . exp L_OP exp
    (26) exp -> . exp G_OP exp
    (27) exp -> . exp LE_OP exp
    (28) exp -> . exp GE_OP exp
    (29) exp -> . exp NOTEQUALS exp
    (30) exp -> . exp EQUALS_OP exp
    (31) exp -> . exp OR_OP exp
    (32) exp -> . exp AND_OP exp
    (33) exp -> . exp MUL_ASSIGN exp
    (34) exp -> . exp DIV_ASSIGN exp
    (35) exp -> . exp MOD_ASSIGN exp
    (36) exp -> . exp AND_ASSIGN exp
    (37) exp -> . exp SUB_ASSIGN exp
    (38) exp -> . exp LEFT_ASSIGN exp
    (39) exp -> . exp RIGHT_ASSIGN exp
    (40) exp -> . exp XOR_ASSIGN exp
    (41) exp -> . exp OR_ASSIGN exp
    (42) exp -> . exp EQUALS exp
    (43) exp -> . constant
    (14) constant -> . HEX_INT
    (15) constant -> . DOT_REAL
    (16) constant -> . EXP_REAL
    (17) constant -> . DEC_INT
    (18) constant -> . CHARACTER
    (19) constant -> . VARIABLE

    HEX_INT         shift and go to state 16
    DOT_REAL        shift and go to state 10
    EXP_REAL        shift and go to state 7
    DEC_INT         shift and go to state 8
    CHARACTER       shift and go to state 4
    VARIABLE        shift and go to state 13

    constant                       shift and go to state 6
    exp                            shift and go to state 67

state 43

    (33) exp -> exp MUL_ASSIGN . exp
    (20) exp -> . exp ADD exp
    (21) exp -> . exp MINUS exp
    (22) exp -> . exp MULT exp
    (23) exp -> . exp DIV exp
    (24) exp -> . exp MOD exp
    (25) exp -> . exp L_OP exp
    (26) exp -> . exp G_OP exp
    (27) exp -> . exp LE_OP exp
    (28) exp -> . exp GE_OP exp
    (29) exp -> . exp NOTEQUALS exp
    (30) exp -> . exp EQUALS_OP exp
    (31) exp -> . exp OR_OP exp
    (32) exp -> . exp AND_OP exp
    (33) exp -> . exp MUL_ASSIGN exp
    (34) exp -> . exp DIV_ASSIGN exp
    (35) exp -> . exp MOD_ASSIGN exp
    (36) exp -> . exp AND_ASSIGN exp
    (37) exp -> . exp SUB_ASSIGN exp
    (38) exp -> . exp LEFT_ASSIGN exp
    (39) exp -> . exp RIGHT_ASSIGN exp
    (40) exp -> . exp XOR_ASSIGN exp
    (41) exp -> . exp OR_ASSIGN exp
    (42) exp -> . exp EQUALS exp
    (43) exp -> . constant
    (14) constant -> . HEX_INT
    (15) constant -> . DOT_REAL
    (16) constant -> . EXP_REAL
    (17) constant -> . DEC_INT
    (18) constant -> . CHARACTER
    (19) constant -> . VARIABLE

    HEX_INT         shift and go to state 16
    DOT_REAL        shift and go to state 10
    EXP_REAL        shift and go to state 7
    DEC_INT         shift and go to state 8
    CHARACTER       shift and go to state 4
    VARIABLE        shift and go to state 13

    constant                       shift and go to state 6
    exp                            shift and go to state 68

state 44

    (38) exp -> exp LEFT_ASSIGN . exp
    (20) exp -> . exp ADD exp
    (21) exp -> . exp MINUS exp
    (22) exp -> . exp MULT exp
    (23) exp -> . exp DIV exp
    (24) exp -> . exp MOD exp
    (25) exp -> . exp L_OP exp
    (26) exp -> . exp G_OP exp
    (27) exp -> . exp LE_OP exp
    (28) exp -> . exp GE_OP exp
    (29) exp -> . exp NOTEQUALS exp
    (30) exp -> . exp EQUALS_OP exp
    (31) exp -> . exp OR_OP exp
    (32) exp -> . exp AND_OP exp
    (33) exp -> . exp MUL_ASSIGN exp
    (34) exp -> . exp DIV_ASSIGN exp
    (35) exp -> . exp MOD_ASSIGN exp
    (36) exp -> . exp AND_ASSIGN exp
    (37) exp -> . exp SUB_ASSIGN exp
    (38) exp -> . exp LEFT_ASSIGN exp
    (39) exp -> . exp RIGHT_ASSIGN exp
    (40) exp -> . exp XOR_ASSIGN exp
    (41) exp -> . exp OR_ASSIGN exp
    (42) exp -> . exp EQUALS exp
    (43) exp -> . constant
    (14) constant -> . HEX_INT
    (15) constant -> . DOT_REAL
    (16) constant -> . EXP_REAL
    (17) constant -> . DEC_INT
    (18) constant -> . CHARACTER
    (19) constant -> . VARIABLE

    HEX_INT         shift and go to state 16
    DOT_REAL        shift and go to state 10
    EXP_REAL        shift and go to state 7
    DEC_INT         shift and go to state 8
    CHARACTER       shift and go to state 4
    VARIABLE        shift and go to state 13

    constant                       shift and go to state 6
    exp                            shift and go to state 69

state 45

    (24) exp -> exp MOD . exp
    (20) exp -> . exp ADD exp
    (21) exp -> . exp MINUS exp
    (22) exp -> . exp MULT exp
    (23) exp -> . exp DIV exp
    (24) exp -> . exp MOD exp
    (25) exp -> . exp L_OP exp
    (26) exp -> . exp G_OP exp
    (27) exp -> . exp LE_OP exp
    (28) exp -> . exp GE_OP exp
    (29) exp -> . exp NOTEQUALS exp
    (30) exp -> . exp EQUALS_OP exp
    (31) exp -> . exp OR_OP exp
    (32) exp -> . exp AND_OP exp
    (33) exp -> . exp MUL_ASSIGN exp
    (34) exp -> . exp DIV_ASSIGN exp
    (35) exp -> . exp MOD_ASSIGN exp
    (36) exp -> . exp AND_ASSIGN exp
    (37) exp -> . exp SUB_ASSIGN exp
    (38) exp -> . exp LEFT_ASSIGN exp
    (39) exp -> . exp RIGHT_ASSIGN exp
    (40) exp -> . exp XOR_ASSIGN exp
    (41) exp -> . exp OR_ASSIGN exp
    (42) exp -> . exp EQUALS exp
    (43) exp -> . constant
    (14) constant -> . HEX_INT
    (15) constant -> . DOT_REAL
    (16) constant -> . EXP_REAL
    (17) constant -> . DEC_INT
    (18) constant -> . CHARACTER
    (19) constant -> . VARIABLE

    HEX_INT         shift and go to state 16
    DOT_REAL        shift and go to state 10
    EXP_REAL        shift and go to state 7
    DEC_INT         shift and go to state 8
    CHARACTER       shift and go to state 4
    VARIABLE        shift and go to state 13

    constant                       shift and go to state 6
    exp                            shift and go to state 70

state 46

    (5) declaration -> type VARIABLE SEMI_COLON .

    INT             reduce using rule 5 (declaration -> type VARIABLE SEMI_COLON .)
    FLOAT           reduce using rule 5 (declaration -> type VARIABLE SEMI_COLON .)
    CHAR            reduce using rule 5 (declaration -> type VARIABLE SEMI_COLON .)
    DOUBLE          reduce using rule 5 (declaration -> type VARIABLE SEMI_COLON .)
    VOID            reduce using rule 5 (declaration -> type VARIABLE SEMI_COLON .)
    SHORT           reduce using rule 5 (declaration -> type VARIABLE SEMI_COLON .)
    LONG            reduce using rule 5 (declaration -> type VARIABLE SEMI_COLON .)
    HEX_INT         reduce using rule 5 (declaration -> type VARIABLE SEMI_COLON .)
    DOT_REAL        reduce using rule 5 (declaration -> type VARIABLE SEMI_COLON .)
    EXP_REAL        reduce using rule 5 (declaration -> type VARIABLE SEMI_COLON .)
    DEC_INT         reduce using rule 5 (declaration -> type VARIABLE SEMI_COLON .)
    CHARACTER       reduce using rule 5 (declaration -> type VARIABLE SEMI_COLON .)
    VARIABLE        reduce using rule 5 (declaration -> type VARIABLE SEMI_COLON .)
    $end            reduce using rule 5 (declaration -> type VARIABLE SEMI_COLON .)


state 47

    (6) declaration -> type VARIABLE EQUALS . exp SEMI_COLON
    (20) exp -> . exp ADD exp
    (21) exp -> . exp MINUS exp
    (22) exp -> . exp MULT exp
    (23) exp -> . exp DIV exp
    (24) exp -> . exp MOD exp
    (25) exp -> . exp L_OP exp
    (26) exp -> . exp G_OP exp
    (27) exp -> . exp LE_OP exp
    (28) exp -> . exp GE_OP exp
    (29) exp -> . exp NOTEQUALS exp
    (30) exp -> . exp EQUALS_OP exp
    (31) exp -> . exp OR_OP exp
    (32) exp -> . exp AND_OP exp
    (33) exp -> . exp MUL_ASSIGN exp
    (34) exp -> . exp DIV_ASSIGN exp
    (35) exp -> . exp MOD_ASSIGN exp
    (36) exp -> . exp AND_ASSIGN exp
    (37) exp -> . exp SUB_ASSIGN exp
    (38) exp -> . exp LEFT_ASSIGN exp
    (39) exp -> . exp RIGHT_ASSIGN exp
    (40) exp -> . exp XOR_ASSIGN exp
    (41) exp -> . exp OR_ASSIGN exp
    (42) exp -> . exp EQUALS exp
    (43) exp -> . constant
    (14) constant -> . HEX_INT
    (15) constant -> . DOT_REAL
    (16) constant -> . EXP_REAL
    (17) constant -> . DEC_INT
    (18) constant -> . CHARACTER
    (19) constant -> . VARIABLE

    HEX_INT         shift and go to state 16
    DOT_REAL        shift and go to state 10
    EXP_REAL        shift and go to state 7
    DEC_INT         shift and go to state 8
    CHARACTER       shift and go to state 4
    VARIABLE        shift and go to state 13

    constant                       shift and go to state 6
    exp                            shift and go to state 71

state 48

    (29) exp -> exp NOTEQUALS exp .
    (20) exp -> exp . ADD exp
    (21) exp -> exp . MINUS exp
    (22) exp -> exp . MULT exp
    (23) exp -> exp . DIV exp
    (24) exp -> exp . MOD exp
    (25) exp -> exp . L_OP exp
    (26) exp -> exp . G_OP exp
    (27) exp -> exp . LE_OP exp
    (28) exp -> exp . GE_OP exp
    (29) exp -> exp . NOTEQUALS exp
    (30) exp -> exp . EQUALS_OP exp
    (31) exp -> exp . OR_OP exp
    (32) exp -> exp . AND_OP exp
    (33) exp -> exp . MUL_ASSIGN exp
    (34) exp -> exp . DIV_ASSIGN exp
    (35) exp -> exp . MOD_ASSIGN exp
    (36) exp -> exp . AND_ASSIGN exp
    (37) exp -> exp . SUB_ASSIGN exp
    (38) exp -> exp . LEFT_ASSIGN exp
    (39) exp -> exp . RIGHT_ASSIGN exp
    (40) exp -> exp . XOR_ASSIGN exp
    (41) exp -> exp . OR_ASSIGN exp
    (42) exp -> exp . EQUALS exp

    ADD             reduce using rule 29 (exp -> exp NOTEQUALS exp .)
    MINUS           reduce using rule 29 (exp -> exp NOTEQUALS exp .)
    MULT            reduce using rule 29 (exp -> exp NOTEQUALS exp .)
    DIV             reduce using rule 29 (exp -> exp NOTEQUALS exp .)
    MOD             reduce using rule 29 (exp -> exp NOTEQUALS exp .)
    L_OP            reduce using rule 29 (exp -> exp NOTEQUALS exp .)
    G_OP            reduce using rule 29 (exp -> exp NOTEQUALS exp .)
    LE_OP           reduce using rule 29 (exp -> exp NOTEQUALS exp .)
    GE_OP           reduce using rule 29 (exp -> exp NOTEQUALS exp .)
    NOTEQUALS       reduce using rule 29 (exp -> exp NOTEQUALS exp .)
    EQUALS_OP       reduce using rule 29 (exp -> exp NOTEQUALS exp .)
    SEMI_COLON      reduce using rule 29 (exp -> exp NOTEQUALS exp .)
    OR_OP           shift and go to state 32
    AND_OP          shift and go to state 35
    MUL_ASSIGN      shift and go to state 43
    DIV_ASSIGN      shift and go to state 24
    MOD_ASSIGN      shift and go to state 39
    AND_ASSIGN      shift and go to state 33
    SUB_ASSIGN      shift and go to state 38
    LEFT_ASSIGN     shift and go to state 44
    RIGHT_ASSIGN    shift and go to state 30
    XOR_ASSIGN      shift and go to state 40
    OR_ASSIGN       shift and go to state 41
    EQUALS          shift and go to state 34

  ! OR_OP           [ reduce using rule 29 (exp -> exp NOTEQUALS exp .) ]
  ! AND_OP          [ reduce using rule 29 (exp -> exp NOTEQUALS exp .) ]
  ! MUL_ASSIGN      [ reduce using rule 29 (exp -> exp NOTEQUALS exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 29 (exp -> exp NOTEQUALS exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 29 (exp -> exp NOTEQUALS exp .) ]
  ! AND_ASSIGN      [ reduce using rule 29 (exp -> exp NOTEQUALS exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 29 (exp -> exp NOTEQUALS exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 29 (exp -> exp NOTEQUALS exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 29 (exp -> exp NOTEQUALS exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 29 (exp -> exp NOTEQUALS exp .) ]
  ! OR_ASSIGN       [ reduce using rule 29 (exp -> exp NOTEQUALS exp .) ]
  ! EQUALS          [ reduce using rule 29 (exp -> exp NOTEQUALS exp .) ]
  ! ADD             [ shift and go to state 36 ]
  ! MINUS           [ shift and go to state 27 ]
  ! MULT            [ shift and go to state 28 ]
  ! DIV             [ shift and go to state 26 ]
  ! MOD             [ shift and go to state 45 ]
  ! L_OP            [ shift and go to state 42 ]
  ! G_OP            [ shift and go to state 31 ]
  ! LE_OP           [ shift and go to state 29 ]
  ! GE_OP           [ shift and go to state 37 ]
  ! NOTEQUALS       [ shift and go to state 22 ]
  ! EQUALS_OP       [ shift and go to state 23 ]


state 49

    (30) exp -> exp EQUALS_OP exp .
    (20) exp -> exp . ADD exp
    (21) exp -> exp . MINUS exp
    (22) exp -> exp . MULT exp
    (23) exp -> exp . DIV exp
    (24) exp -> exp . MOD exp
    (25) exp -> exp . L_OP exp
    (26) exp -> exp . G_OP exp
    (27) exp -> exp . LE_OP exp
    (28) exp -> exp . GE_OP exp
    (29) exp -> exp . NOTEQUALS exp
    (30) exp -> exp . EQUALS_OP exp
    (31) exp -> exp . OR_OP exp
    (32) exp -> exp . AND_OP exp
    (33) exp -> exp . MUL_ASSIGN exp
    (34) exp -> exp . DIV_ASSIGN exp
    (35) exp -> exp . MOD_ASSIGN exp
    (36) exp -> exp . AND_ASSIGN exp
    (37) exp -> exp . SUB_ASSIGN exp
    (38) exp -> exp . LEFT_ASSIGN exp
    (39) exp -> exp . RIGHT_ASSIGN exp
    (40) exp -> exp . XOR_ASSIGN exp
    (41) exp -> exp . OR_ASSIGN exp
    (42) exp -> exp . EQUALS exp

    ADD             reduce using rule 30 (exp -> exp EQUALS_OP exp .)
    MINUS           reduce using rule 30 (exp -> exp EQUALS_OP exp .)
    MULT            reduce using rule 30 (exp -> exp EQUALS_OP exp .)
    DIV             reduce using rule 30 (exp -> exp EQUALS_OP exp .)
    MOD             reduce using rule 30 (exp -> exp EQUALS_OP exp .)
    L_OP            reduce using rule 30 (exp -> exp EQUALS_OP exp .)
    G_OP            reduce using rule 30 (exp -> exp EQUALS_OP exp .)
    LE_OP           reduce using rule 30 (exp -> exp EQUALS_OP exp .)
    GE_OP           reduce using rule 30 (exp -> exp EQUALS_OP exp .)
    NOTEQUALS       reduce using rule 30 (exp -> exp EQUALS_OP exp .)
    EQUALS_OP       reduce using rule 30 (exp -> exp EQUALS_OP exp .)
    SEMI_COLON      reduce using rule 30 (exp -> exp EQUALS_OP exp .)
    OR_OP           shift and go to state 32
    AND_OP          shift and go to state 35
    MUL_ASSIGN      shift and go to state 43
    DIV_ASSIGN      shift and go to state 24
    MOD_ASSIGN      shift and go to state 39
    AND_ASSIGN      shift and go to state 33
    SUB_ASSIGN      shift and go to state 38
    LEFT_ASSIGN     shift and go to state 44
    RIGHT_ASSIGN    shift and go to state 30
    XOR_ASSIGN      shift and go to state 40
    OR_ASSIGN       shift and go to state 41
    EQUALS          shift and go to state 34

  ! OR_OP           [ reduce using rule 30 (exp -> exp EQUALS_OP exp .) ]
  ! AND_OP          [ reduce using rule 30 (exp -> exp EQUALS_OP exp .) ]
  ! MUL_ASSIGN      [ reduce using rule 30 (exp -> exp EQUALS_OP exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 30 (exp -> exp EQUALS_OP exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 30 (exp -> exp EQUALS_OP exp .) ]
  ! AND_ASSIGN      [ reduce using rule 30 (exp -> exp EQUALS_OP exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 30 (exp -> exp EQUALS_OP exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 30 (exp -> exp EQUALS_OP exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 30 (exp -> exp EQUALS_OP exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 30 (exp -> exp EQUALS_OP exp .) ]
  ! OR_ASSIGN       [ reduce using rule 30 (exp -> exp EQUALS_OP exp .) ]
  ! EQUALS          [ reduce using rule 30 (exp -> exp EQUALS_OP exp .) ]
  ! ADD             [ shift and go to state 36 ]
  ! MINUS           [ shift and go to state 27 ]
  ! MULT            [ shift and go to state 28 ]
  ! DIV             [ shift and go to state 26 ]
  ! MOD             [ shift and go to state 45 ]
  ! L_OP            [ shift and go to state 42 ]
  ! G_OP            [ shift and go to state 31 ]
  ! LE_OP           [ shift and go to state 29 ]
  ! GE_OP           [ shift and go to state 37 ]
  ! NOTEQUALS       [ shift and go to state 22 ]
  ! EQUALS_OP       [ shift and go to state 23 ]


state 50

    (34) exp -> exp DIV_ASSIGN exp .
    (20) exp -> exp . ADD exp
    (21) exp -> exp . MINUS exp
    (22) exp -> exp . MULT exp
    (23) exp -> exp . DIV exp
    (24) exp -> exp . MOD exp
    (25) exp -> exp . L_OP exp
    (26) exp -> exp . G_OP exp
    (27) exp -> exp . LE_OP exp
    (28) exp -> exp . GE_OP exp
    (29) exp -> exp . NOTEQUALS exp
    (30) exp -> exp . EQUALS_OP exp
    (31) exp -> exp . OR_OP exp
    (32) exp -> exp . AND_OP exp
    (33) exp -> exp . MUL_ASSIGN exp
    (34) exp -> exp . DIV_ASSIGN exp
    (35) exp -> exp . MOD_ASSIGN exp
    (36) exp -> exp . AND_ASSIGN exp
    (37) exp -> exp . SUB_ASSIGN exp
    (38) exp -> exp . LEFT_ASSIGN exp
    (39) exp -> exp . RIGHT_ASSIGN exp
    (40) exp -> exp . XOR_ASSIGN exp
    (41) exp -> exp . OR_ASSIGN exp
    (42) exp -> exp . EQUALS exp

    ADD             reduce using rule 34 (exp -> exp DIV_ASSIGN exp .)
    MINUS           reduce using rule 34 (exp -> exp DIV_ASSIGN exp .)
    MULT            reduce using rule 34 (exp -> exp DIV_ASSIGN exp .)
    DIV             reduce using rule 34 (exp -> exp DIV_ASSIGN exp .)
    MOD             reduce using rule 34 (exp -> exp DIV_ASSIGN exp .)
    L_OP            reduce using rule 34 (exp -> exp DIV_ASSIGN exp .)
    G_OP            reduce using rule 34 (exp -> exp DIV_ASSIGN exp .)
    LE_OP           reduce using rule 34 (exp -> exp DIV_ASSIGN exp .)
    GE_OP           reduce using rule 34 (exp -> exp DIV_ASSIGN exp .)
    NOTEQUALS       reduce using rule 34 (exp -> exp DIV_ASSIGN exp .)
    EQUALS_OP       reduce using rule 34 (exp -> exp DIV_ASSIGN exp .)
    OR_OP           reduce using rule 34 (exp -> exp DIV_ASSIGN exp .)
    AND_OP          reduce using rule 34 (exp -> exp DIV_ASSIGN exp .)
    SEMI_COLON      reduce using rule 34 (exp -> exp DIV_ASSIGN exp .)
    MUL_ASSIGN      shift and go to state 43
    DIV_ASSIGN      shift and go to state 24
    MOD_ASSIGN      shift and go to state 39
    AND_ASSIGN      shift and go to state 33
    SUB_ASSIGN      shift and go to state 38
    LEFT_ASSIGN     shift and go to state 44
    RIGHT_ASSIGN    shift and go to state 30
    XOR_ASSIGN      shift and go to state 40
    OR_ASSIGN       shift and go to state 41
    EQUALS          shift and go to state 34

  ! MUL_ASSIGN      [ reduce using rule 34 (exp -> exp DIV_ASSIGN exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 34 (exp -> exp DIV_ASSIGN exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 34 (exp -> exp DIV_ASSIGN exp .) ]
  ! AND_ASSIGN      [ reduce using rule 34 (exp -> exp DIV_ASSIGN exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 34 (exp -> exp DIV_ASSIGN exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 34 (exp -> exp DIV_ASSIGN exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 34 (exp -> exp DIV_ASSIGN exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 34 (exp -> exp DIV_ASSIGN exp .) ]
  ! OR_ASSIGN       [ reduce using rule 34 (exp -> exp DIV_ASSIGN exp .) ]
  ! EQUALS          [ reduce using rule 34 (exp -> exp DIV_ASSIGN exp .) ]
  ! ADD             [ shift and go to state 36 ]
  ! MINUS           [ shift and go to state 27 ]
  ! MULT            [ shift and go to state 28 ]
  ! DIV             [ shift and go to state 26 ]
  ! MOD             [ shift and go to state 45 ]
  ! L_OP            [ shift and go to state 42 ]
  ! G_OP            [ shift and go to state 31 ]
  ! LE_OP           [ shift and go to state 29 ]
  ! GE_OP           [ shift and go to state 37 ]
  ! NOTEQUALS       [ shift and go to state 22 ]
  ! EQUALS_OP       [ shift and go to state 23 ]
  ! OR_OP           [ shift and go to state 32 ]
  ! AND_OP          [ shift and go to state 35 ]


state 51

    (23) exp -> exp DIV exp .
    (20) exp -> exp . ADD exp
    (21) exp -> exp . MINUS exp
    (22) exp -> exp . MULT exp
    (23) exp -> exp . DIV exp
    (24) exp -> exp . MOD exp
    (25) exp -> exp . L_OP exp
    (26) exp -> exp . G_OP exp
    (27) exp -> exp . LE_OP exp
    (28) exp -> exp . GE_OP exp
    (29) exp -> exp . NOTEQUALS exp
    (30) exp -> exp . EQUALS_OP exp
    (31) exp -> exp . OR_OP exp
    (32) exp -> exp . AND_OP exp
    (33) exp -> exp . MUL_ASSIGN exp
    (34) exp -> exp . DIV_ASSIGN exp
    (35) exp -> exp . MOD_ASSIGN exp
    (36) exp -> exp . AND_ASSIGN exp
    (37) exp -> exp . SUB_ASSIGN exp
    (38) exp -> exp . LEFT_ASSIGN exp
    (39) exp -> exp . RIGHT_ASSIGN exp
    (40) exp -> exp . XOR_ASSIGN exp
    (41) exp -> exp . OR_ASSIGN exp
    (42) exp -> exp . EQUALS exp

    ADD             reduce using rule 23 (exp -> exp DIV exp .)
    MINUS           reduce using rule 23 (exp -> exp DIV exp .)
    MULT            reduce using rule 23 (exp -> exp DIV exp .)
    DIV             reduce using rule 23 (exp -> exp DIV exp .)
    MOD             reduce using rule 23 (exp -> exp DIV exp .)
    SEMI_COLON      reduce using rule 23 (exp -> exp DIV exp .)
    L_OP            shift and go to state 42
    G_OP            shift and go to state 31
    LE_OP           shift and go to state 29
    GE_OP           shift and go to state 37
    NOTEQUALS       shift and go to state 22
    EQUALS_OP       shift and go to state 23
    OR_OP           shift and go to state 32
    AND_OP          shift and go to state 35
    MUL_ASSIGN      shift and go to state 43
    DIV_ASSIGN      shift and go to state 24
    MOD_ASSIGN      shift and go to state 39
    AND_ASSIGN      shift and go to state 33
    SUB_ASSIGN      shift and go to state 38
    LEFT_ASSIGN     shift and go to state 44
    RIGHT_ASSIGN    shift and go to state 30
    XOR_ASSIGN      shift and go to state 40
    OR_ASSIGN       shift and go to state 41
    EQUALS          shift and go to state 34

  ! L_OP            [ reduce using rule 23 (exp -> exp DIV exp .) ]
  ! G_OP            [ reduce using rule 23 (exp -> exp DIV exp .) ]
  ! LE_OP           [ reduce using rule 23 (exp -> exp DIV exp .) ]
  ! GE_OP           [ reduce using rule 23 (exp -> exp DIV exp .) ]
  ! NOTEQUALS       [ reduce using rule 23 (exp -> exp DIV exp .) ]
  ! EQUALS_OP       [ reduce using rule 23 (exp -> exp DIV exp .) ]
  ! OR_OP           [ reduce using rule 23 (exp -> exp DIV exp .) ]
  ! AND_OP          [ reduce using rule 23 (exp -> exp DIV exp .) ]
  ! MUL_ASSIGN      [ reduce using rule 23 (exp -> exp DIV exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 23 (exp -> exp DIV exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 23 (exp -> exp DIV exp .) ]
  ! AND_ASSIGN      [ reduce using rule 23 (exp -> exp DIV exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 23 (exp -> exp DIV exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 23 (exp -> exp DIV exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 23 (exp -> exp DIV exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 23 (exp -> exp DIV exp .) ]
  ! OR_ASSIGN       [ reduce using rule 23 (exp -> exp DIV exp .) ]
  ! EQUALS          [ reduce using rule 23 (exp -> exp DIV exp .) ]
  ! ADD             [ shift and go to state 36 ]
  ! MINUS           [ shift and go to state 27 ]
  ! MULT            [ shift and go to state 28 ]
  ! DIV             [ shift and go to state 26 ]
  ! MOD             [ shift and go to state 45 ]


state 52

    (21) exp -> exp MINUS exp .
    (20) exp -> exp . ADD exp
    (21) exp -> exp . MINUS exp
    (22) exp -> exp . MULT exp
    (23) exp -> exp . DIV exp
    (24) exp -> exp . MOD exp
    (25) exp -> exp . L_OP exp
    (26) exp -> exp . G_OP exp
    (27) exp -> exp . LE_OP exp
    (28) exp -> exp . GE_OP exp
    (29) exp -> exp . NOTEQUALS exp
    (30) exp -> exp . EQUALS_OP exp
    (31) exp -> exp . OR_OP exp
    (32) exp -> exp . AND_OP exp
    (33) exp -> exp . MUL_ASSIGN exp
    (34) exp -> exp . DIV_ASSIGN exp
    (35) exp -> exp . MOD_ASSIGN exp
    (36) exp -> exp . AND_ASSIGN exp
    (37) exp -> exp . SUB_ASSIGN exp
    (38) exp -> exp . LEFT_ASSIGN exp
    (39) exp -> exp . RIGHT_ASSIGN exp
    (40) exp -> exp . XOR_ASSIGN exp
    (41) exp -> exp . OR_ASSIGN exp
    (42) exp -> exp . EQUALS exp

    ADD             reduce using rule 21 (exp -> exp MINUS exp .)
    MINUS           reduce using rule 21 (exp -> exp MINUS exp .)
    SEMI_COLON      reduce using rule 21 (exp -> exp MINUS exp .)
    MULT            shift and go to state 28
    DIV             shift and go to state 26
    MOD             shift and go to state 45
    L_OP            shift and go to state 42
    G_OP            shift and go to state 31
    LE_OP           shift and go to state 29
    GE_OP           shift and go to state 37
    NOTEQUALS       shift and go to state 22
    EQUALS_OP       shift and go to state 23
    OR_OP           shift and go to state 32
    AND_OP          shift and go to state 35
    MUL_ASSIGN      shift and go to state 43
    DIV_ASSIGN      shift and go to state 24
    MOD_ASSIGN      shift and go to state 39
    AND_ASSIGN      shift and go to state 33
    SUB_ASSIGN      shift and go to state 38
    LEFT_ASSIGN     shift and go to state 44
    RIGHT_ASSIGN    shift and go to state 30
    XOR_ASSIGN      shift and go to state 40
    OR_ASSIGN       shift and go to state 41
    EQUALS          shift and go to state 34

  ! MULT            [ reduce using rule 21 (exp -> exp MINUS exp .) ]
  ! DIV             [ reduce using rule 21 (exp -> exp MINUS exp .) ]
  ! MOD             [ reduce using rule 21 (exp -> exp MINUS exp .) ]
  ! L_OP            [ reduce using rule 21 (exp -> exp MINUS exp .) ]
  ! G_OP            [ reduce using rule 21 (exp -> exp MINUS exp .) ]
  ! LE_OP           [ reduce using rule 21 (exp -> exp MINUS exp .) ]
  ! GE_OP           [ reduce using rule 21 (exp -> exp MINUS exp .) ]
  ! NOTEQUALS       [ reduce using rule 21 (exp -> exp MINUS exp .) ]
  ! EQUALS_OP       [ reduce using rule 21 (exp -> exp MINUS exp .) ]
  ! OR_OP           [ reduce using rule 21 (exp -> exp MINUS exp .) ]
  ! AND_OP          [ reduce using rule 21 (exp -> exp MINUS exp .) ]
  ! MUL_ASSIGN      [ reduce using rule 21 (exp -> exp MINUS exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 21 (exp -> exp MINUS exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 21 (exp -> exp MINUS exp .) ]
  ! AND_ASSIGN      [ reduce using rule 21 (exp -> exp MINUS exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 21 (exp -> exp MINUS exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 21 (exp -> exp MINUS exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 21 (exp -> exp MINUS exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 21 (exp -> exp MINUS exp .) ]
  ! OR_ASSIGN       [ reduce using rule 21 (exp -> exp MINUS exp .) ]
  ! EQUALS          [ reduce using rule 21 (exp -> exp MINUS exp .) ]
  ! ADD             [ shift and go to state 36 ]
  ! MINUS           [ shift and go to state 27 ]


state 53

    (22) exp -> exp MULT exp .
    (20) exp -> exp . ADD exp
    (21) exp -> exp . MINUS exp
    (22) exp -> exp . MULT exp
    (23) exp -> exp . DIV exp
    (24) exp -> exp . MOD exp
    (25) exp -> exp . L_OP exp
    (26) exp -> exp . G_OP exp
    (27) exp -> exp . LE_OP exp
    (28) exp -> exp . GE_OP exp
    (29) exp -> exp . NOTEQUALS exp
    (30) exp -> exp . EQUALS_OP exp
    (31) exp -> exp . OR_OP exp
    (32) exp -> exp . AND_OP exp
    (33) exp -> exp . MUL_ASSIGN exp
    (34) exp -> exp . DIV_ASSIGN exp
    (35) exp -> exp . MOD_ASSIGN exp
    (36) exp -> exp . AND_ASSIGN exp
    (37) exp -> exp . SUB_ASSIGN exp
    (38) exp -> exp . LEFT_ASSIGN exp
    (39) exp -> exp . RIGHT_ASSIGN exp
    (40) exp -> exp . XOR_ASSIGN exp
    (41) exp -> exp . OR_ASSIGN exp
    (42) exp -> exp . EQUALS exp

    ADD             reduce using rule 22 (exp -> exp MULT exp .)
    MINUS           reduce using rule 22 (exp -> exp MULT exp .)
    MULT            reduce using rule 22 (exp -> exp MULT exp .)
    DIV             reduce using rule 22 (exp -> exp MULT exp .)
    MOD             reduce using rule 22 (exp -> exp MULT exp .)
    SEMI_COLON      reduce using rule 22 (exp -> exp MULT exp .)
    L_OP            shift and go to state 42
    G_OP            shift and go to state 31
    LE_OP           shift and go to state 29
    GE_OP           shift and go to state 37
    NOTEQUALS       shift and go to state 22
    EQUALS_OP       shift and go to state 23
    OR_OP           shift and go to state 32
    AND_OP          shift and go to state 35
    MUL_ASSIGN      shift and go to state 43
    DIV_ASSIGN      shift and go to state 24
    MOD_ASSIGN      shift and go to state 39
    AND_ASSIGN      shift and go to state 33
    SUB_ASSIGN      shift and go to state 38
    LEFT_ASSIGN     shift and go to state 44
    RIGHT_ASSIGN    shift and go to state 30
    XOR_ASSIGN      shift and go to state 40
    OR_ASSIGN       shift and go to state 41
    EQUALS          shift and go to state 34

  ! L_OP            [ reduce using rule 22 (exp -> exp MULT exp .) ]
  ! G_OP            [ reduce using rule 22 (exp -> exp MULT exp .) ]
  ! LE_OP           [ reduce using rule 22 (exp -> exp MULT exp .) ]
  ! GE_OP           [ reduce using rule 22 (exp -> exp MULT exp .) ]
  ! NOTEQUALS       [ reduce using rule 22 (exp -> exp MULT exp .) ]
  ! EQUALS_OP       [ reduce using rule 22 (exp -> exp MULT exp .) ]
  ! OR_OP           [ reduce using rule 22 (exp -> exp MULT exp .) ]
  ! AND_OP          [ reduce using rule 22 (exp -> exp MULT exp .) ]
  ! MUL_ASSIGN      [ reduce using rule 22 (exp -> exp MULT exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 22 (exp -> exp MULT exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 22 (exp -> exp MULT exp .) ]
  ! AND_ASSIGN      [ reduce using rule 22 (exp -> exp MULT exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 22 (exp -> exp MULT exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 22 (exp -> exp MULT exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 22 (exp -> exp MULT exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 22 (exp -> exp MULT exp .) ]
  ! OR_ASSIGN       [ reduce using rule 22 (exp -> exp MULT exp .) ]
  ! EQUALS          [ reduce using rule 22 (exp -> exp MULT exp .) ]
  ! ADD             [ shift and go to state 36 ]
  ! MINUS           [ shift and go to state 27 ]
  ! MULT            [ shift and go to state 28 ]
  ! DIV             [ shift and go to state 26 ]
  ! MOD             [ shift and go to state 45 ]


state 54

    (27) exp -> exp LE_OP exp .
    (20) exp -> exp . ADD exp
    (21) exp -> exp . MINUS exp
    (22) exp -> exp . MULT exp
    (23) exp -> exp . DIV exp
    (24) exp -> exp . MOD exp
    (25) exp -> exp . L_OP exp
    (26) exp -> exp . G_OP exp
    (27) exp -> exp . LE_OP exp
    (28) exp -> exp . GE_OP exp
    (29) exp -> exp . NOTEQUALS exp
    (30) exp -> exp . EQUALS_OP exp
    (31) exp -> exp . OR_OP exp
    (32) exp -> exp . AND_OP exp
    (33) exp -> exp . MUL_ASSIGN exp
    (34) exp -> exp . DIV_ASSIGN exp
    (35) exp -> exp . MOD_ASSIGN exp
    (36) exp -> exp . AND_ASSIGN exp
    (37) exp -> exp . SUB_ASSIGN exp
    (38) exp -> exp . LEFT_ASSIGN exp
    (39) exp -> exp . RIGHT_ASSIGN exp
    (40) exp -> exp . XOR_ASSIGN exp
    (41) exp -> exp . OR_ASSIGN exp
    (42) exp -> exp . EQUALS exp

    ADD             reduce using rule 27 (exp -> exp LE_OP exp .)
    MINUS           reduce using rule 27 (exp -> exp LE_OP exp .)
    MULT            reduce using rule 27 (exp -> exp LE_OP exp .)
    DIV             reduce using rule 27 (exp -> exp LE_OP exp .)
    MOD             reduce using rule 27 (exp -> exp LE_OP exp .)
    L_OP            reduce using rule 27 (exp -> exp LE_OP exp .)
    G_OP            reduce using rule 27 (exp -> exp LE_OP exp .)
    LE_OP           reduce using rule 27 (exp -> exp LE_OP exp .)
    GE_OP           reduce using rule 27 (exp -> exp LE_OP exp .)
    SEMI_COLON      reduce using rule 27 (exp -> exp LE_OP exp .)
    NOTEQUALS       shift and go to state 22
    EQUALS_OP       shift and go to state 23
    OR_OP           shift and go to state 32
    AND_OP          shift and go to state 35
    MUL_ASSIGN      shift and go to state 43
    DIV_ASSIGN      shift and go to state 24
    MOD_ASSIGN      shift and go to state 39
    AND_ASSIGN      shift and go to state 33
    SUB_ASSIGN      shift and go to state 38
    LEFT_ASSIGN     shift and go to state 44
    RIGHT_ASSIGN    shift and go to state 30
    XOR_ASSIGN      shift and go to state 40
    OR_ASSIGN       shift and go to state 41
    EQUALS          shift and go to state 34

  ! NOTEQUALS       [ reduce using rule 27 (exp -> exp LE_OP exp .) ]
  ! EQUALS_OP       [ reduce using rule 27 (exp -> exp LE_OP exp .) ]
  ! OR_OP           [ reduce using rule 27 (exp -> exp LE_OP exp .) ]
  ! AND_OP          [ reduce using rule 27 (exp -> exp LE_OP exp .) ]
  ! MUL_ASSIGN      [ reduce using rule 27 (exp -> exp LE_OP exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 27 (exp -> exp LE_OP exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 27 (exp -> exp LE_OP exp .) ]
  ! AND_ASSIGN      [ reduce using rule 27 (exp -> exp LE_OP exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 27 (exp -> exp LE_OP exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 27 (exp -> exp LE_OP exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 27 (exp -> exp LE_OP exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 27 (exp -> exp LE_OP exp .) ]
  ! OR_ASSIGN       [ reduce using rule 27 (exp -> exp LE_OP exp .) ]
  ! EQUALS          [ reduce using rule 27 (exp -> exp LE_OP exp .) ]
  ! ADD             [ shift and go to state 36 ]
  ! MINUS           [ shift and go to state 27 ]
  ! MULT            [ shift and go to state 28 ]
  ! DIV             [ shift and go to state 26 ]
  ! MOD             [ shift and go to state 45 ]
  ! L_OP            [ shift and go to state 42 ]
  ! G_OP            [ shift and go to state 31 ]
  ! LE_OP           [ shift and go to state 29 ]
  ! GE_OP           [ shift and go to state 37 ]


state 55

    (39) exp -> exp RIGHT_ASSIGN exp .
    (20) exp -> exp . ADD exp
    (21) exp -> exp . MINUS exp
    (22) exp -> exp . MULT exp
    (23) exp -> exp . DIV exp
    (24) exp -> exp . MOD exp
    (25) exp -> exp . L_OP exp
    (26) exp -> exp . G_OP exp
    (27) exp -> exp . LE_OP exp
    (28) exp -> exp . GE_OP exp
    (29) exp -> exp . NOTEQUALS exp
    (30) exp -> exp . EQUALS_OP exp
    (31) exp -> exp . OR_OP exp
    (32) exp -> exp . AND_OP exp
    (33) exp -> exp . MUL_ASSIGN exp
    (34) exp -> exp . DIV_ASSIGN exp
    (35) exp -> exp . MOD_ASSIGN exp
    (36) exp -> exp . AND_ASSIGN exp
    (37) exp -> exp . SUB_ASSIGN exp
    (38) exp -> exp . LEFT_ASSIGN exp
    (39) exp -> exp . RIGHT_ASSIGN exp
    (40) exp -> exp . XOR_ASSIGN exp
    (41) exp -> exp . OR_ASSIGN exp
    (42) exp -> exp . EQUALS exp

    ADD             reduce using rule 39 (exp -> exp RIGHT_ASSIGN exp .)
    MINUS           reduce using rule 39 (exp -> exp RIGHT_ASSIGN exp .)
    MULT            reduce using rule 39 (exp -> exp RIGHT_ASSIGN exp .)
    DIV             reduce using rule 39 (exp -> exp RIGHT_ASSIGN exp .)
    MOD             reduce using rule 39 (exp -> exp RIGHT_ASSIGN exp .)
    L_OP            reduce using rule 39 (exp -> exp RIGHT_ASSIGN exp .)
    G_OP            reduce using rule 39 (exp -> exp RIGHT_ASSIGN exp .)
    LE_OP           reduce using rule 39 (exp -> exp RIGHT_ASSIGN exp .)
    GE_OP           reduce using rule 39 (exp -> exp RIGHT_ASSIGN exp .)
    NOTEQUALS       reduce using rule 39 (exp -> exp RIGHT_ASSIGN exp .)
    EQUALS_OP       reduce using rule 39 (exp -> exp RIGHT_ASSIGN exp .)
    OR_OP           reduce using rule 39 (exp -> exp RIGHT_ASSIGN exp .)
    AND_OP          reduce using rule 39 (exp -> exp RIGHT_ASSIGN exp .)
    SEMI_COLON      reduce using rule 39 (exp -> exp RIGHT_ASSIGN exp .)
    MUL_ASSIGN      shift and go to state 43
    DIV_ASSIGN      shift and go to state 24
    MOD_ASSIGN      shift and go to state 39
    AND_ASSIGN      shift and go to state 33
    SUB_ASSIGN      shift and go to state 38
    LEFT_ASSIGN     shift and go to state 44
    RIGHT_ASSIGN    shift and go to state 30
    XOR_ASSIGN      shift and go to state 40
    OR_ASSIGN       shift and go to state 41
    EQUALS          shift and go to state 34

  ! MUL_ASSIGN      [ reduce using rule 39 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 39 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 39 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! AND_ASSIGN      [ reduce using rule 39 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 39 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 39 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 39 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 39 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! OR_ASSIGN       [ reduce using rule 39 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! EQUALS          [ reduce using rule 39 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! ADD             [ shift and go to state 36 ]
  ! MINUS           [ shift and go to state 27 ]
  ! MULT            [ shift and go to state 28 ]
  ! DIV             [ shift and go to state 26 ]
  ! MOD             [ shift and go to state 45 ]
  ! L_OP            [ shift and go to state 42 ]
  ! G_OP            [ shift and go to state 31 ]
  ! LE_OP           [ shift and go to state 29 ]
  ! GE_OP           [ shift and go to state 37 ]
  ! NOTEQUALS       [ shift and go to state 22 ]
  ! EQUALS_OP       [ shift and go to state 23 ]
  ! OR_OP           [ shift and go to state 32 ]
  ! AND_OP          [ shift and go to state 35 ]


state 56

    (26) exp -> exp G_OP exp .
    (20) exp -> exp . ADD exp
    (21) exp -> exp . MINUS exp
    (22) exp -> exp . MULT exp
    (23) exp -> exp . DIV exp
    (24) exp -> exp . MOD exp
    (25) exp -> exp . L_OP exp
    (26) exp -> exp . G_OP exp
    (27) exp -> exp . LE_OP exp
    (28) exp -> exp . GE_OP exp
    (29) exp -> exp . NOTEQUALS exp
    (30) exp -> exp . EQUALS_OP exp
    (31) exp -> exp . OR_OP exp
    (32) exp -> exp . AND_OP exp
    (33) exp -> exp . MUL_ASSIGN exp
    (34) exp -> exp . DIV_ASSIGN exp
    (35) exp -> exp . MOD_ASSIGN exp
    (36) exp -> exp . AND_ASSIGN exp
    (37) exp -> exp . SUB_ASSIGN exp
    (38) exp -> exp . LEFT_ASSIGN exp
    (39) exp -> exp . RIGHT_ASSIGN exp
    (40) exp -> exp . XOR_ASSIGN exp
    (41) exp -> exp . OR_ASSIGN exp
    (42) exp -> exp . EQUALS exp

    ADD             reduce using rule 26 (exp -> exp G_OP exp .)
    MINUS           reduce using rule 26 (exp -> exp G_OP exp .)
    MULT            reduce using rule 26 (exp -> exp G_OP exp .)
    DIV             reduce using rule 26 (exp -> exp G_OP exp .)
    MOD             reduce using rule 26 (exp -> exp G_OP exp .)
    L_OP            reduce using rule 26 (exp -> exp G_OP exp .)
    G_OP            reduce using rule 26 (exp -> exp G_OP exp .)
    LE_OP           reduce using rule 26 (exp -> exp G_OP exp .)
    GE_OP           reduce using rule 26 (exp -> exp G_OP exp .)
    SEMI_COLON      reduce using rule 26 (exp -> exp G_OP exp .)
    NOTEQUALS       shift and go to state 22
    EQUALS_OP       shift and go to state 23
    OR_OP           shift and go to state 32
    AND_OP          shift and go to state 35
    MUL_ASSIGN      shift and go to state 43
    DIV_ASSIGN      shift and go to state 24
    MOD_ASSIGN      shift and go to state 39
    AND_ASSIGN      shift and go to state 33
    SUB_ASSIGN      shift and go to state 38
    LEFT_ASSIGN     shift and go to state 44
    RIGHT_ASSIGN    shift and go to state 30
    XOR_ASSIGN      shift and go to state 40
    OR_ASSIGN       shift and go to state 41
    EQUALS          shift and go to state 34

  ! NOTEQUALS       [ reduce using rule 26 (exp -> exp G_OP exp .) ]
  ! EQUALS_OP       [ reduce using rule 26 (exp -> exp G_OP exp .) ]
  ! OR_OP           [ reduce using rule 26 (exp -> exp G_OP exp .) ]
  ! AND_OP          [ reduce using rule 26 (exp -> exp G_OP exp .) ]
  ! MUL_ASSIGN      [ reduce using rule 26 (exp -> exp G_OP exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 26 (exp -> exp G_OP exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 26 (exp -> exp G_OP exp .) ]
  ! AND_ASSIGN      [ reduce using rule 26 (exp -> exp G_OP exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 26 (exp -> exp G_OP exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 26 (exp -> exp G_OP exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 26 (exp -> exp G_OP exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 26 (exp -> exp G_OP exp .) ]
  ! OR_ASSIGN       [ reduce using rule 26 (exp -> exp G_OP exp .) ]
  ! EQUALS          [ reduce using rule 26 (exp -> exp G_OP exp .) ]
  ! ADD             [ shift and go to state 36 ]
  ! MINUS           [ shift and go to state 27 ]
  ! MULT            [ shift and go to state 28 ]
  ! DIV             [ shift and go to state 26 ]
  ! MOD             [ shift and go to state 45 ]
  ! L_OP            [ shift and go to state 42 ]
  ! G_OP            [ shift and go to state 31 ]
  ! LE_OP           [ shift and go to state 29 ]
  ! GE_OP           [ shift and go to state 37 ]


state 57

    (31) exp -> exp OR_OP exp .
    (20) exp -> exp . ADD exp
    (21) exp -> exp . MINUS exp
    (22) exp -> exp . MULT exp
    (23) exp -> exp . DIV exp
    (24) exp -> exp . MOD exp
    (25) exp -> exp . L_OP exp
    (26) exp -> exp . G_OP exp
    (27) exp -> exp . LE_OP exp
    (28) exp -> exp . GE_OP exp
    (29) exp -> exp . NOTEQUALS exp
    (30) exp -> exp . EQUALS_OP exp
    (31) exp -> exp . OR_OP exp
    (32) exp -> exp . AND_OP exp
    (33) exp -> exp . MUL_ASSIGN exp
    (34) exp -> exp . DIV_ASSIGN exp
    (35) exp -> exp . MOD_ASSIGN exp
    (36) exp -> exp . AND_ASSIGN exp
    (37) exp -> exp . SUB_ASSIGN exp
    (38) exp -> exp . LEFT_ASSIGN exp
    (39) exp -> exp . RIGHT_ASSIGN exp
    (40) exp -> exp . XOR_ASSIGN exp
    (41) exp -> exp . OR_ASSIGN exp
    (42) exp -> exp . EQUALS exp

    ADD             reduce using rule 31 (exp -> exp OR_OP exp .)
    MINUS           reduce using rule 31 (exp -> exp OR_OP exp .)
    MULT            reduce using rule 31 (exp -> exp OR_OP exp .)
    DIV             reduce using rule 31 (exp -> exp OR_OP exp .)
    MOD             reduce using rule 31 (exp -> exp OR_OP exp .)
    L_OP            reduce using rule 31 (exp -> exp OR_OP exp .)
    G_OP            reduce using rule 31 (exp -> exp OR_OP exp .)
    LE_OP           reduce using rule 31 (exp -> exp OR_OP exp .)
    GE_OP           reduce using rule 31 (exp -> exp OR_OP exp .)
    NOTEQUALS       reduce using rule 31 (exp -> exp OR_OP exp .)
    EQUALS_OP       reduce using rule 31 (exp -> exp OR_OP exp .)
    OR_OP           reduce using rule 31 (exp -> exp OR_OP exp .)
    AND_OP          reduce using rule 31 (exp -> exp OR_OP exp .)
    SEMI_COLON      reduce using rule 31 (exp -> exp OR_OP exp .)
    MUL_ASSIGN      shift and go to state 43
    DIV_ASSIGN      shift and go to state 24
    MOD_ASSIGN      shift and go to state 39
    AND_ASSIGN      shift and go to state 33
    SUB_ASSIGN      shift and go to state 38
    LEFT_ASSIGN     shift and go to state 44
    RIGHT_ASSIGN    shift and go to state 30
    XOR_ASSIGN      shift and go to state 40
    OR_ASSIGN       shift and go to state 41
    EQUALS          shift and go to state 34

  ! MUL_ASSIGN      [ reduce using rule 31 (exp -> exp OR_OP exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 31 (exp -> exp OR_OP exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 31 (exp -> exp OR_OP exp .) ]
  ! AND_ASSIGN      [ reduce using rule 31 (exp -> exp OR_OP exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 31 (exp -> exp OR_OP exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 31 (exp -> exp OR_OP exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 31 (exp -> exp OR_OP exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 31 (exp -> exp OR_OP exp .) ]
  ! OR_ASSIGN       [ reduce using rule 31 (exp -> exp OR_OP exp .) ]
  ! EQUALS          [ reduce using rule 31 (exp -> exp OR_OP exp .) ]
  ! ADD             [ shift and go to state 36 ]
  ! MINUS           [ shift and go to state 27 ]
  ! MULT            [ shift and go to state 28 ]
  ! DIV             [ shift and go to state 26 ]
  ! MOD             [ shift and go to state 45 ]
  ! L_OP            [ shift and go to state 42 ]
  ! G_OP            [ shift and go to state 31 ]
  ! LE_OP           [ shift and go to state 29 ]
  ! GE_OP           [ shift and go to state 37 ]
  ! NOTEQUALS       [ shift and go to state 22 ]
  ! EQUALS_OP       [ shift and go to state 23 ]
  ! OR_OP           [ shift and go to state 32 ]
  ! AND_OP          [ shift and go to state 35 ]


state 58

    (36) exp -> exp AND_ASSIGN exp .
    (20) exp -> exp . ADD exp
    (21) exp -> exp . MINUS exp
    (22) exp -> exp . MULT exp
    (23) exp -> exp . DIV exp
    (24) exp -> exp . MOD exp
    (25) exp -> exp . L_OP exp
    (26) exp -> exp . G_OP exp
    (27) exp -> exp . LE_OP exp
    (28) exp -> exp . GE_OP exp
    (29) exp -> exp . NOTEQUALS exp
    (30) exp -> exp . EQUALS_OP exp
    (31) exp -> exp . OR_OP exp
    (32) exp -> exp . AND_OP exp
    (33) exp -> exp . MUL_ASSIGN exp
    (34) exp -> exp . DIV_ASSIGN exp
    (35) exp -> exp . MOD_ASSIGN exp
    (36) exp -> exp . AND_ASSIGN exp
    (37) exp -> exp . SUB_ASSIGN exp
    (38) exp -> exp . LEFT_ASSIGN exp
    (39) exp -> exp . RIGHT_ASSIGN exp
    (40) exp -> exp . XOR_ASSIGN exp
    (41) exp -> exp . OR_ASSIGN exp
    (42) exp -> exp . EQUALS exp

    ADD             reduce using rule 36 (exp -> exp AND_ASSIGN exp .)
    MINUS           reduce using rule 36 (exp -> exp AND_ASSIGN exp .)
    MULT            reduce using rule 36 (exp -> exp AND_ASSIGN exp .)
    DIV             reduce using rule 36 (exp -> exp AND_ASSIGN exp .)
    MOD             reduce using rule 36 (exp -> exp AND_ASSIGN exp .)
    L_OP            reduce using rule 36 (exp -> exp AND_ASSIGN exp .)
    G_OP            reduce using rule 36 (exp -> exp AND_ASSIGN exp .)
    LE_OP           reduce using rule 36 (exp -> exp AND_ASSIGN exp .)
    GE_OP           reduce using rule 36 (exp -> exp AND_ASSIGN exp .)
    NOTEQUALS       reduce using rule 36 (exp -> exp AND_ASSIGN exp .)
    EQUALS_OP       reduce using rule 36 (exp -> exp AND_ASSIGN exp .)
    OR_OP           reduce using rule 36 (exp -> exp AND_ASSIGN exp .)
    AND_OP          reduce using rule 36 (exp -> exp AND_ASSIGN exp .)
    SEMI_COLON      reduce using rule 36 (exp -> exp AND_ASSIGN exp .)
    MUL_ASSIGN      shift and go to state 43
    DIV_ASSIGN      shift and go to state 24
    MOD_ASSIGN      shift and go to state 39
    AND_ASSIGN      shift and go to state 33
    SUB_ASSIGN      shift and go to state 38
    LEFT_ASSIGN     shift and go to state 44
    RIGHT_ASSIGN    shift and go to state 30
    XOR_ASSIGN      shift and go to state 40
    OR_ASSIGN       shift and go to state 41
    EQUALS          shift and go to state 34

  ! MUL_ASSIGN      [ reduce using rule 36 (exp -> exp AND_ASSIGN exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 36 (exp -> exp AND_ASSIGN exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 36 (exp -> exp AND_ASSIGN exp .) ]
  ! AND_ASSIGN      [ reduce using rule 36 (exp -> exp AND_ASSIGN exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 36 (exp -> exp AND_ASSIGN exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 36 (exp -> exp AND_ASSIGN exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 36 (exp -> exp AND_ASSIGN exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 36 (exp -> exp AND_ASSIGN exp .) ]
  ! OR_ASSIGN       [ reduce using rule 36 (exp -> exp AND_ASSIGN exp .) ]
  ! EQUALS          [ reduce using rule 36 (exp -> exp AND_ASSIGN exp .) ]
  ! ADD             [ shift and go to state 36 ]
  ! MINUS           [ shift and go to state 27 ]
  ! MULT            [ shift and go to state 28 ]
  ! DIV             [ shift and go to state 26 ]
  ! MOD             [ shift and go to state 45 ]
  ! L_OP            [ shift and go to state 42 ]
  ! G_OP            [ shift and go to state 31 ]
  ! LE_OP           [ shift and go to state 29 ]
  ! GE_OP           [ shift and go to state 37 ]
  ! NOTEQUALS       [ shift and go to state 22 ]
  ! EQUALS_OP       [ shift and go to state 23 ]
  ! OR_OP           [ shift and go to state 32 ]
  ! AND_OP          [ shift and go to state 35 ]


state 59

    (42) exp -> exp EQUALS exp .
    (20) exp -> exp . ADD exp
    (21) exp -> exp . MINUS exp
    (22) exp -> exp . MULT exp
    (23) exp -> exp . DIV exp
    (24) exp -> exp . MOD exp
    (25) exp -> exp . L_OP exp
    (26) exp -> exp . G_OP exp
    (27) exp -> exp . LE_OP exp
    (28) exp -> exp . GE_OP exp
    (29) exp -> exp . NOTEQUALS exp
    (30) exp -> exp . EQUALS_OP exp
    (31) exp -> exp . OR_OP exp
    (32) exp -> exp . AND_OP exp
    (33) exp -> exp . MUL_ASSIGN exp
    (34) exp -> exp . DIV_ASSIGN exp
    (35) exp -> exp . MOD_ASSIGN exp
    (36) exp -> exp . AND_ASSIGN exp
    (37) exp -> exp . SUB_ASSIGN exp
    (38) exp -> exp . LEFT_ASSIGN exp
    (39) exp -> exp . RIGHT_ASSIGN exp
    (40) exp -> exp . XOR_ASSIGN exp
    (41) exp -> exp . OR_ASSIGN exp
    (42) exp -> exp . EQUALS exp

    ADD             reduce using rule 42 (exp -> exp EQUALS exp .)
    MINUS           reduce using rule 42 (exp -> exp EQUALS exp .)
    MULT            reduce using rule 42 (exp -> exp EQUALS exp .)
    DIV             reduce using rule 42 (exp -> exp EQUALS exp .)
    MOD             reduce using rule 42 (exp -> exp EQUALS exp .)
    L_OP            reduce using rule 42 (exp -> exp EQUALS exp .)
    G_OP            reduce using rule 42 (exp -> exp EQUALS exp .)
    LE_OP           reduce using rule 42 (exp -> exp EQUALS exp .)
    GE_OP           reduce using rule 42 (exp -> exp EQUALS exp .)
    NOTEQUALS       reduce using rule 42 (exp -> exp EQUALS exp .)
    EQUALS_OP       reduce using rule 42 (exp -> exp EQUALS exp .)
    OR_OP           reduce using rule 42 (exp -> exp EQUALS exp .)
    AND_OP          reduce using rule 42 (exp -> exp EQUALS exp .)
    SEMI_COLON      reduce using rule 42 (exp -> exp EQUALS exp .)
    MUL_ASSIGN      shift and go to state 43
    DIV_ASSIGN      shift and go to state 24
    MOD_ASSIGN      shift and go to state 39
    AND_ASSIGN      shift and go to state 33
    SUB_ASSIGN      shift and go to state 38
    LEFT_ASSIGN     shift and go to state 44
    RIGHT_ASSIGN    shift and go to state 30
    XOR_ASSIGN      shift and go to state 40
    OR_ASSIGN       shift and go to state 41
    EQUALS          shift and go to state 34

  ! MUL_ASSIGN      [ reduce using rule 42 (exp -> exp EQUALS exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 42 (exp -> exp EQUALS exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 42 (exp -> exp EQUALS exp .) ]
  ! AND_ASSIGN      [ reduce using rule 42 (exp -> exp EQUALS exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 42 (exp -> exp EQUALS exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 42 (exp -> exp EQUALS exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 42 (exp -> exp EQUALS exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 42 (exp -> exp EQUALS exp .) ]
  ! OR_ASSIGN       [ reduce using rule 42 (exp -> exp EQUALS exp .) ]
  ! EQUALS          [ reduce using rule 42 (exp -> exp EQUALS exp .) ]
  ! ADD             [ shift and go to state 36 ]
  ! MINUS           [ shift and go to state 27 ]
  ! MULT            [ shift and go to state 28 ]
  ! DIV             [ shift and go to state 26 ]
  ! MOD             [ shift and go to state 45 ]
  ! L_OP            [ shift and go to state 42 ]
  ! G_OP            [ shift and go to state 31 ]
  ! LE_OP           [ shift and go to state 29 ]
  ! GE_OP           [ shift and go to state 37 ]
  ! NOTEQUALS       [ shift and go to state 22 ]
  ! EQUALS_OP       [ shift and go to state 23 ]
  ! OR_OP           [ shift and go to state 32 ]
  ! AND_OP          [ shift and go to state 35 ]


state 60

    (32) exp -> exp AND_OP exp .
    (20) exp -> exp . ADD exp
    (21) exp -> exp . MINUS exp
    (22) exp -> exp . MULT exp
    (23) exp -> exp . DIV exp
    (24) exp -> exp . MOD exp
    (25) exp -> exp . L_OP exp
    (26) exp -> exp . G_OP exp
    (27) exp -> exp . LE_OP exp
    (28) exp -> exp . GE_OP exp
    (29) exp -> exp . NOTEQUALS exp
    (30) exp -> exp . EQUALS_OP exp
    (31) exp -> exp . OR_OP exp
    (32) exp -> exp . AND_OP exp
    (33) exp -> exp . MUL_ASSIGN exp
    (34) exp -> exp . DIV_ASSIGN exp
    (35) exp -> exp . MOD_ASSIGN exp
    (36) exp -> exp . AND_ASSIGN exp
    (37) exp -> exp . SUB_ASSIGN exp
    (38) exp -> exp . LEFT_ASSIGN exp
    (39) exp -> exp . RIGHT_ASSIGN exp
    (40) exp -> exp . XOR_ASSIGN exp
    (41) exp -> exp . OR_ASSIGN exp
    (42) exp -> exp . EQUALS exp

    ADD             reduce using rule 32 (exp -> exp AND_OP exp .)
    MINUS           reduce using rule 32 (exp -> exp AND_OP exp .)
    MULT            reduce using rule 32 (exp -> exp AND_OP exp .)
    DIV             reduce using rule 32 (exp -> exp AND_OP exp .)
    MOD             reduce using rule 32 (exp -> exp AND_OP exp .)
    L_OP            reduce using rule 32 (exp -> exp AND_OP exp .)
    G_OP            reduce using rule 32 (exp -> exp AND_OP exp .)
    LE_OP           reduce using rule 32 (exp -> exp AND_OP exp .)
    GE_OP           reduce using rule 32 (exp -> exp AND_OP exp .)
    NOTEQUALS       reduce using rule 32 (exp -> exp AND_OP exp .)
    EQUALS_OP       reduce using rule 32 (exp -> exp AND_OP exp .)
    OR_OP           reduce using rule 32 (exp -> exp AND_OP exp .)
    AND_OP          reduce using rule 32 (exp -> exp AND_OP exp .)
    SEMI_COLON      reduce using rule 32 (exp -> exp AND_OP exp .)
    MUL_ASSIGN      shift and go to state 43
    DIV_ASSIGN      shift and go to state 24
    MOD_ASSIGN      shift and go to state 39
    AND_ASSIGN      shift and go to state 33
    SUB_ASSIGN      shift and go to state 38
    LEFT_ASSIGN     shift and go to state 44
    RIGHT_ASSIGN    shift and go to state 30
    XOR_ASSIGN      shift and go to state 40
    OR_ASSIGN       shift and go to state 41
    EQUALS          shift and go to state 34

  ! MUL_ASSIGN      [ reduce using rule 32 (exp -> exp AND_OP exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 32 (exp -> exp AND_OP exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 32 (exp -> exp AND_OP exp .) ]
  ! AND_ASSIGN      [ reduce using rule 32 (exp -> exp AND_OP exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 32 (exp -> exp AND_OP exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 32 (exp -> exp AND_OP exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 32 (exp -> exp AND_OP exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 32 (exp -> exp AND_OP exp .) ]
  ! OR_ASSIGN       [ reduce using rule 32 (exp -> exp AND_OP exp .) ]
  ! EQUALS          [ reduce using rule 32 (exp -> exp AND_OP exp .) ]
  ! ADD             [ shift and go to state 36 ]
  ! MINUS           [ shift and go to state 27 ]
  ! MULT            [ shift and go to state 28 ]
  ! DIV             [ shift and go to state 26 ]
  ! MOD             [ shift and go to state 45 ]
  ! L_OP            [ shift and go to state 42 ]
  ! G_OP            [ shift and go to state 31 ]
  ! LE_OP           [ shift and go to state 29 ]
  ! GE_OP           [ shift and go to state 37 ]
  ! NOTEQUALS       [ shift and go to state 22 ]
  ! EQUALS_OP       [ shift and go to state 23 ]
  ! OR_OP           [ shift and go to state 32 ]
  ! AND_OP          [ shift and go to state 35 ]


state 61

    (20) exp -> exp ADD exp .
    (20) exp -> exp . ADD exp
    (21) exp -> exp . MINUS exp
    (22) exp -> exp . MULT exp
    (23) exp -> exp . DIV exp
    (24) exp -> exp . MOD exp
    (25) exp -> exp . L_OP exp
    (26) exp -> exp . G_OP exp
    (27) exp -> exp . LE_OP exp
    (28) exp -> exp . GE_OP exp
    (29) exp -> exp . NOTEQUALS exp
    (30) exp -> exp . EQUALS_OP exp
    (31) exp -> exp . OR_OP exp
    (32) exp -> exp . AND_OP exp
    (33) exp -> exp . MUL_ASSIGN exp
    (34) exp -> exp . DIV_ASSIGN exp
    (35) exp -> exp . MOD_ASSIGN exp
    (36) exp -> exp . AND_ASSIGN exp
    (37) exp -> exp . SUB_ASSIGN exp
    (38) exp -> exp . LEFT_ASSIGN exp
    (39) exp -> exp . RIGHT_ASSIGN exp
    (40) exp -> exp . XOR_ASSIGN exp
    (41) exp -> exp . OR_ASSIGN exp
    (42) exp -> exp . EQUALS exp

    ADD             reduce using rule 20 (exp -> exp ADD exp .)
    MINUS           reduce using rule 20 (exp -> exp ADD exp .)
    SEMI_COLON      reduce using rule 20 (exp -> exp ADD exp .)
    MULT            shift and go to state 28
    DIV             shift and go to state 26
    MOD             shift and go to state 45
    L_OP            shift and go to state 42
    G_OP            shift and go to state 31
    LE_OP           shift and go to state 29
    GE_OP           shift and go to state 37
    NOTEQUALS       shift and go to state 22
    EQUALS_OP       shift and go to state 23
    OR_OP           shift and go to state 32
    AND_OP          shift and go to state 35
    MUL_ASSIGN      shift and go to state 43
    DIV_ASSIGN      shift and go to state 24
    MOD_ASSIGN      shift and go to state 39
    AND_ASSIGN      shift and go to state 33
    SUB_ASSIGN      shift and go to state 38
    LEFT_ASSIGN     shift and go to state 44
    RIGHT_ASSIGN    shift and go to state 30
    XOR_ASSIGN      shift and go to state 40
    OR_ASSIGN       shift and go to state 41
    EQUALS          shift and go to state 34

  ! MULT            [ reduce using rule 20 (exp -> exp ADD exp .) ]
  ! DIV             [ reduce using rule 20 (exp -> exp ADD exp .) ]
  ! MOD             [ reduce using rule 20 (exp -> exp ADD exp .) ]
  ! L_OP            [ reduce using rule 20 (exp -> exp ADD exp .) ]
  ! G_OP            [ reduce using rule 20 (exp -> exp ADD exp .) ]
  ! LE_OP           [ reduce using rule 20 (exp -> exp ADD exp .) ]
  ! GE_OP           [ reduce using rule 20 (exp -> exp ADD exp .) ]
  ! NOTEQUALS       [ reduce using rule 20 (exp -> exp ADD exp .) ]
  ! EQUALS_OP       [ reduce using rule 20 (exp -> exp ADD exp .) ]
  ! OR_OP           [ reduce using rule 20 (exp -> exp ADD exp .) ]
  ! AND_OP          [ reduce using rule 20 (exp -> exp ADD exp .) ]
  ! MUL_ASSIGN      [ reduce using rule 20 (exp -> exp ADD exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 20 (exp -> exp ADD exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 20 (exp -> exp ADD exp .) ]
  ! AND_ASSIGN      [ reduce using rule 20 (exp -> exp ADD exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 20 (exp -> exp ADD exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 20 (exp -> exp ADD exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 20 (exp -> exp ADD exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 20 (exp -> exp ADD exp .) ]
  ! OR_ASSIGN       [ reduce using rule 20 (exp -> exp ADD exp .) ]
  ! EQUALS          [ reduce using rule 20 (exp -> exp ADD exp .) ]
  ! ADD             [ shift and go to state 36 ]
  ! MINUS           [ shift and go to state 27 ]


state 62

    (28) exp -> exp GE_OP exp .
    (20) exp -> exp . ADD exp
    (21) exp -> exp . MINUS exp
    (22) exp -> exp . MULT exp
    (23) exp -> exp . DIV exp
    (24) exp -> exp . MOD exp
    (25) exp -> exp . L_OP exp
    (26) exp -> exp . G_OP exp
    (27) exp -> exp . LE_OP exp
    (28) exp -> exp . GE_OP exp
    (29) exp -> exp . NOTEQUALS exp
    (30) exp -> exp . EQUALS_OP exp
    (31) exp -> exp . OR_OP exp
    (32) exp -> exp . AND_OP exp
    (33) exp -> exp . MUL_ASSIGN exp
    (34) exp -> exp . DIV_ASSIGN exp
    (35) exp -> exp . MOD_ASSIGN exp
    (36) exp -> exp . AND_ASSIGN exp
    (37) exp -> exp . SUB_ASSIGN exp
    (38) exp -> exp . LEFT_ASSIGN exp
    (39) exp -> exp . RIGHT_ASSIGN exp
    (40) exp -> exp . XOR_ASSIGN exp
    (41) exp -> exp . OR_ASSIGN exp
    (42) exp -> exp . EQUALS exp

    ADD             reduce using rule 28 (exp -> exp GE_OP exp .)
    MINUS           reduce using rule 28 (exp -> exp GE_OP exp .)
    MULT            reduce using rule 28 (exp -> exp GE_OP exp .)
    DIV             reduce using rule 28 (exp -> exp GE_OP exp .)
    MOD             reduce using rule 28 (exp -> exp GE_OP exp .)
    L_OP            reduce using rule 28 (exp -> exp GE_OP exp .)
    G_OP            reduce using rule 28 (exp -> exp GE_OP exp .)
    LE_OP           reduce using rule 28 (exp -> exp GE_OP exp .)
    GE_OP           reduce using rule 28 (exp -> exp GE_OP exp .)
    SEMI_COLON      reduce using rule 28 (exp -> exp GE_OP exp .)
    NOTEQUALS       shift and go to state 22
    EQUALS_OP       shift and go to state 23
    OR_OP           shift and go to state 32
    AND_OP          shift and go to state 35
    MUL_ASSIGN      shift and go to state 43
    DIV_ASSIGN      shift and go to state 24
    MOD_ASSIGN      shift and go to state 39
    AND_ASSIGN      shift and go to state 33
    SUB_ASSIGN      shift and go to state 38
    LEFT_ASSIGN     shift and go to state 44
    RIGHT_ASSIGN    shift and go to state 30
    XOR_ASSIGN      shift and go to state 40
    OR_ASSIGN       shift and go to state 41
    EQUALS          shift and go to state 34

  ! NOTEQUALS       [ reduce using rule 28 (exp -> exp GE_OP exp .) ]
  ! EQUALS_OP       [ reduce using rule 28 (exp -> exp GE_OP exp .) ]
  ! OR_OP           [ reduce using rule 28 (exp -> exp GE_OP exp .) ]
  ! AND_OP          [ reduce using rule 28 (exp -> exp GE_OP exp .) ]
  ! MUL_ASSIGN      [ reduce using rule 28 (exp -> exp GE_OP exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 28 (exp -> exp GE_OP exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 28 (exp -> exp GE_OP exp .) ]
  ! AND_ASSIGN      [ reduce using rule 28 (exp -> exp GE_OP exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 28 (exp -> exp GE_OP exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 28 (exp -> exp GE_OP exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 28 (exp -> exp GE_OP exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 28 (exp -> exp GE_OP exp .) ]
  ! OR_ASSIGN       [ reduce using rule 28 (exp -> exp GE_OP exp .) ]
  ! EQUALS          [ reduce using rule 28 (exp -> exp GE_OP exp .) ]
  ! ADD             [ shift and go to state 36 ]
  ! MINUS           [ shift and go to state 27 ]
  ! MULT            [ shift and go to state 28 ]
  ! DIV             [ shift and go to state 26 ]
  ! MOD             [ shift and go to state 45 ]
  ! L_OP            [ shift and go to state 42 ]
  ! G_OP            [ shift and go to state 31 ]
  ! LE_OP           [ shift and go to state 29 ]
  ! GE_OP           [ shift and go to state 37 ]


state 63

    (37) exp -> exp SUB_ASSIGN exp .
    (20) exp -> exp . ADD exp
    (21) exp -> exp . MINUS exp
    (22) exp -> exp . MULT exp
    (23) exp -> exp . DIV exp
    (24) exp -> exp . MOD exp
    (25) exp -> exp . L_OP exp
    (26) exp -> exp . G_OP exp
    (27) exp -> exp . LE_OP exp
    (28) exp -> exp . GE_OP exp
    (29) exp -> exp . NOTEQUALS exp
    (30) exp -> exp . EQUALS_OP exp
    (31) exp -> exp . OR_OP exp
    (32) exp -> exp . AND_OP exp
    (33) exp -> exp . MUL_ASSIGN exp
    (34) exp -> exp . DIV_ASSIGN exp
    (35) exp -> exp . MOD_ASSIGN exp
    (36) exp -> exp . AND_ASSIGN exp
    (37) exp -> exp . SUB_ASSIGN exp
    (38) exp -> exp . LEFT_ASSIGN exp
    (39) exp -> exp . RIGHT_ASSIGN exp
    (40) exp -> exp . XOR_ASSIGN exp
    (41) exp -> exp . OR_ASSIGN exp
    (42) exp -> exp . EQUALS exp

    ADD             reduce using rule 37 (exp -> exp SUB_ASSIGN exp .)
    MINUS           reduce using rule 37 (exp -> exp SUB_ASSIGN exp .)
    MULT            reduce using rule 37 (exp -> exp SUB_ASSIGN exp .)
    DIV             reduce using rule 37 (exp -> exp SUB_ASSIGN exp .)
    MOD             reduce using rule 37 (exp -> exp SUB_ASSIGN exp .)
    L_OP            reduce using rule 37 (exp -> exp SUB_ASSIGN exp .)
    G_OP            reduce using rule 37 (exp -> exp SUB_ASSIGN exp .)
    LE_OP           reduce using rule 37 (exp -> exp SUB_ASSIGN exp .)
    GE_OP           reduce using rule 37 (exp -> exp SUB_ASSIGN exp .)
    NOTEQUALS       reduce using rule 37 (exp -> exp SUB_ASSIGN exp .)
    EQUALS_OP       reduce using rule 37 (exp -> exp SUB_ASSIGN exp .)
    OR_OP           reduce using rule 37 (exp -> exp SUB_ASSIGN exp .)
    AND_OP          reduce using rule 37 (exp -> exp SUB_ASSIGN exp .)
    SEMI_COLON      reduce using rule 37 (exp -> exp SUB_ASSIGN exp .)
    MUL_ASSIGN      shift and go to state 43
    DIV_ASSIGN      shift and go to state 24
    MOD_ASSIGN      shift and go to state 39
    AND_ASSIGN      shift and go to state 33
    SUB_ASSIGN      shift and go to state 38
    LEFT_ASSIGN     shift and go to state 44
    RIGHT_ASSIGN    shift and go to state 30
    XOR_ASSIGN      shift and go to state 40
    OR_ASSIGN       shift and go to state 41
    EQUALS          shift and go to state 34

  ! MUL_ASSIGN      [ reduce using rule 37 (exp -> exp SUB_ASSIGN exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 37 (exp -> exp SUB_ASSIGN exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 37 (exp -> exp SUB_ASSIGN exp .) ]
  ! AND_ASSIGN      [ reduce using rule 37 (exp -> exp SUB_ASSIGN exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 37 (exp -> exp SUB_ASSIGN exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 37 (exp -> exp SUB_ASSIGN exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 37 (exp -> exp SUB_ASSIGN exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 37 (exp -> exp SUB_ASSIGN exp .) ]
  ! OR_ASSIGN       [ reduce using rule 37 (exp -> exp SUB_ASSIGN exp .) ]
  ! EQUALS          [ reduce using rule 37 (exp -> exp SUB_ASSIGN exp .) ]
  ! ADD             [ shift and go to state 36 ]
  ! MINUS           [ shift and go to state 27 ]
  ! MULT            [ shift and go to state 28 ]
  ! DIV             [ shift and go to state 26 ]
  ! MOD             [ shift and go to state 45 ]
  ! L_OP            [ shift and go to state 42 ]
  ! G_OP            [ shift and go to state 31 ]
  ! LE_OP           [ shift and go to state 29 ]
  ! GE_OP           [ shift and go to state 37 ]
  ! NOTEQUALS       [ shift and go to state 22 ]
  ! EQUALS_OP       [ shift and go to state 23 ]
  ! OR_OP           [ shift and go to state 32 ]
  ! AND_OP          [ shift and go to state 35 ]


state 64

    (35) exp -> exp MOD_ASSIGN exp .
    (20) exp -> exp . ADD exp
    (21) exp -> exp . MINUS exp
    (22) exp -> exp . MULT exp
    (23) exp -> exp . DIV exp
    (24) exp -> exp . MOD exp
    (25) exp -> exp . L_OP exp
    (26) exp -> exp . G_OP exp
    (27) exp -> exp . LE_OP exp
    (28) exp -> exp . GE_OP exp
    (29) exp -> exp . NOTEQUALS exp
    (30) exp -> exp . EQUALS_OP exp
    (31) exp -> exp . OR_OP exp
    (32) exp -> exp . AND_OP exp
    (33) exp -> exp . MUL_ASSIGN exp
    (34) exp -> exp . DIV_ASSIGN exp
    (35) exp -> exp . MOD_ASSIGN exp
    (36) exp -> exp . AND_ASSIGN exp
    (37) exp -> exp . SUB_ASSIGN exp
    (38) exp -> exp . LEFT_ASSIGN exp
    (39) exp -> exp . RIGHT_ASSIGN exp
    (40) exp -> exp . XOR_ASSIGN exp
    (41) exp -> exp . OR_ASSIGN exp
    (42) exp -> exp . EQUALS exp

    ADD             reduce using rule 35 (exp -> exp MOD_ASSIGN exp .)
    MINUS           reduce using rule 35 (exp -> exp MOD_ASSIGN exp .)
    MULT            reduce using rule 35 (exp -> exp MOD_ASSIGN exp .)
    DIV             reduce using rule 35 (exp -> exp MOD_ASSIGN exp .)
    MOD             reduce using rule 35 (exp -> exp MOD_ASSIGN exp .)
    L_OP            reduce using rule 35 (exp -> exp MOD_ASSIGN exp .)
    G_OP            reduce using rule 35 (exp -> exp MOD_ASSIGN exp .)
    LE_OP           reduce using rule 35 (exp -> exp MOD_ASSIGN exp .)
    GE_OP           reduce using rule 35 (exp -> exp MOD_ASSIGN exp .)
    NOTEQUALS       reduce using rule 35 (exp -> exp MOD_ASSIGN exp .)
    EQUALS_OP       reduce using rule 35 (exp -> exp MOD_ASSIGN exp .)
    OR_OP           reduce using rule 35 (exp -> exp MOD_ASSIGN exp .)
    AND_OP          reduce using rule 35 (exp -> exp MOD_ASSIGN exp .)
    SEMI_COLON      reduce using rule 35 (exp -> exp MOD_ASSIGN exp .)
    MUL_ASSIGN      shift and go to state 43
    DIV_ASSIGN      shift and go to state 24
    MOD_ASSIGN      shift and go to state 39
    AND_ASSIGN      shift and go to state 33
    SUB_ASSIGN      shift and go to state 38
    LEFT_ASSIGN     shift and go to state 44
    RIGHT_ASSIGN    shift and go to state 30
    XOR_ASSIGN      shift and go to state 40
    OR_ASSIGN       shift and go to state 41
    EQUALS          shift and go to state 34

  ! MUL_ASSIGN      [ reduce using rule 35 (exp -> exp MOD_ASSIGN exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 35 (exp -> exp MOD_ASSIGN exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 35 (exp -> exp MOD_ASSIGN exp .) ]
  ! AND_ASSIGN      [ reduce using rule 35 (exp -> exp MOD_ASSIGN exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 35 (exp -> exp MOD_ASSIGN exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 35 (exp -> exp MOD_ASSIGN exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 35 (exp -> exp MOD_ASSIGN exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 35 (exp -> exp MOD_ASSIGN exp .) ]
  ! OR_ASSIGN       [ reduce using rule 35 (exp -> exp MOD_ASSIGN exp .) ]
  ! EQUALS          [ reduce using rule 35 (exp -> exp MOD_ASSIGN exp .) ]
  ! ADD             [ shift and go to state 36 ]
  ! MINUS           [ shift and go to state 27 ]
  ! MULT            [ shift and go to state 28 ]
  ! DIV             [ shift and go to state 26 ]
  ! MOD             [ shift and go to state 45 ]
  ! L_OP            [ shift and go to state 42 ]
  ! G_OP            [ shift and go to state 31 ]
  ! LE_OP           [ shift and go to state 29 ]
  ! GE_OP           [ shift and go to state 37 ]
  ! NOTEQUALS       [ shift and go to state 22 ]
  ! EQUALS_OP       [ shift and go to state 23 ]
  ! OR_OP           [ shift and go to state 32 ]
  ! AND_OP          [ shift and go to state 35 ]


state 65

    (40) exp -> exp XOR_ASSIGN exp .
    (20) exp -> exp . ADD exp
    (21) exp -> exp . MINUS exp
    (22) exp -> exp . MULT exp
    (23) exp -> exp . DIV exp
    (24) exp -> exp . MOD exp
    (25) exp -> exp . L_OP exp
    (26) exp -> exp . G_OP exp
    (27) exp -> exp . LE_OP exp
    (28) exp -> exp . GE_OP exp
    (29) exp -> exp . NOTEQUALS exp
    (30) exp -> exp . EQUALS_OP exp
    (31) exp -> exp . OR_OP exp
    (32) exp -> exp . AND_OP exp
    (33) exp -> exp . MUL_ASSIGN exp
    (34) exp -> exp . DIV_ASSIGN exp
    (35) exp -> exp . MOD_ASSIGN exp
    (36) exp -> exp . AND_ASSIGN exp
    (37) exp -> exp . SUB_ASSIGN exp
    (38) exp -> exp . LEFT_ASSIGN exp
    (39) exp -> exp . RIGHT_ASSIGN exp
    (40) exp -> exp . XOR_ASSIGN exp
    (41) exp -> exp . OR_ASSIGN exp
    (42) exp -> exp . EQUALS exp

    ADD             reduce using rule 40 (exp -> exp XOR_ASSIGN exp .)
    MINUS           reduce using rule 40 (exp -> exp XOR_ASSIGN exp .)
    MULT            reduce using rule 40 (exp -> exp XOR_ASSIGN exp .)
    DIV             reduce using rule 40 (exp -> exp XOR_ASSIGN exp .)
    MOD             reduce using rule 40 (exp -> exp XOR_ASSIGN exp .)
    L_OP            reduce using rule 40 (exp -> exp XOR_ASSIGN exp .)
    G_OP            reduce using rule 40 (exp -> exp XOR_ASSIGN exp .)
    LE_OP           reduce using rule 40 (exp -> exp XOR_ASSIGN exp .)
    GE_OP           reduce using rule 40 (exp -> exp XOR_ASSIGN exp .)
    NOTEQUALS       reduce using rule 40 (exp -> exp XOR_ASSIGN exp .)
    EQUALS_OP       reduce using rule 40 (exp -> exp XOR_ASSIGN exp .)
    OR_OP           reduce using rule 40 (exp -> exp XOR_ASSIGN exp .)
    AND_OP          reduce using rule 40 (exp -> exp XOR_ASSIGN exp .)
    SEMI_COLON      reduce using rule 40 (exp -> exp XOR_ASSIGN exp .)
    MUL_ASSIGN      shift and go to state 43
    DIV_ASSIGN      shift and go to state 24
    MOD_ASSIGN      shift and go to state 39
    AND_ASSIGN      shift and go to state 33
    SUB_ASSIGN      shift and go to state 38
    LEFT_ASSIGN     shift and go to state 44
    RIGHT_ASSIGN    shift and go to state 30
    XOR_ASSIGN      shift and go to state 40
    OR_ASSIGN       shift and go to state 41
    EQUALS          shift and go to state 34

  ! MUL_ASSIGN      [ reduce using rule 40 (exp -> exp XOR_ASSIGN exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 40 (exp -> exp XOR_ASSIGN exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 40 (exp -> exp XOR_ASSIGN exp .) ]
  ! AND_ASSIGN      [ reduce using rule 40 (exp -> exp XOR_ASSIGN exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 40 (exp -> exp XOR_ASSIGN exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 40 (exp -> exp XOR_ASSIGN exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 40 (exp -> exp XOR_ASSIGN exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 40 (exp -> exp XOR_ASSIGN exp .) ]
  ! OR_ASSIGN       [ reduce using rule 40 (exp -> exp XOR_ASSIGN exp .) ]
  ! EQUALS          [ reduce using rule 40 (exp -> exp XOR_ASSIGN exp .) ]
  ! ADD             [ shift and go to state 36 ]
  ! MINUS           [ shift and go to state 27 ]
  ! MULT            [ shift and go to state 28 ]
  ! DIV             [ shift and go to state 26 ]
  ! MOD             [ shift and go to state 45 ]
  ! L_OP            [ shift and go to state 42 ]
  ! G_OP            [ shift and go to state 31 ]
  ! LE_OP           [ shift and go to state 29 ]
  ! GE_OP           [ shift and go to state 37 ]
  ! NOTEQUALS       [ shift and go to state 22 ]
  ! EQUALS_OP       [ shift and go to state 23 ]
  ! OR_OP           [ shift and go to state 32 ]
  ! AND_OP          [ shift and go to state 35 ]


state 66

    (41) exp -> exp OR_ASSIGN exp .
    (20) exp -> exp . ADD exp
    (21) exp -> exp . MINUS exp
    (22) exp -> exp . MULT exp
    (23) exp -> exp . DIV exp
    (24) exp -> exp . MOD exp
    (25) exp -> exp . L_OP exp
    (26) exp -> exp . G_OP exp
    (27) exp -> exp . LE_OP exp
    (28) exp -> exp . GE_OP exp
    (29) exp -> exp . NOTEQUALS exp
    (30) exp -> exp . EQUALS_OP exp
    (31) exp -> exp . OR_OP exp
    (32) exp -> exp . AND_OP exp
    (33) exp -> exp . MUL_ASSIGN exp
    (34) exp -> exp . DIV_ASSIGN exp
    (35) exp -> exp . MOD_ASSIGN exp
    (36) exp -> exp . AND_ASSIGN exp
    (37) exp -> exp . SUB_ASSIGN exp
    (38) exp -> exp . LEFT_ASSIGN exp
    (39) exp -> exp . RIGHT_ASSIGN exp
    (40) exp -> exp . XOR_ASSIGN exp
    (41) exp -> exp . OR_ASSIGN exp
    (42) exp -> exp . EQUALS exp

    ADD             reduce using rule 41 (exp -> exp OR_ASSIGN exp .)
    MINUS           reduce using rule 41 (exp -> exp OR_ASSIGN exp .)
    MULT            reduce using rule 41 (exp -> exp OR_ASSIGN exp .)
    DIV             reduce using rule 41 (exp -> exp OR_ASSIGN exp .)
    MOD             reduce using rule 41 (exp -> exp OR_ASSIGN exp .)
    L_OP            reduce using rule 41 (exp -> exp OR_ASSIGN exp .)
    G_OP            reduce using rule 41 (exp -> exp OR_ASSIGN exp .)
    LE_OP           reduce using rule 41 (exp -> exp OR_ASSIGN exp .)
    GE_OP           reduce using rule 41 (exp -> exp OR_ASSIGN exp .)
    NOTEQUALS       reduce using rule 41 (exp -> exp OR_ASSIGN exp .)
    EQUALS_OP       reduce using rule 41 (exp -> exp OR_ASSIGN exp .)
    OR_OP           reduce using rule 41 (exp -> exp OR_ASSIGN exp .)
    AND_OP          reduce using rule 41 (exp -> exp OR_ASSIGN exp .)
    SEMI_COLON      reduce using rule 41 (exp -> exp OR_ASSIGN exp .)
    MUL_ASSIGN      shift and go to state 43
    DIV_ASSIGN      shift and go to state 24
    MOD_ASSIGN      shift and go to state 39
    AND_ASSIGN      shift and go to state 33
    SUB_ASSIGN      shift and go to state 38
    LEFT_ASSIGN     shift and go to state 44
    RIGHT_ASSIGN    shift and go to state 30
    XOR_ASSIGN      shift and go to state 40
    OR_ASSIGN       shift and go to state 41
    EQUALS          shift and go to state 34

  ! MUL_ASSIGN      [ reduce using rule 41 (exp -> exp OR_ASSIGN exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 41 (exp -> exp OR_ASSIGN exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 41 (exp -> exp OR_ASSIGN exp .) ]
  ! AND_ASSIGN      [ reduce using rule 41 (exp -> exp OR_ASSIGN exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 41 (exp -> exp OR_ASSIGN exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 41 (exp -> exp OR_ASSIGN exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 41 (exp -> exp OR_ASSIGN exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 41 (exp -> exp OR_ASSIGN exp .) ]
  ! OR_ASSIGN       [ reduce using rule 41 (exp -> exp OR_ASSIGN exp .) ]
  ! EQUALS          [ reduce using rule 41 (exp -> exp OR_ASSIGN exp .) ]
  ! ADD             [ shift and go to state 36 ]
  ! MINUS           [ shift and go to state 27 ]
  ! MULT            [ shift and go to state 28 ]
  ! DIV             [ shift and go to state 26 ]
  ! MOD             [ shift and go to state 45 ]
  ! L_OP            [ shift and go to state 42 ]
  ! G_OP            [ shift and go to state 31 ]
  ! LE_OP           [ shift and go to state 29 ]
  ! GE_OP           [ shift and go to state 37 ]
  ! NOTEQUALS       [ shift and go to state 22 ]
  ! EQUALS_OP       [ shift and go to state 23 ]
  ! OR_OP           [ shift and go to state 32 ]
  ! AND_OP          [ shift and go to state 35 ]


state 67

    (25) exp -> exp L_OP exp .
    (20) exp -> exp . ADD exp
    (21) exp -> exp . MINUS exp
    (22) exp -> exp . MULT exp
    (23) exp -> exp . DIV exp
    (24) exp -> exp . MOD exp
    (25) exp -> exp . L_OP exp
    (26) exp -> exp . G_OP exp
    (27) exp -> exp . LE_OP exp
    (28) exp -> exp . GE_OP exp
    (29) exp -> exp . NOTEQUALS exp
    (30) exp -> exp . EQUALS_OP exp
    (31) exp -> exp . OR_OP exp
    (32) exp -> exp . AND_OP exp
    (33) exp -> exp . MUL_ASSIGN exp
    (34) exp -> exp . DIV_ASSIGN exp
    (35) exp -> exp . MOD_ASSIGN exp
    (36) exp -> exp . AND_ASSIGN exp
    (37) exp -> exp . SUB_ASSIGN exp
    (38) exp -> exp . LEFT_ASSIGN exp
    (39) exp -> exp . RIGHT_ASSIGN exp
    (40) exp -> exp . XOR_ASSIGN exp
    (41) exp -> exp . OR_ASSIGN exp
    (42) exp -> exp . EQUALS exp

    ADD             reduce using rule 25 (exp -> exp L_OP exp .)
    MINUS           reduce using rule 25 (exp -> exp L_OP exp .)
    MULT            reduce using rule 25 (exp -> exp L_OP exp .)
    DIV             reduce using rule 25 (exp -> exp L_OP exp .)
    MOD             reduce using rule 25 (exp -> exp L_OP exp .)
    L_OP            reduce using rule 25 (exp -> exp L_OP exp .)
    G_OP            reduce using rule 25 (exp -> exp L_OP exp .)
    LE_OP           reduce using rule 25 (exp -> exp L_OP exp .)
    GE_OP           reduce using rule 25 (exp -> exp L_OP exp .)
    SEMI_COLON      reduce using rule 25 (exp -> exp L_OP exp .)
    NOTEQUALS       shift and go to state 22
    EQUALS_OP       shift and go to state 23
    OR_OP           shift and go to state 32
    AND_OP          shift and go to state 35
    MUL_ASSIGN      shift and go to state 43
    DIV_ASSIGN      shift and go to state 24
    MOD_ASSIGN      shift and go to state 39
    AND_ASSIGN      shift and go to state 33
    SUB_ASSIGN      shift and go to state 38
    LEFT_ASSIGN     shift and go to state 44
    RIGHT_ASSIGN    shift and go to state 30
    XOR_ASSIGN      shift and go to state 40
    OR_ASSIGN       shift and go to state 41
    EQUALS          shift and go to state 34

  ! NOTEQUALS       [ reduce using rule 25 (exp -> exp L_OP exp .) ]
  ! EQUALS_OP       [ reduce using rule 25 (exp -> exp L_OP exp .) ]
  ! OR_OP           [ reduce using rule 25 (exp -> exp L_OP exp .) ]
  ! AND_OP          [ reduce using rule 25 (exp -> exp L_OP exp .) ]
  ! MUL_ASSIGN      [ reduce using rule 25 (exp -> exp L_OP exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 25 (exp -> exp L_OP exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 25 (exp -> exp L_OP exp .) ]
  ! AND_ASSIGN      [ reduce using rule 25 (exp -> exp L_OP exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 25 (exp -> exp L_OP exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 25 (exp -> exp L_OP exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 25 (exp -> exp L_OP exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 25 (exp -> exp L_OP exp .) ]
  ! OR_ASSIGN       [ reduce using rule 25 (exp -> exp L_OP exp .) ]
  ! EQUALS          [ reduce using rule 25 (exp -> exp L_OP exp .) ]
  ! ADD             [ shift and go to state 36 ]
  ! MINUS           [ shift and go to state 27 ]
  ! MULT            [ shift and go to state 28 ]
  ! DIV             [ shift and go to state 26 ]
  ! MOD             [ shift and go to state 45 ]
  ! L_OP            [ shift and go to state 42 ]
  ! G_OP            [ shift and go to state 31 ]
  ! LE_OP           [ shift and go to state 29 ]
  ! GE_OP           [ shift and go to state 37 ]


state 68

    (33) exp -> exp MUL_ASSIGN exp .
    (20) exp -> exp . ADD exp
    (21) exp -> exp . MINUS exp
    (22) exp -> exp . MULT exp
    (23) exp -> exp . DIV exp
    (24) exp -> exp . MOD exp
    (25) exp -> exp . L_OP exp
    (26) exp -> exp . G_OP exp
    (27) exp -> exp . LE_OP exp
    (28) exp -> exp . GE_OP exp
    (29) exp -> exp . NOTEQUALS exp
    (30) exp -> exp . EQUALS_OP exp
    (31) exp -> exp . OR_OP exp
    (32) exp -> exp . AND_OP exp
    (33) exp -> exp . MUL_ASSIGN exp
    (34) exp -> exp . DIV_ASSIGN exp
    (35) exp -> exp . MOD_ASSIGN exp
    (36) exp -> exp . AND_ASSIGN exp
    (37) exp -> exp . SUB_ASSIGN exp
    (38) exp -> exp . LEFT_ASSIGN exp
    (39) exp -> exp . RIGHT_ASSIGN exp
    (40) exp -> exp . XOR_ASSIGN exp
    (41) exp -> exp . OR_ASSIGN exp
    (42) exp -> exp . EQUALS exp

    ADD             reduce using rule 33 (exp -> exp MUL_ASSIGN exp .)
    MINUS           reduce using rule 33 (exp -> exp MUL_ASSIGN exp .)
    MULT            reduce using rule 33 (exp -> exp MUL_ASSIGN exp .)
    DIV             reduce using rule 33 (exp -> exp MUL_ASSIGN exp .)
    MOD             reduce using rule 33 (exp -> exp MUL_ASSIGN exp .)
    L_OP            reduce using rule 33 (exp -> exp MUL_ASSIGN exp .)
    G_OP            reduce using rule 33 (exp -> exp MUL_ASSIGN exp .)
    LE_OP           reduce using rule 33 (exp -> exp MUL_ASSIGN exp .)
    GE_OP           reduce using rule 33 (exp -> exp MUL_ASSIGN exp .)
    NOTEQUALS       reduce using rule 33 (exp -> exp MUL_ASSIGN exp .)
    EQUALS_OP       reduce using rule 33 (exp -> exp MUL_ASSIGN exp .)
    OR_OP           reduce using rule 33 (exp -> exp MUL_ASSIGN exp .)
    AND_OP          reduce using rule 33 (exp -> exp MUL_ASSIGN exp .)
    SEMI_COLON      reduce using rule 33 (exp -> exp MUL_ASSIGN exp .)
    MUL_ASSIGN      shift and go to state 43
    DIV_ASSIGN      shift and go to state 24
    MOD_ASSIGN      shift and go to state 39
    AND_ASSIGN      shift and go to state 33
    SUB_ASSIGN      shift and go to state 38
    LEFT_ASSIGN     shift and go to state 44
    RIGHT_ASSIGN    shift and go to state 30
    XOR_ASSIGN      shift and go to state 40
    OR_ASSIGN       shift and go to state 41
    EQUALS          shift and go to state 34

  ! MUL_ASSIGN      [ reduce using rule 33 (exp -> exp MUL_ASSIGN exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 33 (exp -> exp MUL_ASSIGN exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 33 (exp -> exp MUL_ASSIGN exp .) ]
  ! AND_ASSIGN      [ reduce using rule 33 (exp -> exp MUL_ASSIGN exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 33 (exp -> exp MUL_ASSIGN exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 33 (exp -> exp MUL_ASSIGN exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 33 (exp -> exp MUL_ASSIGN exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 33 (exp -> exp MUL_ASSIGN exp .) ]
  ! OR_ASSIGN       [ reduce using rule 33 (exp -> exp MUL_ASSIGN exp .) ]
  ! EQUALS          [ reduce using rule 33 (exp -> exp MUL_ASSIGN exp .) ]
  ! ADD             [ shift and go to state 36 ]
  ! MINUS           [ shift and go to state 27 ]
  ! MULT            [ shift and go to state 28 ]
  ! DIV             [ shift and go to state 26 ]
  ! MOD             [ shift and go to state 45 ]
  ! L_OP            [ shift and go to state 42 ]
  ! G_OP            [ shift and go to state 31 ]
  ! LE_OP           [ shift and go to state 29 ]
  ! GE_OP           [ shift and go to state 37 ]
  ! NOTEQUALS       [ shift and go to state 22 ]
  ! EQUALS_OP       [ shift and go to state 23 ]
  ! OR_OP           [ shift and go to state 32 ]
  ! AND_OP          [ shift and go to state 35 ]


state 69

    (38) exp -> exp LEFT_ASSIGN exp .
    (20) exp -> exp . ADD exp
    (21) exp -> exp . MINUS exp
    (22) exp -> exp . MULT exp
    (23) exp -> exp . DIV exp
    (24) exp -> exp . MOD exp
    (25) exp -> exp . L_OP exp
    (26) exp -> exp . G_OP exp
    (27) exp -> exp . LE_OP exp
    (28) exp -> exp . GE_OP exp
    (29) exp -> exp . NOTEQUALS exp
    (30) exp -> exp . EQUALS_OP exp
    (31) exp -> exp . OR_OP exp
    (32) exp -> exp . AND_OP exp
    (33) exp -> exp . MUL_ASSIGN exp
    (34) exp -> exp . DIV_ASSIGN exp
    (35) exp -> exp . MOD_ASSIGN exp
    (36) exp -> exp . AND_ASSIGN exp
    (37) exp -> exp . SUB_ASSIGN exp
    (38) exp -> exp . LEFT_ASSIGN exp
    (39) exp -> exp . RIGHT_ASSIGN exp
    (40) exp -> exp . XOR_ASSIGN exp
    (41) exp -> exp . OR_ASSIGN exp
    (42) exp -> exp . EQUALS exp

    ADD             reduce using rule 38 (exp -> exp LEFT_ASSIGN exp .)
    MINUS           reduce using rule 38 (exp -> exp LEFT_ASSIGN exp .)
    MULT            reduce using rule 38 (exp -> exp LEFT_ASSIGN exp .)
    DIV             reduce using rule 38 (exp -> exp LEFT_ASSIGN exp .)
    MOD             reduce using rule 38 (exp -> exp LEFT_ASSIGN exp .)
    L_OP            reduce using rule 38 (exp -> exp LEFT_ASSIGN exp .)
    G_OP            reduce using rule 38 (exp -> exp LEFT_ASSIGN exp .)
    LE_OP           reduce using rule 38 (exp -> exp LEFT_ASSIGN exp .)
    GE_OP           reduce using rule 38 (exp -> exp LEFT_ASSIGN exp .)
    NOTEQUALS       reduce using rule 38 (exp -> exp LEFT_ASSIGN exp .)
    EQUALS_OP       reduce using rule 38 (exp -> exp LEFT_ASSIGN exp .)
    OR_OP           reduce using rule 38 (exp -> exp LEFT_ASSIGN exp .)
    AND_OP          reduce using rule 38 (exp -> exp LEFT_ASSIGN exp .)
    SEMI_COLON      reduce using rule 38 (exp -> exp LEFT_ASSIGN exp .)
    MUL_ASSIGN      shift and go to state 43
    DIV_ASSIGN      shift and go to state 24
    MOD_ASSIGN      shift and go to state 39
    AND_ASSIGN      shift and go to state 33
    SUB_ASSIGN      shift and go to state 38
    LEFT_ASSIGN     shift and go to state 44
    RIGHT_ASSIGN    shift and go to state 30
    XOR_ASSIGN      shift and go to state 40
    OR_ASSIGN       shift and go to state 41
    EQUALS          shift and go to state 34

  ! MUL_ASSIGN      [ reduce using rule 38 (exp -> exp LEFT_ASSIGN exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 38 (exp -> exp LEFT_ASSIGN exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 38 (exp -> exp LEFT_ASSIGN exp .) ]
  ! AND_ASSIGN      [ reduce using rule 38 (exp -> exp LEFT_ASSIGN exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 38 (exp -> exp LEFT_ASSIGN exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 38 (exp -> exp LEFT_ASSIGN exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 38 (exp -> exp LEFT_ASSIGN exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 38 (exp -> exp LEFT_ASSIGN exp .) ]
  ! OR_ASSIGN       [ reduce using rule 38 (exp -> exp LEFT_ASSIGN exp .) ]
  ! EQUALS          [ reduce using rule 38 (exp -> exp LEFT_ASSIGN exp .) ]
  ! ADD             [ shift and go to state 36 ]
  ! MINUS           [ shift and go to state 27 ]
  ! MULT            [ shift and go to state 28 ]
  ! DIV             [ shift and go to state 26 ]
  ! MOD             [ shift and go to state 45 ]
  ! L_OP            [ shift and go to state 42 ]
  ! G_OP            [ shift and go to state 31 ]
  ! LE_OP           [ shift and go to state 29 ]
  ! GE_OP           [ shift and go to state 37 ]
  ! NOTEQUALS       [ shift and go to state 22 ]
  ! EQUALS_OP       [ shift and go to state 23 ]
  ! OR_OP           [ shift and go to state 32 ]
  ! AND_OP          [ shift and go to state 35 ]


state 70

    (24) exp -> exp MOD exp .
    (20) exp -> exp . ADD exp
    (21) exp -> exp . MINUS exp
    (22) exp -> exp . MULT exp
    (23) exp -> exp . DIV exp
    (24) exp -> exp . MOD exp
    (25) exp -> exp . L_OP exp
    (26) exp -> exp . G_OP exp
    (27) exp -> exp . LE_OP exp
    (28) exp -> exp . GE_OP exp
    (29) exp -> exp . NOTEQUALS exp
    (30) exp -> exp . EQUALS_OP exp
    (31) exp -> exp . OR_OP exp
    (32) exp -> exp . AND_OP exp
    (33) exp -> exp . MUL_ASSIGN exp
    (34) exp -> exp . DIV_ASSIGN exp
    (35) exp -> exp . MOD_ASSIGN exp
    (36) exp -> exp . AND_ASSIGN exp
    (37) exp -> exp . SUB_ASSIGN exp
    (38) exp -> exp . LEFT_ASSIGN exp
    (39) exp -> exp . RIGHT_ASSIGN exp
    (40) exp -> exp . XOR_ASSIGN exp
    (41) exp -> exp . OR_ASSIGN exp
    (42) exp -> exp . EQUALS exp

    ADD             reduce using rule 24 (exp -> exp MOD exp .)
    MINUS           reduce using rule 24 (exp -> exp MOD exp .)
    MULT            reduce using rule 24 (exp -> exp MOD exp .)
    DIV             reduce using rule 24 (exp -> exp MOD exp .)
    MOD             reduce using rule 24 (exp -> exp MOD exp .)
    SEMI_COLON      reduce using rule 24 (exp -> exp MOD exp .)
    L_OP            shift and go to state 42
    G_OP            shift and go to state 31
    LE_OP           shift and go to state 29
    GE_OP           shift and go to state 37
    NOTEQUALS       shift and go to state 22
    EQUALS_OP       shift and go to state 23
    OR_OP           shift and go to state 32
    AND_OP          shift and go to state 35
    MUL_ASSIGN      shift and go to state 43
    DIV_ASSIGN      shift and go to state 24
    MOD_ASSIGN      shift and go to state 39
    AND_ASSIGN      shift and go to state 33
    SUB_ASSIGN      shift and go to state 38
    LEFT_ASSIGN     shift and go to state 44
    RIGHT_ASSIGN    shift and go to state 30
    XOR_ASSIGN      shift and go to state 40
    OR_ASSIGN       shift and go to state 41
    EQUALS          shift and go to state 34

  ! L_OP            [ reduce using rule 24 (exp -> exp MOD exp .) ]
  ! G_OP            [ reduce using rule 24 (exp -> exp MOD exp .) ]
  ! LE_OP           [ reduce using rule 24 (exp -> exp MOD exp .) ]
  ! GE_OP           [ reduce using rule 24 (exp -> exp MOD exp .) ]
  ! NOTEQUALS       [ reduce using rule 24 (exp -> exp MOD exp .) ]
  ! EQUALS_OP       [ reduce using rule 24 (exp -> exp MOD exp .) ]
  ! OR_OP           [ reduce using rule 24 (exp -> exp MOD exp .) ]
  ! AND_OP          [ reduce using rule 24 (exp -> exp MOD exp .) ]
  ! MUL_ASSIGN      [ reduce using rule 24 (exp -> exp MOD exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 24 (exp -> exp MOD exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 24 (exp -> exp MOD exp .) ]
  ! AND_ASSIGN      [ reduce using rule 24 (exp -> exp MOD exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 24 (exp -> exp MOD exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 24 (exp -> exp MOD exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 24 (exp -> exp MOD exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 24 (exp -> exp MOD exp .) ]
  ! OR_ASSIGN       [ reduce using rule 24 (exp -> exp MOD exp .) ]
  ! EQUALS          [ reduce using rule 24 (exp -> exp MOD exp .) ]
  ! ADD             [ shift and go to state 36 ]
  ! MINUS           [ shift and go to state 27 ]
  ! MULT            [ shift and go to state 28 ]
  ! DIV             [ shift and go to state 26 ]
  ! MOD             [ shift and go to state 45 ]


state 71

    (6) declaration -> type VARIABLE EQUALS exp . SEMI_COLON
    (20) exp -> exp . ADD exp
    (21) exp -> exp . MINUS exp
    (22) exp -> exp . MULT exp
    (23) exp -> exp . DIV exp
    (24) exp -> exp . MOD exp
    (25) exp -> exp . L_OP exp
    (26) exp -> exp . G_OP exp
    (27) exp -> exp . LE_OP exp
    (28) exp -> exp . GE_OP exp
    (29) exp -> exp . NOTEQUALS exp
    (30) exp -> exp . EQUALS_OP exp
    (31) exp -> exp . OR_OP exp
    (32) exp -> exp . AND_OP exp
    (33) exp -> exp . MUL_ASSIGN exp
    (34) exp -> exp . DIV_ASSIGN exp
    (35) exp -> exp . MOD_ASSIGN exp
    (36) exp -> exp . AND_ASSIGN exp
    (37) exp -> exp . SUB_ASSIGN exp
    (38) exp -> exp . LEFT_ASSIGN exp
    (39) exp -> exp . RIGHT_ASSIGN exp
    (40) exp -> exp . XOR_ASSIGN exp
    (41) exp -> exp . OR_ASSIGN exp
    (42) exp -> exp . EQUALS exp

    SEMI_COLON      shift and go to state 72
    ADD             shift and go to state 36
    MINUS           shift and go to state 27
    MULT            shift and go to state 28
    DIV             shift and go to state 26
    MOD             shift and go to state 45
    L_OP            shift and go to state 42
    G_OP            shift and go to state 31
    LE_OP           shift and go to state 29
    GE_OP           shift and go to state 37
    NOTEQUALS       shift and go to state 22
    EQUALS_OP       shift and go to state 23
    OR_OP           shift and go to state 32
    AND_OP          shift and go to state 35
    MUL_ASSIGN      shift and go to state 43
    DIV_ASSIGN      shift and go to state 24
    MOD_ASSIGN      shift and go to state 39
    AND_ASSIGN      shift and go to state 33
    SUB_ASSIGN      shift and go to state 38
    LEFT_ASSIGN     shift and go to state 44
    RIGHT_ASSIGN    shift and go to state 30
    XOR_ASSIGN      shift and go to state 40
    OR_ASSIGN       shift and go to state 41
    EQUALS          shift and go to state 34


state 72

    (6) declaration -> type VARIABLE EQUALS exp SEMI_COLON .

    INT             reduce using rule 6 (declaration -> type VARIABLE EQUALS exp SEMI_COLON .)
    FLOAT           reduce using rule 6 (declaration -> type VARIABLE EQUALS exp SEMI_COLON .)
    CHAR            reduce using rule 6 (declaration -> type VARIABLE EQUALS exp SEMI_COLON .)
    DOUBLE          reduce using rule 6 (declaration -> type VARIABLE EQUALS exp SEMI_COLON .)
    VOID            reduce using rule 6 (declaration -> type VARIABLE EQUALS exp SEMI_COLON .)
    SHORT           reduce using rule 6 (declaration -> type VARIABLE EQUALS exp SEMI_COLON .)
    LONG            reduce using rule 6 (declaration -> type VARIABLE EQUALS exp SEMI_COLON .)
    HEX_INT         reduce using rule 6 (declaration -> type VARIABLE EQUALS exp SEMI_COLON .)
    DOT_REAL        reduce using rule 6 (declaration -> type VARIABLE EQUALS exp SEMI_COLON .)
    EXP_REAL        reduce using rule 6 (declaration -> type VARIABLE EQUALS exp SEMI_COLON .)
    DEC_INT         reduce using rule 6 (declaration -> type VARIABLE EQUALS exp SEMI_COLON .)
    CHARACTER       reduce using rule 6 (declaration -> type VARIABLE EQUALS exp SEMI_COLON .)
    VARIABLE        reduce using rule 6 (declaration -> type VARIABLE EQUALS exp SEMI_COLON .)
    $end            reduce using rule 6 (declaration -> type VARIABLE EQUALS exp SEMI_COLON .)

