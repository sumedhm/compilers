Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    RIGHT_OP
    DEFAULT
    ELSE
    LEFT_OP
    COLON
    TRUE
    COMMENT
    NEWLINE
    CASE
    LBIG
    TILDA
    DOT
    IF
    DEFINE
    HASH
    SIZEOF
    SINGLE_QUOTES
    ANDI
    INCLUDE
    AND
    SWITCH
    CONDOP
    DOUBLE_QUOTES
    NOT
    RBIG
    OR

Grammar

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     statements -> statements statement
Rule 3     statements -> statement
Rule 4     statement -> declaration
Rule 5     statement -> exp SEMI_COLON
Rule 6     statement -> iterative_statement
Rule 7     statement -> function
Rule 8     statement -> constant_statement
Rule 9     constant_statement -> BREAK SEMI_COLON
Rule 10    constant_statement -> CONTINUE SEMI_COLON
Rule 11    constant_statement -> RETURN SEMI_COLON
Rule 12    constant_statement -> RETURN exp SEMI_COLON
Rule 13    declaration -> type enum_list SEMI_COLON
Rule 14    enum_list -> VARIABLE COMMA enum_list
Rule 15    enum_list -> VARIABLE EQUALS exp COMMA enum_list
Rule 16    enum_list -> VARIABLE
Rule 17    enum_list -> VARIABLE EQUALS exp
Rule 18    type -> INT
Rule 19    type -> FLOAT
Rule 20    type -> CHAR
Rule 21    type -> DOUBLE
Rule 22    type -> VOID
Rule 23    type -> SHORT
Rule 24    type -> LONG
Rule 25    constant -> HEX_INT
Rule 26    constant -> DOT_REAL
Rule 27    constant -> EXP_REAL
Rule 28    constant -> DEC_INT
Rule 29    constant -> CHARACTER
Rule 30    exp -> exp ADD exp
Rule 31    exp -> exp MINUS exp
Rule 32    exp -> exp MULT exp
Rule 33    exp -> exp DIV exp
Rule 34    exp -> exp MOD exp
Rule 35    exp -> exp L_OP exp
Rule 36    exp -> exp G_OP exp
Rule 37    exp -> exp LE_OP exp
Rule 38    exp -> exp GE_OP exp
Rule 39    exp -> exp NOTEQUALS exp
Rule 40    exp -> exp EQUALS_OP exp
Rule 41    exp -> exp OR_OP exp
Rule 42    exp -> exp AND_OP exp
Rule 43    exp -> exp MUL_ASSIGN exp
Rule 44    exp -> exp DIV_ASSIGN exp
Rule 45    exp -> exp MOD_ASSIGN exp
Rule 46    exp -> exp ADD_ASSIGN exp
Rule 47    exp -> exp SUB_ASSIGN exp
Rule 48    exp -> exp LEFT_ASSIGN exp
Rule 49    exp -> exp RIGHT_ASSIGN exp
Rule 50    exp -> exp AND_ASSIGN exp
Rule 51    exp -> exp XOR_ASSIGN exp
Rule 52    exp -> exp OR_ASSIGN exp
Rule 53    exp -> exp EQUALS exp
Rule 54    exp -> unary_expression
Rule 55    exp -> LPAREN exp RPAREN
Rule 56    exp -> constant
Rule 57    exp -> VARIABLE
Rule 58    exp -> function_call
Rule 59    unary_expression -> VARIABLE unary_operator
Rule 60    unary_expression -> unary_operator VARIABLE
Rule 61    unary_operator -> INCREMENT
Rule 62    unary_operator -> DECREMENT
Rule 63    iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
Rule 64    iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE
Rule 65    iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
Rule 66    iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE
Rule 67    iterative_statement -> WHILE LPAREN exp RPAREN statement
Rule 68    iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON
Rule 69    iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE
Rule 70    iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE
Rule 71    iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON
Rule 72    iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
Rule 73    iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
Rule 74    iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
Rule 75    iterative_exp -> exp COMMA iterative_exp
Rule 76    iterative_exp -> exp
Rule 77    function -> normal_function
Rule 78    function -> main_function
Rule 79    main_function -> type MAIN LPAREN parameters RPAREN LBRACE statements RBRACE
Rule 80    main_function -> type MAIN LPAREN parameters RPAREN LBRACE RBRACE
Rule 81    normal_function -> type VARIABLE LPAREN parameters RPAREN LBRACE statements RBRACE
Rule 82    normal_function -> type VARIABLE LPAREN parameters RPAREN LBRACE RBRACE
Rule 83    parameters -> type VARIABLE COMMA parameters
Rule 84    parameters -> type VARIABLE
Rule 85    parameters -> empty
Rule 86    function_call -> VARIABLE LPAREN arguments RPAREN
Rule 87    function_call -> VARIABLE LPAREN RPAREN
Rule 88    arguments -> arguments COMMA VARIABLE
Rule 89    arguments -> arguments COMMA constant
Rule 90    arguments -> VARIABLE
Rule 91    arguments -> constant
Rule 92    empty -> <empty>

Terminals, with rules where they appear

ADD                  : 30
ADD_ASSIGN           : 46
AND                  : 
ANDI                 : 
AND_ASSIGN           : 50
AND_OP               : 42
BREAK                : 9
CASE                 : 
CHAR                 : 20
CHARACTER            : 29
COLON                : 
COMMA                : 14 15 75 83 88 89
COMMENT              : 
CONDOP               : 
CONTINUE             : 10
DECREMENT            : 62
DEC_INT              : 28
DEFAULT              : 
DEFINE               : 
DIV                  : 33
DIV_ASSIGN           : 44
DO                   : 71 72 73 74
DOT                  : 
DOT_REAL             : 26
DOUBLE               : 21
DOUBLE_QUOTES        : 
ELSE                 : 
EQUALS               : 15 17 53
EQUALS_OP            : 40
EXP_REAL             : 27
FLOAT                : 19
FOR                  : 63 64 65 66
GE_OP                : 38
G_OP                 : 36
HASH                 : 
HEX_INT              : 25
IF                   : 
INCLUDE              : 
INCREMENT            : 61
INT                  : 18
LBIG                 : 
LBRACE               : 64 66 69 70 72 74 79 80 81 82
LEFT_ASSIGN          : 48
LEFT_OP              : 
LE_OP                : 37
LONG                 : 24
LPAREN               : 55 63 64 65 66 67 68 69 70 71 72 73 74 79 80 81 82 86 87
L_OP                 : 35
MAIN                 : 79 80
MINUS                : 31
MOD                  : 34
MOD_ASSIGN           : 45
MULT                 : 32
MUL_ASSIGN           : 43
NEWLINE              : 
NOT                  : 
NOTEQUALS            : 39
OR                   : 
OR_ASSIGN            : 52
OR_OP                : 41
RBIG                 : 
RBRACE               : 64 66 69 70 72 74 79 80 81 82
RETURN               : 11 12
RIGHT_ASSIGN         : 49
RIGHT_OP             : 
RPAREN               : 55 63 64 65 66 67 68 69 70 71 72 73 74 79 80 81 82 86 87
SEMI_COLON           : 5 9 10 11 12 13 63 63 64 64 65 65 65 66 66 68 71 72 73 73 74
SHORT                : 23
SINGLE_QUOTES        : 
SIZEOF               : 
SUB_ASSIGN           : 47
SWITCH               : 
TILDA                : 
TRUE                 : 
VARIABLE             : 14 15 16 17 57 59 60 81 82 83 84 86 87 88 90
VOID                 : 22
WHILE                : 67 68 69 70 71 72 73 74
XOR_ASSIGN           : 51
error                : 

Nonterminals, with rules where they appear

arguments            : 86 88 89
constant             : 56 89 91
constant_statement   : 8
declaration          : 4
empty                : 85
enum_list            : 13 14 15
exp                  : 5 12 15 17 30 30 31 31 32 32 33 33 34 34 35 35 36 36 37 37 38 38 39 39 40 40 41 41 42 42 43 43 44 44 45 45 46 46 47 47 48 48 49 49 50 50 51 51 52 52 53 53 55 67 68 69 70 71 72 73 74 75 76
function             : 7
function_call        : 58
iterative_exp        : 63 63 63 64 64 64 65 65 65 66 66 66 75
iterative_statement  : 6
main_function        : 78
normal_function      : 77
parameters           : 79 80 81 82 83
program              : 0
statement            : 2 3 63 67 71
statements           : 1 2 64 69 72 79 81
type                 : 13 79 80 81 82 83 84
unary_expression     : 54
unary_operator       : 59 60

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (13) declaration -> . type enum_list SEMI_COLON
    (30) exp -> . exp ADD exp
    (31) exp -> . exp MINUS exp
    (32) exp -> . exp MULT exp
    (33) exp -> . exp DIV exp
    (34) exp -> . exp MOD exp
    (35) exp -> . exp L_OP exp
    (36) exp -> . exp G_OP exp
    (37) exp -> . exp LE_OP exp
    (38) exp -> . exp GE_OP exp
    (39) exp -> . exp NOTEQUALS exp
    (40) exp -> . exp EQUALS_OP exp
    (41) exp -> . exp OR_OP exp
    (42) exp -> . exp AND_OP exp
    (43) exp -> . exp MUL_ASSIGN exp
    (44) exp -> . exp DIV_ASSIGN exp
    (45) exp -> . exp MOD_ASSIGN exp
    (46) exp -> . exp ADD_ASSIGN exp
    (47) exp -> . exp SUB_ASSIGN exp
    (48) exp -> . exp LEFT_ASSIGN exp
    (49) exp -> . exp RIGHT_ASSIGN exp
    (50) exp -> . exp AND_ASSIGN exp
    (51) exp -> . exp XOR_ASSIGN exp
    (52) exp -> . exp OR_ASSIGN exp
    (53) exp -> . exp EQUALS exp
    (54) exp -> . unary_expression
    (55) exp -> . LPAREN exp RPAREN
    (56) exp -> . constant
    (57) exp -> . VARIABLE
    (58) exp -> . function_call
    (63) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (64) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE
    (65) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (66) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE
    (67) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (68) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (69) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE statements RBRACE
    (70) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (71) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (72) iterative_statement -> . DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (73) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (74) iterative_statement -> . DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (77) function -> . normal_function
    (78) function -> . main_function
    (9) constant_statement -> . BREAK SEMI_COLON
    (10) constant_statement -> . CONTINUE SEMI_COLON
    (11) constant_statement -> . RETURN SEMI_COLON
    (12) constant_statement -> . RETURN exp SEMI_COLON
    (18) type -> . INT
    (19) type -> . FLOAT
    (20) type -> . CHAR
    (21) type -> . DOUBLE
    (22) type -> . VOID
    (23) type -> . SHORT
    (24) type -> . LONG
    (59) unary_expression -> . VARIABLE unary_operator
    (60) unary_expression -> . unary_operator VARIABLE
    (25) constant -> . HEX_INT
    (26) constant -> . DOT_REAL
    (27) constant -> . EXP_REAL
    (28) constant -> . DEC_INT
    (29) constant -> . CHARACTER
    (86) function_call -> . VARIABLE LPAREN arguments RPAREN
    (87) function_call -> . VARIABLE LPAREN RPAREN
    (81) normal_function -> . type VARIABLE LPAREN parameters RPAREN LBRACE statements RBRACE
    (82) normal_function -> . type VARIABLE LPAREN parameters RPAREN LBRACE RBRACE
    (79) main_function -> . type MAIN LPAREN parameters RPAREN LBRACE statements RBRACE
    (80) main_function -> . type MAIN LPAREN parameters RPAREN LBRACE RBRACE
    (61) unary_operator -> . INCREMENT
    (62) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 23
    VARIABLE        shift and go to state 25
    FOR             shift and go to state 22
    WHILE           shift and go to state 9
    DO              shift and go to state 4
    BREAK           shift and go to state 34
    CONTINUE        shift and go to state 35
    RETURN          shift and go to state 1
    INT             shift and go to state 29
    FLOAT           shift and go to state 33
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 5
    SHORT           shift and go to state 10
    LONG            shift and go to state 37
    HEX_INT         shift and go to state 31
    DOT_REAL        shift and go to state 18
    EXP_REAL        shift and go to state 14
    DEC_INT         shift and go to state 15
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 13
    DECREMENT       shift and go to state 27

    function                       shift and go to state 21
    main_function                  shift and go to state 2
    statements                     shift and go to state 3
    statement                      shift and go to state 17
    unary_expression               shift and go to state 26
    type                           shift and go to state 19
    normal_function                shift and go to state 32
    function_call                  shift and go to state 7
    program                        shift and go to state 16
    exp                            shift and go to state 36
    declaration                    shift and go to state 24
    constant_statement             shift and go to state 28
    constant                       shift and go to state 11
    iterative_statement            shift and go to state 12
    unary_operator                 shift and go to state 20

state 1

    (11) constant_statement -> RETURN . SEMI_COLON
    (12) constant_statement -> RETURN . exp SEMI_COLON
    (30) exp -> . exp ADD exp
    (31) exp -> . exp MINUS exp
    (32) exp -> . exp MULT exp
    (33) exp -> . exp DIV exp
    (34) exp -> . exp MOD exp
    (35) exp -> . exp L_OP exp
    (36) exp -> . exp G_OP exp
    (37) exp -> . exp LE_OP exp
    (38) exp -> . exp GE_OP exp
    (39) exp -> . exp NOTEQUALS exp
    (40) exp -> . exp EQUALS_OP exp
    (41) exp -> . exp OR_OP exp
    (42) exp -> . exp AND_OP exp
    (43) exp -> . exp MUL_ASSIGN exp
    (44) exp -> . exp DIV_ASSIGN exp
    (45) exp -> . exp MOD_ASSIGN exp
    (46) exp -> . exp ADD_ASSIGN exp
    (47) exp -> . exp SUB_ASSIGN exp
    (48) exp -> . exp LEFT_ASSIGN exp
    (49) exp -> . exp RIGHT_ASSIGN exp
    (50) exp -> . exp AND_ASSIGN exp
    (51) exp -> . exp XOR_ASSIGN exp
    (52) exp -> . exp OR_ASSIGN exp
    (53) exp -> . exp EQUALS exp
    (54) exp -> . unary_expression
    (55) exp -> . LPAREN exp RPAREN
    (56) exp -> . constant
    (57) exp -> . VARIABLE
    (58) exp -> . function_call
    (59) unary_expression -> . VARIABLE unary_operator
    (60) unary_expression -> . unary_operator VARIABLE
    (25) constant -> . HEX_INT
    (26) constant -> . DOT_REAL
    (27) constant -> . EXP_REAL
    (28) constant -> . DEC_INT
    (29) constant -> . CHARACTER
    (86) function_call -> . VARIABLE LPAREN arguments RPAREN
    (87) function_call -> . VARIABLE LPAREN RPAREN
    (61) unary_operator -> . INCREMENT
    (62) unary_operator -> . DECREMENT

    SEMI_COLON      shift and go to state 38
    LPAREN          shift and go to state 23
    VARIABLE        shift and go to state 25
    HEX_INT         shift and go to state 31
    DOT_REAL        shift and go to state 18
    EXP_REAL        shift and go to state 14
    DEC_INT         shift and go to state 15
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 13
    DECREMENT       shift and go to state 27

    constant                       shift and go to state 11
    unary_expression               shift and go to state 26
    function_call                  shift and go to state 7
    exp                            shift and go to state 39
    unary_operator                 shift and go to state 20

state 2

    (78) function -> main_function .

    RBRACE          reduce using rule 78 (function -> main_function .)
    LPAREN          reduce using rule 78 (function -> main_function .)
    VARIABLE        reduce using rule 78 (function -> main_function .)
    FOR             reduce using rule 78 (function -> main_function .)
    WHILE           reduce using rule 78 (function -> main_function .)
    DO              reduce using rule 78 (function -> main_function .)
    BREAK           reduce using rule 78 (function -> main_function .)
    CONTINUE        reduce using rule 78 (function -> main_function .)
    RETURN          reduce using rule 78 (function -> main_function .)
    INT             reduce using rule 78 (function -> main_function .)
    FLOAT           reduce using rule 78 (function -> main_function .)
    CHAR            reduce using rule 78 (function -> main_function .)
    DOUBLE          reduce using rule 78 (function -> main_function .)
    VOID            reduce using rule 78 (function -> main_function .)
    SHORT           reduce using rule 78 (function -> main_function .)
    LONG            reduce using rule 78 (function -> main_function .)
    HEX_INT         reduce using rule 78 (function -> main_function .)
    DOT_REAL        reduce using rule 78 (function -> main_function .)
    EXP_REAL        reduce using rule 78 (function -> main_function .)
    DEC_INT         reduce using rule 78 (function -> main_function .)
    CHARACTER       reduce using rule 78 (function -> main_function .)
    INCREMENT       reduce using rule 78 (function -> main_function .)
    DECREMENT       reduce using rule 78 (function -> main_function .)
    $end            reduce using rule 78 (function -> main_function .)


state 3

    (1) program -> statements .
    (2) statements -> statements . statement
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (13) declaration -> . type enum_list SEMI_COLON
    (30) exp -> . exp ADD exp
    (31) exp -> . exp MINUS exp
    (32) exp -> . exp MULT exp
    (33) exp -> . exp DIV exp
    (34) exp -> . exp MOD exp
    (35) exp -> . exp L_OP exp
    (36) exp -> . exp G_OP exp
    (37) exp -> . exp LE_OP exp
    (38) exp -> . exp GE_OP exp
    (39) exp -> . exp NOTEQUALS exp
    (40) exp -> . exp EQUALS_OP exp
    (41) exp -> . exp OR_OP exp
    (42) exp -> . exp AND_OP exp
    (43) exp -> . exp MUL_ASSIGN exp
    (44) exp -> . exp DIV_ASSIGN exp
    (45) exp -> . exp MOD_ASSIGN exp
    (46) exp -> . exp ADD_ASSIGN exp
    (47) exp -> . exp SUB_ASSIGN exp
    (48) exp -> . exp LEFT_ASSIGN exp
    (49) exp -> . exp RIGHT_ASSIGN exp
    (50) exp -> . exp AND_ASSIGN exp
    (51) exp -> . exp XOR_ASSIGN exp
    (52) exp -> . exp OR_ASSIGN exp
    (53) exp -> . exp EQUALS exp
    (54) exp -> . unary_expression
    (55) exp -> . LPAREN exp RPAREN
    (56) exp -> . constant
    (57) exp -> . VARIABLE
    (58) exp -> . function_call
    (63) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (64) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE
    (65) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (66) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE
    (67) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (68) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (69) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE statements RBRACE
    (70) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (71) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (72) iterative_statement -> . DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (73) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (74) iterative_statement -> . DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (77) function -> . normal_function
    (78) function -> . main_function
    (9) constant_statement -> . BREAK SEMI_COLON
    (10) constant_statement -> . CONTINUE SEMI_COLON
    (11) constant_statement -> . RETURN SEMI_COLON
    (12) constant_statement -> . RETURN exp SEMI_COLON
    (18) type -> . INT
    (19) type -> . FLOAT
    (20) type -> . CHAR
    (21) type -> . DOUBLE
    (22) type -> . VOID
    (23) type -> . SHORT
    (24) type -> . LONG
    (59) unary_expression -> . VARIABLE unary_operator
    (60) unary_expression -> . unary_operator VARIABLE
    (25) constant -> . HEX_INT
    (26) constant -> . DOT_REAL
    (27) constant -> . EXP_REAL
    (28) constant -> . DEC_INT
    (29) constant -> . CHARACTER
    (86) function_call -> . VARIABLE LPAREN arguments RPAREN
    (87) function_call -> . VARIABLE LPAREN RPAREN
    (81) normal_function -> . type VARIABLE LPAREN parameters RPAREN LBRACE statements RBRACE
    (82) normal_function -> . type VARIABLE LPAREN parameters RPAREN LBRACE RBRACE
    (79) main_function -> . type MAIN LPAREN parameters RPAREN LBRACE statements RBRACE
    (80) main_function -> . type MAIN LPAREN parameters RPAREN LBRACE RBRACE
    (61) unary_operator -> . INCREMENT
    (62) unary_operator -> . DECREMENT

    $end            reduce using rule 1 (program -> statements .)
    LPAREN          shift and go to state 23
    VARIABLE        shift and go to state 25
    FOR             shift and go to state 22
    WHILE           shift and go to state 9
    DO              shift and go to state 4
    BREAK           shift and go to state 34
    CONTINUE        shift and go to state 35
    RETURN          shift and go to state 1
    INT             shift and go to state 29
    FLOAT           shift and go to state 33
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 5
    SHORT           shift and go to state 10
    LONG            shift and go to state 37
    HEX_INT         shift and go to state 31
    DOT_REAL        shift and go to state 18
    EXP_REAL        shift and go to state 14
    DEC_INT         shift and go to state 15
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 13
    DECREMENT       shift and go to state 27

    function                       shift and go to state 21
    main_function                  shift and go to state 2
    statement                      shift and go to state 40
    unary_expression               shift and go to state 26
    type                           shift and go to state 19
    normal_function                shift and go to state 32
    function_call                  shift and go to state 7
    exp                            shift and go to state 36
    declaration                    shift and go to state 24
    constant_statement             shift and go to state 28
    constant                       shift and go to state 11
    iterative_statement            shift and go to state 12
    unary_operator                 shift and go to state 20

state 4

    (71) iterative_statement -> DO . statement WHILE LPAREN exp RPAREN SEMI_COLON
    (72) iterative_statement -> DO . LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (73) iterative_statement -> DO . SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (74) iterative_statement -> DO . LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (13) declaration -> . type enum_list SEMI_COLON
    (30) exp -> . exp ADD exp
    (31) exp -> . exp MINUS exp
    (32) exp -> . exp MULT exp
    (33) exp -> . exp DIV exp
    (34) exp -> . exp MOD exp
    (35) exp -> . exp L_OP exp
    (36) exp -> . exp G_OP exp
    (37) exp -> . exp LE_OP exp
    (38) exp -> . exp GE_OP exp
    (39) exp -> . exp NOTEQUALS exp
    (40) exp -> . exp EQUALS_OP exp
    (41) exp -> . exp OR_OP exp
    (42) exp -> . exp AND_OP exp
    (43) exp -> . exp MUL_ASSIGN exp
    (44) exp -> . exp DIV_ASSIGN exp
    (45) exp -> . exp MOD_ASSIGN exp
    (46) exp -> . exp ADD_ASSIGN exp
    (47) exp -> . exp SUB_ASSIGN exp
    (48) exp -> . exp LEFT_ASSIGN exp
    (49) exp -> . exp RIGHT_ASSIGN exp
    (50) exp -> . exp AND_ASSIGN exp
    (51) exp -> . exp XOR_ASSIGN exp
    (52) exp -> . exp OR_ASSIGN exp
    (53) exp -> . exp EQUALS exp
    (54) exp -> . unary_expression
    (55) exp -> . LPAREN exp RPAREN
    (56) exp -> . constant
    (57) exp -> . VARIABLE
    (58) exp -> . function_call
    (63) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (64) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE
    (65) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (66) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE
    (67) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (68) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (69) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE statements RBRACE
    (70) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (71) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (72) iterative_statement -> . DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (73) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (74) iterative_statement -> . DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (77) function -> . normal_function
    (78) function -> . main_function
    (9) constant_statement -> . BREAK SEMI_COLON
    (10) constant_statement -> . CONTINUE SEMI_COLON
    (11) constant_statement -> . RETURN SEMI_COLON
    (12) constant_statement -> . RETURN exp SEMI_COLON
    (18) type -> . INT
    (19) type -> . FLOAT
    (20) type -> . CHAR
    (21) type -> . DOUBLE
    (22) type -> . VOID
    (23) type -> . SHORT
    (24) type -> . LONG
    (59) unary_expression -> . VARIABLE unary_operator
    (60) unary_expression -> . unary_operator VARIABLE
    (25) constant -> . HEX_INT
    (26) constant -> . DOT_REAL
    (27) constant -> . EXP_REAL
    (28) constant -> . DEC_INT
    (29) constant -> . CHARACTER
    (86) function_call -> . VARIABLE LPAREN arguments RPAREN
    (87) function_call -> . VARIABLE LPAREN RPAREN
    (81) normal_function -> . type VARIABLE LPAREN parameters RPAREN LBRACE statements RBRACE
    (82) normal_function -> . type VARIABLE LPAREN parameters RPAREN LBRACE RBRACE
    (79) main_function -> . type MAIN LPAREN parameters RPAREN LBRACE statements RBRACE
    (80) main_function -> . type MAIN LPAREN parameters RPAREN LBRACE RBRACE
    (61) unary_operator -> . INCREMENT
    (62) unary_operator -> . DECREMENT

    LBRACE          shift and go to state 43
    SEMI_COLON      shift and go to state 41
    LPAREN          shift and go to state 23
    VARIABLE        shift and go to state 25
    FOR             shift and go to state 22
    WHILE           shift and go to state 9
    DO              shift and go to state 4
    BREAK           shift and go to state 34
    CONTINUE        shift and go to state 35
    RETURN          shift and go to state 1
    INT             shift and go to state 29
    FLOAT           shift and go to state 33
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 5
    SHORT           shift and go to state 10
    LONG            shift and go to state 37
    HEX_INT         shift and go to state 31
    DOT_REAL        shift and go to state 18
    EXP_REAL        shift and go to state 14
    DEC_INT         shift and go to state 15
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 13
    DECREMENT       shift and go to state 27

    function                       shift and go to state 21
    main_function                  shift and go to state 2
    statement                      shift and go to state 42
    unary_expression               shift and go to state 26
    type                           shift and go to state 19
    normal_function                shift and go to state 32
    function_call                  shift and go to state 7
    exp                            shift and go to state 36
    declaration                    shift and go to state 24
    constant_statement             shift and go to state 28
    constant                       shift and go to state 11
    iterative_statement            shift and go to state 12
    unary_operator                 shift and go to state 20

state 5

    (22) type -> VOID .

    VARIABLE        reduce using rule 22 (type -> VOID .)
    MAIN            reduce using rule 22 (type -> VOID .)


state 6

    (29) constant -> CHARACTER .

    SEMI_COLON      reduce using rule 29 (constant -> CHARACTER .)
    ADD             reduce using rule 29 (constant -> CHARACTER .)
    MINUS           reduce using rule 29 (constant -> CHARACTER .)
    MULT            reduce using rule 29 (constant -> CHARACTER .)
    DIV             reduce using rule 29 (constant -> CHARACTER .)
    MOD             reduce using rule 29 (constant -> CHARACTER .)
    L_OP            reduce using rule 29 (constant -> CHARACTER .)
    G_OP            reduce using rule 29 (constant -> CHARACTER .)
    LE_OP           reduce using rule 29 (constant -> CHARACTER .)
    GE_OP           reduce using rule 29 (constant -> CHARACTER .)
    NOTEQUALS       reduce using rule 29 (constant -> CHARACTER .)
    EQUALS_OP       reduce using rule 29 (constant -> CHARACTER .)
    OR_OP           reduce using rule 29 (constant -> CHARACTER .)
    AND_OP          reduce using rule 29 (constant -> CHARACTER .)
    MUL_ASSIGN      reduce using rule 29 (constant -> CHARACTER .)
    DIV_ASSIGN      reduce using rule 29 (constant -> CHARACTER .)
    MOD_ASSIGN      reduce using rule 29 (constant -> CHARACTER .)
    ADD_ASSIGN      reduce using rule 29 (constant -> CHARACTER .)
    SUB_ASSIGN      reduce using rule 29 (constant -> CHARACTER .)
    LEFT_ASSIGN     reduce using rule 29 (constant -> CHARACTER .)
    RIGHT_ASSIGN    reduce using rule 29 (constant -> CHARACTER .)
    AND_ASSIGN      reduce using rule 29 (constant -> CHARACTER .)
    XOR_ASSIGN      reduce using rule 29 (constant -> CHARACTER .)
    OR_ASSIGN       reduce using rule 29 (constant -> CHARACTER .)
    EQUALS          reduce using rule 29 (constant -> CHARACTER .)
    RPAREN          reduce using rule 29 (constant -> CHARACTER .)
    COMMA           reduce using rule 29 (constant -> CHARACTER .)


state 7

    (58) exp -> function_call .

    SEMI_COLON      reduce using rule 58 (exp -> function_call .)
    ADD             reduce using rule 58 (exp -> function_call .)
    MINUS           reduce using rule 58 (exp -> function_call .)
    MULT            reduce using rule 58 (exp -> function_call .)
    DIV             reduce using rule 58 (exp -> function_call .)
    MOD             reduce using rule 58 (exp -> function_call .)
    L_OP            reduce using rule 58 (exp -> function_call .)
    G_OP            reduce using rule 58 (exp -> function_call .)
    LE_OP           reduce using rule 58 (exp -> function_call .)
    GE_OP           reduce using rule 58 (exp -> function_call .)
    NOTEQUALS       reduce using rule 58 (exp -> function_call .)
    EQUALS_OP       reduce using rule 58 (exp -> function_call .)
    OR_OP           reduce using rule 58 (exp -> function_call .)
    AND_OP          reduce using rule 58 (exp -> function_call .)
    MUL_ASSIGN      reduce using rule 58 (exp -> function_call .)
    DIV_ASSIGN      reduce using rule 58 (exp -> function_call .)
    MOD_ASSIGN      reduce using rule 58 (exp -> function_call .)
    ADD_ASSIGN      reduce using rule 58 (exp -> function_call .)
    SUB_ASSIGN      reduce using rule 58 (exp -> function_call .)
    LEFT_ASSIGN     reduce using rule 58 (exp -> function_call .)
    RIGHT_ASSIGN    reduce using rule 58 (exp -> function_call .)
    AND_ASSIGN      reduce using rule 58 (exp -> function_call .)
    XOR_ASSIGN      reduce using rule 58 (exp -> function_call .)
    OR_ASSIGN       reduce using rule 58 (exp -> function_call .)
    EQUALS          reduce using rule 58 (exp -> function_call .)
    RPAREN          reduce using rule 58 (exp -> function_call .)
    COMMA           reduce using rule 58 (exp -> function_call .)


state 8

    (20) type -> CHAR .

    VARIABLE        reduce using rule 20 (type -> CHAR .)
    MAIN            reduce using rule 20 (type -> CHAR .)


state 9

    (67) iterative_statement -> WHILE . LPAREN exp RPAREN statement
    (68) iterative_statement -> WHILE . LPAREN exp RPAREN SEMI_COLON
    (69) iterative_statement -> WHILE . LPAREN exp RPAREN LBRACE statements RBRACE
    (70) iterative_statement -> WHILE . LPAREN exp RPAREN LBRACE RBRACE

    LPAREN          shift and go to state 44


state 10

    (23) type -> SHORT .

    VARIABLE        reduce using rule 23 (type -> SHORT .)
    MAIN            reduce using rule 23 (type -> SHORT .)


state 11

    (56) exp -> constant .

    SEMI_COLON      reduce using rule 56 (exp -> constant .)
    ADD             reduce using rule 56 (exp -> constant .)
    MINUS           reduce using rule 56 (exp -> constant .)
    MULT            reduce using rule 56 (exp -> constant .)
    DIV             reduce using rule 56 (exp -> constant .)
    MOD             reduce using rule 56 (exp -> constant .)
    L_OP            reduce using rule 56 (exp -> constant .)
    G_OP            reduce using rule 56 (exp -> constant .)
    LE_OP           reduce using rule 56 (exp -> constant .)
    GE_OP           reduce using rule 56 (exp -> constant .)
    NOTEQUALS       reduce using rule 56 (exp -> constant .)
    EQUALS_OP       reduce using rule 56 (exp -> constant .)
    OR_OP           reduce using rule 56 (exp -> constant .)
    AND_OP          reduce using rule 56 (exp -> constant .)
    MUL_ASSIGN      reduce using rule 56 (exp -> constant .)
    DIV_ASSIGN      reduce using rule 56 (exp -> constant .)
    MOD_ASSIGN      reduce using rule 56 (exp -> constant .)
    ADD_ASSIGN      reduce using rule 56 (exp -> constant .)
    SUB_ASSIGN      reduce using rule 56 (exp -> constant .)
    LEFT_ASSIGN     reduce using rule 56 (exp -> constant .)
    RIGHT_ASSIGN    reduce using rule 56 (exp -> constant .)
    AND_ASSIGN      reduce using rule 56 (exp -> constant .)
    XOR_ASSIGN      reduce using rule 56 (exp -> constant .)
    OR_ASSIGN       reduce using rule 56 (exp -> constant .)
    EQUALS          reduce using rule 56 (exp -> constant .)
    RPAREN          reduce using rule 56 (exp -> constant .)
    COMMA           reduce using rule 56 (exp -> constant .)


state 12

    (6) statement -> iterative_statement .

    RBRACE          reduce using rule 6 (statement -> iterative_statement .)
    LPAREN          reduce using rule 6 (statement -> iterative_statement .)
    VARIABLE        reduce using rule 6 (statement -> iterative_statement .)
    FOR             reduce using rule 6 (statement -> iterative_statement .)
    WHILE           reduce using rule 6 (statement -> iterative_statement .)
    DO              reduce using rule 6 (statement -> iterative_statement .)
    BREAK           reduce using rule 6 (statement -> iterative_statement .)
    CONTINUE        reduce using rule 6 (statement -> iterative_statement .)
    RETURN          reduce using rule 6 (statement -> iterative_statement .)
    INT             reduce using rule 6 (statement -> iterative_statement .)
    FLOAT           reduce using rule 6 (statement -> iterative_statement .)
    CHAR            reduce using rule 6 (statement -> iterative_statement .)
    DOUBLE          reduce using rule 6 (statement -> iterative_statement .)
    VOID            reduce using rule 6 (statement -> iterative_statement .)
    SHORT           reduce using rule 6 (statement -> iterative_statement .)
    LONG            reduce using rule 6 (statement -> iterative_statement .)
    HEX_INT         reduce using rule 6 (statement -> iterative_statement .)
    DOT_REAL        reduce using rule 6 (statement -> iterative_statement .)
    EXP_REAL        reduce using rule 6 (statement -> iterative_statement .)
    DEC_INT         reduce using rule 6 (statement -> iterative_statement .)
    CHARACTER       reduce using rule 6 (statement -> iterative_statement .)
    INCREMENT       reduce using rule 6 (statement -> iterative_statement .)
    DECREMENT       reduce using rule 6 (statement -> iterative_statement .)
    $end            reduce using rule 6 (statement -> iterative_statement .)


state 13

    (61) unary_operator -> INCREMENT .

    VARIABLE        reduce using rule 61 (unary_operator -> INCREMENT .)
    SEMI_COLON      reduce using rule 61 (unary_operator -> INCREMENT .)
    ADD             reduce using rule 61 (unary_operator -> INCREMENT .)
    MINUS           reduce using rule 61 (unary_operator -> INCREMENT .)
    MULT            reduce using rule 61 (unary_operator -> INCREMENT .)
    DIV             reduce using rule 61 (unary_operator -> INCREMENT .)
    MOD             reduce using rule 61 (unary_operator -> INCREMENT .)
    L_OP            reduce using rule 61 (unary_operator -> INCREMENT .)
    G_OP            reduce using rule 61 (unary_operator -> INCREMENT .)
    LE_OP           reduce using rule 61 (unary_operator -> INCREMENT .)
    GE_OP           reduce using rule 61 (unary_operator -> INCREMENT .)
    NOTEQUALS       reduce using rule 61 (unary_operator -> INCREMENT .)
    EQUALS_OP       reduce using rule 61 (unary_operator -> INCREMENT .)
    OR_OP           reduce using rule 61 (unary_operator -> INCREMENT .)
    AND_OP          reduce using rule 61 (unary_operator -> INCREMENT .)
    MUL_ASSIGN      reduce using rule 61 (unary_operator -> INCREMENT .)
    DIV_ASSIGN      reduce using rule 61 (unary_operator -> INCREMENT .)
    MOD_ASSIGN      reduce using rule 61 (unary_operator -> INCREMENT .)
    ADD_ASSIGN      reduce using rule 61 (unary_operator -> INCREMENT .)
    SUB_ASSIGN      reduce using rule 61 (unary_operator -> INCREMENT .)
    LEFT_ASSIGN     reduce using rule 61 (unary_operator -> INCREMENT .)
    RIGHT_ASSIGN    reduce using rule 61 (unary_operator -> INCREMENT .)
    AND_ASSIGN      reduce using rule 61 (unary_operator -> INCREMENT .)
    XOR_ASSIGN      reduce using rule 61 (unary_operator -> INCREMENT .)
    OR_ASSIGN       reduce using rule 61 (unary_operator -> INCREMENT .)
    EQUALS          reduce using rule 61 (unary_operator -> INCREMENT .)
    RPAREN          reduce using rule 61 (unary_operator -> INCREMENT .)
    COMMA           reduce using rule 61 (unary_operator -> INCREMENT .)


state 14

    (27) constant -> EXP_REAL .

    SEMI_COLON      reduce using rule 27 (constant -> EXP_REAL .)
    ADD             reduce using rule 27 (constant -> EXP_REAL .)
    MINUS           reduce using rule 27 (constant -> EXP_REAL .)
    MULT            reduce using rule 27 (constant -> EXP_REAL .)
    DIV             reduce using rule 27 (constant -> EXP_REAL .)
    MOD             reduce using rule 27 (constant -> EXP_REAL .)
    L_OP            reduce using rule 27 (constant -> EXP_REAL .)
    G_OP            reduce using rule 27 (constant -> EXP_REAL .)
    LE_OP           reduce using rule 27 (constant -> EXP_REAL .)
    GE_OP           reduce using rule 27 (constant -> EXP_REAL .)
    NOTEQUALS       reduce using rule 27 (constant -> EXP_REAL .)
    EQUALS_OP       reduce using rule 27 (constant -> EXP_REAL .)
    OR_OP           reduce using rule 27 (constant -> EXP_REAL .)
    AND_OP          reduce using rule 27 (constant -> EXP_REAL .)
    MUL_ASSIGN      reduce using rule 27 (constant -> EXP_REAL .)
    DIV_ASSIGN      reduce using rule 27 (constant -> EXP_REAL .)
    MOD_ASSIGN      reduce using rule 27 (constant -> EXP_REAL .)
    ADD_ASSIGN      reduce using rule 27 (constant -> EXP_REAL .)
    SUB_ASSIGN      reduce using rule 27 (constant -> EXP_REAL .)
    LEFT_ASSIGN     reduce using rule 27 (constant -> EXP_REAL .)
    RIGHT_ASSIGN    reduce using rule 27 (constant -> EXP_REAL .)
    AND_ASSIGN      reduce using rule 27 (constant -> EXP_REAL .)
    XOR_ASSIGN      reduce using rule 27 (constant -> EXP_REAL .)
    OR_ASSIGN       reduce using rule 27 (constant -> EXP_REAL .)
    EQUALS          reduce using rule 27 (constant -> EXP_REAL .)
    RPAREN          reduce using rule 27 (constant -> EXP_REAL .)
    COMMA           reduce using rule 27 (constant -> EXP_REAL .)


state 15

    (28) constant -> DEC_INT .

    SEMI_COLON      reduce using rule 28 (constant -> DEC_INT .)
    ADD             reduce using rule 28 (constant -> DEC_INT .)
    MINUS           reduce using rule 28 (constant -> DEC_INT .)
    MULT            reduce using rule 28 (constant -> DEC_INT .)
    DIV             reduce using rule 28 (constant -> DEC_INT .)
    MOD             reduce using rule 28 (constant -> DEC_INT .)
    L_OP            reduce using rule 28 (constant -> DEC_INT .)
    G_OP            reduce using rule 28 (constant -> DEC_INT .)
    LE_OP           reduce using rule 28 (constant -> DEC_INT .)
    GE_OP           reduce using rule 28 (constant -> DEC_INT .)
    NOTEQUALS       reduce using rule 28 (constant -> DEC_INT .)
    EQUALS_OP       reduce using rule 28 (constant -> DEC_INT .)
    OR_OP           reduce using rule 28 (constant -> DEC_INT .)
    AND_OP          reduce using rule 28 (constant -> DEC_INT .)
    MUL_ASSIGN      reduce using rule 28 (constant -> DEC_INT .)
    DIV_ASSIGN      reduce using rule 28 (constant -> DEC_INT .)
    MOD_ASSIGN      reduce using rule 28 (constant -> DEC_INT .)
    ADD_ASSIGN      reduce using rule 28 (constant -> DEC_INT .)
    SUB_ASSIGN      reduce using rule 28 (constant -> DEC_INT .)
    LEFT_ASSIGN     reduce using rule 28 (constant -> DEC_INT .)
    RIGHT_ASSIGN    reduce using rule 28 (constant -> DEC_INT .)
    AND_ASSIGN      reduce using rule 28 (constant -> DEC_INT .)
    XOR_ASSIGN      reduce using rule 28 (constant -> DEC_INT .)
    OR_ASSIGN       reduce using rule 28 (constant -> DEC_INT .)
    EQUALS          reduce using rule 28 (constant -> DEC_INT .)
    RPAREN          reduce using rule 28 (constant -> DEC_INT .)
    COMMA           reduce using rule 28 (constant -> DEC_INT .)


state 16

    (0) S' -> program .



state 17

    (3) statements -> statement .

    RBRACE          reduce using rule 3 (statements -> statement .)
    LPAREN          reduce using rule 3 (statements -> statement .)
    VARIABLE        reduce using rule 3 (statements -> statement .)
    FOR             reduce using rule 3 (statements -> statement .)
    WHILE           reduce using rule 3 (statements -> statement .)
    DO              reduce using rule 3 (statements -> statement .)
    BREAK           reduce using rule 3 (statements -> statement .)
    CONTINUE        reduce using rule 3 (statements -> statement .)
    RETURN          reduce using rule 3 (statements -> statement .)
    INT             reduce using rule 3 (statements -> statement .)
    FLOAT           reduce using rule 3 (statements -> statement .)
    CHAR            reduce using rule 3 (statements -> statement .)
    DOUBLE          reduce using rule 3 (statements -> statement .)
    VOID            reduce using rule 3 (statements -> statement .)
    SHORT           reduce using rule 3 (statements -> statement .)
    LONG            reduce using rule 3 (statements -> statement .)
    HEX_INT         reduce using rule 3 (statements -> statement .)
    DOT_REAL        reduce using rule 3 (statements -> statement .)
    EXP_REAL        reduce using rule 3 (statements -> statement .)
    DEC_INT         reduce using rule 3 (statements -> statement .)
    CHARACTER       reduce using rule 3 (statements -> statement .)
    INCREMENT       reduce using rule 3 (statements -> statement .)
    DECREMENT       reduce using rule 3 (statements -> statement .)
    $end            reduce using rule 3 (statements -> statement .)


state 18

    (26) constant -> DOT_REAL .

    SEMI_COLON      reduce using rule 26 (constant -> DOT_REAL .)
    ADD             reduce using rule 26 (constant -> DOT_REAL .)
    MINUS           reduce using rule 26 (constant -> DOT_REAL .)
    MULT            reduce using rule 26 (constant -> DOT_REAL .)
    DIV             reduce using rule 26 (constant -> DOT_REAL .)
    MOD             reduce using rule 26 (constant -> DOT_REAL .)
    L_OP            reduce using rule 26 (constant -> DOT_REAL .)
    G_OP            reduce using rule 26 (constant -> DOT_REAL .)
    LE_OP           reduce using rule 26 (constant -> DOT_REAL .)
    GE_OP           reduce using rule 26 (constant -> DOT_REAL .)
    NOTEQUALS       reduce using rule 26 (constant -> DOT_REAL .)
    EQUALS_OP       reduce using rule 26 (constant -> DOT_REAL .)
    OR_OP           reduce using rule 26 (constant -> DOT_REAL .)
    AND_OP          reduce using rule 26 (constant -> DOT_REAL .)
    MUL_ASSIGN      reduce using rule 26 (constant -> DOT_REAL .)
    DIV_ASSIGN      reduce using rule 26 (constant -> DOT_REAL .)
    MOD_ASSIGN      reduce using rule 26 (constant -> DOT_REAL .)
    ADD_ASSIGN      reduce using rule 26 (constant -> DOT_REAL .)
    SUB_ASSIGN      reduce using rule 26 (constant -> DOT_REAL .)
    LEFT_ASSIGN     reduce using rule 26 (constant -> DOT_REAL .)
    RIGHT_ASSIGN    reduce using rule 26 (constant -> DOT_REAL .)
    AND_ASSIGN      reduce using rule 26 (constant -> DOT_REAL .)
    XOR_ASSIGN      reduce using rule 26 (constant -> DOT_REAL .)
    OR_ASSIGN       reduce using rule 26 (constant -> DOT_REAL .)
    EQUALS          reduce using rule 26 (constant -> DOT_REAL .)
    RPAREN          reduce using rule 26 (constant -> DOT_REAL .)
    COMMA           reduce using rule 26 (constant -> DOT_REAL .)


state 19

    (13) declaration -> type . enum_list SEMI_COLON
    (81) normal_function -> type . VARIABLE LPAREN parameters RPAREN LBRACE statements RBRACE
    (82) normal_function -> type . VARIABLE LPAREN parameters RPAREN LBRACE RBRACE
    (79) main_function -> type . MAIN LPAREN parameters RPAREN LBRACE statements RBRACE
    (80) main_function -> type . MAIN LPAREN parameters RPAREN LBRACE RBRACE
    (14) enum_list -> . VARIABLE COMMA enum_list
    (15) enum_list -> . VARIABLE EQUALS exp COMMA enum_list
    (16) enum_list -> . VARIABLE
    (17) enum_list -> . VARIABLE EQUALS exp

    VARIABLE        shift and go to state 46
    MAIN            shift and go to state 47

    enum_list                      shift and go to state 45

state 20

    (60) unary_expression -> unary_operator . VARIABLE

    VARIABLE        shift and go to state 48


state 21

    (7) statement -> function .

    RBRACE          reduce using rule 7 (statement -> function .)
    LPAREN          reduce using rule 7 (statement -> function .)
    VARIABLE        reduce using rule 7 (statement -> function .)
    FOR             reduce using rule 7 (statement -> function .)
    WHILE           reduce using rule 7 (statement -> function .)
    DO              reduce using rule 7 (statement -> function .)
    BREAK           reduce using rule 7 (statement -> function .)
    CONTINUE        reduce using rule 7 (statement -> function .)
    RETURN          reduce using rule 7 (statement -> function .)
    INT             reduce using rule 7 (statement -> function .)
    FLOAT           reduce using rule 7 (statement -> function .)
    CHAR            reduce using rule 7 (statement -> function .)
    DOUBLE          reduce using rule 7 (statement -> function .)
    VOID            reduce using rule 7 (statement -> function .)
    SHORT           reduce using rule 7 (statement -> function .)
    LONG            reduce using rule 7 (statement -> function .)
    HEX_INT         reduce using rule 7 (statement -> function .)
    DOT_REAL        reduce using rule 7 (statement -> function .)
    EXP_REAL        reduce using rule 7 (statement -> function .)
    DEC_INT         reduce using rule 7 (statement -> function .)
    CHARACTER       reduce using rule 7 (statement -> function .)
    INCREMENT       reduce using rule 7 (statement -> function .)
    DECREMENT       reduce using rule 7 (statement -> function .)
    $end            reduce using rule 7 (statement -> function .)


state 22

    (63) iterative_statement -> FOR . LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (64) iterative_statement -> FOR . LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE
    (65) iterative_statement -> FOR . LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (66) iterative_statement -> FOR . LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE

    LPAREN          shift and go to state 49


state 23

    (55) exp -> LPAREN . exp RPAREN
    (30) exp -> . exp ADD exp
    (31) exp -> . exp MINUS exp
    (32) exp -> . exp MULT exp
    (33) exp -> . exp DIV exp
    (34) exp -> . exp MOD exp
    (35) exp -> . exp L_OP exp
    (36) exp -> . exp G_OP exp
    (37) exp -> . exp LE_OP exp
    (38) exp -> . exp GE_OP exp
    (39) exp -> . exp NOTEQUALS exp
    (40) exp -> . exp EQUALS_OP exp
    (41) exp -> . exp OR_OP exp
    (42) exp -> . exp AND_OP exp
    (43) exp -> . exp MUL_ASSIGN exp
    (44) exp -> . exp DIV_ASSIGN exp
    (45) exp -> . exp MOD_ASSIGN exp
    (46) exp -> . exp ADD_ASSIGN exp
    (47) exp -> . exp SUB_ASSIGN exp
    (48) exp -> . exp LEFT_ASSIGN exp
    (49) exp -> . exp RIGHT_ASSIGN exp
    (50) exp -> . exp AND_ASSIGN exp
    (51) exp -> . exp XOR_ASSIGN exp
    (52) exp -> . exp OR_ASSIGN exp
    (53) exp -> . exp EQUALS exp
    (54) exp -> . unary_expression
    (55) exp -> . LPAREN exp RPAREN
    (56) exp -> . constant
    (57) exp -> . VARIABLE
    (58) exp -> . function_call
    (59) unary_expression -> . VARIABLE unary_operator
    (60) unary_expression -> . unary_operator VARIABLE
    (25) constant -> . HEX_INT
    (26) constant -> . DOT_REAL
    (27) constant -> . EXP_REAL
    (28) constant -> . DEC_INT
    (29) constant -> . CHARACTER
    (86) function_call -> . VARIABLE LPAREN arguments RPAREN
    (87) function_call -> . VARIABLE LPAREN RPAREN
    (61) unary_operator -> . INCREMENT
    (62) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 23
    VARIABLE        shift and go to state 25
    HEX_INT         shift and go to state 31
    DOT_REAL        shift and go to state 18
    EXP_REAL        shift and go to state 14
    DEC_INT         shift and go to state 15
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 13
    DECREMENT       shift and go to state 27

    constant                       shift and go to state 11
    unary_expression               shift and go to state 26
    function_call                  shift and go to state 7
    exp                            shift and go to state 50
    unary_operator                 shift and go to state 20

state 24

    (4) statement -> declaration .

    RBRACE          reduce using rule 4 (statement -> declaration .)
    LPAREN          reduce using rule 4 (statement -> declaration .)
    VARIABLE        reduce using rule 4 (statement -> declaration .)
    FOR             reduce using rule 4 (statement -> declaration .)
    WHILE           reduce using rule 4 (statement -> declaration .)
    DO              reduce using rule 4 (statement -> declaration .)
    BREAK           reduce using rule 4 (statement -> declaration .)
    CONTINUE        reduce using rule 4 (statement -> declaration .)
    RETURN          reduce using rule 4 (statement -> declaration .)
    INT             reduce using rule 4 (statement -> declaration .)
    FLOAT           reduce using rule 4 (statement -> declaration .)
    CHAR            reduce using rule 4 (statement -> declaration .)
    DOUBLE          reduce using rule 4 (statement -> declaration .)
    VOID            reduce using rule 4 (statement -> declaration .)
    SHORT           reduce using rule 4 (statement -> declaration .)
    LONG            reduce using rule 4 (statement -> declaration .)
    HEX_INT         reduce using rule 4 (statement -> declaration .)
    DOT_REAL        reduce using rule 4 (statement -> declaration .)
    EXP_REAL        reduce using rule 4 (statement -> declaration .)
    DEC_INT         reduce using rule 4 (statement -> declaration .)
    CHARACTER       reduce using rule 4 (statement -> declaration .)
    INCREMENT       reduce using rule 4 (statement -> declaration .)
    DECREMENT       reduce using rule 4 (statement -> declaration .)
    $end            reduce using rule 4 (statement -> declaration .)


state 25

    (57) exp -> VARIABLE .
    (59) unary_expression -> VARIABLE . unary_operator
    (86) function_call -> VARIABLE . LPAREN arguments RPAREN
    (87) function_call -> VARIABLE . LPAREN RPAREN
    (61) unary_operator -> . INCREMENT
    (62) unary_operator -> . DECREMENT

    SEMI_COLON      reduce using rule 57 (exp -> VARIABLE .)
    ADD             reduce using rule 57 (exp -> VARIABLE .)
    MINUS           reduce using rule 57 (exp -> VARIABLE .)
    MULT            reduce using rule 57 (exp -> VARIABLE .)
    DIV             reduce using rule 57 (exp -> VARIABLE .)
    MOD             reduce using rule 57 (exp -> VARIABLE .)
    L_OP            reduce using rule 57 (exp -> VARIABLE .)
    G_OP            reduce using rule 57 (exp -> VARIABLE .)
    LE_OP           reduce using rule 57 (exp -> VARIABLE .)
    GE_OP           reduce using rule 57 (exp -> VARIABLE .)
    NOTEQUALS       reduce using rule 57 (exp -> VARIABLE .)
    EQUALS_OP       reduce using rule 57 (exp -> VARIABLE .)
    OR_OP           reduce using rule 57 (exp -> VARIABLE .)
    AND_OP          reduce using rule 57 (exp -> VARIABLE .)
    MUL_ASSIGN      reduce using rule 57 (exp -> VARIABLE .)
    DIV_ASSIGN      reduce using rule 57 (exp -> VARIABLE .)
    MOD_ASSIGN      reduce using rule 57 (exp -> VARIABLE .)
    ADD_ASSIGN      reduce using rule 57 (exp -> VARIABLE .)
    SUB_ASSIGN      reduce using rule 57 (exp -> VARIABLE .)
    LEFT_ASSIGN     reduce using rule 57 (exp -> VARIABLE .)
    RIGHT_ASSIGN    reduce using rule 57 (exp -> VARIABLE .)
    AND_ASSIGN      reduce using rule 57 (exp -> VARIABLE .)
    XOR_ASSIGN      reduce using rule 57 (exp -> VARIABLE .)
    OR_ASSIGN       reduce using rule 57 (exp -> VARIABLE .)
    EQUALS          reduce using rule 57 (exp -> VARIABLE .)
    RPAREN          reduce using rule 57 (exp -> VARIABLE .)
    COMMA           reduce using rule 57 (exp -> VARIABLE .)
    LPAREN          shift and go to state 51
    INCREMENT       shift and go to state 13
    DECREMENT       shift and go to state 27

    unary_operator                 shift and go to state 52

state 26

    (54) exp -> unary_expression .

    SEMI_COLON      reduce using rule 54 (exp -> unary_expression .)
    ADD             reduce using rule 54 (exp -> unary_expression .)
    MINUS           reduce using rule 54 (exp -> unary_expression .)
    MULT            reduce using rule 54 (exp -> unary_expression .)
    DIV             reduce using rule 54 (exp -> unary_expression .)
    MOD             reduce using rule 54 (exp -> unary_expression .)
    L_OP            reduce using rule 54 (exp -> unary_expression .)
    G_OP            reduce using rule 54 (exp -> unary_expression .)
    LE_OP           reduce using rule 54 (exp -> unary_expression .)
    GE_OP           reduce using rule 54 (exp -> unary_expression .)
    NOTEQUALS       reduce using rule 54 (exp -> unary_expression .)
    EQUALS_OP       reduce using rule 54 (exp -> unary_expression .)
    OR_OP           reduce using rule 54 (exp -> unary_expression .)
    AND_OP          reduce using rule 54 (exp -> unary_expression .)
    MUL_ASSIGN      reduce using rule 54 (exp -> unary_expression .)
    DIV_ASSIGN      reduce using rule 54 (exp -> unary_expression .)
    MOD_ASSIGN      reduce using rule 54 (exp -> unary_expression .)
    ADD_ASSIGN      reduce using rule 54 (exp -> unary_expression .)
    SUB_ASSIGN      reduce using rule 54 (exp -> unary_expression .)
    LEFT_ASSIGN     reduce using rule 54 (exp -> unary_expression .)
    RIGHT_ASSIGN    reduce using rule 54 (exp -> unary_expression .)
    AND_ASSIGN      reduce using rule 54 (exp -> unary_expression .)
    XOR_ASSIGN      reduce using rule 54 (exp -> unary_expression .)
    OR_ASSIGN       reduce using rule 54 (exp -> unary_expression .)
    EQUALS          reduce using rule 54 (exp -> unary_expression .)
    RPAREN          reduce using rule 54 (exp -> unary_expression .)
    COMMA           reduce using rule 54 (exp -> unary_expression .)


state 27

    (62) unary_operator -> DECREMENT .

    VARIABLE        reduce using rule 62 (unary_operator -> DECREMENT .)
    SEMI_COLON      reduce using rule 62 (unary_operator -> DECREMENT .)
    ADD             reduce using rule 62 (unary_operator -> DECREMENT .)
    MINUS           reduce using rule 62 (unary_operator -> DECREMENT .)
    MULT            reduce using rule 62 (unary_operator -> DECREMENT .)
    DIV             reduce using rule 62 (unary_operator -> DECREMENT .)
    MOD             reduce using rule 62 (unary_operator -> DECREMENT .)
    L_OP            reduce using rule 62 (unary_operator -> DECREMENT .)
    G_OP            reduce using rule 62 (unary_operator -> DECREMENT .)
    LE_OP           reduce using rule 62 (unary_operator -> DECREMENT .)
    GE_OP           reduce using rule 62 (unary_operator -> DECREMENT .)
    NOTEQUALS       reduce using rule 62 (unary_operator -> DECREMENT .)
    EQUALS_OP       reduce using rule 62 (unary_operator -> DECREMENT .)
    OR_OP           reduce using rule 62 (unary_operator -> DECREMENT .)
    AND_OP          reduce using rule 62 (unary_operator -> DECREMENT .)
    MUL_ASSIGN      reduce using rule 62 (unary_operator -> DECREMENT .)
    DIV_ASSIGN      reduce using rule 62 (unary_operator -> DECREMENT .)
    MOD_ASSIGN      reduce using rule 62 (unary_operator -> DECREMENT .)
    ADD_ASSIGN      reduce using rule 62 (unary_operator -> DECREMENT .)
    SUB_ASSIGN      reduce using rule 62 (unary_operator -> DECREMENT .)
    LEFT_ASSIGN     reduce using rule 62 (unary_operator -> DECREMENT .)
    RIGHT_ASSIGN    reduce using rule 62 (unary_operator -> DECREMENT .)
    AND_ASSIGN      reduce using rule 62 (unary_operator -> DECREMENT .)
    XOR_ASSIGN      reduce using rule 62 (unary_operator -> DECREMENT .)
    OR_ASSIGN       reduce using rule 62 (unary_operator -> DECREMENT .)
    EQUALS          reduce using rule 62 (unary_operator -> DECREMENT .)
    RPAREN          reduce using rule 62 (unary_operator -> DECREMENT .)
    COMMA           reduce using rule 62 (unary_operator -> DECREMENT .)


state 28

    (8) statement -> constant_statement .

    RBRACE          reduce using rule 8 (statement -> constant_statement .)
    LPAREN          reduce using rule 8 (statement -> constant_statement .)
    VARIABLE        reduce using rule 8 (statement -> constant_statement .)
    FOR             reduce using rule 8 (statement -> constant_statement .)
    WHILE           reduce using rule 8 (statement -> constant_statement .)
    DO              reduce using rule 8 (statement -> constant_statement .)
    BREAK           reduce using rule 8 (statement -> constant_statement .)
    CONTINUE        reduce using rule 8 (statement -> constant_statement .)
    RETURN          reduce using rule 8 (statement -> constant_statement .)
    INT             reduce using rule 8 (statement -> constant_statement .)
    FLOAT           reduce using rule 8 (statement -> constant_statement .)
    CHAR            reduce using rule 8 (statement -> constant_statement .)
    DOUBLE          reduce using rule 8 (statement -> constant_statement .)
    VOID            reduce using rule 8 (statement -> constant_statement .)
    SHORT           reduce using rule 8 (statement -> constant_statement .)
    LONG            reduce using rule 8 (statement -> constant_statement .)
    HEX_INT         reduce using rule 8 (statement -> constant_statement .)
    DOT_REAL        reduce using rule 8 (statement -> constant_statement .)
    EXP_REAL        reduce using rule 8 (statement -> constant_statement .)
    DEC_INT         reduce using rule 8 (statement -> constant_statement .)
    CHARACTER       reduce using rule 8 (statement -> constant_statement .)
    INCREMENT       reduce using rule 8 (statement -> constant_statement .)
    DECREMENT       reduce using rule 8 (statement -> constant_statement .)
    $end            reduce using rule 8 (statement -> constant_statement .)


state 29

    (18) type -> INT .

    VARIABLE        reduce using rule 18 (type -> INT .)
    MAIN            reduce using rule 18 (type -> INT .)


state 30

    (21) type -> DOUBLE .

    VARIABLE        reduce using rule 21 (type -> DOUBLE .)
    MAIN            reduce using rule 21 (type -> DOUBLE .)


state 31

    (25) constant -> HEX_INT .

    SEMI_COLON      reduce using rule 25 (constant -> HEX_INT .)
    ADD             reduce using rule 25 (constant -> HEX_INT .)
    MINUS           reduce using rule 25 (constant -> HEX_INT .)
    MULT            reduce using rule 25 (constant -> HEX_INT .)
    DIV             reduce using rule 25 (constant -> HEX_INT .)
    MOD             reduce using rule 25 (constant -> HEX_INT .)
    L_OP            reduce using rule 25 (constant -> HEX_INT .)
    G_OP            reduce using rule 25 (constant -> HEX_INT .)
    LE_OP           reduce using rule 25 (constant -> HEX_INT .)
    GE_OP           reduce using rule 25 (constant -> HEX_INT .)
    NOTEQUALS       reduce using rule 25 (constant -> HEX_INT .)
    EQUALS_OP       reduce using rule 25 (constant -> HEX_INT .)
    OR_OP           reduce using rule 25 (constant -> HEX_INT .)
    AND_OP          reduce using rule 25 (constant -> HEX_INT .)
    MUL_ASSIGN      reduce using rule 25 (constant -> HEX_INT .)
    DIV_ASSIGN      reduce using rule 25 (constant -> HEX_INT .)
    MOD_ASSIGN      reduce using rule 25 (constant -> HEX_INT .)
    ADD_ASSIGN      reduce using rule 25 (constant -> HEX_INT .)
    SUB_ASSIGN      reduce using rule 25 (constant -> HEX_INT .)
    LEFT_ASSIGN     reduce using rule 25 (constant -> HEX_INT .)
    RIGHT_ASSIGN    reduce using rule 25 (constant -> HEX_INT .)
    AND_ASSIGN      reduce using rule 25 (constant -> HEX_INT .)
    XOR_ASSIGN      reduce using rule 25 (constant -> HEX_INT .)
    OR_ASSIGN       reduce using rule 25 (constant -> HEX_INT .)
    EQUALS          reduce using rule 25 (constant -> HEX_INT .)
    RPAREN          reduce using rule 25 (constant -> HEX_INT .)
    COMMA           reduce using rule 25 (constant -> HEX_INT .)


state 32

    (77) function -> normal_function .

    RBRACE          reduce using rule 77 (function -> normal_function .)
    LPAREN          reduce using rule 77 (function -> normal_function .)
    VARIABLE        reduce using rule 77 (function -> normal_function .)
    FOR             reduce using rule 77 (function -> normal_function .)
    WHILE           reduce using rule 77 (function -> normal_function .)
    DO              reduce using rule 77 (function -> normal_function .)
    BREAK           reduce using rule 77 (function -> normal_function .)
    CONTINUE        reduce using rule 77 (function -> normal_function .)
    RETURN          reduce using rule 77 (function -> normal_function .)
    INT             reduce using rule 77 (function -> normal_function .)
    FLOAT           reduce using rule 77 (function -> normal_function .)
    CHAR            reduce using rule 77 (function -> normal_function .)
    DOUBLE          reduce using rule 77 (function -> normal_function .)
    VOID            reduce using rule 77 (function -> normal_function .)
    SHORT           reduce using rule 77 (function -> normal_function .)
    LONG            reduce using rule 77 (function -> normal_function .)
    HEX_INT         reduce using rule 77 (function -> normal_function .)
    DOT_REAL        reduce using rule 77 (function -> normal_function .)
    EXP_REAL        reduce using rule 77 (function -> normal_function .)
    DEC_INT         reduce using rule 77 (function -> normal_function .)
    CHARACTER       reduce using rule 77 (function -> normal_function .)
    INCREMENT       reduce using rule 77 (function -> normal_function .)
    DECREMENT       reduce using rule 77 (function -> normal_function .)
    $end            reduce using rule 77 (function -> normal_function .)


state 33

    (19) type -> FLOAT .

    VARIABLE        reduce using rule 19 (type -> FLOAT .)
    MAIN            reduce using rule 19 (type -> FLOAT .)


state 34

    (9) constant_statement -> BREAK . SEMI_COLON

    SEMI_COLON      shift and go to state 53


state 35

    (10) constant_statement -> CONTINUE . SEMI_COLON

    SEMI_COLON      shift and go to state 54


state 36

    (5) statement -> exp . SEMI_COLON
    (30) exp -> exp . ADD exp
    (31) exp -> exp . MINUS exp
    (32) exp -> exp . MULT exp
    (33) exp -> exp . DIV exp
    (34) exp -> exp . MOD exp
    (35) exp -> exp . L_OP exp
    (36) exp -> exp . G_OP exp
    (37) exp -> exp . LE_OP exp
    (38) exp -> exp . GE_OP exp
    (39) exp -> exp . NOTEQUALS exp
    (40) exp -> exp . EQUALS_OP exp
    (41) exp -> exp . OR_OP exp
    (42) exp -> exp . AND_OP exp
    (43) exp -> exp . MUL_ASSIGN exp
    (44) exp -> exp . DIV_ASSIGN exp
    (45) exp -> exp . MOD_ASSIGN exp
    (46) exp -> exp . ADD_ASSIGN exp
    (47) exp -> exp . SUB_ASSIGN exp
    (48) exp -> exp . LEFT_ASSIGN exp
    (49) exp -> exp . RIGHT_ASSIGN exp
    (50) exp -> exp . AND_ASSIGN exp
    (51) exp -> exp . XOR_ASSIGN exp
    (52) exp -> exp . OR_ASSIGN exp
    (53) exp -> exp . EQUALS exp

    SEMI_COLON      shift and go to state 58
    ADD             shift and go to state 70
    MINUS           shift and go to state 60
    MULT            shift and go to state 61
    DIV             shift and go to state 59
    MOD             shift and go to state 79
    L_OP            shift and go to state 76
    G_OP            shift and go to state 64
    LE_OP           shift and go to state 62
    GE_OP           shift and go to state 71
    NOTEQUALS       shift and go to state 55
    EQUALS_OP       shift and go to state 56
    OR_OP           shift and go to state 65
    AND_OP          shift and go to state 69
    MUL_ASSIGN      shift and go to state 77
    DIV_ASSIGN      shift and go to state 57
    MOD_ASSIGN      shift and go to state 73
    ADD_ASSIGN      shift and go to state 67
    SUB_ASSIGN      shift and go to state 72
    LEFT_ASSIGN     shift and go to state 78
    RIGHT_ASSIGN    shift and go to state 63
    AND_ASSIGN      shift and go to state 66
    XOR_ASSIGN      shift and go to state 74
    OR_ASSIGN       shift and go to state 75
    EQUALS          shift and go to state 68


state 37

    (24) type -> LONG .

    VARIABLE        reduce using rule 24 (type -> LONG .)
    MAIN            reduce using rule 24 (type -> LONG .)


state 38

    (11) constant_statement -> RETURN SEMI_COLON .

    RBRACE          reduce using rule 11 (constant_statement -> RETURN SEMI_COLON .)
    LPAREN          reduce using rule 11 (constant_statement -> RETURN SEMI_COLON .)
    VARIABLE        reduce using rule 11 (constant_statement -> RETURN SEMI_COLON .)
    FOR             reduce using rule 11 (constant_statement -> RETURN SEMI_COLON .)
    WHILE           reduce using rule 11 (constant_statement -> RETURN SEMI_COLON .)
    DO              reduce using rule 11 (constant_statement -> RETURN SEMI_COLON .)
    BREAK           reduce using rule 11 (constant_statement -> RETURN SEMI_COLON .)
    CONTINUE        reduce using rule 11 (constant_statement -> RETURN SEMI_COLON .)
    RETURN          reduce using rule 11 (constant_statement -> RETURN SEMI_COLON .)
    INT             reduce using rule 11 (constant_statement -> RETURN SEMI_COLON .)
    FLOAT           reduce using rule 11 (constant_statement -> RETURN SEMI_COLON .)
    CHAR            reduce using rule 11 (constant_statement -> RETURN SEMI_COLON .)
    DOUBLE          reduce using rule 11 (constant_statement -> RETURN SEMI_COLON .)
    VOID            reduce using rule 11 (constant_statement -> RETURN SEMI_COLON .)
    SHORT           reduce using rule 11 (constant_statement -> RETURN SEMI_COLON .)
    LONG            reduce using rule 11 (constant_statement -> RETURN SEMI_COLON .)
    HEX_INT         reduce using rule 11 (constant_statement -> RETURN SEMI_COLON .)
    DOT_REAL        reduce using rule 11 (constant_statement -> RETURN SEMI_COLON .)
    EXP_REAL        reduce using rule 11 (constant_statement -> RETURN SEMI_COLON .)
    DEC_INT         reduce using rule 11 (constant_statement -> RETURN SEMI_COLON .)
    CHARACTER       reduce using rule 11 (constant_statement -> RETURN SEMI_COLON .)
    INCREMENT       reduce using rule 11 (constant_statement -> RETURN SEMI_COLON .)
    DECREMENT       reduce using rule 11 (constant_statement -> RETURN SEMI_COLON .)
    $end            reduce using rule 11 (constant_statement -> RETURN SEMI_COLON .)


state 39

    (12) constant_statement -> RETURN exp . SEMI_COLON
    (30) exp -> exp . ADD exp
    (31) exp -> exp . MINUS exp
    (32) exp -> exp . MULT exp
    (33) exp -> exp . DIV exp
    (34) exp -> exp . MOD exp
    (35) exp -> exp . L_OP exp
    (36) exp -> exp . G_OP exp
    (37) exp -> exp . LE_OP exp
    (38) exp -> exp . GE_OP exp
    (39) exp -> exp . NOTEQUALS exp
    (40) exp -> exp . EQUALS_OP exp
    (41) exp -> exp . OR_OP exp
    (42) exp -> exp . AND_OP exp
    (43) exp -> exp . MUL_ASSIGN exp
    (44) exp -> exp . DIV_ASSIGN exp
    (45) exp -> exp . MOD_ASSIGN exp
    (46) exp -> exp . ADD_ASSIGN exp
    (47) exp -> exp . SUB_ASSIGN exp
    (48) exp -> exp . LEFT_ASSIGN exp
    (49) exp -> exp . RIGHT_ASSIGN exp
    (50) exp -> exp . AND_ASSIGN exp
    (51) exp -> exp . XOR_ASSIGN exp
    (52) exp -> exp . OR_ASSIGN exp
    (53) exp -> exp . EQUALS exp

    SEMI_COLON      shift and go to state 80
    ADD             shift and go to state 70
    MINUS           shift and go to state 60
    MULT            shift and go to state 61
    DIV             shift and go to state 59
    MOD             shift and go to state 79
    L_OP            shift and go to state 76
    G_OP            shift and go to state 64
    LE_OP           shift and go to state 62
    GE_OP           shift and go to state 71
    NOTEQUALS       shift and go to state 55
    EQUALS_OP       shift and go to state 56
    OR_OP           shift and go to state 65
    AND_OP          shift and go to state 69
    MUL_ASSIGN      shift and go to state 77
    DIV_ASSIGN      shift and go to state 57
    MOD_ASSIGN      shift and go to state 73
    ADD_ASSIGN      shift and go to state 67
    SUB_ASSIGN      shift and go to state 72
    LEFT_ASSIGN     shift and go to state 78
    RIGHT_ASSIGN    shift and go to state 63
    AND_ASSIGN      shift and go to state 66
    XOR_ASSIGN      shift and go to state 74
    OR_ASSIGN       shift and go to state 75
    EQUALS          shift and go to state 68


state 40

    (2) statements -> statements statement .

    RBRACE          reduce using rule 2 (statements -> statements statement .)
    LPAREN          reduce using rule 2 (statements -> statements statement .)
    VARIABLE        reduce using rule 2 (statements -> statements statement .)
    FOR             reduce using rule 2 (statements -> statements statement .)
    WHILE           reduce using rule 2 (statements -> statements statement .)
    DO              reduce using rule 2 (statements -> statements statement .)
    BREAK           reduce using rule 2 (statements -> statements statement .)
    CONTINUE        reduce using rule 2 (statements -> statements statement .)
    RETURN          reduce using rule 2 (statements -> statements statement .)
    INT             reduce using rule 2 (statements -> statements statement .)
    FLOAT           reduce using rule 2 (statements -> statements statement .)
    CHAR            reduce using rule 2 (statements -> statements statement .)
    DOUBLE          reduce using rule 2 (statements -> statements statement .)
    VOID            reduce using rule 2 (statements -> statements statement .)
    SHORT           reduce using rule 2 (statements -> statements statement .)
    LONG            reduce using rule 2 (statements -> statements statement .)
    HEX_INT         reduce using rule 2 (statements -> statements statement .)
    DOT_REAL        reduce using rule 2 (statements -> statements statement .)
    EXP_REAL        reduce using rule 2 (statements -> statements statement .)
    DEC_INT         reduce using rule 2 (statements -> statements statement .)
    CHARACTER       reduce using rule 2 (statements -> statements statement .)
    INCREMENT       reduce using rule 2 (statements -> statements statement .)
    DECREMENT       reduce using rule 2 (statements -> statements statement .)
    $end            reduce using rule 2 (statements -> statements statement .)


state 41

    (73) iterative_statement -> DO SEMI_COLON . WHILE LPAREN exp RPAREN SEMI_COLON

    WHILE           shift and go to state 81


state 42

    (71) iterative_statement -> DO statement . WHILE LPAREN exp RPAREN SEMI_COLON

    WHILE           shift and go to state 82


state 43

    (72) iterative_statement -> DO LBRACE . statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (74) iterative_statement -> DO LBRACE . RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (13) declaration -> . type enum_list SEMI_COLON
    (30) exp -> . exp ADD exp
    (31) exp -> . exp MINUS exp
    (32) exp -> . exp MULT exp
    (33) exp -> . exp DIV exp
    (34) exp -> . exp MOD exp
    (35) exp -> . exp L_OP exp
    (36) exp -> . exp G_OP exp
    (37) exp -> . exp LE_OP exp
    (38) exp -> . exp GE_OP exp
    (39) exp -> . exp NOTEQUALS exp
    (40) exp -> . exp EQUALS_OP exp
    (41) exp -> . exp OR_OP exp
    (42) exp -> . exp AND_OP exp
    (43) exp -> . exp MUL_ASSIGN exp
    (44) exp -> . exp DIV_ASSIGN exp
    (45) exp -> . exp MOD_ASSIGN exp
    (46) exp -> . exp ADD_ASSIGN exp
    (47) exp -> . exp SUB_ASSIGN exp
    (48) exp -> . exp LEFT_ASSIGN exp
    (49) exp -> . exp RIGHT_ASSIGN exp
    (50) exp -> . exp AND_ASSIGN exp
    (51) exp -> . exp XOR_ASSIGN exp
    (52) exp -> . exp OR_ASSIGN exp
    (53) exp -> . exp EQUALS exp
    (54) exp -> . unary_expression
    (55) exp -> . LPAREN exp RPAREN
    (56) exp -> . constant
    (57) exp -> . VARIABLE
    (58) exp -> . function_call
    (63) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (64) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE
    (65) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (66) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE
    (67) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (68) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (69) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE statements RBRACE
    (70) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (71) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (72) iterative_statement -> . DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (73) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (74) iterative_statement -> . DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (77) function -> . normal_function
    (78) function -> . main_function
    (9) constant_statement -> . BREAK SEMI_COLON
    (10) constant_statement -> . CONTINUE SEMI_COLON
    (11) constant_statement -> . RETURN SEMI_COLON
    (12) constant_statement -> . RETURN exp SEMI_COLON
    (18) type -> . INT
    (19) type -> . FLOAT
    (20) type -> . CHAR
    (21) type -> . DOUBLE
    (22) type -> . VOID
    (23) type -> . SHORT
    (24) type -> . LONG
    (59) unary_expression -> . VARIABLE unary_operator
    (60) unary_expression -> . unary_operator VARIABLE
    (25) constant -> . HEX_INT
    (26) constant -> . DOT_REAL
    (27) constant -> . EXP_REAL
    (28) constant -> . DEC_INT
    (29) constant -> . CHARACTER
    (86) function_call -> . VARIABLE LPAREN arguments RPAREN
    (87) function_call -> . VARIABLE LPAREN RPAREN
    (81) normal_function -> . type VARIABLE LPAREN parameters RPAREN LBRACE statements RBRACE
    (82) normal_function -> . type VARIABLE LPAREN parameters RPAREN LBRACE RBRACE
    (79) main_function -> . type MAIN LPAREN parameters RPAREN LBRACE statements RBRACE
    (80) main_function -> . type MAIN LPAREN parameters RPAREN LBRACE RBRACE
    (61) unary_operator -> . INCREMENT
    (62) unary_operator -> . DECREMENT

    RBRACE          shift and go to state 84
    LPAREN          shift and go to state 23
    VARIABLE        shift and go to state 25
    FOR             shift and go to state 22
    WHILE           shift and go to state 9
    DO              shift and go to state 4
    BREAK           shift and go to state 34
    CONTINUE        shift and go to state 35
    RETURN          shift and go to state 1
    INT             shift and go to state 29
    FLOAT           shift and go to state 33
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 5
    SHORT           shift and go to state 10
    LONG            shift and go to state 37
    HEX_INT         shift and go to state 31
    DOT_REAL        shift and go to state 18
    EXP_REAL        shift and go to state 14
    DEC_INT         shift and go to state 15
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 13
    DECREMENT       shift and go to state 27

    function                       shift and go to state 21
    main_function                  shift and go to state 2
    statements                     shift and go to state 83
    exp                            shift and go to state 36
    unary_expression               shift and go to state 26
    type                           shift and go to state 19
    normal_function                shift and go to state 32
    function_call                  shift and go to state 7
    statement                      shift and go to state 17
    declaration                    shift and go to state 24
    constant_statement             shift and go to state 28
    constant                       shift and go to state 11
    iterative_statement            shift and go to state 12
    unary_operator                 shift and go to state 20

state 44

    (67) iterative_statement -> WHILE LPAREN . exp RPAREN statement
    (68) iterative_statement -> WHILE LPAREN . exp RPAREN SEMI_COLON
    (69) iterative_statement -> WHILE LPAREN . exp RPAREN LBRACE statements RBRACE
    (70) iterative_statement -> WHILE LPAREN . exp RPAREN LBRACE RBRACE
    (30) exp -> . exp ADD exp
    (31) exp -> . exp MINUS exp
    (32) exp -> . exp MULT exp
    (33) exp -> . exp DIV exp
    (34) exp -> . exp MOD exp
    (35) exp -> . exp L_OP exp
    (36) exp -> . exp G_OP exp
    (37) exp -> . exp LE_OP exp
    (38) exp -> . exp GE_OP exp
    (39) exp -> . exp NOTEQUALS exp
    (40) exp -> . exp EQUALS_OP exp
    (41) exp -> . exp OR_OP exp
    (42) exp -> . exp AND_OP exp
    (43) exp -> . exp MUL_ASSIGN exp
    (44) exp -> . exp DIV_ASSIGN exp
    (45) exp -> . exp MOD_ASSIGN exp
    (46) exp -> . exp ADD_ASSIGN exp
    (47) exp -> . exp SUB_ASSIGN exp
    (48) exp -> . exp LEFT_ASSIGN exp
    (49) exp -> . exp RIGHT_ASSIGN exp
    (50) exp -> . exp AND_ASSIGN exp
    (51) exp -> . exp XOR_ASSIGN exp
    (52) exp -> . exp OR_ASSIGN exp
    (53) exp -> . exp EQUALS exp
    (54) exp -> . unary_expression
    (55) exp -> . LPAREN exp RPAREN
    (56) exp -> . constant
    (57) exp -> . VARIABLE
    (58) exp -> . function_call
    (59) unary_expression -> . VARIABLE unary_operator
    (60) unary_expression -> . unary_operator VARIABLE
    (25) constant -> . HEX_INT
    (26) constant -> . DOT_REAL
    (27) constant -> . EXP_REAL
    (28) constant -> . DEC_INT
    (29) constant -> . CHARACTER
    (86) function_call -> . VARIABLE LPAREN arguments RPAREN
    (87) function_call -> . VARIABLE LPAREN RPAREN
    (61) unary_operator -> . INCREMENT
    (62) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 23
    VARIABLE        shift and go to state 25
    HEX_INT         shift and go to state 31
    DOT_REAL        shift and go to state 18
    EXP_REAL        shift and go to state 14
    DEC_INT         shift and go to state 15
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 13
    DECREMENT       shift and go to state 27

    constant                       shift and go to state 11
    exp                            shift and go to state 85
    unary_expression               shift and go to state 26
    function_call                  shift and go to state 7
    unary_operator                 shift and go to state 20

state 45

    (13) declaration -> type enum_list . SEMI_COLON

    SEMI_COLON      shift and go to state 86


state 46

    (81) normal_function -> type VARIABLE . LPAREN parameters RPAREN LBRACE statements RBRACE
    (82) normal_function -> type VARIABLE . LPAREN parameters RPAREN LBRACE RBRACE
    (14) enum_list -> VARIABLE . COMMA enum_list
    (15) enum_list -> VARIABLE . EQUALS exp COMMA enum_list
    (16) enum_list -> VARIABLE .
    (17) enum_list -> VARIABLE . EQUALS exp

    LPAREN          shift and go to state 89
    COMMA           shift and go to state 88
    EQUALS          shift and go to state 87
    SEMI_COLON      reduce using rule 16 (enum_list -> VARIABLE .)


state 47

    (79) main_function -> type MAIN . LPAREN parameters RPAREN LBRACE statements RBRACE
    (80) main_function -> type MAIN . LPAREN parameters RPAREN LBRACE RBRACE

    LPAREN          shift and go to state 90


state 48

    (60) unary_expression -> unary_operator VARIABLE .

    ADD             reduce using rule 60 (unary_expression -> unary_operator VARIABLE .)
    MINUS           reduce using rule 60 (unary_expression -> unary_operator VARIABLE .)
    MULT            reduce using rule 60 (unary_expression -> unary_operator VARIABLE .)
    DIV             reduce using rule 60 (unary_expression -> unary_operator VARIABLE .)
    MOD             reduce using rule 60 (unary_expression -> unary_operator VARIABLE .)
    L_OP            reduce using rule 60 (unary_expression -> unary_operator VARIABLE .)
    G_OP            reduce using rule 60 (unary_expression -> unary_operator VARIABLE .)
    LE_OP           reduce using rule 60 (unary_expression -> unary_operator VARIABLE .)
    GE_OP           reduce using rule 60 (unary_expression -> unary_operator VARIABLE .)
    NOTEQUALS       reduce using rule 60 (unary_expression -> unary_operator VARIABLE .)
    EQUALS_OP       reduce using rule 60 (unary_expression -> unary_operator VARIABLE .)
    OR_OP           reduce using rule 60 (unary_expression -> unary_operator VARIABLE .)
    AND_OP          reduce using rule 60 (unary_expression -> unary_operator VARIABLE .)
    MUL_ASSIGN      reduce using rule 60 (unary_expression -> unary_operator VARIABLE .)
    DIV_ASSIGN      reduce using rule 60 (unary_expression -> unary_operator VARIABLE .)
    MOD_ASSIGN      reduce using rule 60 (unary_expression -> unary_operator VARIABLE .)
    ADD_ASSIGN      reduce using rule 60 (unary_expression -> unary_operator VARIABLE .)
    SUB_ASSIGN      reduce using rule 60 (unary_expression -> unary_operator VARIABLE .)
    LEFT_ASSIGN     reduce using rule 60 (unary_expression -> unary_operator VARIABLE .)
    RIGHT_ASSIGN    reduce using rule 60 (unary_expression -> unary_operator VARIABLE .)
    AND_ASSIGN      reduce using rule 60 (unary_expression -> unary_operator VARIABLE .)
    XOR_ASSIGN      reduce using rule 60 (unary_expression -> unary_operator VARIABLE .)
    OR_ASSIGN       reduce using rule 60 (unary_expression -> unary_operator VARIABLE .)
    EQUALS          reduce using rule 60 (unary_expression -> unary_operator VARIABLE .)
    SEMI_COLON      reduce using rule 60 (unary_expression -> unary_operator VARIABLE .)
    RPAREN          reduce using rule 60 (unary_expression -> unary_operator VARIABLE .)
    COMMA           reduce using rule 60 (unary_expression -> unary_operator VARIABLE .)


state 49

    (63) iterative_statement -> FOR LPAREN . iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (64) iterative_statement -> FOR LPAREN . iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE
    (65) iterative_statement -> FOR LPAREN . iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (66) iterative_statement -> FOR LPAREN . iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE
    (75) iterative_exp -> . exp COMMA iterative_exp
    (76) iterative_exp -> . exp
    (30) exp -> . exp ADD exp
    (31) exp -> . exp MINUS exp
    (32) exp -> . exp MULT exp
    (33) exp -> . exp DIV exp
    (34) exp -> . exp MOD exp
    (35) exp -> . exp L_OP exp
    (36) exp -> . exp G_OP exp
    (37) exp -> . exp LE_OP exp
    (38) exp -> . exp GE_OP exp
    (39) exp -> . exp NOTEQUALS exp
    (40) exp -> . exp EQUALS_OP exp
    (41) exp -> . exp OR_OP exp
    (42) exp -> . exp AND_OP exp
    (43) exp -> . exp MUL_ASSIGN exp
    (44) exp -> . exp DIV_ASSIGN exp
    (45) exp -> . exp MOD_ASSIGN exp
    (46) exp -> . exp ADD_ASSIGN exp
    (47) exp -> . exp SUB_ASSIGN exp
    (48) exp -> . exp LEFT_ASSIGN exp
    (49) exp -> . exp RIGHT_ASSIGN exp
    (50) exp -> . exp AND_ASSIGN exp
    (51) exp -> . exp XOR_ASSIGN exp
    (52) exp -> . exp OR_ASSIGN exp
    (53) exp -> . exp EQUALS exp
    (54) exp -> . unary_expression
    (55) exp -> . LPAREN exp RPAREN
    (56) exp -> . constant
    (57) exp -> . VARIABLE
    (58) exp -> . function_call
    (59) unary_expression -> . VARIABLE unary_operator
    (60) unary_expression -> . unary_operator VARIABLE
    (25) constant -> . HEX_INT
    (26) constant -> . DOT_REAL
    (27) constant -> . EXP_REAL
    (28) constant -> . DEC_INT
    (29) constant -> . CHARACTER
    (86) function_call -> . VARIABLE LPAREN arguments RPAREN
    (87) function_call -> . VARIABLE LPAREN RPAREN
    (61) unary_operator -> . INCREMENT
    (62) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 23
    VARIABLE        shift and go to state 25
    HEX_INT         shift and go to state 31
    DOT_REAL        shift and go to state 18
    EXP_REAL        shift and go to state 14
    DEC_INT         shift and go to state 15
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 13
    DECREMENT       shift and go to state 27

    constant                       shift and go to state 11
    unary_expression               shift and go to state 26
    iterative_exp                  shift and go to state 91
    function_call                  shift and go to state 7
    exp                            shift and go to state 92
    unary_operator                 shift and go to state 20

state 50

    (55) exp -> LPAREN exp . RPAREN
    (30) exp -> exp . ADD exp
    (31) exp -> exp . MINUS exp
    (32) exp -> exp . MULT exp
    (33) exp -> exp . DIV exp
    (34) exp -> exp . MOD exp
    (35) exp -> exp . L_OP exp
    (36) exp -> exp . G_OP exp
    (37) exp -> exp . LE_OP exp
    (38) exp -> exp . GE_OP exp
    (39) exp -> exp . NOTEQUALS exp
    (40) exp -> exp . EQUALS_OP exp
    (41) exp -> exp . OR_OP exp
    (42) exp -> exp . AND_OP exp
    (43) exp -> exp . MUL_ASSIGN exp
    (44) exp -> exp . DIV_ASSIGN exp
    (45) exp -> exp . MOD_ASSIGN exp
    (46) exp -> exp . ADD_ASSIGN exp
    (47) exp -> exp . SUB_ASSIGN exp
    (48) exp -> exp . LEFT_ASSIGN exp
    (49) exp -> exp . RIGHT_ASSIGN exp
    (50) exp -> exp . AND_ASSIGN exp
    (51) exp -> exp . XOR_ASSIGN exp
    (52) exp -> exp . OR_ASSIGN exp
    (53) exp -> exp . EQUALS exp

    RPAREN          shift and go to state 93
    ADD             shift and go to state 70
    MINUS           shift and go to state 60
    MULT            shift and go to state 61
    DIV             shift and go to state 59
    MOD             shift and go to state 79
    L_OP            shift and go to state 76
    G_OP            shift and go to state 64
    LE_OP           shift and go to state 62
    GE_OP           shift and go to state 71
    NOTEQUALS       shift and go to state 55
    EQUALS_OP       shift and go to state 56
    OR_OP           shift and go to state 65
    AND_OP          shift and go to state 69
    MUL_ASSIGN      shift and go to state 77
    DIV_ASSIGN      shift and go to state 57
    MOD_ASSIGN      shift and go to state 73
    ADD_ASSIGN      shift and go to state 67
    SUB_ASSIGN      shift and go to state 72
    LEFT_ASSIGN     shift and go to state 78
    RIGHT_ASSIGN    shift and go to state 63
    AND_ASSIGN      shift and go to state 66
    XOR_ASSIGN      shift and go to state 74
    OR_ASSIGN       shift and go to state 75
    EQUALS          shift and go to state 68


state 51

    (86) function_call -> VARIABLE LPAREN . arguments RPAREN
    (87) function_call -> VARIABLE LPAREN . RPAREN
    (88) arguments -> . arguments COMMA VARIABLE
    (89) arguments -> . arguments COMMA constant
    (90) arguments -> . VARIABLE
    (91) arguments -> . constant
    (25) constant -> . HEX_INT
    (26) constant -> . DOT_REAL
    (27) constant -> . EXP_REAL
    (28) constant -> . DEC_INT
    (29) constant -> . CHARACTER

    RPAREN          shift and go to state 97
    VARIABLE        shift and go to state 96
    HEX_INT         shift and go to state 31
    DOT_REAL        shift and go to state 18
    EXP_REAL        shift and go to state 14
    DEC_INT         shift and go to state 15
    CHARACTER       shift and go to state 6

    constant                       shift and go to state 94
    arguments                      shift and go to state 95

state 52

    (59) unary_expression -> VARIABLE unary_operator .

    ADD             reduce using rule 59 (unary_expression -> VARIABLE unary_operator .)
    MINUS           reduce using rule 59 (unary_expression -> VARIABLE unary_operator .)
    MULT            reduce using rule 59 (unary_expression -> VARIABLE unary_operator .)
    DIV             reduce using rule 59 (unary_expression -> VARIABLE unary_operator .)
    MOD             reduce using rule 59 (unary_expression -> VARIABLE unary_operator .)
    L_OP            reduce using rule 59 (unary_expression -> VARIABLE unary_operator .)
    G_OP            reduce using rule 59 (unary_expression -> VARIABLE unary_operator .)
    LE_OP           reduce using rule 59 (unary_expression -> VARIABLE unary_operator .)
    GE_OP           reduce using rule 59 (unary_expression -> VARIABLE unary_operator .)
    NOTEQUALS       reduce using rule 59 (unary_expression -> VARIABLE unary_operator .)
    EQUALS_OP       reduce using rule 59 (unary_expression -> VARIABLE unary_operator .)
    OR_OP           reduce using rule 59 (unary_expression -> VARIABLE unary_operator .)
    AND_OP          reduce using rule 59 (unary_expression -> VARIABLE unary_operator .)
    MUL_ASSIGN      reduce using rule 59 (unary_expression -> VARIABLE unary_operator .)
    DIV_ASSIGN      reduce using rule 59 (unary_expression -> VARIABLE unary_operator .)
    MOD_ASSIGN      reduce using rule 59 (unary_expression -> VARIABLE unary_operator .)
    ADD_ASSIGN      reduce using rule 59 (unary_expression -> VARIABLE unary_operator .)
    SUB_ASSIGN      reduce using rule 59 (unary_expression -> VARIABLE unary_operator .)
    LEFT_ASSIGN     reduce using rule 59 (unary_expression -> VARIABLE unary_operator .)
    RIGHT_ASSIGN    reduce using rule 59 (unary_expression -> VARIABLE unary_operator .)
    AND_ASSIGN      reduce using rule 59 (unary_expression -> VARIABLE unary_operator .)
    XOR_ASSIGN      reduce using rule 59 (unary_expression -> VARIABLE unary_operator .)
    OR_ASSIGN       reduce using rule 59 (unary_expression -> VARIABLE unary_operator .)
    EQUALS          reduce using rule 59 (unary_expression -> VARIABLE unary_operator .)
    SEMI_COLON      reduce using rule 59 (unary_expression -> VARIABLE unary_operator .)
    RPAREN          reduce using rule 59 (unary_expression -> VARIABLE unary_operator .)
    COMMA           reduce using rule 59 (unary_expression -> VARIABLE unary_operator .)


state 53

    (9) constant_statement -> BREAK SEMI_COLON .

    RBRACE          reduce using rule 9 (constant_statement -> BREAK SEMI_COLON .)
    LPAREN          reduce using rule 9 (constant_statement -> BREAK SEMI_COLON .)
    VARIABLE        reduce using rule 9 (constant_statement -> BREAK SEMI_COLON .)
    FOR             reduce using rule 9 (constant_statement -> BREAK SEMI_COLON .)
    WHILE           reduce using rule 9 (constant_statement -> BREAK SEMI_COLON .)
    DO              reduce using rule 9 (constant_statement -> BREAK SEMI_COLON .)
    BREAK           reduce using rule 9 (constant_statement -> BREAK SEMI_COLON .)
    CONTINUE        reduce using rule 9 (constant_statement -> BREAK SEMI_COLON .)
    RETURN          reduce using rule 9 (constant_statement -> BREAK SEMI_COLON .)
    INT             reduce using rule 9 (constant_statement -> BREAK SEMI_COLON .)
    FLOAT           reduce using rule 9 (constant_statement -> BREAK SEMI_COLON .)
    CHAR            reduce using rule 9 (constant_statement -> BREAK SEMI_COLON .)
    DOUBLE          reduce using rule 9 (constant_statement -> BREAK SEMI_COLON .)
    VOID            reduce using rule 9 (constant_statement -> BREAK SEMI_COLON .)
    SHORT           reduce using rule 9 (constant_statement -> BREAK SEMI_COLON .)
    LONG            reduce using rule 9 (constant_statement -> BREAK SEMI_COLON .)
    HEX_INT         reduce using rule 9 (constant_statement -> BREAK SEMI_COLON .)
    DOT_REAL        reduce using rule 9 (constant_statement -> BREAK SEMI_COLON .)
    EXP_REAL        reduce using rule 9 (constant_statement -> BREAK SEMI_COLON .)
    DEC_INT         reduce using rule 9 (constant_statement -> BREAK SEMI_COLON .)
    CHARACTER       reduce using rule 9 (constant_statement -> BREAK SEMI_COLON .)
    INCREMENT       reduce using rule 9 (constant_statement -> BREAK SEMI_COLON .)
    DECREMENT       reduce using rule 9 (constant_statement -> BREAK SEMI_COLON .)
    $end            reduce using rule 9 (constant_statement -> BREAK SEMI_COLON .)


state 54

    (10) constant_statement -> CONTINUE SEMI_COLON .

    RBRACE          reduce using rule 10 (constant_statement -> CONTINUE SEMI_COLON .)
    LPAREN          reduce using rule 10 (constant_statement -> CONTINUE SEMI_COLON .)
    VARIABLE        reduce using rule 10 (constant_statement -> CONTINUE SEMI_COLON .)
    FOR             reduce using rule 10 (constant_statement -> CONTINUE SEMI_COLON .)
    WHILE           reduce using rule 10 (constant_statement -> CONTINUE SEMI_COLON .)
    DO              reduce using rule 10 (constant_statement -> CONTINUE SEMI_COLON .)
    BREAK           reduce using rule 10 (constant_statement -> CONTINUE SEMI_COLON .)
    CONTINUE        reduce using rule 10 (constant_statement -> CONTINUE SEMI_COLON .)
    RETURN          reduce using rule 10 (constant_statement -> CONTINUE SEMI_COLON .)
    INT             reduce using rule 10 (constant_statement -> CONTINUE SEMI_COLON .)
    FLOAT           reduce using rule 10 (constant_statement -> CONTINUE SEMI_COLON .)
    CHAR            reduce using rule 10 (constant_statement -> CONTINUE SEMI_COLON .)
    DOUBLE          reduce using rule 10 (constant_statement -> CONTINUE SEMI_COLON .)
    VOID            reduce using rule 10 (constant_statement -> CONTINUE SEMI_COLON .)
    SHORT           reduce using rule 10 (constant_statement -> CONTINUE SEMI_COLON .)
    LONG            reduce using rule 10 (constant_statement -> CONTINUE SEMI_COLON .)
    HEX_INT         reduce using rule 10 (constant_statement -> CONTINUE SEMI_COLON .)
    DOT_REAL        reduce using rule 10 (constant_statement -> CONTINUE SEMI_COLON .)
    EXP_REAL        reduce using rule 10 (constant_statement -> CONTINUE SEMI_COLON .)
    DEC_INT         reduce using rule 10 (constant_statement -> CONTINUE SEMI_COLON .)
    CHARACTER       reduce using rule 10 (constant_statement -> CONTINUE SEMI_COLON .)
    INCREMENT       reduce using rule 10 (constant_statement -> CONTINUE SEMI_COLON .)
    DECREMENT       reduce using rule 10 (constant_statement -> CONTINUE SEMI_COLON .)
    $end            reduce using rule 10 (constant_statement -> CONTINUE SEMI_COLON .)


state 55

    (39) exp -> exp NOTEQUALS . exp
    (30) exp -> . exp ADD exp
    (31) exp -> . exp MINUS exp
    (32) exp -> . exp MULT exp
    (33) exp -> . exp DIV exp
    (34) exp -> . exp MOD exp
    (35) exp -> . exp L_OP exp
    (36) exp -> . exp G_OP exp
    (37) exp -> . exp LE_OP exp
    (38) exp -> . exp GE_OP exp
    (39) exp -> . exp NOTEQUALS exp
    (40) exp -> . exp EQUALS_OP exp
    (41) exp -> . exp OR_OP exp
    (42) exp -> . exp AND_OP exp
    (43) exp -> . exp MUL_ASSIGN exp
    (44) exp -> . exp DIV_ASSIGN exp
    (45) exp -> . exp MOD_ASSIGN exp
    (46) exp -> . exp ADD_ASSIGN exp
    (47) exp -> . exp SUB_ASSIGN exp
    (48) exp -> . exp LEFT_ASSIGN exp
    (49) exp -> . exp RIGHT_ASSIGN exp
    (50) exp -> . exp AND_ASSIGN exp
    (51) exp -> . exp XOR_ASSIGN exp
    (52) exp -> . exp OR_ASSIGN exp
    (53) exp -> . exp EQUALS exp
    (54) exp -> . unary_expression
    (55) exp -> . LPAREN exp RPAREN
    (56) exp -> . constant
    (57) exp -> . VARIABLE
    (58) exp -> . function_call
    (59) unary_expression -> . VARIABLE unary_operator
    (60) unary_expression -> . unary_operator VARIABLE
    (25) constant -> . HEX_INT
    (26) constant -> . DOT_REAL
    (27) constant -> . EXP_REAL
    (28) constant -> . DEC_INT
    (29) constant -> . CHARACTER
    (86) function_call -> . VARIABLE LPAREN arguments RPAREN
    (87) function_call -> . VARIABLE LPAREN RPAREN
    (61) unary_operator -> . INCREMENT
    (62) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 23
    VARIABLE        shift and go to state 25
    HEX_INT         shift and go to state 31
    DOT_REAL        shift and go to state 18
    EXP_REAL        shift and go to state 14
    DEC_INT         shift and go to state 15
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 13
    DECREMENT       shift and go to state 27

    constant                       shift and go to state 11
    unary_expression               shift and go to state 26
    function_call                  shift and go to state 7
    exp                            shift and go to state 98
    unary_operator                 shift and go to state 20

state 56

    (40) exp -> exp EQUALS_OP . exp
    (30) exp -> . exp ADD exp
    (31) exp -> . exp MINUS exp
    (32) exp -> . exp MULT exp
    (33) exp -> . exp DIV exp
    (34) exp -> . exp MOD exp
    (35) exp -> . exp L_OP exp
    (36) exp -> . exp G_OP exp
    (37) exp -> . exp LE_OP exp
    (38) exp -> . exp GE_OP exp
    (39) exp -> . exp NOTEQUALS exp
    (40) exp -> . exp EQUALS_OP exp
    (41) exp -> . exp OR_OP exp
    (42) exp -> . exp AND_OP exp
    (43) exp -> . exp MUL_ASSIGN exp
    (44) exp -> . exp DIV_ASSIGN exp
    (45) exp -> . exp MOD_ASSIGN exp
    (46) exp -> . exp ADD_ASSIGN exp
    (47) exp -> . exp SUB_ASSIGN exp
    (48) exp -> . exp LEFT_ASSIGN exp
    (49) exp -> . exp RIGHT_ASSIGN exp
    (50) exp -> . exp AND_ASSIGN exp
    (51) exp -> . exp XOR_ASSIGN exp
    (52) exp -> . exp OR_ASSIGN exp
    (53) exp -> . exp EQUALS exp
    (54) exp -> . unary_expression
    (55) exp -> . LPAREN exp RPAREN
    (56) exp -> . constant
    (57) exp -> . VARIABLE
    (58) exp -> . function_call
    (59) unary_expression -> . VARIABLE unary_operator
    (60) unary_expression -> . unary_operator VARIABLE
    (25) constant -> . HEX_INT
    (26) constant -> . DOT_REAL
    (27) constant -> . EXP_REAL
    (28) constant -> . DEC_INT
    (29) constant -> . CHARACTER
    (86) function_call -> . VARIABLE LPAREN arguments RPAREN
    (87) function_call -> . VARIABLE LPAREN RPAREN
    (61) unary_operator -> . INCREMENT
    (62) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 23
    VARIABLE        shift and go to state 25
    HEX_INT         shift and go to state 31
    DOT_REAL        shift and go to state 18
    EXP_REAL        shift and go to state 14
    DEC_INT         shift and go to state 15
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 13
    DECREMENT       shift and go to state 27

    constant                       shift and go to state 11
    unary_expression               shift and go to state 26
    function_call                  shift and go to state 7
    exp                            shift and go to state 99
    unary_operator                 shift and go to state 20

state 57

    (44) exp -> exp DIV_ASSIGN . exp
    (30) exp -> . exp ADD exp
    (31) exp -> . exp MINUS exp
    (32) exp -> . exp MULT exp
    (33) exp -> . exp DIV exp
    (34) exp -> . exp MOD exp
    (35) exp -> . exp L_OP exp
    (36) exp -> . exp G_OP exp
    (37) exp -> . exp LE_OP exp
    (38) exp -> . exp GE_OP exp
    (39) exp -> . exp NOTEQUALS exp
    (40) exp -> . exp EQUALS_OP exp
    (41) exp -> . exp OR_OP exp
    (42) exp -> . exp AND_OP exp
    (43) exp -> . exp MUL_ASSIGN exp
    (44) exp -> . exp DIV_ASSIGN exp
    (45) exp -> . exp MOD_ASSIGN exp
    (46) exp -> . exp ADD_ASSIGN exp
    (47) exp -> . exp SUB_ASSIGN exp
    (48) exp -> . exp LEFT_ASSIGN exp
    (49) exp -> . exp RIGHT_ASSIGN exp
    (50) exp -> . exp AND_ASSIGN exp
    (51) exp -> . exp XOR_ASSIGN exp
    (52) exp -> . exp OR_ASSIGN exp
    (53) exp -> . exp EQUALS exp
    (54) exp -> . unary_expression
    (55) exp -> . LPAREN exp RPAREN
    (56) exp -> . constant
    (57) exp -> . VARIABLE
    (58) exp -> . function_call
    (59) unary_expression -> . VARIABLE unary_operator
    (60) unary_expression -> . unary_operator VARIABLE
    (25) constant -> . HEX_INT
    (26) constant -> . DOT_REAL
    (27) constant -> . EXP_REAL
    (28) constant -> . DEC_INT
    (29) constant -> . CHARACTER
    (86) function_call -> . VARIABLE LPAREN arguments RPAREN
    (87) function_call -> . VARIABLE LPAREN RPAREN
    (61) unary_operator -> . INCREMENT
    (62) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 23
    VARIABLE        shift and go to state 25
    HEX_INT         shift and go to state 31
    DOT_REAL        shift and go to state 18
    EXP_REAL        shift and go to state 14
    DEC_INT         shift and go to state 15
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 13
    DECREMENT       shift and go to state 27

    constant                       shift and go to state 11
    unary_expression               shift and go to state 26
    function_call                  shift and go to state 7
    exp                            shift and go to state 100
    unary_operator                 shift and go to state 20

state 58

    (5) statement -> exp SEMI_COLON .

    RBRACE          reduce using rule 5 (statement -> exp SEMI_COLON .)
    LPAREN          reduce using rule 5 (statement -> exp SEMI_COLON .)
    VARIABLE        reduce using rule 5 (statement -> exp SEMI_COLON .)
    FOR             reduce using rule 5 (statement -> exp SEMI_COLON .)
    WHILE           reduce using rule 5 (statement -> exp SEMI_COLON .)
    DO              reduce using rule 5 (statement -> exp SEMI_COLON .)
    BREAK           reduce using rule 5 (statement -> exp SEMI_COLON .)
    CONTINUE        reduce using rule 5 (statement -> exp SEMI_COLON .)
    RETURN          reduce using rule 5 (statement -> exp SEMI_COLON .)
    INT             reduce using rule 5 (statement -> exp SEMI_COLON .)
    FLOAT           reduce using rule 5 (statement -> exp SEMI_COLON .)
    CHAR            reduce using rule 5 (statement -> exp SEMI_COLON .)
    DOUBLE          reduce using rule 5 (statement -> exp SEMI_COLON .)
    VOID            reduce using rule 5 (statement -> exp SEMI_COLON .)
    SHORT           reduce using rule 5 (statement -> exp SEMI_COLON .)
    LONG            reduce using rule 5 (statement -> exp SEMI_COLON .)
    HEX_INT         reduce using rule 5 (statement -> exp SEMI_COLON .)
    DOT_REAL        reduce using rule 5 (statement -> exp SEMI_COLON .)
    EXP_REAL        reduce using rule 5 (statement -> exp SEMI_COLON .)
    DEC_INT         reduce using rule 5 (statement -> exp SEMI_COLON .)
    CHARACTER       reduce using rule 5 (statement -> exp SEMI_COLON .)
    INCREMENT       reduce using rule 5 (statement -> exp SEMI_COLON .)
    DECREMENT       reduce using rule 5 (statement -> exp SEMI_COLON .)
    $end            reduce using rule 5 (statement -> exp SEMI_COLON .)


state 59

    (33) exp -> exp DIV . exp
    (30) exp -> . exp ADD exp
    (31) exp -> . exp MINUS exp
    (32) exp -> . exp MULT exp
    (33) exp -> . exp DIV exp
    (34) exp -> . exp MOD exp
    (35) exp -> . exp L_OP exp
    (36) exp -> . exp G_OP exp
    (37) exp -> . exp LE_OP exp
    (38) exp -> . exp GE_OP exp
    (39) exp -> . exp NOTEQUALS exp
    (40) exp -> . exp EQUALS_OP exp
    (41) exp -> . exp OR_OP exp
    (42) exp -> . exp AND_OP exp
    (43) exp -> . exp MUL_ASSIGN exp
    (44) exp -> . exp DIV_ASSIGN exp
    (45) exp -> . exp MOD_ASSIGN exp
    (46) exp -> . exp ADD_ASSIGN exp
    (47) exp -> . exp SUB_ASSIGN exp
    (48) exp -> . exp LEFT_ASSIGN exp
    (49) exp -> . exp RIGHT_ASSIGN exp
    (50) exp -> . exp AND_ASSIGN exp
    (51) exp -> . exp XOR_ASSIGN exp
    (52) exp -> . exp OR_ASSIGN exp
    (53) exp -> . exp EQUALS exp
    (54) exp -> . unary_expression
    (55) exp -> . LPAREN exp RPAREN
    (56) exp -> . constant
    (57) exp -> . VARIABLE
    (58) exp -> . function_call
    (59) unary_expression -> . VARIABLE unary_operator
    (60) unary_expression -> . unary_operator VARIABLE
    (25) constant -> . HEX_INT
    (26) constant -> . DOT_REAL
    (27) constant -> . EXP_REAL
    (28) constant -> . DEC_INT
    (29) constant -> . CHARACTER
    (86) function_call -> . VARIABLE LPAREN arguments RPAREN
    (87) function_call -> . VARIABLE LPAREN RPAREN
    (61) unary_operator -> . INCREMENT
    (62) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 23
    VARIABLE        shift and go to state 25
    HEX_INT         shift and go to state 31
    DOT_REAL        shift and go to state 18
    EXP_REAL        shift and go to state 14
    DEC_INT         shift and go to state 15
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 13
    DECREMENT       shift and go to state 27

    constant                       shift and go to state 11
    unary_expression               shift and go to state 26
    function_call                  shift and go to state 7
    exp                            shift and go to state 101
    unary_operator                 shift and go to state 20

state 60

    (31) exp -> exp MINUS . exp
    (30) exp -> . exp ADD exp
    (31) exp -> . exp MINUS exp
    (32) exp -> . exp MULT exp
    (33) exp -> . exp DIV exp
    (34) exp -> . exp MOD exp
    (35) exp -> . exp L_OP exp
    (36) exp -> . exp G_OP exp
    (37) exp -> . exp LE_OP exp
    (38) exp -> . exp GE_OP exp
    (39) exp -> . exp NOTEQUALS exp
    (40) exp -> . exp EQUALS_OP exp
    (41) exp -> . exp OR_OP exp
    (42) exp -> . exp AND_OP exp
    (43) exp -> . exp MUL_ASSIGN exp
    (44) exp -> . exp DIV_ASSIGN exp
    (45) exp -> . exp MOD_ASSIGN exp
    (46) exp -> . exp ADD_ASSIGN exp
    (47) exp -> . exp SUB_ASSIGN exp
    (48) exp -> . exp LEFT_ASSIGN exp
    (49) exp -> . exp RIGHT_ASSIGN exp
    (50) exp -> . exp AND_ASSIGN exp
    (51) exp -> . exp XOR_ASSIGN exp
    (52) exp -> . exp OR_ASSIGN exp
    (53) exp -> . exp EQUALS exp
    (54) exp -> . unary_expression
    (55) exp -> . LPAREN exp RPAREN
    (56) exp -> . constant
    (57) exp -> . VARIABLE
    (58) exp -> . function_call
    (59) unary_expression -> . VARIABLE unary_operator
    (60) unary_expression -> . unary_operator VARIABLE
    (25) constant -> . HEX_INT
    (26) constant -> . DOT_REAL
    (27) constant -> . EXP_REAL
    (28) constant -> . DEC_INT
    (29) constant -> . CHARACTER
    (86) function_call -> . VARIABLE LPAREN arguments RPAREN
    (87) function_call -> . VARIABLE LPAREN RPAREN
    (61) unary_operator -> . INCREMENT
    (62) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 23
    VARIABLE        shift and go to state 25
    HEX_INT         shift and go to state 31
    DOT_REAL        shift and go to state 18
    EXP_REAL        shift and go to state 14
    DEC_INT         shift and go to state 15
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 13
    DECREMENT       shift and go to state 27

    constant                       shift and go to state 11
    unary_expression               shift and go to state 26
    function_call                  shift and go to state 7
    exp                            shift and go to state 102
    unary_operator                 shift and go to state 20

state 61

    (32) exp -> exp MULT . exp
    (30) exp -> . exp ADD exp
    (31) exp -> . exp MINUS exp
    (32) exp -> . exp MULT exp
    (33) exp -> . exp DIV exp
    (34) exp -> . exp MOD exp
    (35) exp -> . exp L_OP exp
    (36) exp -> . exp G_OP exp
    (37) exp -> . exp LE_OP exp
    (38) exp -> . exp GE_OP exp
    (39) exp -> . exp NOTEQUALS exp
    (40) exp -> . exp EQUALS_OP exp
    (41) exp -> . exp OR_OP exp
    (42) exp -> . exp AND_OP exp
    (43) exp -> . exp MUL_ASSIGN exp
    (44) exp -> . exp DIV_ASSIGN exp
    (45) exp -> . exp MOD_ASSIGN exp
    (46) exp -> . exp ADD_ASSIGN exp
    (47) exp -> . exp SUB_ASSIGN exp
    (48) exp -> . exp LEFT_ASSIGN exp
    (49) exp -> . exp RIGHT_ASSIGN exp
    (50) exp -> . exp AND_ASSIGN exp
    (51) exp -> . exp XOR_ASSIGN exp
    (52) exp -> . exp OR_ASSIGN exp
    (53) exp -> . exp EQUALS exp
    (54) exp -> . unary_expression
    (55) exp -> . LPAREN exp RPAREN
    (56) exp -> . constant
    (57) exp -> . VARIABLE
    (58) exp -> . function_call
    (59) unary_expression -> . VARIABLE unary_operator
    (60) unary_expression -> . unary_operator VARIABLE
    (25) constant -> . HEX_INT
    (26) constant -> . DOT_REAL
    (27) constant -> . EXP_REAL
    (28) constant -> . DEC_INT
    (29) constant -> . CHARACTER
    (86) function_call -> . VARIABLE LPAREN arguments RPAREN
    (87) function_call -> . VARIABLE LPAREN RPAREN
    (61) unary_operator -> . INCREMENT
    (62) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 23
    VARIABLE        shift and go to state 25
    HEX_INT         shift and go to state 31
    DOT_REAL        shift and go to state 18
    EXP_REAL        shift and go to state 14
    DEC_INT         shift and go to state 15
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 13
    DECREMENT       shift and go to state 27

    constant                       shift and go to state 11
    unary_expression               shift and go to state 26
    function_call                  shift and go to state 7
    exp                            shift and go to state 103
    unary_operator                 shift and go to state 20

state 62

    (37) exp -> exp LE_OP . exp
    (30) exp -> . exp ADD exp
    (31) exp -> . exp MINUS exp
    (32) exp -> . exp MULT exp
    (33) exp -> . exp DIV exp
    (34) exp -> . exp MOD exp
    (35) exp -> . exp L_OP exp
    (36) exp -> . exp G_OP exp
    (37) exp -> . exp LE_OP exp
    (38) exp -> . exp GE_OP exp
    (39) exp -> . exp NOTEQUALS exp
    (40) exp -> . exp EQUALS_OP exp
    (41) exp -> . exp OR_OP exp
    (42) exp -> . exp AND_OP exp
    (43) exp -> . exp MUL_ASSIGN exp
    (44) exp -> . exp DIV_ASSIGN exp
    (45) exp -> . exp MOD_ASSIGN exp
    (46) exp -> . exp ADD_ASSIGN exp
    (47) exp -> . exp SUB_ASSIGN exp
    (48) exp -> . exp LEFT_ASSIGN exp
    (49) exp -> . exp RIGHT_ASSIGN exp
    (50) exp -> . exp AND_ASSIGN exp
    (51) exp -> . exp XOR_ASSIGN exp
    (52) exp -> . exp OR_ASSIGN exp
    (53) exp -> . exp EQUALS exp
    (54) exp -> . unary_expression
    (55) exp -> . LPAREN exp RPAREN
    (56) exp -> . constant
    (57) exp -> . VARIABLE
    (58) exp -> . function_call
    (59) unary_expression -> . VARIABLE unary_operator
    (60) unary_expression -> . unary_operator VARIABLE
    (25) constant -> . HEX_INT
    (26) constant -> . DOT_REAL
    (27) constant -> . EXP_REAL
    (28) constant -> . DEC_INT
    (29) constant -> . CHARACTER
    (86) function_call -> . VARIABLE LPAREN arguments RPAREN
    (87) function_call -> . VARIABLE LPAREN RPAREN
    (61) unary_operator -> . INCREMENT
    (62) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 23
    VARIABLE        shift and go to state 25
    HEX_INT         shift and go to state 31
    DOT_REAL        shift and go to state 18
    EXP_REAL        shift and go to state 14
    DEC_INT         shift and go to state 15
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 13
    DECREMENT       shift and go to state 27

    constant                       shift and go to state 11
    unary_expression               shift and go to state 26
    function_call                  shift and go to state 7
    exp                            shift and go to state 104
    unary_operator                 shift and go to state 20

state 63

    (49) exp -> exp RIGHT_ASSIGN . exp
    (30) exp -> . exp ADD exp
    (31) exp -> . exp MINUS exp
    (32) exp -> . exp MULT exp
    (33) exp -> . exp DIV exp
    (34) exp -> . exp MOD exp
    (35) exp -> . exp L_OP exp
    (36) exp -> . exp G_OP exp
    (37) exp -> . exp LE_OP exp
    (38) exp -> . exp GE_OP exp
    (39) exp -> . exp NOTEQUALS exp
    (40) exp -> . exp EQUALS_OP exp
    (41) exp -> . exp OR_OP exp
    (42) exp -> . exp AND_OP exp
    (43) exp -> . exp MUL_ASSIGN exp
    (44) exp -> . exp DIV_ASSIGN exp
    (45) exp -> . exp MOD_ASSIGN exp
    (46) exp -> . exp ADD_ASSIGN exp
    (47) exp -> . exp SUB_ASSIGN exp
    (48) exp -> . exp LEFT_ASSIGN exp
    (49) exp -> . exp RIGHT_ASSIGN exp
    (50) exp -> . exp AND_ASSIGN exp
    (51) exp -> . exp XOR_ASSIGN exp
    (52) exp -> . exp OR_ASSIGN exp
    (53) exp -> . exp EQUALS exp
    (54) exp -> . unary_expression
    (55) exp -> . LPAREN exp RPAREN
    (56) exp -> . constant
    (57) exp -> . VARIABLE
    (58) exp -> . function_call
    (59) unary_expression -> . VARIABLE unary_operator
    (60) unary_expression -> . unary_operator VARIABLE
    (25) constant -> . HEX_INT
    (26) constant -> . DOT_REAL
    (27) constant -> . EXP_REAL
    (28) constant -> . DEC_INT
    (29) constant -> . CHARACTER
    (86) function_call -> . VARIABLE LPAREN arguments RPAREN
    (87) function_call -> . VARIABLE LPAREN RPAREN
    (61) unary_operator -> . INCREMENT
    (62) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 23
    VARIABLE        shift and go to state 25
    HEX_INT         shift and go to state 31
    DOT_REAL        shift and go to state 18
    EXP_REAL        shift and go to state 14
    DEC_INT         shift and go to state 15
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 13
    DECREMENT       shift and go to state 27

    constant                       shift and go to state 11
    unary_expression               shift and go to state 26
    function_call                  shift and go to state 7
    exp                            shift and go to state 105
    unary_operator                 shift and go to state 20

state 64

    (36) exp -> exp G_OP . exp
    (30) exp -> . exp ADD exp
    (31) exp -> . exp MINUS exp
    (32) exp -> . exp MULT exp
    (33) exp -> . exp DIV exp
    (34) exp -> . exp MOD exp
    (35) exp -> . exp L_OP exp
    (36) exp -> . exp G_OP exp
    (37) exp -> . exp LE_OP exp
    (38) exp -> . exp GE_OP exp
    (39) exp -> . exp NOTEQUALS exp
    (40) exp -> . exp EQUALS_OP exp
    (41) exp -> . exp OR_OP exp
    (42) exp -> . exp AND_OP exp
    (43) exp -> . exp MUL_ASSIGN exp
    (44) exp -> . exp DIV_ASSIGN exp
    (45) exp -> . exp MOD_ASSIGN exp
    (46) exp -> . exp ADD_ASSIGN exp
    (47) exp -> . exp SUB_ASSIGN exp
    (48) exp -> . exp LEFT_ASSIGN exp
    (49) exp -> . exp RIGHT_ASSIGN exp
    (50) exp -> . exp AND_ASSIGN exp
    (51) exp -> . exp XOR_ASSIGN exp
    (52) exp -> . exp OR_ASSIGN exp
    (53) exp -> . exp EQUALS exp
    (54) exp -> . unary_expression
    (55) exp -> . LPAREN exp RPAREN
    (56) exp -> . constant
    (57) exp -> . VARIABLE
    (58) exp -> . function_call
    (59) unary_expression -> . VARIABLE unary_operator
    (60) unary_expression -> . unary_operator VARIABLE
    (25) constant -> . HEX_INT
    (26) constant -> . DOT_REAL
    (27) constant -> . EXP_REAL
    (28) constant -> . DEC_INT
    (29) constant -> . CHARACTER
    (86) function_call -> . VARIABLE LPAREN arguments RPAREN
    (87) function_call -> . VARIABLE LPAREN RPAREN
    (61) unary_operator -> . INCREMENT
    (62) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 23
    VARIABLE        shift and go to state 25
    HEX_INT         shift and go to state 31
    DOT_REAL        shift and go to state 18
    EXP_REAL        shift and go to state 14
    DEC_INT         shift and go to state 15
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 13
    DECREMENT       shift and go to state 27

    constant                       shift and go to state 11
    unary_expression               shift and go to state 26
    function_call                  shift and go to state 7
    exp                            shift and go to state 106
    unary_operator                 shift and go to state 20

state 65

    (41) exp -> exp OR_OP . exp
    (30) exp -> . exp ADD exp
    (31) exp -> . exp MINUS exp
    (32) exp -> . exp MULT exp
    (33) exp -> . exp DIV exp
    (34) exp -> . exp MOD exp
    (35) exp -> . exp L_OP exp
    (36) exp -> . exp G_OP exp
    (37) exp -> . exp LE_OP exp
    (38) exp -> . exp GE_OP exp
    (39) exp -> . exp NOTEQUALS exp
    (40) exp -> . exp EQUALS_OP exp
    (41) exp -> . exp OR_OP exp
    (42) exp -> . exp AND_OP exp
    (43) exp -> . exp MUL_ASSIGN exp
    (44) exp -> . exp DIV_ASSIGN exp
    (45) exp -> . exp MOD_ASSIGN exp
    (46) exp -> . exp ADD_ASSIGN exp
    (47) exp -> . exp SUB_ASSIGN exp
    (48) exp -> . exp LEFT_ASSIGN exp
    (49) exp -> . exp RIGHT_ASSIGN exp
    (50) exp -> . exp AND_ASSIGN exp
    (51) exp -> . exp XOR_ASSIGN exp
    (52) exp -> . exp OR_ASSIGN exp
    (53) exp -> . exp EQUALS exp
    (54) exp -> . unary_expression
    (55) exp -> . LPAREN exp RPAREN
    (56) exp -> . constant
    (57) exp -> . VARIABLE
    (58) exp -> . function_call
    (59) unary_expression -> . VARIABLE unary_operator
    (60) unary_expression -> . unary_operator VARIABLE
    (25) constant -> . HEX_INT
    (26) constant -> . DOT_REAL
    (27) constant -> . EXP_REAL
    (28) constant -> . DEC_INT
    (29) constant -> . CHARACTER
    (86) function_call -> . VARIABLE LPAREN arguments RPAREN
    (87) function_call -> . VARIABLE LPAREN RPAREN
    (61) unary_operator -> . INCREMENT
    (62) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 23
    VARIABLE        shift and go to state 25
    HEX_INT         shift and go to state 31
    DOT_REAL        shift and go to state 18
    EXP_REAL        shift and go to state 14
    DEC_INT         shift and go to state 15
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 13
    DECREMENT       shift and go to state 27

    constant                       shift and go to state 11
    unary_expression               shift and go to state 26
    function_call                  shift and go to state 7
    exp                            shift and go to state 107
    unary_operator                 shift and go to state 20

state 66

    (50) exp -> exp AND_ASSIGN . exp
    (30) exp -> . exp ADD exp
    (31) exp -> . exp MINUS exp
    (32) exp -> . exp MULT exp
    (33) exp -> . exp DIV exp
    (34) exp -> . exp MOD exp
    (35) exp -> . exp L_OP exp
    (36) exp -> . exp G_OP exp
    (37) exp -> . exp LE_OP exp
    (38) exp -> . exp GE_OP exp
    (39) exp -> . exp NOTEQUALS exp
    (40) exp -> . exp EQUALS_OP exp
    (41) exp -> . exp OR_OP exp
    (42) exp -> . exp AND_OP exp
    (43) exp -> . exp MUL_ASSIGN exp
    (44) exp -> . exp DIV_ASSIGN exp
    (45) exp -> . exp MOD_ASSIGN exp
    (46) exp -> . exp ADD_ASSIGN exp
    (47) exp -> . exp SUB_ASSIGN exp
    (48) exp -> . exp LEFT_ASSIGN exp
    (49) exp -> . exp RIGHT_ASSIGN exp
    (50) exp -> . exp AND_ASSIGN exp
    (51) exp -> . exp XOR_ASSIGN exp
    (52) exp -> . exp OR_ASSIGN exp
    (53) exp -> . exp EQUALS exp
    (54) exp -> . unary_expression
    (55) exp -> . LPAREN exp RPAREN
    (56) exp -> . constant
    (57) exp -> . VARIABLE
    (58) exp -> . function_call
    (59) unary_expression -> . VARIABLE unary_operator
    (60) unary_expression -> . unary_operator VARIABLE
    (25) constant -> . HEX_INT
    (26) constant -> . DOT_REAL
    (27) constant -> . EXP_REAL
    (28) constant -> . DEC_INT
    (29) constant -> . CHARACTER
    (86) function_call -> . VARIABLE LPAREN arguments RPAREN
    (87) function_call -> . VARIABLE LPAREN RPAREN
    (61) unary_operator -> . INCREMENT
    (62) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 23
    VARIABLE        shift and go to state 25
    HEX_INT         shift and go to state 31
    DOT_REAL        shift and go to state 18
    EXP_REAL        shift and go to state 14
    DEC_INT         shift and go to state 15
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 13
    DECREMENT       shift and go to state 27

    constant                       shift and go to state 11
    unary_expression               shift and go to state 26
    function_call                  shift and go to state 7
    exp                            shift and go to state 108
    unary_operator                 shift and go to state 20

state 67

    (46) exp -> exp ADD_ASSIGN . exp
    (30) exp -> . exp ADD exp
    (31) exp -> . exp MINUS exp
    (32) exp -> . exp MULT exp
    (33) exp -> . exp DIV exp
    (34) exp -> . exp MOD exp
    (35) exp -> . exp L_OP exp
    (36) exp -> . exp G_OP exp
    (37) exp -> . exp LE_OP exp
    (38) exp -> . exp GE_OP exp
    (39) exp -> . exp NOTEQUALS exp
    (40) exp -> . exp EQUALS_OP exp
    (41) exp -> . exp OR_OP exp
    (42) exp -> . exp AND_OP exp
    (43) exp -> . exp MUL_ASSIGN exp
    (44) exp -> . exp DIV_ASSIGN exp
    (45) exp -> . exp MOD_ASSIGN exp
    (46) exp -> . exp ADD_ASSIGN exp
    (47) exp -> . exp SUB_ASSIGN exp
    (48) exp -> . exp LEFT_ASSIGN exp
    (49) exp -> . exp RIGHT_ASSIGN exp
    (50) exp -> . exp AND_ASSIGN exp
    (51) exp -> . exp XOR_ASSIGN exp
    (52) exp -> . exp OR_ASSIGN exp
    (53) exp -> . exp EQUALS exp
    (54) exp -> . unary_expression
    (55) exp -> . LPAREN exp RPAREN
    (56) exp -> . constant
    (57) exp -> . VARIABLE
    (58) exp -> . function_call
    (59) unary_expression -> . VARIABLE unary_operator
    (60) unary_expression -> . unary_operator VARIABLE
    (25) constant -> . HEX_INT
    (26) constant -> . DOT_REAL
    (27) constant -> . EXP_REAL
    (28) constant -> . DEC_INT
    (29) constant -> . CHARACTER
    (86) function_call -> . VARIABLE LPAREN arguments RPAREN
    (87) function_call -> . VARIABLE LPAREN RPAREN
    (61) unary_operator -> . INCREMENT
    (62) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 23
    VARIABLE        shift and go to state 25
    HEX_INT         shift and go to state 31
    DOT_REAL        shift and go to state 18
    EXP_REAL        shift and go to state 14
    DEC_INT         shift and go to state 15
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 13
    DECREMENT       shift and go to state 27

    constant                       shift and go to state 11
    unary_expression               shift and go to state 26
    function_call                  shift and go to state 7
    exp                            shift and go to state 109
    unary_operator                 shift and go to state 20

state 68

    (53) exp -> exp EQUALS . exp
    (30) exp -> . exp ADD exp
    (31) exp -> . exp MINUS exp
    (32) exp -> . exp MULT exp
    (33) exp -> . exp DIV exp
    (34) exp -> . exp MOD exp
    (35) exp -> . exp L_OP exp
    (36) exp -> . exp G_OP exp
    (37) exp -> . exp LE_OP exp
    (38) exp -> . exp GE_OP exp
    (39) exp -> . exp NOTEQUALS exp
    (40) exp -> . exp EQUALS_OP exp
    (41) exp -> . exp OR_OP exp
    (42) exp -> . exp AND_OP exp
    (43) exp -> . exp MUL_ASSIGN exp
    (44) exp -> . exp DIV_ASSIGN exp
    (45) exp -> . exp MOD_ASSIGN exp
    (46) exp -> . exp ADD_ASSIGN exp
    (47) exp -> . exp SUB_ASSIGN exp
    (48) exp -> . exp LEFT_ASSIGN exp
    (49) exp -> . exp RIGHT_ASSIGN exp
    (50) exp -> . exp AND_ASSIGN exp
    (51) exp -> . exp XOR_ASSIGN exp
    (52) exp -> . exp OR_ASSIGN exp
    (53) exp -> . exp EQUALS exp
    (54) exp -> . unary_expression
    (55) exp -> . LPAREN exp RPAREN
    (56) exp -> . constant
    (57) exp -> . VARIABLE
    (58) exp -> . function_call
    (59) unary_expression -> . VARIABLE unary_operator
    (60) unary_expression -> . unary_operator VARIABLE
    (25) constant -> . HEX_INT
    (26) constant -> . DOT_REAL
    (27) constant -> . EXP_REAL
    (28) constant -> . DEC_INT
    (29) constant -> . CHARACTER
    (86) function_call -> . VARIABLE LPAREN arguments RPAREN
    (87) function_call -> . VARIABLE LPAREN RPAREN
    (61) unary_operator -> . INCREMENT
    (62) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 23
    VARIABLE        shift and go to state 25
    HEX_INT         shift and go to state 31
    DOT_REAL        shift and go to state 18
    EXP_REAL        shift and go to state 14
    DEC_INT         shift and go to state 15
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 13
    DECREMENT       shift and go to state 27

    constant                       shift and go to state 11
    unary_expression               shift and go to state 26
    function_call                  shift and go to state 7
    exp                            shift and go to state 110
    unary_operator                 shift and go to state 20

state 69

    (42) exp -> exp AND_OP . exp
    (30) exp -> . exp ADD exp
    (31) exp -> . exp MINUS exp
    (32) exp -> . exp MULT exp
    (33) exp -> . exp DIV exp
    (34) exp -> . exp MOD exp
    (35) exp -> . exp L_OP exp
    (36) exp -> . exp G_OP exp
    (37) exp -> . exp LE_OP exp
    (38) exp -> . exp GE_OP exp
    (39) exp -> . exp NOTEQUALS exp
    (40) exp -> . exp EQUALS_OP exp
    (41) exp -> . exp OR_OP exp
    (42) exp -> . exp AND_OP exp
    (43) exp -> . exp MUL_ASSIGN exp
    (44) exp -> . exp DIV_ASSIGN exp
    (45) exp -> . exp MOD_ASSIGN exp
    (46) exp -> . exp ADD_ASSIGN exp
    (47) exp -> . exp SUB_ASSIGN exp
    (48) exp -> . exp LEFT_ASSIGN exp
    (49) exp -> . exp RIGHT_ASSIGN exp
    (50) exp -> . exp AND_ASSIGN exp
    (51) exp -> . exp XOR_ASSIGN exp
    (52) exp -> . exp OR_ASSIGN exp
    (53) exp -> . exp EQUALS exp
    (54) exp -> . unary_expression
    (55) exp -> . LPAREN exp RPAREN
    (56) exp -> . constant
    (57) exp -> . VARIABLE
    (58) exp -> . function_call
    (59) unary_expression -> . VARIABLE unary_operator
    (60) unary_expression -> . unary_operator VARIABLE
    (25) constant -> . HEX_INT
    (26) constant -> . DOT_REAL
    (27) constant -> . EXP_REAL
    (28) constant -> . DEC_INT
    (29) constant -> . CHARACTER
    (86) function_call -> . VARIABLE LPAREN arguments RPAREN
    (87) function_call -> . VARIABLE LPAREN RPAREN
    (61) unary_operator -> . INCREMENT
    (62) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 23
    VARIABLE        shift and go to state 25
    HEX_INT         shift and go to state 31
    DOT_REAL        shift and go to state 18
    EXP_REAL        shift and go to state 14
    DEC_INT         shift and go to state 15
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 13
    DECREMENT       shift and go to state 27

    constant                       shift and go to state 11
    unary_expression               shift and go to state 26
    function_call                  shift and go to state 7
    exp                            shift and go to state 111
    unary_operator                 shift and go to state 20

state 70

    (30) exp -> exp ADD . exp
    (30) exp -> . exp ADD exp
    (31) exp -> . exp MINUS exp
    (32) exp -> . exp MULT exp
    (33) exp -> . exp DIV exp
    (34) exp -> . exp MOD exp
    (35) exp -> . exp L_OP exp
    (36) exp -> . exp G_OP exp
    (37) exp -> . exp LE_OP exp
    (38) exp -> . exp GE_OP exp
    (39) exp -> . exp NOTEQUALS exp
    (40) exp -> . exp EQUALS_OP exp
    (41) exp -> . exp OR_OP exp
    (42) exp -> . exp AND_OP exp
    (43) exp -> . exp MUL_ASSIGN exp
    (44) exp -> . exp DIV_ASSIGN exp
    (45) exp -> . exp MOD_ASSIGN exp
    (46) exp -> . exp ADD_ASSIGN exp
    (47) exp -> . exp SUB_ASSIGN exp
    (48) exp -> . exp LEFT_ASSIGN exp
    (49) exp -> . exp RIGHT_ASSIGN exp
    (50) exp -> . exp AND_ASSIGN exp
    (51) exp -> . exp XOR_ASSIGN exp
    (52) exp -> . exp OR_ASSIGN exp
    (53) exp -> . exp EQUALS exp
    (54) exp -> . unary_expression
    (55) exp -> . LPAREN exp RPAREN
    (56) exp -> . constant
    (57) exp -> . VARIABLE
    (58) exp -> . function_call
    (59) unary_expression -> . VARIABLE unary_operator
    (60) unary_expression -> . unary_operator VARIABLE
    (25) constant -> . HEX_INT
    (26) constant -> . DOT_REAL
    (27) constant -> . EXP_REAL
    (28) constant -> . DEC_INT
    (29) constant -> . CHARACTER
    (86) function_call -> . VARIABLE LPAREN arguments RPAREN
    (87) function_call -> . VARIABLE LPAREN RPAREN
    (61) unary_operator -> . INCREMENT
    (62) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 23
    VARIABLE        shift and go to state 25
    HEX_INT         shift and go to state 31
    DOT_REAL        shift and go to state 18
    EXP_REAL        shift and go to state 14
    DEC_INT         shift and go to state 15
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 13
    DECREMENT       shift and go to state 27

    constant                       shift and go to state 11
    unary_expression               shift and go to state 26
    function_call                  shift and go to state 7
    exp                            shift and go to state 112
    unary_operator                 shift and go to state 20

state 71

    (38) exp -> exp GE_OP . exp
    (30) exp -> . exp ADD exp
    (31) exp -> . exp MINUS exp
    (32) exp -> . exp MULT exp
    (33) exp -> . exp DIV exp
    (34) exp -> . exp MOD exp
    (35) exp -> . exp L_OP exp
    (36) exp -> . exp G_OP exp
    (37) exp -> . exp LE_OP exp
    (38) exp -> . exp GE_OP exp
    (39) exp -> . exp NOTEQUALS exp
    (40) exp -> . exp EQUALS_OP exp
    (41) exp -> . exp OR_OP exp
    (42) exp -> . exp AND_OP exp
    (43) exp -> . exp MUL_ASSIGN exp
    (44) exp -> . exp DIV_ASSIGN exp
    (45) exp -> . exp MOD_ASSIGN exp
    (46) exp -> . exp ADD_ASSIGN exp
    (47) exp -> . exp SUB_ASSIGN exp
    (48) exp -> . exp LEFT_ASSIGN exp
    (49) exp -> . exp RIGHT_ASSIGN exp
    (50) exp -> . exp AND_ASSIGN exp
    (51) exp -> . exp XOR_ASSIGN exp
    (52) exp -> . exp OR_ASSIGN exp
    (53) exp -> . exp EQUALS exp
    (54) exp -> . unary_expression
    (55) exp -> . LPAREN exp RPAREN
    (56) exp -> . constant
    (57) exp -> . VARIABLE
    (58) exp -> . function_call
    (59) unary_expression -> . VARIABLE unary_operator
    (60) unary_expression -> . unary_operator VARIABLE
    (25) constant -> . HEX_INT
    (26) constant -> . DOT_REAL
    (27) constant -> . EXP_REAL
    (28) constant -> . DEC_INT
    (29) constant -> . CHARACTER
    (86) function_call -> . VARIABLE LPAREN arguments RPAREN
    (87) function_call -> . VARIABLE LPAREN RPAREN
    (61) unary_operator -> . INCREMENT
    (62) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 23
    VARIABLE        shift and go to state 25
    HEX_INT         shift and go to state 31
    DOT_REAL        shift and go to state 18
    EXP_REAL        shift and go to state 14
    DEC_INT         shift and go to state 15
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 13
    DECREMENT       shift and go to state 27

    constant                       shift and go to state 11
    unary_expression               shift and go to state 26
    function_call                  shift and go to state 7
    exp                            shift and go to state 113
    unary_operator                 shift and go to state 20

state 72

    (47) exp -> exp SUB_ASSIGN . exp
    (30) exp -> . exp ADD exp
    (31) exp -> . exp MINUS exp
    (32) exp -> . exp MULT exp
    (33) exp -> . exp DIV exp
    (34) exp -> . exp MOD exp
    (35) exp -> . exp L_OP exp
    (36) exp -> . exp G_OP exp
    (37) exp -> . exp LE_OP exp
    (38) exp -> . exp GE_OP exp
    (39) exp -> . exp NOTEQUALS exp
    (40) exp -> . exp EQUALS_OP exp
    (41) exp -> . exp OR_OP exp
    (42) exp -> . exp AND_OP exp
    (43) exp -> . exp MUL_ASSIGN exp
    (44) exp -> . exp DIV_ASSIGN exp
    (45) exp -> . exp MOD_ASSIGN exp
    (46) exp -> . exp ADD_ASSIGN exp
    (47) exp -> . exp SUB_ASSIGN exp
    (48) exp -> . exp LEFT_ASSIGN exp
    (49) exp -> . exp RIGHT_ASSIGN exp
    (50) exp -> . exp AND_ASSIGN exp
    (51) exp -> . exp XOR_ASSIGN exp
    (52) exp -> . exp OR_ASSIGN exp
    (53) exp -> . exp EQUALS exp
    (54) exp -> . unary_expression
    (55) exp -> . LPAREN exp RPAREN
    (56) exp -> . constant
    (57) exp -> . VARIABLE
    (58) exp -> . function_call
    (59) unary_expression -> . VARIABLE unary_operator
    (60) unary_expression -> . unary_operator VARIABLE
    (25) constant -> . HEX_INT
    (26) constant -> . DOT_REAL
    (27) constant -> . EXP_REAL
    (28) constant -> . DEC_INT
    (29) constant -> . CHARACTER
    (86) function_call -> . VARIABLE LPAREN arguments RPAREN
    (87) function_call -> . VARIABLE LPAREN RPAREN
    (61) unary_operator -> . INCREMENT
    (62) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 23
    VARIABLE        shift and go to state 25
    HEX_INT         shift and go to state 31
    DOT_REAL        shift and go to state 18
    EXP_REAL        shift and go to state 14
    DEC_INT         shift and go to state 15
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 13
    DECREMENT       shift and go to state 27

    constant                       shift and go to state 11
    unary_expression               shift and go to state 26
    function_call                  shift and go to state 7
    exp                            shift and go to state 114
    unary_operator                 shift and go to state 20

state 73

    (45) exp -> exp MOD_ASSIGN . exp
    (30) exp -> . exp ADD exp
    (31) exp -> . exp MINUS exp
    (32) exp -> . exp MULT exp
    (33) exp -> . exp DIV exp
    (34) exp -> . exp MOD exp
    (35) exp -> . exp L_OP exp
    (36) exp -> . exp G_OP exp
    (37) exp -> . exp LE_OP exp
    (38) exp -> . exp GE_OP exp
    (39) exp -> . exp NOTEQUALS exp
    (40) exp -> . exp EQUALS_OP exp
    (41) exp -> . exp OR_OP exp
    (42) exp -> . exp AND_OP exp
    (43) exp -> . exp MUL_ASSIGN exp
    (44) exp -> . exp DIV_ASSIGN exp
    (45) exp -> . exp MOD_ASSIGN exp
    (46) exp -> . exp ADD_ASSIGN exp
    (47) exp -> . exp SUB_ASSIGN exp
    (48) exp -> . exp LEFT_ASSIGN exp
    (49) exp -> . exp RIGHT_ASSIGN exp
    (50) exp -> . exp AND_ASSIGN exp
    (51) exp -> . exp XOR_ASSIGN exp
    (52) exp -> . exp OR_ASSIGN exp
    (53) exp -> . exp EQUALS exp
    (54) exp -> . unary_expression
    (55) exp -> . LPAREN exp RPAREN
    (56) exp -> . constant
    (57) exp -> . VARIABLE
    (58) exp -> . function_call
    (59) unary_expression -> . VARIABLE unary_operator
    (60) unary_expression -> . unary_operator VARIABLE
    (25) constant -> . HEX_INT
    (26) constant -> . DOT_REAL
    (27) constant -> . EXP_REAL
    (28) constant -> . DEC_INT
    (29) constant -> . CHARACTER
    (86) function_call -> . VARIABLE LPAREN arguments RPAREN
    (87) function_call -> . VARIABLE LPAREN RPAREN
    (61) unary_operator -> . INCREMENT
    (62) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 23
    VARIABLE        shift and go to state 25
    HEX_INT         shift and go to state 31
    DOT_REAL        shift and go to state 18
    EXP_REAL        shift and go to state 14
    DEC_INT         shift and go to state 15
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 13
    DECREMENT       shift and go to state 27

    constant                       shift and go to state 11
    unary_expression               shift and go to state 26
    function_call                  shift and go to state 7
    exp                            shift and go to state 115
    unary_operator                 shift and go to state 20

state 74

    (51) exp -> exp XOR_ASSIGN . exp
    (30) exp -> . exp ADD exp
    (31) exp -> . exp MINUS exp
    (32) exp -> . exp MULT exp
    (33) exp -> . exp DIV exp
    (34) exp -> . exp MOD exp
    (35) exp -> . exp L_OP exp
    (36) exp -> . exp G_OP exp
    (37) exp -> . exp LE_OP exp
    (38) exp -> . exp GE_OP exp
    (39) exp -> . exp NOTEQUALS exp
    (40) exp -> . exp EQUALS_OP exp
    (41) exp -> . exp OR_OP exp
    (42) exp -> . exp AND_OP exp
    (43) exp -> . exp MUL_ASSIGN exp
    (44) exp -> . exp DIV_ASSIGN exp
    (45) exp -> . exp MOD_ASSIGN exp
    (46) exp -> . exp ADD_ASSIGN exp
    (47) exp -> . exp SUB_ASSIGN exp
    (48) exp -> . exp LEFT_ASSIGN exp
    (49) exp -> . exp RIGHT_ASSIGN exp
    (50) exp -> . exp AND_ASSIGN exp
    (51) exp -> . exp XOR_ASSIGN exp
    (52) exp -> . exp OR_ASSIGN exp
    (53) exp -> . exp EQUALS exp
    (54) exp -> . unary_expression
    (55) exp -> . LPAREN exp RPAREN
    (56) exp -> . constant
    (57) exp -> . VARIABLE
    (58) exp -> . function_call
    (59) unary_expression -> . VARIABLE unary_operator
    (60) unary_expression -> . unary_operator VARIABLE
    (25) constant -> . HEX_INT
    (26) constant -> . DOT_REAL
    (27) constant -> . EXP_REAL
    (28) constant -> . DEC_INT
    (29) constant -> . CHARACTER
    (86) function_call -> . VARIABLE LPAREN arguments RPAREN
    (87) function_call -> . VARIABLE LPAREN RPAREN
    (61) unary_operator -> . INCREMENT
    (62) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 23
    VARIABLE        shift and go to state 25
    HEX_INT         shift and go to state 31
    DOT_REAL        shift and go to state 18
    EXP_REAL        shift and go to state 14
    DEC_INT         shift and go to state 15
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 13
    DECREMENT       shift and go to state 27

    constant                       shift and go to state 11
    unary_expression               shift and go to state 26
    function_call                  shift and go to state 7
    exp                            shift and go to state 116
    unary_operator                 shift and go to state 20

state 75

    (52) exp -> exp OR_ASSIGN . exp
    (30) exp -> . exp ADD exp
    (31) exp -> . exp MINUS exp
    (32) exp -> . exp MULT exp
    (33) exp -> . exp DIV exp
    (34) exp -> . exp MOD exp
    (35) exp -> . exp L_OP exp
    (36) exp -> . exp G_OP exp
    (37) exp -> . exp LE_OP exp
    (38) exp -> . exp GE_OP exp
    (39) exp -> . exp NOTEQUALS exp
    (40) exp -> . exp EQUALS_OP exp
    (41) exp -> . exp OR_OP exp
    (42) exp -> . exp AND_OP exp
    (43) exp -> . exp MUL_ASSIGN exp
    (44) exp -> . exp DIV_ASSIGN exp
    (45) exp -> . exp MOD_ASSIGN exp
    (46) exp -> . exp ADD_ASSIGN exp
    (47) exp -> . exp SUB_ASSIGN exp
    (48) exp -> . exp LEFT_ASSIGN exp
    (49) exp -> . exp RIGHT_ASSIGN exp
    (50) exp -> . exp AND_ASSIGN exp
    (51) exp -> . exp XOR_ASSIGN exp
    (52) exp -> . exp OR_ASSIGN exp
    (53) exp -> . exp EQUALS exp
    (54) exp -> . unary_expression
    (55) exp -> . LPAREN exp RPAREN
    (56) exp -> . constant
    (57) exp -> . VARIABLE
    (58) exp -> . function_call
    (59) unary_expression -> . VARIABLE unary_operator
    (60) unary_expression -> . unary_operator VARIABLE
    (25) constant -> . HEX_INT
    (26) constant -> . DOT_REAL
    (27) constant -> . EXP_REAL
    (28) constant -> . DEC_INT
    (29) constant -> . CHARACTER
    (86) function_call -> . VARIABLE LPAREN arguments RPAREN
    (87) function_call -> . VARIABLE LPAREN RPAREN
    (61) unary_operator -> . INCREMENT
    (62) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 23
    VARIABLE        shift and go to state 25
    HEX_INT         shift and go to state 31
    DOT_REAL        shift and go to state 18
    EXP_REAL        shift and go to state 14
    DEC_INT         shift and go to state 15
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 13
    DECREMENT       shift and go to state 27

    constant                       shift and go to state 11
    unary_expression               shift and go to state 26
    function_call                  shift and go to state 7
    exp                            shift and go to state 117
    unary_operator                 shift and go to state 20

state 76

    (35) exp -> exp L_OP . exp
    (30) exp -> . exp ADD exp
    (31) exp -> . exp MINUS exp
    (32) exp -> . exp MULT exp
    (33) exp -> . exp DIV exp
    (34) exp -> . exp MOD exp
    (35) exp -> . exp L_OP exp
    (36) exp -> . exp G_OP exp
    (37) exp -> . exp LE_OP exp
    (38) exp -> . exp GE_OP exp
    (39) exp -> . exp NOTEQUALS exp
    (40) exp -> . exp EQUALS_OP exp
    (41) exp -> . exp OR_OP exp
    (42) exp -> . exp AND_OP exp
    (43) exp -> . exp MUL_ASSIGN exp
    (44) exp -> . exp DIV_ASSIGN exp
    (45) exp -> . exp MOD_ASSIGN exp
    (46) exp -> . exp ADD_ASSIGN exp
    (47) exp -> . exp SUB_ASSIGN exp
    (48) exp -> . exp LEFT_ASSIGN exp
    (49) exp -> . exp RIGHT_ASSIGN exp
    (50) exp -> . exp AND_ASSIGN exp
    (51) exp -> . exp XOR_ASSIGN exp
    (52) exp -> . exp OR_ASSIGN exp
    (53) exp -> . exp EQUALS exp
    (54) exp -> . unary_expression
    (55) exp -> . LPAREN exp RPAREN
    (56) exp -> . constant
    (57) exp -> . VARIABLE
    (58) exp -> . function_call
    (59) unary_expression -> . VARIABLE unary_operator
    (60) unary_expression -> . unary_operator VARIABLE
    (25) constant -> . HEX_INT
    (26) constant -> . DOT_REAL
    (27) constant -> . EXP_REAL
    (28) constant -> . DEC_INT
    (29) constant -> . CHARACTER
    (86) function_call -> . VARIABLE LPAREN arguments RPAREN
    (87) function_call -> . VARIABLE LPAREN RPAREN
    (61) unary_operator -> . INCREMENT
    (62) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 23
    VARIABLE        shift and go to state 25
    HEX_INT         shift and go to state 31
    DOT_REAL        shift and go to state 18
    EXP_REAL        shift and go to state 14
    DEC_INT         shift and go to state 15
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 13
    DECREMENT       shift and go to state 27

    constant                       shift and go to state 11
    unary_expression               shift and go to state 26
    function_call                  shift and go to state 7
    exp                            shift and go to state 118
    unary_operator                 shift and go to state 20

state 77

    (43) exp -> exp MUL_ASSIGN . exp
    (30) exp -> . exp ADD exp
    (31) exp -> . exp MINUS exp
    (32) exp -> . exp MULT exp
    (33) exp -> . exp DIV exp
    (34) exp -> . exp MOD exp
    (35) exp -> . exp L_OP exp
    (36) exp -> . exp G_OP exp
    (37) exp -> . exp LE_OP exp
    (38) exp -> . exp GE_OP exp
    (39) exp -> . exp NOTEQUALS exp
    (40) exp -> . exp EQUALS_OP exp
    (41) exp -> . exp OR_OP exp
    (42) exp -> . exp AND_OP exp
    (43) exp -> . exp MUL_ASSIGN exp
    (44) exp -> . exp DIV_ASSIGN exp
    (45) exp -> . exp MOD_ASSIGN exp
    (46) exp -> . exp ADD_ASSIGN exp
    (47) exp -> . exp SUB_ASSIGN exp
    (48) exp -> . exp LEFT_ASSIGN exp
    (49) exp -> . exp RIGHT_ASSIGN exp
    (50) exp -> . exp AND_ASSIGN exp
    (51) exp -> . exp XOR_ASSIGN exp
    (52) exp -> . exp OR_ASSIGN exp
    (53) exp -> . exp EQUALS exp
    (54) exp -> . unary_expression
    (55) exp -> . LPAREN exp RPAREN
    (56) exp -> . constant
    (57) exp -> . VARIABLE
    (58) exp -> . function_call
    (59) unary_expression -> . VARIABLE unary_operator
    (60) unary_expression -> . unary_operator VARIABLE
    (25) constant -> . HEX_INT
    (26) constant -> . DOT_REAL
    (27) constant -> . EXP_REAL
    (28) constant -> . DEC_INT
    (29) constant -> . CHARACTER
    (86) function_call -> . VARIABLE LPAREN arguments RPAREN
    (87) function_call -> . VARIABLE LPAREN RPAREN
    (61) unary_operator -> . INCREMENT
    (62) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 23
    VARIABLE        shift and go to state 25
    HEX_INT         shift and go to state 31
    DOT_REAL        shift and go to state 18
    EXP_REAL        shift and go to state 14
    DEC_INT         shift and go to state 15
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 13
    DECREMENT       shift and go to state 27

    constant                       shift and go to state 11
    unary_expression               shift and go to state 26
    function_call                  shift and go to state 7
    exp                            shift and go to state 119
    unary_operator                 shift and go to state 20

state 78

    (48) exp -> exp LEFT_ASSIGN . exp
    (30) exp -> . exp ADD exp
    (31) exp -> . exp MINUS exp
    (32) exp -> . exp MULT exp
    (33) exp -> . exp DIV exp
    (34) exp -> . exp MOD exp
    (35) exp -> . exp L_OP exp
    (36) exp -> . exp G_OP exp
    (37) exp -> . exp LE_OP exp
    (38) exp -> . exp GE_OP exp
    (39) exp -> . exp NOTEQUALS exp
    (40) exp -> . exp EQUALS_OP exp
    (41) exp -> . exp OR_OP exp
    (42) exp -> . exp AND_OP exp
    (43) exp -> . exp MUL_ASSIGN exp
    (44) exp -> . exp DIV_ASSIGN exp
    (45) exp -> . exp MOD_ASSIGN exp
    (46) exp -> . exp ADD_ASSIGN exp
    (47) exp -> . exp SUB_ASSIGN exp
    (48) exp -> . exp LEFT_ASSIGN exp
    (49) exp -> . exp RIGHT_ASSIGN exp
    (50) exp -> . exp AND_ASSIGN exp
    (51) exp -> . exp XOR_ASSIGN exp
    (52) exp -> . exp OR_ASSIGN exp
    (53) exp -> . exp EQUALS exp
    (54) exp -> . unary_expression
    (55) exp -> . LPAREN exp RPAREN
    (56) exp -> . constant
    (57) exp -> . VARIABLE
    (58) exp -> . function_call
    (59) unary_expression -> . VARIABLE unary_operator
    (60) unary_expression -> . unary_operator VARIABLE
    (25) constant -> . HEX_INT
    (26) constant -> . DOT_REAL
    (27) constant -> . EXP_REAL
    (28) constant -> . DEC_INT
    (29) constant -> . CHARACTER
    (86) function_call -> . VARIABLE LPAREN arguments RPAREN
    (87) function_call -> . VARIABLE LPAREN RPAREN
    (61) unary_operator -> . INCREMENT
    (62) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 23
    VARIABLE        shift and go to state 25
    HEX_INT         shift and go to state 31
    DOT_REAL        shift and go to state 18
    EXP_REAL        shift and go to state 14
    DEC_INT         shift and go to state 15
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 13
    DECREMENT       shift and go to state 27

    constant                       shift and go to state 11
    unary_expression               shift and go to state 26
    function_call                  shift and go to state 7
    exp                            shift and go to state 120
    unary_operator                 shift and go to state 20

state 79

    (34) exp -> exp MOD . exp
    (30) exp -> . exp ADD exp
    (31) exp -> . exp MINUS exp
    (32) exp -> . exp MULT exp
    (33) exp -> . exp DIV exp
    (34) exp -> . exp MOD exp
    (35) exp -> . exp L_OP exp
    (36) exp -> . exp G_OP exp
    (37) exp -> . exp LE_OP exp
    (38) exp -> . exp GE_OP exp
    (39) exp -> . exp NOTEQUALS exp
    (40) exp -> . exp EQUALS_OP exp
    (41) exp -> . exp OR_OP exp
    (42) exp -> . exp AND_OP exp
    (43) exp -> . exp MUL_ASSIGN exp
    (44) exp -> . exp DIV_ASSIGN exp
    (45) exp -> . exp MOD_ASSIGN exp
    (46) exp -> . exp ADD_ASSIGN exp
    (47) exp -> . exp SUB_ASSIGN exp
    (48) exp -> . exp LEFT_ASSIGN exp
    (49) exp -> . exp RIGHT_ASSIGN exp
    (50) exp -> . exp AND_ASSIGN exp
    (51) exp -> . exp XOR_ASSIGN exp
    (52) exp -> . exp OR_ASSIGN exp
    (53) exp -> . exp EQUALS exp
    (54) exp -> . unary_expression
    (55) exp -> . LPAREN exp RPAREN
    (56) exp -> . constant
    (57) exp -> . VARIABLE
    (58) exp -> . function_call
    (59) unary_expression -> . VARIABLE unary_operator
    (60) unary_expression -> . unary_operator VARIABLE
    (25) constant -> . HEX_INT
    (26) constant -> . DOT_REAL
    (27) constant -> . EXP_REAL
    (28) constant -> . DEC_INT
    (29) constant -> . CHARACTER
    (86) function_call -> . VARIABLE LPAREN arguments RPAREN
    (87) function_call -> . VARIABLE LPAREN RPAREN
    (61) unary_operator -> . INCREMENT
    (62) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 23
    VARIABLE        shift and go to state 25
    HEX_INT         shift and go to state 31
    DOT_REAL        shift and go to state 18
    EXP_REAL        shift and go to state 14
    DEC_INT         shift and go to state 15
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 13
    DECREMENT       shift and go to state 27

    constant                       shift and go to state 11
    unary_expression               shift and go to state 26
    function_call                  shift and go to state 7
    exp                            shift and go to state 121
    unary_operator                 shift and go to state 20

state 80

    (12) constant_statement -> RETURN exp SEMI_COLON .

    RBRACE          reduce using rule 12 (constant_statement -> RETURN exp SEMI_COLON .)
    LPAREN          reduce using rule 12 (constant_statement -> RETURN exp SEMI_COLON .)
    VARIABLE        reduce using rule 12 (constant_statement -> RETURN exp SEMI_COLON .)
    FOR             reduce using rule 12 (constant_statement -> RETURN exp SEMI_COLON .)
    WHILE           reduce using rule 12 (constant_statement -> RETURN exp SEMI_COLON .)
    DO              reduce using rule 12 (constant_statement -> RETURN exp SEMI_COLON .)
    BREAK           reduce using rule 12 (constant_statement -> RETURN exp SEMI_COLON .)
    CONTINUE        reduce using rule 12 (constant_statement -> RETURN exp SEMI_COLON .)
    RETURN          reduce using rule 12 (constant_statement -> RETURN exp SEMI_COLON .)
    INT             reduce using rule 12 (constant_statement -> RETURN exp SEMI_COLON .)
    FLOAT           reduce using rule 12 (constant_statement -> RETURN exp SEMI_COLON .)
    CHAR            reduce using rule 12 (constant_statement -> RETURN exp SEMI_COLON .)
    DOUBLE          reduce using rule 12 (constant_statement -> RETURN exp SEMI_COLON .)
    VOID            reduce using rule 12 (constant_statement -> RETURN exp SEMI_COLON .)
    SHORT           reduce using rule 12 (constant_statement -> RETURN exp SEMI_COLON .)
    LONG            reduce using rule 12 (constant_statement -> RETURN exp SEMI_COLON .)
    HEX_INT         reduce using rule 12 (constant_statement -> RETURN exp SEMI_COLON .)
    DOT_REAL        reduce using rule 12 (constant_statement -> RETURN exp SEMI_COLON .)
    EXP_REAL        reduce using rule 12 (constant_statement -> RETURN exp SEMI_COLON .)
    DEC_INT         reduce using rule 12 (constant_statement -> RETURN exp SEMI_COLON .)
    CHARACTER       reduce using rule 12 (constant_statement -> RETURN exp SEMI_COLON .)
    INCREMENT       reduce using rule 12 (constant_statement -> RETURN exp SEMI_COLON .)
    DECREMENT       reduce using rule 12 (constant_statement -> RETURN exp SEMI_COLON .)
    $end            reduce using rule 12 (constant_statement -> RETURN exp SEMI_COLON .)


state 81

    (73) iterative_statement -> DO SEMI_COLON WHILE . LPAREN exp RPAREN SEMI_COLON

    LPAREN          shift and go to state 122


state 82

    (71) iterative_statement -> DO statement WHILE . LPAREN exp RPAREN SEMI_COLON

    LPAREN          shift and go to state 123


state 83

    (72) iterative_statement -> DO LBRACE statements . RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (2) statements -> statements . statement
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (13) declaration -> . type enum_list SEMI_COLON
    (30) exp -> . exp ADD exp
    (31) exp -> . exp MINUS exp
    (32) exp -> . exp MULT exp
    (33) exp -> . exp DIV exp
    (34) exp -> . exp MOD exp
    (35) exp -> . exp L_OP exp
    (36) exp -> . exp G_OP exp
    (37) exp -> . exp LE_OP exp
    (38) exp -> . exp GE_OP exp
    (39) exp -> . exp NOTEQUALS exp
    (40) exp -> . exp EQUALS_OP exp
    (41) exp -> . exp OR_OP exp
    (42) exp -> . exp AND_OP exp
    (43) exp -> . exp MUL_ASSIGN exp
    (44) exp -> . exp DIV_ASSIGN exp
    (45) exp -> . exp MOD_ASSIGN exp
    (46) exp -> . exp ADD_ASSIGN exp
    (47) exp -> . exp SUB_ASSIGN exp
    (48) exp -> . exp LEFT_ASSIGN exp
    (49) exp -> . exp RIGHT_ASSIGN exp
    (50) exp -> . exp AND_ASSIGN exp
    (51) exp -> . exp XOR_ASSIGN exp
    (52) exp -> . exp OR_ASSIGN exp
    (53) exp -> . exp EQUALS exp
    (54) exp -> . unary_expression
    (55) exp -> . LPAREN exp RPAREN
    (56) exp -> . constant
    (57) exp -> . VARIABLE
    (58) exp -> . function_call
    (63) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (64) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE
    (65) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (66) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE
    (67) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (68) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (69) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE statements RBRACE
    (70) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (71) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (72) iterative_statement -> . DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (73) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (74) iterative_statement -> . DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (77) function -> . normal_function
    (78) function -> . main_function
    (9) constant_statement -> . BREAK SEMI_COLON
    (10) constant_statement -> . CONTINUE SEMI_COLON
    (11) constant_statement -> . RETURN SEMI_COLON
    (12) constant_statement -> . RETURN exp SEMI_COLON
    (18) type -> . INT
    (19) type -> . FLOAT
    (20) type -> . CHAR
    (21) type -> . DOUBLE
    (22) type -> . VOID
    (23) type -> . SHORT
    (24) type -> . LONG
    (59) unary_expression -> . VARIABLE unary_operator
    (60) unary_expression -> . unary_operator VARIABLE
    (25) constant -> . HEX_INT
    (26) constant -> . DOT_REAL
    (27) constant -> . EXP_REAL
    (28) constant -> . DEC_INT
    (29) constant -> . CHARACTER
    (86) function_call -> . VARIABLE LPAREN arguments RPAREN
    (87) function_call -> . VARIABLE LPAREN RPAREN
    (81) normal_function -> . type VARIABLE LPAREN parameters RPAREN LBRACE statements RBRACE
    (82) normal_function -> . type VARIABLE LPAREN parameters RPAREN LBRACE RBRACE
    (79) main_function -> . type MAIN LPAREN parameters RPAREN LBRACE statements RBRACE
    (80) main_function -> . type MAIN LPAREN parameters RPAREN LBRACE RBRACE
    (61) unary_operator -> . INCREMENT
    (62) unary_operator -> . DECREMENT

    RBRACE          shift and go to state 124
    LPAREN          shift and go to state 23
    VARIABLE        shift and go to state 25
    FOR             shift and go to state 22
    WHILE           shift and go to state 9
    DO              shift and go to state 4
    BREAK           shift and go to state 34
    CONTINUE        shift and go to state 35
    RETURN          shift and go to state 1
    INT             shift and go to state 29
    FLOAT           shift and go to state 33
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 5
    SHORT           shift and go to state 10
    LONG            shift and go to state 37
    HEX_INT         shift and go to state 31
    DOT_REAL        shift and go to state 18
    EXP_REAL        shift and go to state 14
    DEC_INT         shift and go to state 15
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 13
    DECREMENT       shift and go to state 27

    function                       shift and go to state 21
    main_function                  shift and go to state 2
    exp                            shift and go to state 36
    unary_expression               shift and go to state 26
    type                           shift and go to state 19
    normal_function                shift and go to state 32
    function_call                  shift and go to state 7
    statement                      shift and go to state 40
    declaration                    shift and go to state 24
    constant_statement             shift and go to state 28
    constant                       shift and go to state 11
    iterative_statement            shift and go to state 12
    unary_operator                 shift and go to state 20

state 84

    (74) iterative_statement -> DO LBRACE RBRACE . WHILE LPAREN exp RPAREN SEMI_COLON

    WHILE           shift and go to state 125


state 85

    (67) iterative_statement -> WHILE LPAREN exp . RPAREN statement
    (68) iterative_statement -> WHILE LPAREN exp . RPAREN SEMI_COLON
    (69) iterative_statement -> WHILE LPAREN exp . RPAREN LBRACE statements RBRACE
    (70) iterative_statement -> WHILE LPAREN exp . RPAREN LBRACE RBRACE
    (30) exp -> exp . ADD exp
    (31) exp -> exp . MINUS exp
    (32) exp -> exp . MULT exp
    (33) exp -> exp . DIV exp
    (34) exp -> exp . MOD exp
    (35) exp -> exp . L_OP exp
    (36) exp -> exp . G_OP exp
    (37) exp -> exp . LE_OP exp
    (38) exp -> exp . GE_OP exp
    (39) exp -> exp . NOTEQUALS exp
    (40) exp -> exp . EQUALS_OP exp
    (41) exp -> exp . OR_OP exp
    (42) exp -> exp . AND_OP exp
    (43) exp -> exp . MUL_ASSIGN exp
    (44) exp -> exp . DIV_ASSIGN exp
    (45) exp -> exp . MOD_ASSIGN exp
    (46) exp -> exp . ADD_ASSIGN exp
    (47) exp -> exp . SUB_ASSIGN exp
    (48) exp -> exp . LEFT_ASSIGN exp
    (49) exp -> exp . RIGHT_ASSIGN exp
    (50) exp -> exp . AND_ASSIGN exp
    (51) exp -> exp . XOR_ASSIGN exp
    (52) exp -> exp . OR_ASSIGN exp
    (53) exp -> exp . EQUALS exp

    RPAREN          shift and go to state 126
    ADD             shift and go to state 70
    MINUS           shift and go to state 60
    MULT            shift and go to state 61
    DIV             shift and go to state 59
    MOD             shift and go to state 79
    L_OP            shift and go to state 76
    G_OP            shift and go to state 64
    LE_OP           shift and go to state 62
    GE_OP           shift and go to state 71
    NOTEQUALS       shift and go to state 55
    EQUALS_OP       shift and go to state 56
    OR_OP           shift and go to state 65
    AND_OP          shift and go to state 69
    MUL_ASSIGN      shift and go to state 77
    DIV_ASSIGN      shift and go to state 57
    MOD_ASSIGN      shift and go to state 73
    ADD_ASSIGN      shift and go to state 67
    SUB_ASSIGN      shift and go to state 72
    LEFT_ASSIGN     shift and go to state 78
    RIGHT_ASSIGN    shift and go to state 63
    AND_ASSIGN      shift and go to state 66
    XOR_ASSIGN      shift and go to state 74
    OR_ASSIGN       shift and go to state 75
    EQUALS          shift and go to state 68


state 86

    (13) declaration -> type enum_list SEMI_COLON .

    RBRACE          reduce using rule 13 (declaration -> type enum_list SEMI_COLON .)
    LPAREN          reduce using rule 13 (declaration -> type enum_list SEMI_COLON .)
    VARIABLE        reduce using rule 13 (declaration -> type enum_list SEMI_COLON .)
    FOR             reduce using rule 13 (declaration -> type enum_list SEMI_COLON .)
    WHILE           reduce using rule 13 (declaration -> type enum_list SEMI_COLON .)
    DO              reduce using rule 13 (declaration -> type enum_list SEMI_COLON .)
    BREAK           reduce using rule 13 (declaration -> type enum_list SEMI_COLON .)
    CONTINUE        reduce using rule 13 (declaration -> type enum_list SEMI_COLON .)
    RETURN          reduce using rule 13 (declaration -> type enum_list SEMI_COLON .)
    INT             reduce using rule 13 (declaration -> type enum_list SEMI_COLON .)
    FLOAT           reduce using rule 13 (declaration -> type enum_list SEMI_COLON .)
    CHAR            reduce using rule 13 (declaration -> type enum_list SEMI_COLON .)
    DOUBLE          reduce using rule 13 (declaration -> type enum_list SEMI_COLON .)
    VOID            reduce using rule 13 (declaration -> type enum_list SEMI_COLON .)
    SHORT           reduce using rule 13 (declaration -> type enum_list SEMI_COLON .)
    LONG            reduce using rule 13 (declaration -> type enum_list SEMI_COLON .)
    HEX_INT         reduce using rule 13 (declaration -> type enum_list SEMI_COLON .)
    DOT_REAL        reduce using rule 13 (declaration -> type enum_list SEMI_COLON .)
    EXP_REAL        reduce using rule 13 (declaration -> type enum_list SEMI_COLON .)
    DEC_INT         reduce using rule 13 (declaration -> type enum_list SEMI_COLON .)
    CHARACTER       reduce using rule 13 (declaration -> type enum_list SEMI_COLON .)
    INCREMENT       reduce using rule 13 (declaration -> type enum_list SEMI_COLON .)
    DECREMENT       reduce using rule 13 (declaration -> type enum_list SEMI_COLON .)
    $end            reduce using rule 13 (declaration -> type enum_list SEMI_COLON .)


state 87

    (15) enum_list -> VARIABLE EQUALS . exp COMMA enum_list
    (17) enum_list -> VARIABLE EQUALS . exp
    (30) exp -> . exp ADD exp
    (31) exp -> . exp MINUS exp
    (32) exp -> . exp MULT exp
    (33) exp -> . exp DIV exp
    (34) exp -> . exp MOD exp
    (35) exp -> . exp L_OP exp
    (36) exp -> . exp G_OP exp
    (37) exp -> . exp LE_OP exp
    (38) exp -> . exp GE_OP exp
    (39) exp -> . exp NOTEQUALS exp
    (40) exp -> . exp EQUALS_OP exp
    (41) exp -> . exp OR_OP exp
    (42) exp -> . exp AND_OP exp
    (43) exp -> . exp MUL_ASSIGN exp
    (44) exp -> . exp DIV_ASSIGN exp
    (45) exp -> . exp MOD_ASSIGN exp
    (46) exp -> . exp ADD_ASSIGN exp
    (47) exp -> . exp SUB_ASSIGN exp
    (48) exp -> . exp LEFT_ASSIGN exp
    (49) exp -> . exp RIGHT_ASSIGN exp
    (50) exp -> . exp AND_ASSIGN exp
    (51) exp -> . exp XOR_ASSIGN exp
    (52) exp -> . exp OR_ASSIGN exp
    (53) exp -> . exp EQUALS exp
    (54) exp -> . unary_expression
    (55) exp -> . LPAREN exp RPAREN
    (56) exp -> . constant
    (57) exp -> . VARIABLE
    (58) exp -> . function_call
    (59) unary_expression -> . VARIABLE unary_operator
    (60) unary_expression -> . unary_operator VARIABLE
    (25) constant -> . HEX_INT
    (26) constant -> . DOT_REAL
    (27) constant -> . EXP_REAL
    (28) constant -> . DEC_INT
    (29) constant -> . CHARACTER
    (86) function_call -> . VARIABLE LPAREN arguments RPAREN
    (87) function_call -> . VARIABLE LPAREN RPAREN
    (61) unary_operator -> . INCREMENT
    (62) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 23
    VARIABLE        shift and go to state 25
    HEX_INT         shift and go to state 31
    DOT_REAL        shift and go to state 18
    EXP_REAL        shift and go to state 14
    DEC_INT         shift and go to state 15
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 13
    DECREMENT       shift and go to state 27

    constant                       shift and go to state 11
    unary_expression               shift and go to state 26
    function_call                  shift and go to state 7
    exp                            shift and go to state 127
    unary_operator                 shift and go to state 20

state 88

    (14) enum_list -> VARIABLE COMMA . enum_list
    (14) enum_list -> . VARIABLE COMMA enum_list
    (15) enum_list -> . VARIABLE EQUALS exp COMMA enum_list
    (16) enum_list -> . VARIABLE
    (17) enum_list -> . VARIABLE EQUALS exp

    VARIABLE        shift and go to state 128

    enum_list                      shift and go to state 129

state 89

    (81) normal_function -> type VARIABLE LPAREN . parameters RPAREN LBRACE statements RBRACE
    (82) normal_function -> type VARIABLE LPAREN . parameters RPAREN LBRACE RBRACE
    (83) parameters -> . type VARIABLE COMMA parameters
    (84) parameters -> . type VARIABLE
    (85) parameters -> . empty
    (18) type -> . INT
    (19) type -> . FLOAT
    (20) type -> . CHAR
    (21) type -> . DOUBLE
    (22) type -> . VOID
    (23) type -> . SHORT
    (24) type -> . LONG
    (92) empty -> .

    INT             shift and go to state 29
    FLOAT           shift and go to state 33
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 5
    SHORT           shift and go to state 10
    LONG            shift and go to state 37
    RPAREN          reduce using rule 92 (empty -> .)

    type                           shift and go to state 131
    empty                          shift and go to state 132
    parameters                     shift and go to state 130

state 90

    (79) main_function -> type MAIN LPAREN . parameters RPAREN LBRACE statements RBRACE
    (80) main_function -> type MAIN LPAREN . parameters RPAREN LBRACE RBRACE
    (83) parameters -> . type VARIABLE COMMA parameters
    (84) parameters -> . type VARIABLE
    (85) parameters -> . empty
    (18) type -> . INT
    (19) type -> . FLOAT
    (20) type -> . CHAR
    (21) type -> . DOUBLE
    (22) type -> . VOID
    (23) type -> . SHORT
    (24) type -> . LONG
    (92) empty -> .

    INT             shift and go to state 29
    FLOAT           shift and go to state 33
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 5
    SHORT           shift and go to state 10
    LONG            shift and go to state 37
    RPAREN          reduce using rule 92 (empty -> .)

    type                           shift and go to state 131
    empty                          shift and go to state 132
    parameters                     shift and go to state 133

state 91

    (63) iterative_statement -> FOR LPAREN iterative_exp . SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (64) iterative_statement -> FOR LPAREN iterative_exp . SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE
    (65) iterative_statement -> FOR LPAREN iterative_exp . SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (66) iterative_statement -> FOR LPAREN iterative_exp . SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE

    SEMI_COLON      shift and go to state 134


state 92

    (75) iterative_exp -> exp . COMMA iterative_exp
    (76) iterative_exp -> exp .
    (30) exp -> exp . ADD exp
    (31) exp -> exp . MINUS exp
    (32) exp -> exp . MULT exp
    (33) exp -> exp . DIV exp
    (34) exp -> exp . MOD exp
    (35) exp -> exp . L_OP exp
    (36) exp -> exp . G_OP exp
    (37) exp -> exp . LE_OP exp
    (38) exp -> exp . GE_OP exp
    (39) exp -> exp . NOTEQUALS exp
    (40) exp -> exp . EQUALS_OP exp
    (41) exp -> exp . OR_OP exp
    (42) exp -> exp . AND_OP exp
    (43) exp -> exp . MUL_ASSIGN exp
    (44) exp -> exp . DIV_ASSIGN exp
    (45) exp -> exp . MOD_ASSIGN exp
    (46) exp -> exp . ADD_ASSIGN exp
    (47) exp -> exp . SUB_ASSIGN exp
    (48) exp -> exp . LEFT_ASSIGN exp
    (49) exp -> exp . RIGHT_ASSIGN exp
    (50) exp -> exp . AND_ASSIGN exp
    (51) exp -> exp . XOR_ASSIGN exp
    (52) exp -> exp . OR_ASSIGN exp
    (53) exp -> exp . EQUALS exp

    COMMA           shift and go to state 135
    SEMI_COLON      reduce using rule 76 (iterative_exp -> exp .)
    RPAREN          reduce using rule 76 (iterative_exp -> exp .)
    ADD             shift and go to state 70
    MINUS           shift and go to state 60
    MULT            shift and go to state 61
    DIV             shift and go to state 59
    MOD             shift and go to state 79
    L_OP            shift and go to state 76
    G_OP            shift and go to state 64
    LE_OP           shift and go to state 62
    GE_OP           shift and go to state 71
    NOTEQUALS       shift and go to state 55
    EQUALS_OP       shift and go to state 56
    OR_OP           shift and go to state 65
    AND_OP          shift and go to state 69
    MUL_ASSIGN      shift and go to state 77
    DIV_ASSIGN      shift and go to state 57
    MOD_ASSIGN      shift and go to state 73
    ADD_ASSIGN      shift and go to state 67
    SUB_ASSIGN      shift and go to state 72
    LEFT_ASSIGN     shift and go to state 78
    RIGHT_ASSIGN    shift and go to state 63
    AND_ASSIGN      shift and go to state 66
    XOR_ASSIGN      shift and go to state 74
    OR_ASSIGN       shift and go to state 75
    EQUALS          shift and go to state 68


state 93

    (55) exp -> LPAREN exp RPAREN .

    SEMI_COLON      reduce using rule 55 (exp -> LPAREN exp RPAREN .)
    ADD             reduce using rule 55 (exp -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 55 (exp -> LPAREN exp RPAREN .)
    MULT            reduce using rule 55 (exp -> LPAREN exp RPAREN .)
    DIV             reduce using rule 55 (exp -> LPAREN exp RPAREN .)
    MOD             reduce using rule 55 (exp -> LPAREN exp RPAREN .)
    L_OP            reduce using rule 55 (exp -> LPAREN exp RPAREN .)
    G_OP            reduce using rule 55 (exp -> LPAREN exp RPAREN .)
    LE_OP           reduce using rule 55 (exp -> LPAREN exp RPAREN .)
    GE_OP           reduce using rule 55 (exp -> LPAREN exp RPAREN .)
    NOTEQUALS       reduce using rule 55 (exp -> LPAREN exp RPAREN .)
    EQUALS_OP       reduce using rule 55 (exp -> LPAREN exp RPAREN .)
    OR_OP           reduce using rule 55 (exp -> LPAREN exp RPAREN .)
    AND_OP          reduce using rule 55 (exp -> LPAREN exp RPAREN .)
    MUL_ASSIGN      reduce using rule 55 (exp -> LPAREN exp RPAREN .)
    DIV_ASSIGN      reduce using rule 55 (exp -> LPAREN exp RPAREN .)
    MOD_ASSIGN      reduce using rule 55 (exp -> LPAREN exp RPAREN .)
    ADD_ASSIGN      reduce using rule 55 (exp -> LPAREN exp RPAREN .)
    SUB_ASSIGN      reduce using rule 55 (exp -> LPAREN exp RPAREN .)
    LEFT_ASSIGN     reduce using rule 55 (exp -> LPAREN exp RPAREN .)
    RIGHT_ASSIGN    reduce using rule 55 (exp -> LPAREN exp RPAREN .)
    AND_ASSIGN      reduce using rule 55 (exp -> LPAREN exp RPAREN .)
    XOR_ASSIGN      reduce using rule 55 (exp -> LPAREN exp RPAREN .)
    OR_ASSIGN       reduce using rule 55 (exp -> LPAREN exp RPAREN .)
    EQUALS          reduce using rule 55 (exp -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 55 (exp -> LPAREN exp RPAREN .)
    COMMA           reduce using rule 55 (exp -> LPAREN exp RPAREN .)


state 94

    (91) arguments -> constant .

    RPAREN          reduce using rule 91 (arguments -> constant .)
    COMMA           reduce using rule 91 (arguments -> constant .)


state 95

    (86) function_call -> VARIABLE LPAREN arguments . RPAREN
    (88) arguments -> arguments . COMMA VARIABLE
    (89) arguments -> arguments . COMMA constant

    RPAREN          shift and go to state 137
    COMMA           shift and go to state 136


state 96

    (90) arguments -> VARIABLE .

    RPAREN          reduce using rule 90 (arguments -> VARIABLE .)
    COMMA           reduce using rule 90 (arguments -> VARIABLE .)


state 97

    (87) function_call -> VARIABLE LPAREN RPAREN .

    ADD             reduce using rule 87 (function_call -> VARIABLE LPAREN RPAREN .)
    MINUS           reduce using rule 87 (function_call -> VARIABLE LPAREN RPAREN .)
    MULT            reduce using rule 87 (function_call -> VARIABLE LPAREN RPAREN .)
    DIV             reduce using rule 87 (function_call -> VARIABLE LPAREN RPAREN .)
    MOD             reduce using rule 87 (function_call -> VARIABLE LPAREN RPAREN .)
    L_OP            reduce using rule 87 (function_call -> VARIABLE LPAREN RPAREN .)
    G_OP            reduce using rule 87 (function_call -> VARIABLE LPAREN RPAREN .)
    LE_OP           reduce using rule 87 (function_call -> VARIABLE LPAREN RPAREN .)
    GE_OP           reduce using rule 87 (function_call -> VARIABLE LPAREN RPAREN .)
    NOTEQUALS       reduce using rule 87 (function_call -> VARIABLE LPAREN RPAREN .)
    EQUALS_OP       reduce using rule 87 (function_call -> VARIABLE LPAREN RPAREN .)
    OR_OP           reduce using rule 87 (function_call -> VARIABLE LPAREN RPAREN .)
    AND_OP          reduce using rule 87 (function_call -> VARIABLE LPAREN RPAREN .)
    MUL_ASSIGN      reduce using rule 87 (function_call -> VARIABLE LPAREN RPAREN .)
    DIV_ASSIGN      reduce using rule 87 (function_call -> VARIABLE LPAREN RPAREN .)
    MOD_ASSIGN      reduce using rule 87 (function_call -> VARIABLE LPAREN RPAREN .)
    ADD_ASSIGN      reduce using rule 87 (function_call -> VARIABLE LPAREN RPAREN .)
    SUB_ASSIGN      reduce using rule 87 (function_call -> VARIABLE LPAREN RPAREN .)
    LEFT_ASSIGN     reduce using rule 87 (function_call -> VARIABLE LPAREN RPAREN .)
    RIGHT_ASSIGN    reduce using rule 87 (function_call -> VARIABLE LPAREN RPAREN .)
    AND_ASSIGN      reduce using rule 87 (function_call -> VARIABLE LPAREN RPAREN .)
    XOR_ASSIGN      reduce using rule 87 (function_call -> VARIABLE LPAREN RPAREN .)
    OR_ASSIGN       reduce using rule 87 (function_call -> VARIABLE LPAREN RPAREN .)
    EQUALS          reduce using rule 87 (function_call -> VARIABLE LPAREN RPAREN .)
    SEMI_COLON      reduce using rule 87 (function_call -> VARIABLE LPAREN RPAREN .)
    RPAREN          reduce using rule 87 (function_call -> VARIABLE LPAREN RPAREN .)
    COMMA           reduce using rule 87 (function_call -> VARIABLE LPAREN RPAREN .)


state 98

    (39) exp -> exp NOTEQUALS exp .
    (30) exp -> exp . ADD exp
    (31) exp -> exp . MINUS exp
    (32) exp -> exp . MULT exp
    (33) exp -> exp . DIV exp
    (34) exp -> exp . MOD exp
    (35) exp -> exp . L_OP exp
    (36) exp -> exp . G_OP exp
    (37) exp -> exp . LE_OP exp
    (38) exp -> exp . GE_OP exp
    (39) exp -> exp . NOTEQUALS exp
    (40) exp -> exp . EQUALS_OP exp
    (41) exp -> exp . OR_OP exp
    (42) exp -> exp . AND_OP exp
    (43) exp -> exp . MUL_ASSIGN exp
    (44) exp -> exp . DIV_ASSIGN exp
    (45) exp -> exp . MOD_ASSIGN exp
    (46) exp -> exp . ADD_ASSIGN exp
    (47) exp -> exp . SUB_ASSIGN exp
    (48) exp -> exp . LEFT_ASSIGN exp
    (49) exp -> exp . RIGHT_ASSIGN exp
    (50) exp -> exp . AND_ASSIGN exp
    (51) exp -> exp . XOR_ASSIGN exp
    (52) exp -> exp . OR_ASSIGN exp
    (53) exp -> exp . EQUALS exp

    SEMI_COLON      reduce using rule 39 (exp -> exp NOTEQUALS exp .)
    ADD             reduce using rule 39 (exp -> exp NOTEQUALS exp .)
    MINUS           reduce using rule 39 (exp -> exp NOTEQUALS exp .)
    MULT            reduce using rule 39 (exp -> exp NOTEQUALS exp .)
    DIV             reduce using rule 39 (exp -> exp NOTEQUALS exp .)
    MOD             reduce using rule 39 (exp -> exp NOTEQUALS exp .)
    L_OP            reduce using rule 39 (exp -> exp NOTEQUALS exp .)
    G_OP            reduce using rule 39 (exp -> exp NOTEQUALS exp .)
    LE_OP           reduce using rule 39 (exp -> exp NOTEQUALS exp .)
    GE_OP           reduce using rule 39 (exp -> exp NOTEQUALS exp .)
    NOTEQUALS       reduce using rule 39 (exp -> exp NOTEQUALS exp .)
    EQUALS_OP       reduce using rule 39 (exp -> exp NOTEQUALS exp .)
    RPAREN          reduce using rule 39 (exp -> exp NOTEQUALS exp .)
    COMMA           reduce using rule 39 (exp -> exp NOTEQUALS exp .)
    OR_OP           shift and go to state 65
    AND_OP          shift and go to state 69
    MUL_ASSIGN      shift and go to state 77
    DIV_ASSIGN      shift and go to state 57
    MOD_ASSIGN      shift and go to state 73
    ADD_ASSIGN      shift and go to state 67
    SUB_ASSIGN      shift and go to state 72
    LEFT_ASSIGN     shift and go to state 78
    RIGHT_ASSIGN    shift and go to state 63
    AND_ASSIGN      shift and go to state 66
    XOR_ASSIGN      shift and go to state 74
    OR_ASSIGN       shift and go to state 75
    EQUALS          shift and go to state 68

  ! OR_OP           [ reduce using rule 39 (exp -> exp NOTEQUALS exp .) ]
  ! AND_OP          [ reduce using rule 39 (exp -> exp NOTEQUALS exp .) ]
  ! MUL_ASSIGN      [ reduce using rule 39 (exp -> exp NOTEQUALS exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 39 (exp -> exp NOTEQUALS exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 39 (exp -> exp NOTEQUALS exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 39 (exp -> exp NOTEQUALS exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 39 (exp -> exp NOTEQUALS exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 39 (exp -> exp NOTEQUALS exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 39 (exp -> exp NOTEQUALS exp .) ]
  ! AND_ASSIGN      [ reduce using rule 39 (exp -> exp NOTEQUALS exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 39 (exp -> exp NOTEQUALS exp .) ]
  ! OR_ASSIGN       [ reduce using rule 39 (exp -> exp NOTEQUALS exp .) ]
  ! EQUALS          [ reduce using rule 39 (exp -> exp NOTEQUALS exp .) ]
  ! ADD             [ shift and go to state 70 ]
  ! MINUS           [ shift and go to state 60 ]
  ! MULT            [ shift and go to state 61 ]
  ! DIV             [ shift and go to state 59 ]
  ! MOD             [ shift and go to state 79 ]
  ! L_OP            [ shift and go to state 76 ]
  ! G_OP            [ shift and go to state 64 ]
  ! LE_OP           [ shift and go to state 62 ]
  ! GE_OP           [ shift and go to state 71 ]
  ! NOTEQUALS       [ shift and go to state 55 ]
  ! EQUALS_OP       [ shift and go to state 56 ]


state 99

    (40) exp -> exp EQUALS_OP exp .
    (30) exp -> exp . ADD exp
    (31) exp -> exp . MINUS exp
    (32) exp -> exp . MULT exp
    (33) exp -> exp . DIV exp
    (34) exp -> exp . MOD exp
    (35) exp -> exp . L_OP exp
    (36) exp -> exp . G_OP exp
    (37) exp -> exp . LE_OP exp
    (38) exp -> exp . GE_OP exp
    (39) exp -> exp . NOTEQUALS exp
    (40) exp -> exp . EQUALS_OP exp
    (41) exp -> exp . OR_OP exp
    (42) exp -> exp . AND_OP exp
    (43) exp -> exp . MUL_ASSIGN exp
    (44) exp -> exp . DIV_ASSIGN exp
    (45) exp -> exp . MOD_ASSIGN exp
    (46) exp -> exp . ADD_ASSIGN exp
    (47) exp -> exp . SUB_ASSIGN exp
    (48) exp -> exp . LEFT_ASSIGN exp
    (49) exp -> exp . RIGHT_ASSIGN exp
    (50) exp -> exp . AND_ASSIGN exp
    (51) exp -> exp . XOR_ASSIGN exp
    (52) exp -> exp . OR_ASSIGN exp
    (53) exp -> exp . EQUALS exp

    SEMI_COLON      reduce using rule 40 (exp -> exp EQUALS_OP exp .)
    ADD             reduce using rule 40 (exp -> exp EQUALS_OP exp .)
    MINUS           reduce using rule 40 (exp -> exp EQUALS_OP exp .)
    MULT            reduce using rule 40 (exp -> exp EQUALS_OP exp .)
    DIV             reduce using rule 40 (exp -> exp EQUALS_OP exp .)
    MOD             reduce using rule 40 (exp -> exp EQUALS_OP exp .)
    L_OP            reduce using rule 40 (exp -> exp EQUALS_OP exp .)
    G_OP            reduce using rule 40 (exp -> exp EQUALS_OP exp .)
    LE_OP           reduce using rule 40 (exp -> exp EQUALS_OP exp .)
    GE_OP           reduce using rule 40 (exp -> exp EQUALS_OP exp .)
    NOTEQUALS       reduce using rule 40 (exp -> exp EQUALS_OP exp .)
    EQUALS_OP       reduce using rule 40 (exp -> exp EQUALS_OP exp .)
    RPAREN          reduce using rule 40 (exp -> exp EQUALS_OP exp .)
    COMMA           reduce using rule 40 (exp -> exp EQUALS_OP exp .)
    OR_OP           shift and go to state 65
    AND_OP          shift and go to state 69
    MUL_ASSIGN      shift and go to state 77
    DIV_ASSIGN      shift and go to state 57
    MOD_ASSIGN      shift and go to state 73
    ADD_ASSIGN      shift and go to state 67
    SUB_ASSIGN      shift and go to state 72
    LEFT_ASSIGN     shift and go to state 78
    RIGHT_ASSIGN    shift and go to state 63
    AND_ASSIGN      shift and go to state 66
    XOR_ASSIGN      shift and go to state 74
    OR_ASSIGN       shift and go to state 75
    EQUALS          shift and go to state 68

  ! OR_OP           [ reduce using rule 40 (exp -> exp EQUALS_OP exp .) ]
  ! AND_OP          [ reduce using rule 40 (exp -> exp EQUALS_OP exp .) ]
  ! MUL_ASSIGN      [ reduce using rule 40 (exp -> exp EQUALS_OP exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 40 (exp -> exp EQUALS_OP exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 40 (exp -> exp EQUALS_OP exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 40 (exp -> exp EQUALS_OP exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 40 (exp -> exp EQUALS_OP exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 40 (exp -> exp EQUALS_OP exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 40 (exp -> exp EQUALS_OP exp .) ]
  ! AND_ASSIGN      [ reduce using rule 40 (exp -> exp EQUALS_OP exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 40 (exp -> exp EQUALS_OP exp .) ]
  ! OR_ASSIGN       [ reduce using rule 40 (exp -> exp EQUALS_OP exp .) ]
  ! EQUALS          [ reduce using rule 40 (exp -> exp EQUALS_OP exp .) ]
  ! ADD             [ shift and go to state 70 ]
  ! MINUS           [ shift and go to state 60 ]
  ! MULT            [ shift and go to state 61 ]
  ! DIV             [ shift and go to state 59 ]
  ! MOD             [ shift and go to state 79 ]
  ! L_OP            [ shift and go to state 76 ]
  ! G_OP            [ shift and go to state 64 ]
  ! LE_OP           [ shift and go to state 62 ]
  ! GE_OP           [ shift and go to state 71 ]
  ! NOTEQUALS       [ shift and go to state 55 ]
  ! EQUALS_OP       [ shift and go to state 56 ]


state 100

    (44) exp -> exp DIV_ASSIGN exp .
    (30) exp -> exp . ADD exp
    (31) exp -> exp . MINUS exp
    (32) exp -> exp . MULT exp
    (33) exp -> exp . DIV exp
    (34) exp -> exp . MOD exp
    (35) exp -> exp . L_OP exp
    (36) exp -> exp . G_OP exp
    (37) exp -> exp . LE_OP exp
    (38) exp -> exp . GE_OP exp
    (39) exp -> exp . NOTEQUALS exp
    (40) exp -> exp . EQUALS_OP exp
    (41) exp -> exp . OR_OP exp
    (42) exp -> exp . AND_OP exp
    (43) exp -> exp . MUL_ASSIGN exp
    (44) exp -> exp . DIV_ASSIGN exp
    (45) exp -> exp . MOD_ASSIGN exp
    (46) exp -> exp . ADD_ASSIGN exp
    (47) exp -> exp . SUB_ASSIGN exp
    (48) exp -> exp . LEFT_ASSIGN exp
    (49) exp -> exp . RIGHT_ASSIGN exp
    (50) exp -> exp . AND_ASSIGN exp
    (51) exp -> exp . XOR_ASSIGN exp
    (52) exp -> exp . OR_ASSIGN exp
    (53) exp -> exp . EQUALS exp

    SEMI_COLON      reduce using rule 44 (exp -> exp DIV_ASSIGN exp .)
    ADD             reduce using rule 44 (exp -> exp DIV_ASSIGN exp .)
    MINUS           reduce using rule 44 (exp -> exp DIV_ASSIGN exp .)
    MULT            reduce using rule 44 (exp -> exp DIV_ASSIGN exp .)
    DIV             reduce using rule 44 (exp -> exp DIV_ASSIGN exp .)
    MOD             reduce using rule 44 (exp -> exp DIV_ASSIGN exp .)
    L_OP            reduce using rule 44 (exp -> exp DIV_ASSIGN exp .)
    G_OP            reduce using rule 44 (exp -> exp DIV_ASSIGN exp .)
    LE_OP           reduce using rule 44 (exp -> exp DIV_ASSIGN exp .)
    GE_OP           reduce using rule 44 (exp -> exp DIV_ASSIGN exp .)
    NOTEQUALS       reduce using rule 44 (exp -> exp DIV_ASSIGN exp .)
    EQUALS_OP       reduce using rule 44 (exp -> exp DIV_ASSIGN exp .)
    OR_OP           reduce using rule 44 (exp -> exp DIV_ASSIGN exp .)
    AND_OP          reduce using rule 44 (exp -> exp DIV_ASSIGN exp .)
    RPAREN          reduce using rule 44 (exp -> exp DIV_ASSIGN exp .)
    COMMA           reduce using rule 44 (exp -> exp DIV_ASSIGN exp .)
    MUL_ASSIGN      shift and go to state 77
    DIV_ASSIGN      shift and go to state 57
    MOD_ASSIGN      shift and go to state 73
    ADD_ASSIGN      shift and go to state 67
    SUB_ASSIGN      shift and go to state 72
    LEFT_ASSIGN     shift and go to state 78
    RIGHT_ASSIGN    shift and go to state 63
    AND_ASSIGN      shift and go to state 66
    XOR_ASSIGN      shift and go to state 74
    OR_ASSIGN       shift and go to state 75
    EQUALS          shift and go to state 68

  ! MUL_ASSIGN      [ reduce using rule 44 (exp -> exp DIV_ASSIGN exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 44 (exp -> exp DIV_ASSIGN exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 44 (exp -> exp DIV_ASSIGN exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 44 (exp -> exp DIV_ASSIGN exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 44 (exp -> exp DIV_ASSIGN exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 44 (exp -> exp DIV_ASSIGN exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 44 (exp -> exp DIV_ASSIGN exp .) ]
  ! AND_ASSIGN      [ reduce using rule 44 (exp -> exp DIV_ASSIGN exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 44 (exp -> exp DIV_ASSIGN exp .) ]
  ! OR_ASSIGN       [ reduce using rule 44 (exp -> exp DIV_ASSIGN exp .) ]
  ! EQUALS          [ reduce using rule 44 (exp -> exp DIV_ASSIGN exp .) ]
  ! ADD             [ shift and go to state 70 ]
  ! MINUS           [ shift and go to state 60 ]
  ! MULT            [ shift and go to state 61 ]
  ! DIV             [ shift and go to state 59 ]
  ! MOD             [ shift and go to state 79 ]
  ! L_OP            [ shift and go to state 76 ]
  ! G_OP            [ shift and go to state 64 ]
  ! LE_OP           [ shift and go to state 62 ]
  ! GE_OP           [ shift and go to state 71 ]
  ! NOTEQUALS       [ shift and go to state 55 ]
  ! EQUALS_OP       [ shift and go to state 56 ]
  ! OR_OP           [ shift and go to state 65 ]
  ! AND_OP          [ shift and go to state 69 ]


state 101

    (33) exp -> exp DIV exp .
    (30) exp -> exp . ADD exp
    (31) exp -> exp . MINUS exp
    (32) exp -> exp . MULT exp
    (33) exp -> exp . DIV exp
    (34) exp -> exp . MOD exp
    (35) exp -> exp . L_OP exp
    (36) exp -> exp . G_OP exp
    (37) exp -> exp . LE_OP exp
    (38) exp -> exp . GE_OP exp
    (39) exp -> exp . NOTEQUALS exp
    (40) exp -> exp . EQUALS_OP exp
    (41) exp -> exp . OR_OP exp
    (42) exp -> exp . AND_OP exp
    (43) exp -> exp . MUL_ASSIGN exp
    (44) exp -> exp . DIV_ASSIGN exp
    (45) exp -> exp . MOD_ASSIGN exp
    (46) exp -> exp . ADD_ASSIGN exp
    (47) exp -> exp . SUB_ASSIGN exp
    (48) exp -> exp . LEFT_ASSIGN exp
    (49) exp -> exp . RIGHT_ASSIGN exp
    (50) exp -> exp . AND_ASSIGN exp
    (51) exp -> exp . XOR_ASSIGN exp
    (52) exp -> exp . OR_ASSIGN exp
    (53) exp -> exp . EQUALS exp

    SEMI_COLON      reduce using rule 33 (exp -> exp DIV exp .)
    ADD             reduce using rule 33 (exp -> exp DIV exp .)
    MINUS           reduce using rule 33 (exp -> exp DIV exp .)
    MULT            reduce using rule 33 (exp -> exp DIV exp .)
    DIV             reduce using rule 33 (exp -> exp DIV exp .)
    MOD             reduce using rule 33 (exp -> exp DIV exp .)
    RPAREN          reduce using rule 33 (exp -> exp DIV exp .)
    COMMA           reduce using rule 33 (exp -> exp DIV exp .)
    L_OP            shift and go to state 76
    G_OP            shift and go to state 64
    LE_OP           shift and go to state 62
    GE_OP           shift and go to state 71
    NOTEQUALS       shift and go to state 55
    EQUALS_OP       shift and go to state 56
    OR_OP           shift and go to state 65
    AND_OP          shift and go to state 69
    MUL_ASSIGN      shift and go to state 77
    DIV_ASSIGN      shift and go to state 57
    MOD_ASSIGN      shift and go to state 73
    ADD_ASSIGN      shift and go to state 67
    SUB_ASSIGN      shift and go to state 72
    LEFT_ASSIGN     shift and go to state 78
    RIGHT_ASSIGN    shift and go to state 63
    AND_ASSIGN      shift and go to state 66
    XOR_ASSIGN      shift and go to state 74
    OR_ASSIGN       shift and go to state 75
    EQUALS          shift and go to state 68

  ! L_OP            [ reduce using rule 33 (exp -> exp DIV exp .) ]
  ! G_OP            [ reduce using rule 33 (exp -> exp DIV exp .) ]
  ! LE_OP           [ reduce using rule 33 (exp -> exp DIV exp .) ]
  ! GE_OP           [ reduce using rule 33 (exp -> exp DIV exp .) ]
  ! NOTEQUALS       [ reduce using rule 33 (exp -> exp DIV exp .) ]
  ! EQUALS_OP       [ reduce using rule 33 (exp -> exp DIV exp .) ]
  ! OR_OP           [ reduce using rule 33 (exp -> exp DIV exp .) ]
  ! AND_OP          [ reduce using rule 33 (exp -> exp DIV exp .) ]
  ! MUL_ASSIGN      [ reduce using rule 33 (exp -> exp DIV exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 33 (exp -> exp DIV exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 33 (exp -> exp DIV exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 33 (exp -> exp DIV exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 33 (exp -> exp DIV exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 33 (exp -> exp DIV exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 33 (exp -> exp DIV exp .) ]
  ! AND_ASSIGN      [ reduce using rule 33 (exp -> exp DIV exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 33 (exp -> exp DIV exp .) ]
  ! OR_ASSIGN       [ reduce using rule 33 (exp -> exp DIV exp .) ]
  ! EQUALS          [ reduce using rule 33 (exp -> exp DIV exp .) ]
  ! ADD             [ shift and go to state 70 ]
  ! MINUS           [ shift and go to state 60 ]
  ! MULT            [ shift and go to state 61 ]
  ! DIV             [ shift and go to state 59 ]
  ! MOD             [ shift and go to state 79 ]


state 102

    (31) exp -> exp MINUS exp .
    (30) exp -> exp . ADD exp
    (31) exp -> exp . MINUS exp
    (32) exp -> exp . MULT exp
    (33) exp -> exp . DIV exp
    (34) exp -> exp . MOD exp
    (35) exp -> exp . L_OP exp
    (36) exp -> exp . G_OP exp
    (37) exp -> exp . LE_OP exp
    (38) exp -> exp . GE_OP exp
    (39) exp -> exp . NOTEQUALS exp
    (40) exp -> exp . EQUALS_OP exp
    (41) exp -> exp . OR_OP exp
    (42) exp -> exp . AND_OP exp
    (43) exp -> exp . MUL_ASSIGN exp
    (44) exp -> exp . DIV_ASSIGN exp
    (45) exp -> exp . MOD_ASSIGN exp
    (46) exp -> exp . ADD_ASSIGN exp
    (47) exp -> exp . SUB_ASSIGN exp
    (48) exp -> exp . LEFT_ASSIGN exp
    (49) exp -> exp . RIGHT_ASSIGN exp
    (50) exp -> exp . AND_ASSIGN exp
    (51) exp -> exp . XOR_ASSIGN exp
    (52) exp -> exp . OR_ASSIGN exp
    (53) exp -> exp . EQUALS exp

    SEMI_COLON      reduce using rule 31 (exp -> exp MINUS exp .)
    ADD             reduce using rule 31 (exp -> exp MINUS exp .)
    MINUS           reduce using rule 31 (exp -> exp MINUS exp .)
    RPAREN          reduce using rule 31 (exp -> exp MINUS exp .)
    COMMA           reduce using rule 31 (exp -> exp MINUS exp .)
    MULT            shift and go to state 61
    DIV             shift and go to state 59
    MOD             shift and go to state 79
    L_OP            shift and go to state 76
    G_OP            shift and go to state 64
    LE_OP           shift and go to state 62
    GE_OP           shift and go to state 71
    NOTEQUALS       shift and go to state 55
    EQUALS_OP       shift and go to state 56
    OR_OP           shift and go to state 65
    AND_OP          shift and go to state 69
    MUL_ASSIGN      shift and go to state 77
    DIV_ASSIGN      shift and go to state 57
    MOD_ASSIGN      shift and go to state 73
    ADD_ASSIGN      shift and go to state 67
    SUB_ASSIGN      shift and go to state 72
    LEFT_ASSIGN     shift and go to state 78
    RIGHT_ASSIGN    shift and go to state 63
    AND_ASSIGN      shift and go to state 66
    XOR_ASSIGN      shift and go to state 74
    OR_ASSIGN       shift and go to state 75
    EQUALS          shift and go to state 68

  ! MULT            [ reduce using rule 31 (exp -> exp MINUS exp .) ]
  ! DIV             [ reduce using rule 31 (exp -> exp MINUS exp .) ]
  ! MOD             [ reduce using rule 31 (exp -> exp MINUS exp .) ]
  ! L_OP            [ reduce using rule 31 (exp -> exp MINUS exp .) ]
  ! G_OP            [ reduce using rule 31 (exp -> exp MINUS exp .) ]
  ! LE_OP           [ reduce using rule 31 (exp -> exp MINUS exp .) ]
  ! GE_OP           [ reduce using rule 31 (exp -> exp MINUS exp .) ]
  ! NOTEQUALS       [ reduce using rule 31 (exp -> exp MINUS exp .) ]
  ! EQUALS_OP       [ reduce using rule 31 (exp -> exp MINUS exp .) ]
  ! OR_OP           [ reduce using rule 31 (exp -> exp MINUS exp .) ]
  ! AND_OP          [ reduce using rule 31 (exp -> exp MINUS exp .) ]
  ! MUL_ASSIGN      [ reduce using rule 31 (exp -> exp MINUS exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 31 (exp -> exp MINUS exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 31 (exp -> exp MINUS exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 31 (exp -> exp MINUS exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 31 (exp -> exp MINUS exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 31 (exp -> exp MINUS exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 31 (exp -> exp MINUS exp .) ]
  ! AND_ASSIGN      [ reduce using rule 31 (exp -> exp MINUS exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 31 (exp -> exp MINUS exp .) ]
  ! OR_ASSIGN       [ reduce using rule 31 (exp -> exp MINUS exp .) ]
  ! EQUALS          [ reduce using rule 31 (exp -> exp MINUS exp .) ]
  ! ADD             [ shift and go to state 70 ]
  ! MINUS           [ shift and go to state 60 ]


state 103

    (32) exp -> exp MULT exp .
    (30) exp -> exp . ADD exp
    (31) exp -> exp . MINUS exp
    (32) exp -> exp . MULT exp
    (33) exp -> exp . DIV exp
    (34) exp -> exp . MOD exp
    (35) exp -> exp . L_OP exp
    (36) exp -> exp . G_OP exp
    (37) exp -> exp . LE_OP exp
    (38) exp -> exp . GE_OP exp
    (39) exp -> exp . NOTEQUALS exp
    (40) exp -> exp . EQUALS_OP exp
    (41) exp -> exp . OR_OP exp
    (42) exp -> exp . AND_OP exp
    (43) exp -> exp . MUL_ASSIGN exp
    (44) exp -> exp . DIV_ASSIGN exp
    (45) exp -> exp . MOD_ASSIGN exp
    (46) exp -> exp . ADD_ASSIGN exp
    (47) exp -> exp . SUB_ASSIGN exp
    (48) exp -> exp . LEFT_ASSIGN exp
    (49) exp -> exp . RIGHT_ASSIGN exp
    (50) exp -> exp . AND_ASSIGN exp
    (51) exp -> exp . XOR_ASSIGN exp
    (52) exp -> exp . OR_ASSIGN exp
    (53) exp -> exp . EQUALS exp

    SEMI_COLON      reduce using rule 32 (exp -> exp MULT exp .)
    ADD             reduce using rule 32 (exp -> exp MULT exp .)
    MINUS           reduce using rule 32 (exp -> exp MULT exp .)
    MULT            reduce using rule 32 (exp -> exp MULT exp .)
    DIV             reduce using rule 32 (exp -> exp MULT exp .)
    MOD             reduce using rule 32 (exp -> exp MULT exp .)
    RPAREN          reduce using rule 32 (exp -> exp MULT exp .)
    COMMA           reduce using rule 32 (exp -> exp MULT exp .)
    L_OP            shift and go to state 76
    G_OP            shift and go to state 64
    LE_OP           shift and go to state 62
    GE_OP           shift and go to state 71
    NOTEQUALS       shift and go to state 55
    EQUALS_OP       shift and go to state 56
    OR_OP           shift and go to state 65
    AND_OP          shift and go to state 69
    MUL_ASSIGN      shift and go to state 77
    DIV_ASSIGN      shift and go to state 57
    MOD_ASSIGN      shift and go to state 73
    ADD_ASSIGN      shift and go to state 67
    SUB_ASSIGN      shift and go to state 72
    LEFT_ASSIGN     shift and go to state 78
    RIGHT_ASSIGN    shift and go to state 63
    AND_ASSIGN      shift and go to state 66
    XOR_ASSIGN      shift and go to state 74
    OR_ASSIGN       shift and go to state 75
    EQUALS          shift and go to state 68

  ! L_OP            [ reduce using rule 32 (exp -> exp MULT exp .) ]
  ! G_OP            [ reduce using rule 32 (exp -> exp MULT exp .) ]
  ! LE_OP           [ reduce using rule 32 (exp -> exp MULT exp .) ]
  ! GE_OP           [ reduce using rule 32 (exp -> exp MULT exp .) ]
  ! NOTEQUALS       [ reduce using rule 32 (exp -> exp MULT exp .) ]
  ! EQUALS_OP       [ reduce using rule 32 (exp -> exp MULT exp .) ]
  ! OR_OP           [ reduce using rule 32 (exp -> exp MULT exp .) ]
  ! AND_OP          [ reduce using rule 32 (exp -> exp MULT exp .) ]
  ! MUL_ASSIGN      [ reduce using rule 32 (exp -> exp MULT exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 32 (exp -> exp MULT exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 32 (exp -> exp MULT exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 32 (exp -> exp MULT exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 32 (exp -> exp MULT exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 32 (exp -> exp MULT exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 32 (exp -> exp MULT exp .) ]
  ! AND_ASSIGN      [ reduce using rule 32 (exp -> exp MULT exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 32 (exp -> exp MULT exp .) ]
  ! OR_ASSIGN       [ reduce using rule 32 (exp -> exp MULT exp .) ]
  ! EQUALS          [ reduce using rule 32 (exp -> exp MULT exp .) ]
  ! ADD             [ shift and go to state 70 ]
  ! MINUS           [ shift and go to state 60 ]
  ! MULT            [ shift and go to state 61 ]
  ! DIV             [ shift and go to state 59 ]
  ! MOD             [ shift and go to state 79 ]


state 104

    (37) exp -> exp LE_OP exp .
    (30) exp -> exp . ADD exp
    (31) exp -> exp . MINUS exp
    (32) exp -> exp . MULT exp
    (33) exp -> exp . DIV exp
    (34) exp -> exp . MOD exp
    (35) exp -> exp . L_OP exp
    (36) exp -> exp . G_OP exp
    (37) exp -> exp . LE_OP exp
    (38) exp -> exp . GE_OP exp
    (39) exp -> exp . NOTEQUALS exp
    (40) exp -> exp . EQUALS_OP exp
    (41) exp -> exp . OR_OP exp
    (42) exp -> exp . AND_OP exp
    (43) exp -> exp . MUL_ASSIGN exp
    (44) exp -> exp . DIV_ASSIGN exp
    (45) exp -> exp . MOD_ASSIGN exp
    (46) exp -> exp . ADD_ASSIGN exp
    (47) exp -> exp . SUB_ASSIGN exp
    (48) exp -> exp . LEFT_ASSIGN exp
    (49) exp -> exp . RIGHT_ASSIGN exp
    (50) exp -> exp . AND_ASSIGN exp
    (51) exp -> exp . XOR_ASSIGN exp
    (52) exp -> exp . OR_ASSIGN exp
    (53) exp -> exp . EQUALS exp

    SEMI_COLON      reduce using rule 37 (exp -> exp LE_OP exp .)
    ADD             reduce using rule 37 (exp -> exp LE_OP exp .)
    MINUS           reduce using rule 37 (exp -> exp LE_OP exp .)
    MULT            reduce using rule 37 (exp -> exp LE_OP exp .)
    DIV             reduce using rule 37 (exp -> exp LE_OP exp .)
    MOD             reduce using rule 37 (exp -> exp LE_OP exp .)
    L_OP            reduce using rule 37 (exp -> exp LE_OP exp .)
    G_OP            reduce using rule 37 (exp -> exp LE_OP exp .)
    LE_OP           reduce using rule 37 (exp -> exp LE_OP exp .)
    GE_OP           reduce using rule 37 (exp -> exp LE_OP exp .)
    RPAREN          reduce using rule 37 (exp -> exp LE_OP exp .)
    COMMA           reduce using rule 37 (exp -> exp LE_OP exp .)
    NOTEQUALS       shift and go to state 55
    EQUALS_OP       shift and go to state 56
    OR_OP           shift and go to state 65
    AND_OP          shift and go to state 69
    MUL_ASSIGN      shift and go to state 77
    DIV_ASSIGN      shift and go to state 57
    MOD_ASSIGN      shift and go to state 73
    ADD_ASSIGN      shift and go to state 67
    SUB_ASSIGN      shift and go to state 72
    LEFT_ASSIGN     shift and go to state 78
    RIGHT_ASSIGN    shift and go to state 63
    AND_ASSIGN      shift and go to state 66
    XOR_ASSIGN      shift and go to state 74
    OR_ASSIGN       shift and go to state 75
    EQUALS          shift and go to state 68

  ! NOTEQUALS       [ reduce using rule 37 (exp -> exp LE_OP exp .) ]
  ! EQUALS_OP       [ reduce using rule 37 (exp -> exp LE_OP exp .) ]
  ! OR_OP           [ reduce using rule 37 (exp -> exp LE_OP exp .) ]
  ! AND_OP          [ reduce using rule 37 (exp -> exp LE_OP exp .) ]
  ! MUL_ASSIGN      [ reduce using rule 37 (exp -> exp LE_OP exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 37 (exp -> exp LE_OP exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 37 (exp -> exp LE_OP exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 37 (exp -> exp LE_OP exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 37 (exp -> exp LE_OP exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 37 (exp -> exp LE_OP exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 37 (exp -> exp LE_OP exp .) ]
  ! AND_ASSIGN      [ reduce using rule 37 (exp -> exp LE_OP exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 37 (exp -> exp LE_OP exp .) ]
  ! OR_ASSIGN       [ reduce using rule 37 (exp -> exp LE_OP exp .) ]
  ! EQUALS          [ reduce using rule 37 (exp -> exp LE_OP exp .) ]
  ! ADD             [ shift and go to state 70 ]
  ! MINUS           [ shift and go to state 60 ]
  ! MULT            [ shift and go to state 61 ]
  ! DIV             [ shift and go to state 59 ]
  ! MOD             [ shift and go to state 79 ]
  ! L_OP            [ shift and go to state 76 ]
  ! G_OP            [ shift and go to state 64 ]
  ! LE_OP           [ shift and go to state 62 ]
  ! GE_OP           [ shift and go to state 71 ]


state 105

    (49) exp -> exp RIGHT_ASSIGN exp .
    (30) exp -> exp . ADD exp
    (31) exp -> exp . MINUS exp
    (32) exp -> exp . MULT exp
    (33) exp -> exp . DIV exp
    (34) exp -> exp . MOD exp
    (35) exp -> exp . L_OP exp
    (36) exp -> exp . G_OP exp
    (37) exp -> exp . LE_OP exp
    (38) exp -> exp . GE_OP exp
    (39) exp -> exp . NOTEQUALS exp
    (40) exp -> exp . EQUALS_OP exp
    (41) exp -> exp . OR_OP exp
    (42) exp -> exp . AND_OP exp
    (43) exp -> exp . MUL_ASSIGN exp
    (44) exp -> exp . DIV_ASSIGN exp
    (45) exp -> exp . MOD_ASSIGN exp
    (46) exp -> exp . ADD_ASSIGN exp
    (47) exp -> exp . SUB_ASSIGN exp
    (48) exp -> exp . LEFT_ASSIGN exp
    (49) exp -> exp . RIGHT_ASSIGN exp
    (50) exp -> exp . AND_ASSIGN exp
    (51) exp -> exp . XOR_ASSIGN exp
    (52) exp -> exp . OR_ASSIGN exp
    (53) exp -> exp . EQUALS exp

    SEMI_COLON      reduce using rule 49 (exp -> exp RIGHT_ASSIGN exp .)
    ADD             reduce using rule 49 (exp -> exp RIGHT_ASSIGN exp .)
    MINUS           reduce using rule 49 (exp -> exp RIGHT_ASSIGN exp .)
    MULT            reduce using rule 49 (exp -> exp RIGHT_ASSIGN exp .)
    DIV             reduce using rule 49 (exp -> exp RIGHT_ASSIGN exp .)
    MOD             reduce using rule 49 (exp -> exp RIGHT_ASSIGN exp .)
    L_OP            reduce using rule 49 (exp -> exp RIGHT_ASSIGN exp .)
    G_OP            reduce using rule 49 (exp -> exp RIGHT_ASSIGN exp .)
    LE_OP           reduce using rule 49 (exp -> exp RIGHT_ASSIGN exp .)
    GE_OP           reduce using rule 49 (exp -> exp RIGHT_ASSIGN exp .)
    NOTEQUALS       reduce using rule 49 (exp -> exp RIGHT_ASSIGN exp .)
    EQUALS_OP       reduce using rule 49 (exp -> exp RIGHT_ASSIGN exp .)
    OR_OP           reduce using rule 49 (exp -> exp RIGHT_ASSIGN exp .)
    AND_OP          reduce using rule 49 (exp -> exp RIGHT_ASSIGN exp .)
    RPAREN          reduce using rule 49 (exp -> exp RIGHT_ASSIGN exp .)
    COMMA           reduce using rule 49 (exp -> exp RIGHT_ASSIGN exp .)
    MUL_ASSIGN      shift and go to state 77
    DIV_ASSIGN      shift and go to state 57
    MOD_ASSIGN      shift and go to state 73
    ADD_ASSIGN      shift and go to state 67
    SUB_ASSIGN      shift and go to state 72
    LEFT_ASSIGN     shift and go to state 78
    RIGHT_ASSIGN    shift and go to state 63
    AND_ASSIGN      shift and go to state 66
    XOR_ASSIGN      shift and go to state 74
    OR_ASSIGN       shift and go to state 75
    EQUALS          shift and go to state 68

  ! MUL_ASSIGN      [ reduce using rule 49 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 49 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 49 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 49 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 49 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 49 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 49 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! AND_ASSIGN      [ reduce using rule 49 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 49 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! OR_ASSIGN       [ reduce using rule 49 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! EQUALS          [ reduce using rule 49 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! ADD             [ shift and go to state 70 ]
  ! MINUS           [ shift and go to state 60 ]
  ! MULT            [ shift and go to state 61 ]
  ! DIV             [ shift and go to state 59 ]
  ! MOD             [ shift and go to state 79 ]
  ! L_OP            [ shift and go to state 76 ]
  ! G_OP            [ shift and go to state 64 ]
  ! LE_OP           [ shift and go to state 62 ]
  ! GE_OP           [ shift and go to state 71 ]
  ! NOTEQUALS       [ shift and go to state 55 ]
  ! EQUALS_OP       [ shift and go to state 56 ]
  ! OR_OP           [ shift and go to state 65 ]
  ! AND_OP          [ shift and go to state 69 ]


state 106

    (36) exp -> exp G_OP exp .
    (30) exp -> exp . ADD exp
    (31) exp -> exp . MINUS exp
    (32) exp -> exp . MULT exp
    (33) exp -> exp . DIV exp
    (34) exp -> exp . MOD exp
    (35) exp -> exp . L_OP exp
    (36) exp -> exp . G_OP exp
    (37) exp -> exp . LE_OP exp
    (38) exp -> exp . GE_OP exp
    (39) exp -> exp . NOTEQUALS exp
    (40) exp -> exp . EQUALS_OP exp
    (41) exp -> exp . OR_OP exp
    (42) exp -> exp . AND_OP exp
    (43) exp -> exp . MUL_ASSIGN exp
    (44) exp -> exp . DIV_ASSIGN exp
    (45) exp -> exp . MOD_ASSIGN exp
    (46) exp -> exp . ADD_ASSIGN exp
    (47) exp -> exp . SUB_ASSIGN exp
    (48) exp -> exp . LEFT_ASSIGN exp
    (49) exp -> exp . RIGHT_ASSIGN exp
    (50) exp -> exp . AND_ASSIGN exp
    (51) exp -> exp . XOR_ASSIGN exp
    (52) exp -> exp . OR_ASSIGN exp
    (53) exp -> exp . EQUALS exp

    SEMI_COLON      reduce using rule 36 (exp -> exp G_OP exp .)
    ADD             reduce using rule 36 (exp -> exp G_OP exp .)
    MINUS           reduce using rule 36 (exp -> exp G_OP exp .)
    MULT            reduce using rule 36 (exp -> exp G_OP exp .)
    DIV             reduce using rule 36 (exp -> exp G_OP exp .)
    MOD             reduce using rule 36 (exp -> exp G_OP exp .)
    L_OP            reduce using rule 36 (exp -> exp G_OP exp .)
    G_OP            reduce using rule 36 (exp -> exp G_OP exp .)
    LE_OP           reduce using rule 36 (exp -> exp G_OP exp .)
    GE_OP           reduce using rule 36 (exp -> exp G_OP exp .)
    RPAREN          reduce using rule 36 (exp -> exp G_OP exp .)
    COMMA           reduce using rule 36 (exp -> exp G_OP exp .)
    NOTEQUALS       shift and go to state 55
    EQUALS_OP       shift and go to state 56
    OR_OP           shift and go to state 65
    AND_OP          shift and go to state 69
    MUL_ASSIGN      shift and go to state 77
    DIV_ASSIGN      shift and go to state 57
    MOD_ASSIGN      shift and go to state 73
    ADD_ASSIGN      shift and go to state 67
    SUB_ASSIGN      shift and go to state 72
    LEFT_ASSIGN     shift and go to state 78
    RIGHT_ASSIGN    shift and go to state 63
    AND_ASSIGN      shift and go to state 66
    XOR_ASSIGN      shift and go to state 74
    OR_ASSIGN       shift and go to state 75
    EQUALS          shift and go to state 68

  ! NOTEQUALS       [ reduce using rule 36 (exp -> exp G_OP exp .) ]
  ! EQUALS_OP       [ reduce using rule 36 (exp -> exp G_OP exp .) ]
  ! OR_OP           [ reduce using rule 36 (exp -> exp G_OP exp .) ]
  ! AND_OP          [ reduce using rule 36 (exp -> exp G_OP exp .) ]
  ! MUL_ASSIGN      [ reduce using rule 36 (exp -> exp G_OP exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 36 (exp -> exp G_OP exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 36 (exp -> exp G_OP exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 36 (exp -> exp G_OP exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 36 (exp -> exp G_OP exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 36 (exp -> exp G_OP exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 36 (exp -> exp G_OP exp .) ]
  ! AND_ASSIGN      [ reduce using rule 36 (exp -> exp G_OP exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 36 (exp -> exp G_OP exp .) ]
  ! OR_ASSIGN       [ reduce using rule 36 (exp -> exp G_OP exp .) ]
  ! EQUALS          [ reduce using rule 36 (exp -> exp G_OP exp .) ]
  ! ADD             [ shift and go to state 70 ]
  ! MINUS           [ shift and go to state 60 ]
  ! MULT            [ shift and go to state 61 ]
  ! DIV             [ shift and go to state 59 ]
  ! MOD             [ shift and go to state 79 ]
  ! L_OP            [ shift and go to state 76 ]
  ! G_OP            [ shift and go to state 64 ]
  ! LE_OP           [ shift and go to state 62 ]
  ! GE_OP           [ shift and go to state 71 ]


state 107

    (41) exp -> exp OR_OP exp .
    (30) exp -> exp . ADD exp
    (31) exp -> exp . MINUS exp
    (32) exp -> exp . MULT exp
    (33) exp -> exp . DIV exp
    (34) exp -> exp . MOD exp
    (35) exp -> exp . L_OP exp
    (36) exp -> exp . G_OP exp
    (37) exp -> exp . LE_OP exp
    (38) exp -> exp . GE_OP exp
    (39) exp -> exp . NOTEQUALS exp
    (40) exp -> exp . EQUALS_OP exp
    (41) exp -> exp . OR_OP exp
    (42) exp -> exp . AND_OP exp
    (43) exp -> exp . MUL_ASSIGN exp
    (44) exp -> exp . DIV_ASSIGN exp
    (45) exp -> exp . MOD_ASSIGN exp
    (46) exp -> exp . ADD_ASSIGN exp
    (47) exp -> exp . SUB_ASSIGN exp
    (48) exp -> exp . LEFT_ASSIGN exp
    (49) exp -> exp . RIGHT_ASSIGN exp
    (50) exp -> exp . AND_ASSIGN exp
    (51) exp -> exp . XOR_ASSIGN exp
    (52) exp -> exp . OR_ASSIGN exp
    (53) exp -> exp . EQUALS exp

    SEMI_COLON      reduce using rule 41 (exp -> exp OR_OP exp .)
    ADD             reduce using rule 41 (exp -> exp OR_OP exp .)
    MINUS           reduce using rule 41 (exp -> exp OR_OP exp .)
    MULT            reduce using rule 41 (exp -> exp OR_OP exp .)
    DIV             reduce using rule 41 (exp -> exp OR_OP exp .)
    MOD             reduce using rule 41 (exp -> exp OR_OP exp .)
    L_OP            reduce using rule 41 (exp -> exp OR_OP exp .)
    G_OP            reduce using rule 41 (exp -> exp OR_OP exp .)
    LE_OP           reduce using rule 41 (exp -> exp OR_OP exp .)
    GE_OP           reduce using rule 41 (exp -> exp OR_OP exp .)
    NOTEQUALS       reduce using rule 41 (exp -> exp OR_OP exp .)
    EQUALS_OP       reduce using rule 41 (exp -> exp OR_OP exp .)
    OR_OP           reduce using rule 41 (exp -> exp OR_OP exp .)
    AND_OP          reduce using rule 41 (exp -> exp OR_OP exp .)
    RPAREN          reduce using rule 41 (exp -> exp OR_OP exp .)
    COMMA           reduce using rule 41 (exp -> exp OR_OP exp .)
    MUL_ASSIGN      shift and go to state 77
    DIV_ASSIGN      shift and go to state 57
    MOD_ASSIGN      shift and go to state 73
    ADD_ASSIGN      shift and go to state 67
    SUB_ASSIGN      shift and go to state 72
    LEFT_ASSIGN     shift and go to state 78
    RIGHT_ASSIGN    shift and go to state 63
    AND_ASSIGN      shift and go to state 66
    XOR_ASSIGN      shift and go to state 74
    OR_ASSIGN       shift and go to state 75
    EQUALS          shift and go to state 68

  ! MUL_ASSIGN      [ reduce using rule 41 (exp -> exp OR_OP exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 41 (exp -> exp OR_OP exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 41 (exp -> exp OR_OP exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 41 (exp -> exp OR_OP exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 41 (exp -> exp OR_OP exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 41 (exp -> exp OR_OP exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 41 (exp -> exp OR_OP exp .) ]
  ! AND_ASSIGN      [ reduce using rule 41 (exp -> exp OR_OP exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 41 (exp -> exp OR_OP exp .) ]
  ! OR_ASSIGN       [ reduce using rule 41 (exp -> exp OR_OP exp .) ]
  ! EQUALS          [ reduce using rule 41 (exp -> exp OR_OP exp .) ]
  ! ADD             [ shift and go to state 70 ]
  ! MINUS           [ shift and go to state 60 ]
  ! MULT            [ shift and go to state 61 ]
  ! DIV             [ shift and go to state 59 ]
  ! MOD             [ shift and go to state 79 ]
  ! L_OP            [ shift and go to state 76 ]
  ! G_OP            [ shift and go to state 64 ]
  ! LE_OP           [ shift and go to state 62 ]
  ! GE_OP           [ shift and go to state 71 ]
  ! NOTEQUALS       [ shift and go to state 55 ]
  ! EQUALS_OP       [ shift and go to state 56 ]
  ! OR_OP           [ shift and go to state 65 ]
  ! AND_OP          [ shift and go to state 69 ]


state 108

    (50) exp -> exp AND_ASSIGN exp .
    (30) exp -> exp . ADD exp
    (31) exp -> exp . MINUS exp
    (32) exp -> exp . MULT exp
    (33) exp -> exp . DIV exp
    (34) exp -> exp . MOD exp
    (35) exp -> exp . L_OP exp
    (36) exp -> exp . G_OP exp
    (37) exp -> exp . LE_OP exp
    (38) exp -> exp . GE_OP exp
    (39) exp -> exp . NOTEQUALS exp
    (40) exp -> exp . EQUALS_OP exp
    (41) exp -> exp . OR_OP exp
    (42) exp -> exp . AND_OP exp
    (43) exp -> exp . MUL_ASSIGN exp
    (44) exp -> exp . DIV_ASSIGN exp
    (45) exp -> exp . MOD_ASSIGN exp
    (46) exp -> exp . ADD_ASSIGN exp
    (47) exp -> exp . SUB_ASSIGN exp
    (48) exp -> exp . LEFT_ASSIGN exp
    (49) exp -> exp . RIGHT_ASSIGN exp
    (50) exp -> exp . AND_ASSIGN exp
    (51) exp -> exp . XOR_ASSIGN exp
    (52) exp -> exp . OR_ASSIGN exp
    (53) exp -> exp . EQUALS exp

    SEMI_COLON      reduce using rule 50 (exp -> exp AND_ASSIGN exp .)
    ADD             reduce using rule 50 (exp -> exp AND_ASSIGN exp .)
    MINUS           reduce using rule 50 (exp -> exp AND_ASSIGN exp .)
    MULT            reduce using rule 50 (exp -> exp AND_ASSIGN exp .)
    DIV             reduce using rule 50 (exp -> exp AND_ASSIGN exp .)
    MOD             reduce using rule 50 (exp -> exp AND_ASSIGN exp .)
    L_OP            reduce using rule 50 (exp -> exp AND_ASSIGN exp .)
    G_OP            reduce using rule 50 (exp -> exp AND_ASSIGN exp .)
    LE_OP           reduce using rule 50 (exp -> exp AND_ASSIGN exp .)
    GE_OP           reduce using rule 50 (exp -> exp AND_ASSIGN exp .)
    NOTEQUALS       reduce using rule 50 (exp -> exp AND_ASSIGN exp .)
    EQUALS_OP       reduce using rule 50 (exp -> exp AND_ASSIGN exp .)
    OR_OP           reduce using rule 50 (exp -> exp AND_ASSIGN exp .)
    AND_OP          reduce using rule 50 (exp -> exp AND_ASSIGN exp .)
    RPAREN          reduce using rule 50 (exp -> exp AND_ASSIGN exp .)
    COMMA           reduce using rule 50 (exp -> exp AND_ASSIGN exp .)
    MUL_ASSIGN      shift and go to state 77
    DIV_ASSIGN      shift and go to state 57
    MOD_ASSIGN      shift and go to state 73
    ADD_ASSIGN      shift and go to state 67
    SUB_ASSIGN      shift and go to state 72
    LEFT_ASSIGN     shift and go to state 78
    RIGHT_ASSIGN    shift and go to state 63
    AND_ASSIGN      shift and go to state 66
    XOR_ASSIGN      shift and go to state 74
    OR_ASSIGN       shift and go to state 75
    EQUALS          shift and go to state 68

  ! MUL_ASSIGN      [ reduce using rule 50 (exp -> exp AND_ASSIGN exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 50 (exp -> exp AND_ASSIGN exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 50 (exp -> exp AND_ASSIGN exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 50 (exp -> exp AND_ASSIGN exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 50 (exp -> exp AND_ASSIGN exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 50 (exp -> exp AND_ASSIGN exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 50 (exp -> exp AND_ASSIGN exp .) ]
  ! AND_ASSIGN      [ reduce using rule 50 (exp -> exp AND_ASSIGN exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 50 (exp -> exp AND_ASSIGN exp .) ]
  ! OR_ASSIGN       [ reduce using rule 50 (exp -> exp AND_ASSIGN exp .) ]
  ! EQUALS          [ reduce using rule 50 (exp -> exp AND_ASSIGN exp .) ]
  ! ADD             [ shift and go to state 70 ]
  ! MINUS           [ shift and go to state 60 ]
  ! MULT            [ shift and go to state 61 ]
  ! DIV             [ shift and go to state 59 ]
  ! MOD             [ shift and go to state 79 ]
  ! L_OP            [ shift and go to state 76 ]
  ! G_OP            [ shift and go to state 64 ]
  ! LE_OP           [ shift and go to state 62 ]
  ! GE_OP           [ shift and go to state 71 ]
  ! NOTEQUALS       [ shift and go to state 55 ]
  ! EQUALS_OP       [ shift and go to state 56 ]
  ! OR_OP           [ shift and go to state 65 ]
  ! AND_OP          [ shift and go to state 69 ]


state 109

    (46) exp -> exp ADD_ASSIGN exp .
    (30) exp -> exp . ADD exp
    (31) exp -> exp . MINUS exp
    (32) exp -> exp . MULT exp
    (33) exp -> exp . DIV exp
    (34) exp -> exp . MOD exp
    (35) exp -> exp . L_OP exp
    (36) exp -> exp . G_OP exp
    (37) exp -> exp . LE_OP exp
    (38) exp -> exp . GE_OP exp
    (39) exp -> exp . NOTEQUALS exp
    (40) exp -> exp . EQUALS_OP exp
    (41) exp -> exp . OR_OP exp
    (42) exp -> exp . AND_OP exp
    (43) exp -> exp . MUL_ASSIGN exp
    (44) exp -> exp . DIV_ASSIGN exp
    (45) exp -> exp . MOD_ASSIGN exp
    (46) exp -> exp . ADD_ASSIGN exp
    (47) exp -> exp . SUB_ASSIGN exp
    (48) exp -> exp . LEFT_ASSIGN exp
    (49) exp -> exp . RIGHT_ASSIGN exp
    (50) exp -> exp . AND_ASSIGN exp
    (51) exp -> exp . XOR_ASSIGN exp
    (52) exp -> exp . OR_ASSIGN exp
    (53) exp -> exp . EQUALS exp

    SEMI_COLON      reduce using rule 46 (exp -> exp ADD_ASSIGN exp .)
    ADD             reduce using rule 46 (exp -> exp ADD_ASSIGN exp .)
    MINUS           reduce using rule 46 (exp -> exp ADD_ASSIGN exp .)
    MULT            reduce using rule 46 (exp -> exp ADD_ASSIGN exp .)
    DIV             reduce using rule 46 (exp -> exp ADD_ASSIGN exp .)
    MOD             reduce using rule 46 (exp -> exp ADD_ASSIGN exp .)
    L_OP            reduce using rule 46 (exp -> exp ADD_ASSIGN exp .)
    G_OP            reduce using rule 46 (exp -> exp ADD_ASSIGN exp .)
    LE_OP           reduce using rule 46 (exp -> exp ADD_ASSIGN exp .)
    GE_OP           reduce using rule 46 (exp -> exp ADD_ASSIGN exp .)
    NOTEQUALS       reduce using rule 46 (exp -> exp ADD_ASSIGN exp .)
    EQUALS_OP       reduce using rule 46 (exp -> exp ADD_ASSIGN exp .)
    OR_OP           reduce using rule 46 (exp -> exp ADD_ASSIGN exp .)
    AND_OP          reduce using rule 46 (exp -> exp ADD_ASSIGN exp .)
    RPAREN          reduce using rule 46 (exp -> exp ADD_ASSIGN exp .)
    COMMA           reduce using rule 46 (exp -> exp ADD_ASSIGN exp .)
    MUL_ASSIGN      shift and go to state 77
    DIV_ASSIGN      shift and go to state 57
    MOD_ASSIGN      shift and go to state 73
    ADD_ASSIGN      shift and go to state 67
    SUB_ASSIGN      shift and go to state 72
    LEFT_ASSIGN     shift and go to state 78
    RIGHT_ASSIGN    shift and go to state 63
    AND_ASSIGN      shift and go to state 66
    XOR_ASSIGN      shift and go to state 74
    OR_ASSIGN       shift and go to state 75
    EQUALS          shift and go to state 68

  ! MUL_ASSIGN      [ reduce using rule 46 (exp -> exp ADD_ASSIGN exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 46 (exp -> exp ADD_ASSIGN exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 46 (exp -> exp ADD_ASSIGN exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 46 (exp -> exp ADD_ASSIGN exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 46 (exp -> exp ADD_ASSIGN exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 46 (exp -> exp ADD_ASSIGN exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 46 (exp -> exp ADD_ASSIGN exp .) ]
  ! AND_ASSIGN      [ reduce using rule 46 (exp -> exp ADD_ASSIGN exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 46 (exp -> exp ADD_ASSIGN exp .) ]
  ! OR_ASSIGN       [ reduce using rule 46 (exp -> exp ADD_ASSIGN exp .) ]
  ! EQUALS          [ reduce using rule 46 (exp -> exp ADD_ASSIGN exp .) ]
  ! ADD             [ shift and go to state 70 ]
  ! MINUS           [ shift and go to state 60 ]
  ! MULT            [ shift and go to state 61 ]
  ! DIV             [ shift and go to state 59 ]
  ! MOD             [ shift and go to state 79 ]
  ! L_OP            [ shift and go to state 76 ]
  ! G_OP            [ shift and go to state 64 ]
  ! LE_OP           [ shift and go to state 62 ]
  ! GE_OP           [ shift and go to state 71 ]
  ! NOTEQUALS       [ shift and go to state 55 ]
  ! EQUALS_OP       [ shift and go to state 56 ]
  ! OR_OP           [ shift and go to state 65 ]
  ! AND_OP          [ shift and go to state 69 ]


state 110

    (53) exp -> exp EQUALS exp .
    (30) exp -> exp . ADD exp
    (31) exp -> exp . MINUS exp
    (32) exp -> exp . MULT exp
    (33) exp -> exp . DIV exp
    (34) exp -> exp . MOD exp
    (35) exp -> exp . L_OP exp
    (36) exp -> exp . G_OP exp
    (37) exp -> exp . LE_OP exp
    (38) exp -> exp . GE_OP exp
    (39) exp -> exp . NOTEQUALS exp
    (40) exp -> exp . EQUALS_OP exp
    (41) exp -> exp . OR_OP exp
    (42) exp -> exp . AND_OP exp
    (43) exp -> exp . MUL_ASSIGN exp
    (44) exp -> exp . DIV_ASSIGN exp
    (45) exp -> exp . MOD_ASSIGN exp
    (46) exp -> exp . ADD_ASSIGN exp
    (47) exp -> exp . SUB_ASSIGN exp
    (48) exp -> exp . LEFT_ASSIGN exp
    (49) exp -> exp . RIGHT_ASSIGN exp
    (50) exp -> exp . AND_ASSIGN exp
    (51) exp -> exp . XOR_ASSIGN exp
    (52) exp -> exp . OR_ASSIGN exp
    (53) exp -> exp . EQUALS exp

    SEMI_COLON      reduce using rule 53 (exp -> exp EQUALS exp .)
    ADD             reduce using rule 53 (exp -> exp EQUALS exp .)
    MINUS           reduce using rule 53 (exp -> exp EQUALS exp .)
    MULT            reduce using rule 53 (exp -> exp EQUALS exp .)
    DIV             reduce using rule 53 (exp -> exp EQUALS exp .)
    MOD             reduce using rule 53 (exp -> exp EQUALS exp .)
    L_OP            reduce using rule 53 (exp -> exp EQUALS exp .)
    G_OP            reduce using rule 53 (exp -> exp EQUALS exp .)
    LE_OP           reduce using rule 53 (exp -> exp EQUALS exp .)
    GE_OP           reduce using rule 53 (exp -> exp EQUALS exp .)
    NOTEQUALS       reduce using rule 53 (exp -> exp EQUALS exp .)
    EQUALS_OP       reduce using rule 53 (exp -> exp EQUALS exp .)
    OR_OP           reduce using rule 53 (exp -> exp EQUALS exp .)
    AND_OP          reduce using rule 53 (exp -> exp EQUALS exp .)
    RPAREN          reduce using rule 53 (exp -> exp EQUALS exp .)
    COMMA           reduce using rule 53 (exp -> exp EQUALS exp .)
    MUL_ASSIGN      shift and go to state 77
    DIV_ASSIGN      shift and go to state 57
    MOD_ASSIGN      shift and go to state 73
    ADD_ASSIGN      shift and go to state 67
    SUB_ASSIGN      shift and go to state 72
    LEFT_ASSIGN     shift and go to state 78
    RIGHT_ASSIGN    shift and go to state 63
    AND_ASSIGN      shift and go to state 66
    XOR_ASSIGN      shift and go to state 74
    OR_ASSIGN       shift and go to state 75
    EQUALS          shift and go to state 68

  ! MUL_ASSIGN      [ reduce using rule 53 (exp -> exp EQUALS exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 53 (exp -> exp EQUALS exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 53 (exp -> exp EQUALS exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 53 (exp -> exp EQUALS exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 53 (exp -> exp EQUALS exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 53 (exp -> exp EQUALS exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 53 (exp -> exp EQUALS exp .) ]
  ! AND_ASSIGN      [ reduce using rule 53 (exp -> exp EQUALS exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 53 (exp -> exp EQUALS exp .) ]
  ! OR_ASSIGN       [ reduce using rule 53 (exp -> exp EQUALS exp .) ]
  ! EQUALS          [ reduce using rule 53 (exp -> exp EQUALS exp .) ]
  ! ADD             [ shift and go to state 70 ]
  ! MINUS           [ shift and go to state 60 ]
  ! MULT            [ shift and go to state 61 ]
  ! DIV             [ shift and go to state 59 ]
  ! MOD             [ shift and go to state 79 ]
  ! L_OP            [ shift and go to state 76 ]
  ! G_OP            [ shift and go to state 64 ]
  ! LE_OP           [ shift and go to state 62 ]
  ! GE_OP           [ shift and go to state 71 ]
  ! NOTEQUALS       [ shift and go to state 55 ]
  ! EQUALS_OP       [ shift and go to state 56 ]
  ! OR_OP           [ shift and go to state 65 ]
  ! AND_OP          [ shift and go to state 69 ]


state 111

    (42) exp -> exp AND_OP exp .
    (30) exp -> exp . ADD exp
    (31) exp -> exp . MINUS exp
    (32) exp -> exp . MULT exp
    (33) exp -> exp . DIV exp
    (34) exp -> exp . MOD exp
    (35) exp -> exp . L_OP exp
    (36) exp -> exp . G_OP exp
    (37) exp -> exp . LE_OP exp
    (38) exp -> exp . GE_OP exp
    (39) exp -> exp . NOTEQUALS exp
    (40) exp -> exp . EQUALS_OP exp
    (41) exp -> exp . OR_OP exp
    (42) exp -> exp . AND_OP exp
    (43) exp -> exp . MUL_ASSIGN exp
    (44) exp -> exp . DIV_ASSIGN exp
    (45) exp -> exp . MOD_ASSIGN exp
    (46) exp -> exp . ADD_ASSIGN exp
    (47) exp -> exp . SUB_ASSIGN exp
    (48) exp -> exp . LEFT_ASSIGN exp
    (49) exp -> exp . RIGHT_ASSIGN exp
    (50) exp -> exp . AND_ASSIGN exp
    (51) exp -> exp . XOR_ASSIGN exp
    (52) exp -> exp . OR_ASSIGN exp
    (53) exp -> exp . EQUALS exp

    SEMI_COLON      reduce using rule 42 (exp -> exp AND_OP exp .)
    ADD             reduce using rule 42 (exp -> exp AND_OP exp .)
    MINUS           reduce using rule 42 (exp -> exp AND_OP exp .)
    MULT            reduce using rule 42 (exp -> exp AND_OP exp .)
    DIV             reduce using rule 42 (exp -> exp AND_OP exp .)
    MOD             reduce using rule 42 (exp -> exp AND_OP exp .)
    L_OP            reduce using rule 42 (exp -> exp AND_OP exp .)
    G_OP            reduce using rule 42 (exp -> exp AND_OP exp .)
    LE_OP           reduce using rule 42 (exp -> exp AND_OP exp .)
    GE_OP           reduce using rule 42 (exp -> exp AND_OP exp .)
    NOTEQUALS       reduce using rule 42 (exp -> exp AND_OP exp .)
    EQUALS_OP       reduce using rule 42 (exp -> exp AND_OP exp .)
    OR_OP           reduce using rule 42 (exp -> exp AND_OP exp .)
    AND_OP          reduce using rule 42 (exp -> exp AND_OP exp .)
    RPAREN          reduce using rule 42 (exp -> exp AND_OP exp .)
    COMMA           reduce using rule 42 (exp -> exp AND_OP exp .)
    MUL_ASSIGN      shift and go to state 77
    DIV_ASSIGN      shift and go to state 57
    MOD_ASSIGN      shift and go to state 73
    ADD_ASSIGN      shift and go to state 67
    SUB_ASSIGN      shift and go to state 72
    LEFT_ASSIGN     shift and go to state 78
    RIGHT_ASSIGN    shift and go to state 63
    AND_ASSIGN      shift and go to state 66
    XOR_ASSIGN      shift and go to state 74
    OR_ASSIGN       shift and go to state 75
    EQUALS          shift and go to state 68

  ! MUL_ASSIGN      [ reduce using rule 42 (exp -> exp AND_OP exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 42 (exp -> exp AND_OP exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 42 (exp -> exp AND_OP exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 42 (exp -> exp AND_OP exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 42 (exp -> exp AND_OP exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 42 (exp -> exp AND_OP exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 42 (exp -> exp AND_OP exp .) ]
  ! AND_ASSIGN      [ reduce using rule 42 (exp -> exp AND_OP exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 42 (exp -> exp AND_OP exp .) ]
  ! OR_ASSIGN       [ reduce using rule 42 (exp -> exp AND_OP exp .) ]
  ! EQUALS          [ reduce using rule 42 (exp -> exp AND_OP exp .) ]
  ! ADD             [ shift and go to state 70 ]
  ! MINUS           [ shift and go to state 60 ]
  ! MULT            [ shift and go to state 61 ]
  ! DIV             [ shift and go to state 59 ]
  ! MOD             [ shift and go to state 79 ]
  ! L_OP            [ shift and go to state 76 ]
  ! G_OP            [ shift and go to state 64 ]
  ! LE_OP           [ shift and go to state 62 ]
  ! GE_OP           [ shift and go to state 71 ]
  ! NOTEQUALS       [ shift and go to state 55 ]
  ! EQUALS_OP       [ shift and go to state 56 ]
  ! OR_OP           [ shift and go to state 65 ]
  ! AND_OP          [ shift and go to state 69 ]


state 112

    (30) exp -> exp ADD exp .
    (30) exp -> exp . ADD exp
    (31) exp -> exp . MINUS exp
    (32) exp -> exp . MULT exp
    (33) exp -> exp . DIV exp
    (34) exp -> exp . MOD exp
    (35) exp -> exp . L_OP exp
    (36) exp -> exp . G_OP exp
    (37) exp -> exp . LE_OP exp
    (38) exp -> exp . GE_OP exp
    (39) exp -> exp . NOTEQUALS exp
    (40) exp -> exp . EQUALS_OP exp
    (41) exp -> exp . OR_OP exp
    (42) exp -> exp . AND_OP exp
    (43) exp -> exp . MUL_ASSIGN exp
    (44) exp -> exp . DIV_ASSIGN exp
    (45) exp -> exp . MOD_ASSIGN exp
    (46) exp -> exp . ADD_ASSIGN exp
    (47) exp -> exp . SUB_ASSIGN exp
    (48) exp -> exp . LEFT_ASSIGN exp
    (49) exp -> exp . RIGHT_ASSIGN exp
    (50) exp -> exp . AND_ASSIGN exp
    (51) exp -> exp . XOR_ASSIGN exp
    (52) exp -> exp . OR_ASSIGN exp
    (53) exp -> exp . EQUALS exp

    SEMI_COLON      reduce using rule 30 (exp -> exp ADD exp .)
    ADD             reduce using rule 30 (exp -> exp ADD exp .)
    MINUS           reduce using rule 30 (exp -> exp ADD exp .)
    RPAREN          reduce using rule 30 (exp -> exp ADD exp .)
    COMMA           reduce using rule 30 (exp -> exp ADD exp .)
    MULT            shift and go to state 61
    DIV             shift and go to state 59
    MOD             shift and go to state 79
    L_OP            shift and go to state 76
    G_OP            shift and go to state 64
    LE_OP           shift and go to state 62
    GE_OP           shift and go to state 71
    NOTEQUALS       shift and go to state 55
    EQUALS_OP       shift and go to state 56
    OR_OP           shift and go to state 65
    AND_OP          shift and go to state 69
    MUL_ASSIGN      shift and go to state 77
    DIV_ASSIGN      shift and go to state 57
    MOD_ASSIGN      shift and go to state 73
    ADD_ASSIGN      shift and go to state 67
    SUB_ASSIGN      shift and go to state 72
    LEFT_ASSIGN     shift and go to state 78
    RIGHT_ASSIGN    shift and go to state 63
    AND_ASSIGN      shift and go to state 66
    XOR_ASSIGN      shift and go to state 74
    OR_ASSIGN       shift and go to state 75
    EQUALS          shift and go to state 68

  ! MULT            [ reduce using rule 30 (exp -> exp ADD exp .) ]
  ! DIV             [ reduce using rule 30 (exp -> exp ADD exp .) ]
  ! MOD             [ reduce using rule 30 (exp -> exp ADD exp .) ]
  ! L_OP            [ reduce using rule 30 (exp -> exp ADD exp .) ]
  ! G_OP            [ reduce using rule 30 (exp -> exp ADD exp .) ]
  ! LE_OP           [ reduce using rule 30 (exp -> exp ADD exp .) ]
  ! GE_OP           [ reduce using rule 30 (exp -> exp ADD exp .) ]
  ! NOTEQUALS       [ reduce using rule 30 (exp -> exp ADD exp .) ]
  ! EQUALS_OP       [ reduce using rule 30 (exp -> exp ADD exp .) ]
  ! OR_OP           [ reduce using rule 30 (exp -> exp ADD exp .) ]
  ! AND_OP          [ reduce using rule 30 (exp -> exp ADD exp .) ]
  ! MUL_ASSIGN      [ reduce using rule 30 (exp -> exp ADD exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 30 (exp -> exp ADD exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 30 (exp -> exp ADD exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 30 (exp -> exp ADD exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 30 (exp -> exp ADD exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 30 (exp -> exp ADD exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 30 (exp -> exp ADD exp .) ]
  ! AND_ASSIGN      [ reduce using rule 30 (exp -> exp ADD exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 30 (exp -> exp ADD exp .) ]
  ! OR_ASSIGN       [ reduce using rule 30 (exp -> exp ADD exp .) ]
  ! EQUALS          [ reduce using rule 30 (exp -> exp ADD exp .) ]
  ! ADD             [ shift and go to state 70 ]
  ! MINUS           [ shift and go to state 60 ]


state 113

    (38) exp -> exp GE_OP exp .
    (30) exp -> exp . ADD exp
    (31) exp -> exp . MINUS exp
    (32) exp -> exp . MULT exp
    (33) exp -> exp . DIV exp
    (34) exp -> exp . MOD exp
    (35) exp -> exp . L_OP exp
    (36) exp -> exp . G_OP exp
    (37) exp -> exp . LE_OP exp
    (38) exp -> exp . GE_OP exp
    (39) exp -> exp . NOTEQUALS exp
    (40) exp -> exp . EQUALS_OP exp
    (41) exp -> exp . OR_OP exp
    (42) exp -> exp . AND_OP exp
    (43) exp -> exp . MUL_ASSIGN exp
    (44) exp -> exp . DIV_ASSIGN exp
    (45) exp -> exp . MOD_ASSIGN exp
    (46) exp -> exp . ADD_ASSIGN exp
    (47) exp -> exp . SUB_ASSIGN exp
    (48) exp -> exp . LEFT_ASSIGN exp
    (49) exp -> exp . RIGHT_ASSIGN exp
    (50) exp -> exp . AND_ASSIGN exp
    (51) exp -> exp . XOR_ASSIGN exp
    (52) exp -> exp . OR_ASSIGN exp
    (53) exp -> exp . EQUALS exp

    SEMI_COLON      reduce using rule 38 (exp -> exp GE_OP exp .)
    ADD             reduce using rule 38 (exp -> exp GE_OP exp .)
    MINUS           reduce using rule 38 (exp -> exp GE_OP exp .)
    MULT            reduce using rule 38 (exp -> exp GE_OP exp .)
    DIV             reduce using rule 38 (exp -> exp GE_OP exp .)
    MOD             reduce using rule 38 (exp -> exp GE_OP exp .)
    L_OP            reduce using rule 38 (exp -> exp GE_OP exp .)
    G_OP            reduce using rule 38 (exp -> exp GE_OP exp .)
    LE_OP           reduce using rule 38 (exp -> exp GE_OP exp .)
    GE_OP           reduce using rule 38 (exp -> exp GE_OP exp .)
    RPAREN          reduce using rule 38 (exp -> exp GE_OP exp .)
    COMMA           reduce using rule 38 (exp -> exp GE_OP exp .)
    NOTEQUALS       shift and go to state 55
    EQUALS_OP       shift and go to state 56
    OR_OP           shift and go to state 65
    AND_OP          shift and go to state 69
    MUL_ASSIGN      shift and go to state 77
    DIV_ASSIGN      shift and go to state 57
    MOD_ASSIGN      shift and go to state 73
    ADD_ASSIGN      shift and go to state 67
    SUB_ASSIGN      shift and go to state 72
    LEFT_ASSIGN     shift and go to state 78
    RIGHT_ASSIGN    shift and go to state 63
    AND_ASSIGN      shift and go to state 66
    XOR_ASSIGN      shift and go to state 74
    OR_ASSIGN       shift and go to state 75
    EQUALS          shift and go to state 68

  ! NOTEQUALS       [ reduce using rule 38 (exp -> exp GE_OP exp .) ]
  ! EQUALS_OP       [ reduce using rule 38 (exp -> exp GE_OP exp .) ]
  ! OR_OP           [ reduce using rule 38 (exp -> exp GE_OP exp .) ]
  ! AND_OP          [ reduce using rule 38 (exp -> exp GE_OP exp .) ]
  ! MUL_ASSIGN      [ reduce using rule 38 (exp -> exp GE_OP exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 38 (exp -> exp GE_OP exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 38 (exp -> exp GE_OP exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 38 (exp -> exp GE_OP exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 38 (exp -> exp GE_OP exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 38 (exp -> exp GE_OP exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 38 (exp -> exp GE_OP exp .) ]
  ! AND_ASSIGN      [ reduce using rule 38 (exp -> exp GE_OP exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 38 (exp -> exp GE_OP exp .) ]
  ! OR_ASSIGN       [ reduce using rule 38 (exp -> exp GE_OP exp .) ]
  ! EQUALS          [ reduce using rule 38 (exp -> exp GE_OP exp .) ]
  ! ADD             [ shift and go to state 70 ]
  ! MINUS           [ shift and go to state 60 ]
  ! MULT            [ shift and go to state 61 ]
  ! DIV             [ shift and go to state 59 ]
  ! MOD             [ shift and go to state 79 ]
  ! L_OP            [ shift and go to state 76 ]
  ! G_OP            [ shift and go to state 64 ]
  ! LE_OP           [ shift and go to state 62 ]
  ! GE_OP           [ shift and go to state 71 ]


state 114

    (47) exp -> exp SUB_ASSIGN exp .
    (30) exp -> exp . ADD exp
    (31) exp -> exp . MINUS exp
    (32) exp -> exp . MULT exp
    (33) exp -> exp . DIV exp
    (34) exp -> exp . MOD exp
    (35) exp -> exp . L_OP exp
    (36) exp -> exp . G_OP exp
    (37) exp -> exp . LE_OP exp
    (38) exp -> exp . GE_OP exp
    (39) exp -> exp . NOTEQUALS exp
    (40) exp -> exp . EQUALS_OP exp
    (41) exp -> exp . OR_OP exp
    (42) exp -> exp . AND_OP exp
    (43) exp -> exp . MUL_ASSIGN exp
    (44) exp -> exp . DIV_ASSIGN exp
    (45) exp -> exp . MOD_ASSIGN exp
    (46) exp -> exp . ADD_ASSIGN exp
    (47) exp -> exp . SUB_ASSIGN exp
    (48) exp -> exp . LEFT_ASSIGN exp
    (49) exp -> exp . RIGHT_ASSIGN exp
    (50) exp -> exp . AND_ASSIGN exp
    (51) exp -> exp . XOR_ASSIGN exp
    (52) exp -> exp . OR_ASSIGN exp
    (53) exp -> exp . EQUALS exp

    SEMI_COLON      reduce using rule 47 (exp -> exp SUB_ASSIGN exp .)
    ADD             reduce using rule 47 (exp -> exp SUB_ASSIGN exp .)
    MINUS           reduce using rule 47 (exp -> exp SUB_ASSIGN exp .)
    MULT            reduce using rule 47 (exp -> exp SUB_ASSIGN exp .)
    DIV             reduce using rule 47 (exp -> exp SUB_ASSIGN exp .)
    MOD             reduce using rule 47 (exp -> exp SUB_ASSIGN exp .)
    L_OP            reduce using rule 47 (exp -> exp SUB_ASSIGN exp .)
    G_OP            reduce using rule 47 (exp -> exp SUB_ASSIGN exp .)
    LE_OP           reduce using rule 47 (exp -> exp SUB_ASSIGN exp .)
    GE_OP           reduce using rule 47 (exp -> exp SUB_ASSIGN exp .)
    NOTEQUALS       reduce using rule 47 (exp -> exp SUB_ASSIGN exp .)
    EQUALS_OP       reduce using rule 47 (exp -> exp SUB_ASSIGN exp .)
    OR_OP           reduce using rule 47 (exp -> exp SUB_ASSIGN exp .)
    AND_OP          reduce using rule 47 (exp -> exp SUB_ASSIGN exp .)
    RPAREN          reduce using rule 47 (exp -> exp SUB_ASSIGN exp .)
    COMMA           reduce using rule 47 (exp -> exp SUB_ASSIGN exp .)
    MUL_ASSIGN      shift and go to state 77
    DIV_ASSIGN      shift and go to state 57
    MOD_ASSIGN      shift and go to state 73
    ADD_ASSIGN      shift and go to state 67
    SUB_ASSIGN      shift and go to state 72
    LEFT_ASSIGN     shift and go to state 78
    RIGHT_ASSIGN    shift and go to state 63
    AND_ASSIGN      shift and go to state 66
    XOR_ASSIGN      shift and go to state 74
    OR_ASSIGN       shift and go to state 75
    EQUALS          shift and go to state 68

  ! MUL_ASSIGN      [ reduce using rule 47 (exp -> exp SUB_ASSIGN exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 47 (exp -> exp SUB_ASSIGN exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 47 (exp -> exp SUB_ASSIGN exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 47 (exp -> exp SUB_ASSIGN exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 47 (exp -> exp SUB_ASSIGN exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 47 (exp -> exp SUB_ASSIGN exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 47 (exp -> exp SUB_ASSIGN exp .) ]
  ! AND_ASSIGN      [ reduce using rule 47 (exp -> exp SUB_ASSIGN exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 47 (exp -> exp SUB_ASSIGN exp .) ]
  ! OR_ASSIGN       [ reduce using rule 47 (exp -> exp SUB_ASSIGN exp .) ]
  ! EQUALS          [ reduce using rule 47 (exp -> exp SUB_ASSIGN exp .) ]
  ! ADD             [ shift and go to state 70 ]
  ! MINUS           [ shift and go to state 60 ]
  ! MULT            [ shift and go to state 61 ]
  ! DIV             [ shift and go to state 59 ]
  ! MOD             [ shift and go to state 79 ]
  ! L_OP            [ shift and go to state 76 ]
  ! G_OP            [ shift and go to state 64 ]
  ! LE_OP           [ shift and go to state 62 ]
  ! GE_OP           [ shift and go to state 71 ]
  ! NOTEQUALS       [ shift and go to state 55 ]
  ! EQUALS_OP       [ shift and go to state 56 ]
  ! OR_OP           [ shift and go to state 65 ]
  ! AND_OP          [ shift and go to state 69 ]


state 115

    (45) exp -> exp MOD_ASSIGN exp .
    (30) exp -> exp . ADD exp
    (31) exp -> exp . MINUS exp
    (32) exp -> exp . MULT exp
    (33) exp -> exp . DIV exp
    (34) exp -> exp . MOD exp
    (35) exp -> exp . L_OP exp
    (36) exp -> exp . G_OP exp
    (37) exp -> exp . LE_OP exp
    (38) exp -> exp . GE_OP exp
    (39) exp -> exp . NOTEQUALS exp
    (40) exp -> exp . EQUALS_OP exp
    (41) exp -> exp . OR_OP exp
    (42) exp -> exp . AND_OP exp
    (43) exp -> exp . MUL_ASSIGN exp
    (44) exp -> exp . DIV_ASSIGN exp
    (45) exp -> exp . MOD_ASSIGN exp
    (46) exp -> exp . ADD_ASSIGN exp
    (47) exp -> exp . SUB_ASSIGN exp
    (48) exp -> exp . LEFT_ASSIGN exp
    (49) exp -> exp . RIGHT_ASSIGN exp
    (50) exp -> exp . AND_ASSIGN exp
    (51) exp -> exp . XOR_ASSIGN exp
    (52) exp -> exp . OR_ASSIGN exp
    (53) exp -> exp . EQUALS exp

    SEMI_COLON      reduce using rule 45 (exp -> exp MOD_ASSIGN exp .)
    ADD             reduce using rule 45 (exp -> exp MOD_ASSIGN exp .)
    MINUS           reduce using rule 45 (exp -> exp MOD_ASSIGN exp .)
    MULT            reduce using rule 45 (exp -> exp MOD_ASSIGN exp .)
    DIV             reduce using rule 45 (exp -> exp MOD_ASSIGN exp .)
    MOD             reduce using rule 45 (exp -> exp MOD_ASSIGN exp .)
    L_OP            reduce using rule 45 (exp -> exp MOD_ASSIGN exp .)
    G_OP            reduce using rule 45 (exp -> exp MOD_ASSIGN exp .)
    LE_OP           reduce using rule 45 (exp -> exp MOD_ASSIGN exp .)
    GE_OP           reduce using rule 45 (exp -> exp MOD_ASSIGN exp .)
    NOTEQUALS       reduce using rule 45 (exp -> exp MOD_ASSIGN exp .)
    EQUALS_OP       reduce using rule 45 (exp -> exp MOD_ASSIGN exp .)
    OR_OP           reduce using rule 45 (exp -> exp MOD_ASSIGN exp .)
    AND_OP          reduce using rule 45 (exp -> exp MOD_ASSIGN exp .)
    RPAREN          reduce using rule 45 (exp -> exp MOD_ASSIGN exp .)
    COMMA           reduce using rule 45 (exp -> exp MOD_ASSIGN exp .)
    MUL_ASSIGN      shift and go to state 77
    DIV_ASSIGN      shift and go to state 57
    MOD_ASSIGN      shift and go to state 73
    ADD_ASSIGN      shift and go to state 67
    SUB_ASSIGN      shift and go to state 72
    LEFT_ASSIGN     shift and go to state 78
    RIGHT_ASSIGN    shift and go to state 63
    AND_ASSIGN      shift and go to state 66
    XOR_ASSIGN      shift and go to state 74
    OR_ASSIGN       shift and go to state 75
    EQUALS          shift and go to state 68

  ! MUL_ASSIGN      [ reduce using rule 45 (exp -> exp MOD_ASSIGN exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 45 (exp -> exp MOD_ASSIGN exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 45 (exp -> exp MOD_ASSIGN exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 45 (exp -> exp MOD_ASSIGN exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 45 (exp -> exp MOD_ASSIGN exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 45 (exp -> exp MOD_ASSIGN exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 45 (exp -> exp MOD_ASSIGN exp .) ]
  ! AND_ASSIGN      [ reduce using rule 45 (exp -> exp MOD_ASSIGN exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 45 (exp -> exp MOD_ASSIGN exp .) ]
  ! OR_ASSIGN       [ reduce using rule 45 (exp -> exp MOD_ASSIGN exp .) ]
  ! EQUALS          [ reduce using rule 45 (exp -> exp MOD_ASSIGN exp .) ]
  ! ADD             [ shift and go to state 70 ]
  ! MINUS           [ shift and go to state 60 ]
  ! MULT            [ shift and go to state 61 ]
  ! DIV             [ shift and go to state 59 ]
  ! MOD             [ shift and go to state 79 ]
  ! L_OP            [ shift and go to state 76 ]
  ! G_OP            [ shift and go to state 64 ]
  ! LE_OP           [ shift and go to state 62 ]
  ! GE_OP           [ shift and go to state 71 ]
  ! NOTEQUALS       [ shift and go to state 55 ]
  ! EQUALS_OP       [ shift and go to state 56 ]
  ! OR_OP           [ shift and go to state 65 ]
  ! AND_OP          [ shift and go to state 69 ]


state 116

    (51) exp -> exp XOR_ASSIGN exp .
    (30) exp -> exp . ADD exp
    (31) exp -> exp . MINUS exp
    (32) exp -> exp . MULT exp
    (33) exp -> exp . DIV exp
    (34) exp -> exp . MOD exp
    (35) exp -> exp . L_OP exp
    (36) exp -> exp . G_OP exp
    (37) exp -> exp . LE_OP exp
    (38) exp -> exp . GE_OP exp
    (39) exp -> exp . NOTEQUALS exp
    (40) exp -> exp . EQUALS_OP exp
    (41) exp -> exp . OR_OP exp
    (42) exp -> exp . AND_OP exp
    (43) exp -> exp . MUL_ASSIGN exp
    (44) exp -> exp . DIV_ASSIGN exp
    (45) exp -> exp . MOD_ASSIGN exp
    (46) exp -> exp . ADD_ASSIGN exp
    (47) exp -> exp . SUB_ASSIGN exp
    (48) exp -> exp . LEFT_ASSIGN exp
    (49) exp -> exp . RIGHT_ASSIGN exp
    (50) exp -> exp . AND_ASSIGN exp
    (51) exp -> exp . XOR_ASSIGN exp
    (52) exp -> exp . OR_ASSIGN exp
    (53) exp -> exp . EQUALS exp

    SEMI_COLON      reduce using rule 51 (exp -> exp XOR_ASSIGN exp .)
    ADD             reduce using rule 51 (exp -> exp XOR_ASSIGN exp .)
    MINUS           reduce using rule 51 (exp -> exp XOR_ASSIGN exp .)
    MULT            reduce using rule 51 (exp -> exp XOR_ASSIGN exp .)
    DIV             reduce using rule 51 (exp -> exp XOR_ASSIGN exp .)
    MOD             reduce using rule 51 (exp -> exp XOR_ASSIGN exp .)
    L_OP            reduce using rule 51 (exp -> exp XOR_ASSIGN exp .)
    G_OP            reduce using rule 51 (exp -> exp XOR_ASSIGN exp .)
    LE_OP           reduce using rule 51 (exp -> exp XOR_ASSIGN exp .)
    GE_OP           reduce using rule 51 (exp -> exp XOR_ASSIGN exp .)
    NOTEQUALS       reduce using rule 51 (exp -> exp XOR_ASSIGN exp .)
    EQUALS_OP       reduce using rule 51 (exp -> exp XOR_ASSIGN exp .)
    OR_OP           reduce using rule 51 (exp -> exp XOR_ASSIGN exp .)
    AND_OP          reduce using rule 51 (exp -> exp XOR_ASSIGN exp .)
    RPAREN          reduce using rule 51 (exp -> exp XOR_ASSIGN exp .)
    COMMA           reduce using rule 51 (exp -> exp XOR_ASSIGN exp .)
    MUL_ASSIGN      shift and go to state 77
    DIV_ASSIGN      shift and go to state 57
    MOD_ASSIGN      shift and go to state 73
    ADD_ASSIGN      shift and go to state 67
    SUB_ASSIGN      shift and go to state 72
    LEFT_ASSIGN     shift and go to state 78
    RIGHT_ASSIGN    shift and go to state 63
    AND_ASSIGN      shift and go to state 66
    XOR_ASSIGN      shift and go to state 74
    OR_ASSIGN       shift and go to state 75
    EQUALS          shift and go to state 68

  ! MUL_ASSIGN      [ reduce using rule 51 (exp -> exp XOR_ASSIGN exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 51 (exp -> exp XOR_ASSIGN exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 51 (exp -> exp XOR_ASSIGN exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 51 (exp -> exp XOR_ASSIGN exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 51 (exp -> exp XOR_ASSIGN exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 51 (exp -> exp XOR_ASSIGN exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 51 (exp -> exp XOR_ASSIGN exp .) ]
  ! AND_ASSIGN      [ reduce using rule 51 (exp -> exp XOR_ASSIGN exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 51 (exp -> exp XOR_ASSIGN exp .) ]
  ! OR_ASSIGN       [ reduce using rule 51 (exp -> exp XOR_ASSIGN exp .) ]
  ! EQUALS          [ reduce using rule 51 (exp -> exp XOR_ASSIGN exp .) ]
  ! ADD             [ shift and go to state 70 ]
  ! MINUS           [ shift and go to state 60 ]
  ! MULT            [ shift and go to state 61 ]
  ! DIV             [ shift and go to state 59 ]
  ! MOD             [ shift and go to state 79 ]
  ! L_OP            [ shift and go to state 76 ]
  ! G_OP            [ shift and go to state 64 ]
  ! LE_OP           [ shift and go to state 62 ]
  ! GE_OP           [ shift and go to state 71 ]
  ! NOTEQUALS       [ shift and go to state 55 ]
  ! EQUALS_OP       [ shift and go to state 56 ]
  ! OR_OP           [ shift and go to state 65 ]
  ! AND_OP          [ shift and go to state 69 ]


state 117

    (52) exp -> exp OR_ASSIGN exp .
    (30) exp -> exp . ADD exp
    (31) exp -> exp . MINUS exp
    (32) exp -> exp . MULT exp
    (33) exp -> exp . DIV exp
    (34) exp -> exp . MOD exp
    (35) exp -> exp . L_OP exp
    (36) exp -> exp . G_OP exp
    (37) exp -> exp . LE_OP exp
    (38) exp -> exp . GE_OP exp
    (39) exp -> exp . NOTEQUALS exp
    (40) exp -> exp . EQUALS_OP exp
    (41) exp -> exp . OR_OP exp
    (42) exp -> exp . AND_OP exp
    (43) exp -> exp . MUL_ASSIGN exp
    (44) exp -> exp . DIV_ASSIGN exp
    (45) exp -> exp . MOD_ASSIGN exp
    (46) exp -> exp . ADD_ASSIGN exp
    (47) exp -> exp . SUB_ASSIGN exp
    (48) exp -> exp . LEFT_ASSIGN exp
    (49) exp -> exp . RIGHT_ASSIGN exp
    (50) exp -> exp . AND_ASSIGN exp
    (51) exp -> exp . XOR_ASSIGN exp
    (52) exp -> exp . OR_ASSIGN exp
    (53) exp -> exp . EQUALS exp

    SEMI_COLON      reduce using rule 52 (exp -> exp OR_ASSIGN exp .)
    ADD             reduce using rule 52 (exp -> exp OR_ASSIGN exp .)
    MINUS           reduce using rule 52 (exp -> exp OR_ASSIGN exp .)
    MULT            reduce using rule 52 (exp -> exp OR_ASSIGN exp .)
    DIV             reduce using rule 52 (exp -> exp OR_ASSIGN exp .)
    MOD             reduce using rule 52 (exp -> exp OR_ASSIGN exp .)
    L_OP            reduce using rule 52 (exp -> exp OR_ASSIGN exp .)
    G_OP            reduce using rule 52 (exp -> exp OR_ASSIGN exp .)
    LE_OP           reduce using rule 52 (exp -> exp OR_ASSIGN exp .)
    GE_OP           reduce using rule 52 (exp -> exp OR_ASSIGN exp .)
    NOTEQUALS       reduce using rule 52 (exp -> exp OR_ASSIGN exp .)
    EQUALS_OP       reduce using rule 52 (exp -> exp OR_ASSIGN exp .)
    OR_OP           reduce using rule 52 (exp -> exp OR_ASSIGN exp .)
    AND_OP          reduce using rule 52 (exp -> exp OR_ASSIGN exp .)
    RPAREN          reduce using rule 52 (exp -> exp OR_ASSIGN exp .)
    COMMA           reduce using rule 52 (exp -> exp OR_ASSIGN exp .)
    MUL_ASSIGN      shift and go to state 77
    DIV_ASSIGN      shift and go to state 57
    MOD_ASSIGN      shift and go to state 73
    ADD_ASSIGN      shift and go to state 67
    SUB_ASSIGN      shift and go to state 72
    LEFT_ASSIGN     shift and go to state 78
    RIGHT_ASSIGN    shift and go to state 63
    AND_ASSIGN      shift and go to state 66
    XOR_ASSIGN      shift and go to state 74
    OR_ASSIGN       shift and go to state 75
    EQUALS          shift and go to state 68

  ! MUL_ASSIGN      [ reduce using rule 52 (exp -> exp OR_ASSIGN exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 52 (exp -> exp OR_ASSIGN exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 52 (exp -> exp OR_ASSIGN exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 52 (exp -> exp OR_ASSIGN exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 52 (exp -> exp OR_ASSIGN exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 52 (exp -> exp OR_ASSIGN exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 52 (exp -> exp OR_ASSIGN exp .) ]
  ! AND_ASSIGN      [ reduce using rule 52 (exp -> exp OR_ASSIGN exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 52 (exp -> exp OR_ASSIGN exp .) ]
  ! OR_ASSIGN       [ reduce using rule 52 (exp -> exp OR_ASSIGN exp .) ]
  ! EQUALS          [ reduce using rule 52 (exp -> exp OR_ASSIGN exp .) ]
  ! ADD             [ shift and go to state 70 ]
  ! MINUS           [ shift and go to state 60 ]
  ! MULT            [ shift and go to state 61 ]
  ! DIV             [ shift and go to state 59 ]
  ! MOD             [ shift and go to state 79 ]
  ! L_OP            [ shift and go to state 76 ]
  ! G_OP            [ shift and go to state 64 ]
  ! LE_OP           [ shift and go to state 62 ]
  ! GE_OP           [ shift and go to state 71 ]
  ! NOTEQUALS       [ shift and go to state 55 ]
  ! EQUALS_OP       [ shift and go to state 56 ]
  ! OR_OP           [ shift and go to state 65 ]
  ! AND_OP          [ shift and go to state 69 ]


state 118

    (35) exp -> exp L_OP exp .
    (30) exp -> exp . ADD exp
    (31) exp -> exp . MINUS exp
    (32) exp -> exp . MULT exp
    (33) exp -> exp . DIV exp
    (34) exp -> exp . MOD exp
    (35) exp -> exp . L_OP exp
    (36) exp -> exp . G_OP exp
    (37) exp -> exp . LE_OP exp
    (38) exp -> exp . GE_OP exp
    (39) exp -> exp . NOTEQUALS exp
    (40) exp -> exp . EQUALS_OP exp
    (41) exp -> exp . OR_OP exp
    (42) exp -> exp . AND_OP exp
    (43) exp -> exp . MUL_ASSIGN exp
    (44) exp -> exp . DIV_ASSIGN exp
    (45) exp -> exp . MOD_ASSIGN exp
    (46) exp -> exp . ADD_ASSIGN exp
    (47) exp -> exp . SUB_ASSIGN exp
    (48) exp -> exp . LEFT_ASSIGN exp
    (49) exp -> exp . RIGHT_ASSIGN exp
    (50) exp -> exp . AND_ASSIGN exp
    (51) exp -> exp . XOR_ASSIGN exp
    (52) exp -> exp . OR_ASSIGN exp
    (53) exp -> exp . EQUALS exp

    SEMI_COLON      reduce using rule 35 (exp -> exp L_OP exp .)
    ADD             reduce using rule 35 (exp -> exp L_OP exp .)
    MINUS           reduce using rule 35 (exp -> exp L_OP exp .)
    MULT            reduce using rule 35 (exp -> exp L_OP exp .)
    DIV             reduce using rule 35 (exp -> exp L_OP exp .)
    MOD             reduce using rule 35 (exp -> exp L_OP exp .)
    L_OP            reduce using rule 35 (exp -> exp L_OP exp .)
    G_OP            reduce using rule 35 (exp -> exp L_OP exp .)
    LE_OP           reduce using rule 35 (exp -> exp L_OP exp .)
    GE_OP           reduce using rule 35 (exp -> exp L_OP exp .)
    RPAREN          reduce using rule 35 (exp -> exp L_OP exp .)
    COMMA           reduce using rule 35 (exp -> exp L_OP exp .)
    NOTEQUALS       shift and go to state 55
    EQUALS_OP       shift and go to state 56
    OR_OP           shift and go to state 65
    AND_OP          shift and go to state 69
    MUL_ASSIGN      shift and go to state 77
    DIV_ASSIGN      shift and go to state 57
    MOD_ASSIGN      shift and go to state 73
    ADD_ASSIGN      shift and go to state 67
    SUB_ASSIGN      shift and go to state 72
    LEFT_ASSIGN     shift and go to state 78
    RIGHT_ASSIGN    shift and go to state 63
    AND_ASSIGN      shift and go to state 66
    XOR_ASSIGN      shift and go to state 74
    OR_ASSIGN       shift and go to state 75
    EQUALS          shift and go to state 68

  ! NOTEQUALS       [ reduce using rule 35 (exp -> exp L_OP exp .) ]
  ! EQUALS_OP       [ reduce using rule 35 (exp -> exp L_OP exp .) ]
  ! OR_OP           [ reduce using rule 35 (exp -> exp L_OP exp .) ]
  ! AND_OP          [ reduce using rule 35 (exp -> exp L_OP exp .) ]
  ! MUL_ASSIGN      [ reduce using rule 35 (exp -> exp L_OP exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 35 (exp -> exp L_OP exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 35 (exp -> exp L_OP exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 35 (exp -> exp L_OP exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 35 (exp -> exp L_OP exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 35 (exp -> exp L_OP exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 35 (exp -> exp L_OP exp .) ]
  ! AND_ASSIGN      [ reduce using rule 35 (exp -> exp L_OP exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 35 (exp -> exp L_OP exp .) ]
  ! OR_ASSIGN       [ reduce using rule 35 (exp -> exp L_OP exp .) ]
  ! EQUALS          [ reduce using rule 35 (exp -> exp L_OP exp .) ]
  ! ADD             [ shift and go to state 70 ]
  ! MINUS           [ shift and go to state 60 ]
  ! MULT            [ shift and go to state 61 ]
  ! DIV             [ shift and go to state 59 ]
  ! MOD             [ shift and go to state 79 ]
  ! L_OP            [ shift and go to state 76 ]
  ! G_OP            [ shift and go to state 64 ]
  ! LE_OP           [ shift and go to state 62 ]
  ! GE_OP           [ shift and go to state 71 ]


state 119

    (43) exp -> exp MUL_ASSIGN exp .
    (30) exp -> exp . ADD exp
    (31) exp -> exp . MINUS exp
    (32) exp -> exp . MULT exp
    (33) exp -> exp . DIV exp
    (34) exp -> exp . MOD exp
    (35) exp -> exp . L_OP exp
    (36) exp -> exp . G_OP exp
    (37) exp -> exp . LE_OP exp
    (38) exp -> exp . GE_OP exp
    (39) exp -> exp . NOTEQUALS exp
    (40) exp -> exp . EQUALS_OP exp
    (41) exp -> exp . OR_OP exp
    (42) exp -> exp . AND_OP exp
    (43) exp -> exp . MUL_ASSIGN exp
    (44) exp -> exp . DIV_ASSIGN exp
    (45) exp -> exp . MOD_ASSIGN exp
    (46) exp -> exp . ADD_ASSIGN exp
    (47) exp -> exp . SUB_ASSIGN exp
    (48) exp -> exp . LEFT_ASSIGN exp
    (49) exp -> exp . RIGHT_ASSIGN exp
    (50) exp -> exp . AND_ASSIGN exp
    (51) exp -> exp . XOR_ASSIGN exp
    (52) exp -> exp . OR_ASSIGN exp
    (53) exp -> exp . EQUALS exp

    SEMI_COLON      reduce using rule 43 (exp -> exp MUL_ASSIGN exp .)
    ADD             reduce using rule 43 (exp -> exp MUL_ASSIGN exp .)
    MINUS           reduce using rule 43 (exp -> exp MUL_ASSIGN exp .)
    MULT            reduce using rule 43 (exp -> exp MUL_ASSIGN exp .)
    DIV             reduce using rule 43 (exp -> exp MUL_ASSIGN exp .)
    MOD             reduce using rule 43 (exp -> exp MUL_ASSIGN exp .)
    L_OP            reduce using rule 43 (exp -> exp MUL_ASSIGN exp .)
    G_OP            reduce using rule 43 (exp -> exp MUL_ASSIGN exp .)
    LE_OP           reduce using rule 43 (exp -> exp MUL_ASSIGN exp .)
    GE_OP           reduce using rule 43 (exp -> exp MUL_ASSIGN exp .)
    NOTEQUALS       reduce using rule 43 (exp -> exp MUL_ASSIGN exp .)
    EQUALS_OP       reduce using rule 43 (exp -> exp MUL_ASSIGN exp .)
    OR_OP           reduce using rule 43 (exp -> exp MUL_ASSIGN exp .)
    AND_OP          reduce using rule 43 (exp -> exp MUL_ASSIGN exp .)
    RPAREN          reduce using rule 43 (exp -> exp MUL_ASSIGN exp .)
    COMMA           reduce using rule 43 (exp -> exp MUL_ASSIGN exp .)
    MUL_ASSIGN      shift and go to state 77
    DIV_ASSIGN      shift and go to state 57
    MOD_ASSIGN      shift and go to state 73
    ADD_ASSIGN      shift and go to state 67
    SUB_ASSIGN      shift and go to state 72
    LEFT_ASSIGN     shift and go to state 78
    RIGHT_ASSIGN    shift and go to state 63
    AND_ASSIGN      shift and go to state 66
    XOR_ASSIGN      shift and go to state 74
    OR_ASSIGN       shift and go to state 75
    EQUALS          shift and go to state 68

  ! MUL_ASSIGN      [ reduce using rule 43 (exp -> exp MUL_ASSIGN exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 43 (exp -> exp MUL_ASSIGN exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 43 (exp -> exp MUL_ASSIGN exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 43 (exp -> exp MUL_ASSIGN exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 43 (exp -> exp MUL_ASSIGN exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 43 (exp -> exp MUL_ASSIGN exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 43 (exp -> exp MUL_ASSIGN exp .) ]
  ! AND_ASSIGN      [ reduce using rule 43 (exp -> exp MUL_ASSIGN exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 43 (exp -> exp MUL_ASSIGN exp .) ]
  ! OR_ASSIGN       [ reduce using rule 43 (exp -> exp MUL_ASSIGN exp .) ]
  ! EQUALS          [ reduce using rule 43 (exp -> exp MUL_ASSIGN exp .) ]
  ! ADD             [ shift and go to state 70 ]
  ! MINUS           [ shift and go to state 60 ]
  ! MULT            [ shift and go to state 61 ]
  ! DIV             [ shift and go to state 59 ]
  ! MOD             [ shift and go to state 79 ]
  ! L_OP            [ shift and go to state 76 ]
  ! G_OP            [ shift and go to state 64 ]
  ! LE_OP           [ shift and go to state 62 ]
  ! GE_OP           [ shift and go to state 71 ]
  ! NOTEQUALS       [ shift and go to state 55 ]
  ! EQUALS_OP       [ shift and go to state 56 ]
  ! OR_OP           [ shift and go to state 65 ]
  ! AND_OP          [ shift and go to state 69 ]


state 120

    (48) exp -> exp LEFT_ASSIGN exp .
    (30) exp -> exp . ADD exp
    (31) exp -> exp . MINUS exp
    (32) exp -> exp . MULT exp
    (33) exp -> exp . DIV exp
    (34) exp -> exp . MOD exp
    (35) exp -> exp . L_OP exp
    (36) exp -> exp . G_OP exp
    (37) exp -> exp . LE_OP exp
    (38) exp -> exp . GE_OP exp
    (39) exp -> exp . NOTEQUALS exp
    (40) exp -> exp . EQUALS_OP exp
    (41) exp -> exp . OR_OP exp
    (42) exp -> exp . AND_OP exp
    (43) exp -> exp . MUL_ASSIGN exp
    (44) exp -> exp . DIV_ASSIGN exp
    (45) exp -> exp . MOD_ASSIGN exp
    (46) exp -> exp . ADD_ASSIGN exp
    (47) exp -> exp . SUB_ASSIGN exp
    (48) exp -> exp . LEFT_ASSIGN exp
    (49) exp -> exp . RIGHT_ASSIGN exp
    (50) exp -> exp . AND_ASSIGN exp
    (51) exp -> exp . XOR_ASSIGN exp
    (52) exp -> exp . OR_ASSIGN exp
    (53) exp -> exp . EQUALS exp

    SEMI_COLON      reduce using rule 48 (exp -> exp LEFT_ASSIGN exp .)
    ADD             reduce using rule 48 (exp -> exp LEFT_ASSIGN exp .)
    MINUS           reduce using rule 48 (exp -> exp LEFT_ASSIGN exp .)
    MULT            reduce using rule 48 (exp -> exp LEFT_ASSIGN exp .)
    DIV             reduce using rule 48 (exp -> exp LEFT_ASSIGN exp .)
    MOD             reduce using rule 48 (exp -> exp LEFT_ASSIGN exp .)
    L_OP            reduce using rule 48 (exp -> exp LEFT_ASSIGN exp .)
    G_OP            reduce using rule 48 (exp -> exp LEFT_ASSIGN exp .)
    LE_OP           reduce using rule 48 (exp -> exp LEFT_ASSIGN exp .)
    GE_OP           reduce using rule 48 (exp -> exp LEFT_ASSIGN exp .)
    NOTEQUALS       reduce using rule 48 (exp -> exp LEFT_ASSIGN exp .)
    EQUALS_OP       reduce using rule 48 (exp -> exp LEFT_ASSIGN exp .)
    OR_OP           reduce using rule 48 (exp -> exp LEFT_ASSIGN exp .)
    AND_OP          reduce using rule 48 (exp -> exp LEFT_ASSIGN exp .)
    RPAREN          reduce using rule 48 (exp -> exp LEFT_ASSIGN exp .)
    COMMA           reduce using rule 48 (exp -> exp LEFT_ASSIGN exp .)
    MUL_ASSIGN      shift and go to state 77
    DIV_ASSIGN      shift and go to state 57
    MOD_ASSIGN      shift and go to state 73
    ADD_ASSIGN      shift and go to state 67
    SUB_ASSIGN      shift and go to state 72
    LEFT_ASSIGN     shift and go to state 78
    RIGHT_ASSIGN    shift and go to state 63
    AND_ASSIGN      shift and go to state 66
    XOR_ASSIGN      shift and go to state 74
    OR_ASSIGN       shift and go to state 75
    EQUALS          shift and go to state 68

  ! MUL_ASSIGN      [ reduce using rule 48 (exp -> exp LEFT_ASSIGN exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 48 (exp -> exp LEFT_ASSIGN exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 48 (exp -> exp LEFT_ASSIGN exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 48 (exp -> exp LEFT_ASSIGN exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 48 (exp -> exp LEFT_ASSIGN exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 48 (exp -> exp LEFT_ASSIGN exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 48 (exp -> exp LEFT_ASSIGN exp .) ]
  ! AND_ASSIGN      [ reduce using rule 48 (exp -> exp LEFT_ASSIGN exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 48 (exp -> exp LEFT_ASSIGN exp .) ]
  ! OR_ASSIGN       [ reduce using rule 48 (exp -> exp LEFT_ASSIGN exp .) ]
  ! EQUALS          [ reduce using rule 48 (exp -> exp LEFT_ASSIGN exp .) ]
  ! ADD             [ shift and go to state 70 ]
  ! MINUS           [ shift and go to state 60 ]
  ! MULT            [ shift and go to state 61 ]
  ! DIV             [ shift and go to state 59 ]
  ! MOD             [ shift and go to state 79 ]
  ! L_OP            [ shift and go to state 76 ]
  ! G_OP            [ shift and go to state 64 ]
  ! LE_OP           [ shift and go to state 62 ]
  ! GE_OP           [ shift and go to state 71 ]
  ! NOTEQUALS       [ shift and go to state 55 ]
  ! EQUALS_OP       [ shift and go to state 56 ]
  ! OR_OP           [ shift and go to state 65 ]
  ! AND_OP          [ shift and go to state 69 ]


state 121

    (34) exp -> exp MOD exp .
    (30) exp -> exp . ADD exp
    (31) exp -> exp . MINUS exp
    (32) exp -> exp . MULT exp
    (33) exp -> exp . DIV exp
    (34) exp -> exp . MOD exp
    (35) exp -> exp . L_OP exp
    (36) exp -> exp . G_OP exp
    (37) exp -> exp . LE_OP exp
    (38) exp -> exp . GE_OP exp
    (39) exp -> exp . NOTEQUALS exp
    (40) exp -> exp . EQUALS_OP exp
    (41) exp -> exp . OR_OP exp
    (42) exp -> exp . AND_OP exp
    (43) exp -> exp . MUL_ASSIGN exp
    (44) exp -> exp . DIV_ASSIGN exp
    (45) exp -> exp . MOD_ASSIGN exp
    (46) exp -> exp . ADD_ASSIGN exp
    (47) exp -> exp . SUB_ASSIGN exp
    (48) exp -> exp . LEFT_ASSIGN exp
    (49) exp -> exp . RIGHT_ASSIGN exp
    (50) exp -> exp . AND_ASSIGN exp
    (51) exp -> exp . XOR_ASSIGN exp
    (52) exp -> exp . OR_ASSIGN exp
    (53) exp -> exp . EQUALS exp

    SEMI_COLON      reduce using rule 34 (exp -> exp MOD exp .)
    ADD             reduce using rule 34 (exp -> exp MOD exp .)
    MINUS           reduce using rule 34 (exp -> exp MOD exp .)
    MULT            reduce using rule 34 (exp -> exp MOD exp .)
    DIV             reduce using rule 34 (exp -> exp MOD exp .)
    MOD             reduce using rule 34 (exp -> exp MOD exp .)
    RPAREN          reduce using rule 34 (exp -> exp MOD exp .)
    COMMA           reduce using rule 34 (exp -> exp MOD exp .)
    L_OP            shift and go to state 76
    G_OP            shift and go to state 64
    LE_OP           shift and go to state 62
    GE_OP           shift and go to state 71
    NOTEQUALS       shift and go to state 55
    EQUALS_OP       shift and go to state 56
    OR_OP           shift and go to state 65
    AND_OP          shift and go to state 69
    MUL_ASSIGN      shift and go to state 77
    DIV_ASSIGN      shift and go to state 57
    MOD_ASSIGN      shift and go to state 73
    ADD_ASSIGN      shift and go to state 67
    SUB_ASSIGN      shift and go to state 72
    LEFT_ASSIGN     shift and go to state 78
    RIGHT_ASSIGN    shift and go to state 63
    AND_ASSIGN      shift and go to state 66
    XOR_ASSIGN      shift and go to state 74
    OR_ASSIGN       shift and go to state 75
    EQUALS          shift and go to state 68

  ! L_OP            [ reduce using rule 34 (exp -> exp MOD exp .) ]
  ! G_OP            [ reduce using rule 34 (exp -> exp MOD exp .) ]
  ! LE_OP           [ reduce using rule 34 (exp -> exp MOD exp .) ]
  ! GE_OP           [ reduce using rule 34 (exp -> exp MOD exp .) ]
  ! NOTEQUALS       [ reduce using rule 34 (exp -> exp MOD exp .) ]
  ! EQUALS_OP       [ reduce using rule 34 (exp -> exp MOD exp .) ]
  ! OR_OP           [ reduce using rule 34 (exp -> exp MOD exp .) ]
  ! AND_OP          [ reduce using rule 34 (exp -> exp MOD exp .) ]
  ! MUL_ASSIGN      [ reduce using rule 34 (exp -> exp MOD exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 34 (exp -> exp MOD exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 34 (exp -> exp MOD exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 34 (exp -> exp MOD exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 34 (exp -> exp MOD exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 34 (exp -> exp MOD exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 34 (exp -> exp MOD exp .) ]
  ! AND_ASSIGN      [ reduce using rule 34 (exp -> exp MOD exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 34 (exp -> exp MOD exp .) ]
  ! OR_ASSIGN       [ reduce using rule 34 (exp -> exp MOD exp .) ]
  ! EQUALS          [ reduce using rule 34 (exp -> exp MOD exp .) ]
  ! ADD             [ shift and go to state 70 ]
  ! MINUS           [ shift and go to state 60 ]
  ! MULT            [ shift and go to state 61 ]
  ! DIV             [ shift and go to state 59 ]
  ! MOD             [ shift and go to state 79 ]


state 122

    (73) iterative_statement -> DO SEMI_COLON WHILE LPAREN . exp RPAREN SEMI_COLON
    (30) exp -> . exp ADD exp
    (31) exp -> . exp MINUS exp
    (32) exp -> . exp MULT exp
    (33) exp -> . exp DIV exp
    (34) exp -> . exp MOD exp
    (35) exp -> . exp L_OP exp
    (36) exp -> . exp G_OP exp
    (37) exp -> . exp LE_OP exp
    (38) exp -> . exp GE_OP exp
    (39) exp -> . exp NOTEQUALS exp
    (40) exp -> . exp EQUALS_OP exp
    (41) exp -> . exp OR_OP exp
    (42) exp -> . exp AND_OP exp
    (43) exp -> . exp MUL_ASSIGN exp
    (44) exp -> . exp DIV_ASSIGN exp
    (45) exp -> . exp MOD_ASSIGN exp
    (46) exp -> . exp ADD_ASSIGN exp
    (47) exp -> . exp SUB_ASSIGN exp
    (48) exp -> . exp LEFT_ASSIGN exp
    (49) exp -> . exp RIGHT_ASSIGN exp
    (50) exp -> . exp AND_ASSIGN exp
    (51) exp -> . exp XOR_ASSIGN exp
    (52) exp -> . exp OR_ASSIGN exp
    (53) exp -> . exp EQUALS exp
    (54) exp -> . unary_expression
    (55) exp -> . LPAREN exp RPAREN
    (56) exp -> . constant
    (57) exp -> . VARIABLE
    (58) exp -> . function_call
    (59) unary_expression -> . VARIABLE unary_operator
    (60) unary_expression -> . unary_operator VARIABLE
    (25) constant -> . HEX_INT
    (26) constant -> . DOT_REAL
    (27) constant -> . EXP_REAL
    (28) constant -> . DEC_INT
    (29) constant -> . CHARACTER
    (86) function_call -> . VARIABLE LPAREN arguments RPAREN
    (87) function_call -> . VARIABLE LPAREN RPAREN
    (61) unary_operator -> . INCREMENT
    (62) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 23
    VARIABLE        shift and go to state 25
    HEX_INT         shift and go to state 31
    DOT_REAL        shift and go to state 18
    EXP_REAL        shift and go to state 14
    DEC_INT         shift and go to state 15
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 13
    DECREMENT       shift and go to state 27

    constant                       shift and go to state 11
    unary_expression               shift and go to state 26
    function_call                  shift and go to state 7
    exp                            shift and go to state 138
    unary_operator                 shift and go to state 20

state 123

    (71) iterative_statement -> DO statement WHILE LPAREN . exp RPAREN SEMI_COLON
    (30) exp -> . exp ADD exp
    (31) exp -> . exp MINUS exp
    (32) exp -> . exp MULT exp
    (33) exp -> . exp DIV exp
    (34) exp -> . exp MOD exp
    (35) exp -> . exp L_OP exp
    (36) exp -> . exp G_OP exp
    (37) exp -> . exp LE_OP exp
    (38) exp -> . exp GE_OP exp
    (39) exp -> . exp NOTEQUALS exp
    (40) exp -> . exp EQUALS_OP exp
    (41) exp -> . exp OR_OP exp
    (42) exp -> . exp AND_OP exp
    (43) exp -> . exp MUL_ASSIGN exp
    (44) exp -> . exp DIV_ASSIGN exp
    (45) exp -> . exp MOD_ASSIGN exp
    (46) exp -> . exp ADD_ASSIGN exp
    (47) exp -> . exp SUB_ASSIGN exp
    (48) exp -> . exp LEFT_ASSIGN exp
    (49) exp -> . exp RIGHT_ASSIGN exp
    (50) exp -> . exp AND_ASSIGN exp
    (51) exp -> . exp XOR_ASSIGN exp
    (52) exp -> . exp OR_ASSIGN exp
    (53) exp -> . exp EQUALS exp
    (54) exp -> . unary_expression
    (55) exp -> . LPAREN exp RPAREN
    (56) exp -> . constant
    (57) exp -> . VARIABLE
    (58) exp -> . function_call
    (59) unary_expression -> . VARIABLE unary_operator
    (60) unary_expression -> . unary_operator VARIABLE
    (25) constant -> . HEX_INT
    (26) constant -> . DOT_REAL
    (27) constant -> . EXP_REAL
    (28) constant -> . DEC_INT
    (29) constant -> . CHARACTER
    (86) function_call -> . VARIABLE LPAREN arguments RPAREN
    (87) function_call -> . VARIABLE LPAREN RPAREN
    (61) unary_operator -> . INCREMENT
    (62) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 23
    VARIABLE        shift and go to state 25
    HEX_INT         shift and go to state 31
    DOT_REAL        shift and go to state 18
    EXP_REAL        shift and go to state 14
    DEC_INT         shift and go to state 15
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 13
    DECREMENT       shift and go to state 27

    constant                       shift and go to state 11
    unary_expression               shift and go to state 26
    function_call                  shift and go to state 7
    exp                            shift and go to state 139
    unary_operator                 shift and go to state 20

state 124

    (72) iterative_statement -> DO LBRACE statements RBRACE . WHILE LPAREN exp RPAREN SEMI_COLON

    WHILE           shift and go to state 140


state 125

    (74) iterative_statement -> DO LBRACE RBRACE WHILE . LPAREN exp RPAREN SEMI_COLON

    LPAREN          shift and go to state 141


state 126

    (67) iterative_statement -> WHILE LPAREN exp RPAREN . statement
    (68) iterative_statement -> WHILE LPAREN exp RPAREN . SEMI_COLON
    (69) iterative_statement -> WHILE LPAREN exp RPAREN . LBRACE statements RBRACE
    (70) iterative_statement -> WHILE LPAREN exp RPAREN . LBRACE RBRACE
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (13) declaration -> . type enum_list SEMI_COLON
    (30) exp -> . exp ADD exp
    (31) exp -> . exp MINUS exp
    (32) exp -> . exp MULT exp
    (33) exp -> . exp DIV exp
    (34) exp -> . exp MOD exp
    (35) exp -> . exp L_OP exp
    (36) exp -> . exp G_OP exp
    (37) exp -> . exp LE_OP exp
    (38) exp -> . exp GE_OP exp
    (39) exp -> . exp NOTEQUALS exp
    (40) exp -> . exp EQUALS_OP exp
    (41) exp -> . exp OR_OP exp
    (42) exp -> . exp AND_OP exp
    (43) exp -> . exp MUL_ASSIGN exp
    (44) exp -> . exp DIV_ASSIGN exp
    (45) exp -> . exp MOD_ASSIGN exp
    (46) exp -> . exp ADD_ASSIGN exp
    (47) exp -> . exp SUB_ASSIGN exp
    (48) exp -> . exp LEFT_ASSIGN exp
    (49) exp -> . exp RIGHT_ASSIGN exp
    (50) exp -> . exp AND_ASSIGN exp
    (51) exp -> . exp XOR_ASSIGN exp
    (52) exp -> . exp OR_ASSIGN exp
    (53) exp -> . exp EQUALS exp
    (54) exp -> . unary_expression
    (55) exp -> . LPAREN exp RPAREN
    (56) exp -> . constant
    (57) exp -> . VARIABLE
    (58) exp -> . function_call
    (63) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (64) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE
    (65) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (66) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE
    (67) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (68) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (69) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE statements RBRACE
    (70) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (71) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (72) iterative_statement -> . DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (73) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (74) iterative_statement -> . DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (77) function -> . normal_function
    (78) function -> . main_function
    (9) constant_statement -> . BREAK SEMI_COLON
    (10) constant_statement -> . CONTINUE SEMI_COLON
    (11) constant_statement -> . RETURN SEMI_COLON
    (12) constant_statement -> . RETURN exp SEMI_COLON
    (18) type -> . INT
    (19) type -> . FLOAT
    (20) type -> . CHAR
    (21) type -> . DOUBLE
    (22) type -> . VOID
    (23) type -> . SHORT
    (24) type -> . LONG
    (59) unary_expression -> . VARIABLE unary_operator
    (60) unary_expression -> . unary_operator VARIABLE
    (25) constant -> . HEX_INT
    (26) constant -> . DOT_REAL
    (27) constant -> . EXP_REAL
    (28) constant -> . DEC_INT
    (29) constant -> . CHARACTER
    (86) function_call -> . VARIABLE LPAREN arguments RPAREN
    (87) function_call -> . VARIABLE LPAREN RPAREN
    (81) normal_function -> . type VARIABLE LPAREN parameters RPAREN LBRACE statements RBRACE
    (82) normal_function -> . type VARIABLE LPAREN parameters RPAREN LBRACE RBRACE
    (79) main_function -> . type MAIN LPAREN parameters RPAREN LBRACE statements RBRACE
    (80) main_function -> . type MAIN LPAREN parameters RPAREN LBRACE RBRACE
    (61) unary_operator -> . INCREMENT
    (62) unary_operator -> . DECREMENT

    SEMI_COLON      shift and go to state 142
    LBRACE          shift and go to state 144
    LPAREN          shift and go to state 23
    VARIABLE        shift and go to state 25
    FOR             shift and go to state 22
    WHILE           shift and go to state 9
    DO              shift and go to state 4
    BREAK           shift and go to state 34
    CONTINUE        shift and go to state 35
    RETURN          shift and go to state 1
    INT             shift and go to state 29
    FLOAT           shift and go to state 33
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 5
    SHORT           shift and go to state 10
    LONG            shift and go to state 37
    HEX_INT         shift and go to state 31
    DOT_REAL        shift and go to state 18
    EXP_REAL        shift and go to state 14
    DEC_INT         shift and go to state 15
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 13
    DECREMENT       shift and go to state 27

    function                       shift and go to state 21
    main_function                  shift and go to state 2
    exp                            shift and go to state 36
    unary_expression               shift and go to state 26
    type                           shift and go to state 19
    normal_function                shift and go to state 32
    function_call                  shift and go to state 7
    statement                      shift and go to state 143
    declaration                    shift and go to state 24
    constant_statement             shift and go to state 28
    constant                       shift and go to state 11
    iterative_statement            shift and go to state 12
    unary_operator                 shift and go to state 20

state 127

    (15) enum_list -> VARIABLE EQUALS exp . COMMA enum_list
    (17) enum_list -> VARIABLE EQUALS exp .
    (30) exp -> exp . ADD exp
    (31) exp -> exp . MINUS exp
    (32) exp -> exp . MULT exp
    (33) exp -> exp . DIV exp
    (34) exp -> exp . MOD exp
    (35) exp -> exp . L_OP exp
    (36) exp -> exp . G_OP exp
    (37) exp -> exp . LE_OP exp
    (38) exp -> exp . GE_OP exp
    (39) exp -> exp . NOTEQUALS exp
    (40) exp -> exp . EQUALS_OP exp
    (41) exp -> exp . OR_OP exp
    (42) exp -> exp . AND_OP exp
    (43) exp -> exp . MUL_ASSIGN exp
    (44) exp -> exp . DIV_ASSIGN exp
    (45) exp -> exp . MOD_ASSIGN exp
    (46) exp -> exp . ADD_ASSIGN exp
    (47) exp -> exp . SUB_ASSIGN exp
    (48) exp -> exp . LEFT_ASSIGN exp
    (49) exp -> exp . RIGHT_ASSIGN exp
    (50) exp -> exp . AND_ASSIGN exp
    (51) exp -> exp . XOR_ASSIGN exp
    (52) exp -> exp . OR_ASSIGN exp
    (53) exp -> exp . EQUALS exp

    COMMA           shift and go to state 145
    SEMI_COLON      reduce using rule 17 (enum_list -> VARIABLE EQUALS exp .)
    ADD             shift and go to state 70
    MINUS           shift and go to state 60
    MULT            shift and go to state 61
    DIV             shift and go to state 59
    MOD             shift and go to state 79
    L_OP            shift and go to state 76
    G_OP            shift and go to state 64
    LE_OP           shift and go to state 62
    GE_OP           shift and go to state 71
    NOTEQUALS       shift and go to state 55
    EQUALS_OP       shift and go to state 56
    OR_OP           shift and go to state 65
    AND_OP          shift and go to state 69
    MUL_ASSIGN      shift and go to state 77
    DIV_ASSIGN      shift and go to state 57
    MOD_ASSIGN      shift and go to state 73
    ADD_ASSIGN      shift and go to state 67
    SUB_ASSIGN      shift and go to state 72
    LEFT_ASSIGN     shift and go to state 78
    RIGHT_ASSIGN    shift and go to state 63
    AND_ASSIGN      shift and go to state 66
    XOR_ASSIGN      shift and go to state 74
    OR_ASSIGN       shift and go to state 75
    EQUALS          shift and go to state 68


state 128

    (14) enum_list -> VARIABLE . COMMA enum_list
    (15) enum_list -> VARIABLE . EQUALS exp COMMA enum_list
    (16) enum_list -> VARIABLE .
    (17) enum_list -> VARIABLE . EQUALS exp

    COMMA           shift and go to state 88
    EQUALS          shift and go to state 87
    SEMI_COLON      reduce using rule 16 (enum_list -> VARIABLE .)


state 129

    (14) enum_list -> VARIABLE COMMA enum_list .

    SEMI_COLON      reduce using rule 14 (enum_list -> VARIABLE COMMA enum_list .)


state 130

    (81) normal_function -> type VARIABLE LPAREN parameters . RPAREN LBRACE statements RBRACE
    (82) normal_function -> type VARIABLE LPAREN parameters . RPAREN LBRACE RBRACE

    RPAREN          shift and go to state 146


state 131

    (83) parameters -> type . VARIABLE COMMA parameters
    (84) parameters -> type . VARIABLE

    VARIABLE        shift and go to state 147


state 132

    (85) parameters -> empty .

    RPAREN          reduce using rule 85 (parameters -> empty .)


state 133

    (79) main_function -> type MAIN LPAREN parameters . RPAREN LBRACE statements RBRACE
    (80) main_function -> type MAIN LPAREN parameters . RPAREN LBRACE RBRACE

    RPAREN          shift and go to state 148


state 134

    (63) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON . iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (64) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON . iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE
    (65) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON . iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (66) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON . iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE
    (75) iterative_exp -> . exp COMMA iterative_exp
    (76) iterative_exp -> . exp
    (30) exp -> . exp ADD exp
    (31) exp -> . exp MINUS exp
    (32) exp -> . exp MULT exp
    (33) exp -> . exp DIV exp
    (34) exp -> . exp MOD exp
    (35) exp -> . exp L_OP exp
    (36) exp -> . exp G_OP exp
    (37) exp -> . exp LE_OP exp
    (38) exp -> . exp GE_OP exp
    (39) exp -> . exp NOTEQUALS exp
    (40) exp -> . exp EQUALS_OP exp
    (41) exp -> . exp OR_OP exp
    (42) exp -> . exp AND_OP exp
    (43) exp -> . exp MUL_ASSIGN exp
    (44) exp -> . exp DIV_ASSIGN exp
    (45) exp -> . exp MOD_ASSIGN exp
    (46) exp -> . exp ADD_ASSIGN exp
    (47) exp -> . exp SUB_ASSIGN exp
    (48) exp -> . exp LEFT_ASSIGN exp
    (49) exp -> . exp RIGHT_ASSIGN exp
    (50) exp -> . exp AND_ASSIGN exp
    (51) exp -> . exp XOR_ASSIGN exp
    (52) exp -> . exp OR_ASSIGN exp
    (53) exp -> . exp EQUALS exp
    (54) exp -> . unary_expression
    (55) exp -> . LPAREN exp RPAREN
    (56) exp -> . constant
    (57) exp -> . VARIABLE
    (58) exp -> . function_call
    (59) unary_expression -> . VARIABLE unary_operator
    (60) unary_expression -> . unary_operator VARIABLE
    (25) constant -> . HEX_INT
    (26) constant -> . DOT_REAL
    (27) constant -> . EXP_REAL
    (28) constant -> . DEC_INT
    (29) constant -> . CHARACTER
    (86) function_call -> . VARIABLE LPAREN arguments RPAREN
    (87) function_call -> . VARIABLE LPAREN RPAREN
    (61) unary_operator -> . INCREMENT
    (62) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 23
    VARIABLE        shift and go to state 25
    HEX_INT         shift and go to state 31
    DOT_REAL        shift and go to state 18
    EXP_REAL        shift and go to state 14
    DEC_INT         shift and go to state 15
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 13
    DECREMENT       shift and go to state 27

    constant                       shift and go to state 11
    unary_expression               shift and go to state 26
    iterative_exp                  shift and go to state 149
    function_call                  shift and go to state 7
    exp                            shift and go to state 92
    unary_operator                 shift and go to state 20

state 135

    (75) iterative_exp -> exp COMMA . iterative_exp
    (75) iterative_exp -> . exp COMMA iterative_exp
    (76) iterative_exp -> . exp
    (30) exp -> . exp ADD exp
    (31) exp -> . exp MINUS exp
    (32) exp -> . exp MULT exp
    (33) exp -> . exp DIV exp
    (34) exp -> . exp MOD exp
    (35) exp -> . exp L_OP exp
    (36) exp -> . exp G_OP exp
    (37) exp -> . exp LE_OP exp
    (38) exp -> . exp GE_OP exp
    (39) exp -> . exp NOTEQUALS exp
    (40) exp -> . exp EQUALS_OP exp
    (41) exp -> . exp OR_OP exp
    (42) exp -> . exp AND_OP exp
    (43) exp -> . exp MUL_ASSIGN exp
    (44) exp -> . exp DIV_ASSIGN exp
    (45) exp -> . exp MOD_ASSIGN exp
    (46) exp -> . exp ADD_ASSIGN exp
    (47) exp -> . exp SUB_ASSIGN exp
    (48) exp -> . exp LEFT_ASSIGN exp
    (49) exp -> . exp RIGHT_ASSIGN exp
    (50) exp -> . exp AND_ASSIGN exp
    (51) exp -> . exp XOR_ASSIGN exp
    (52) exp -> . exp OR_ASSIGN exp
    (53) exp -> . exp EQUALS exp
    (54) exp -> . unary_expression
    (55) exp -> . LPAREN exp RPAREN
    (56) exp -> . constant
    (57) exp -> . VARIABLE
    (58) exp -> . function_call
    (59) unary_expression -> . VARIABLE unary_operator
    (60) unary_expression -> . unary_operator VARIABLE
    (25) constant -> . HEX_INT
    (26) constant -> . DOT_REAL
    (27) constant -> . EXP_REAL
    (28) constant -> . DEC_INT
    (29) constant -> . CHARACTER
    (86) function_call -> . VARIABLE LPAREN arguments RPAREN
    (87) function_call -> . VARIABLE LPAREN RPAREN
    (61) unary_operator -> . INCREMENT
    (62) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 23
    VARIABLE        shift and go to state 25
    HEX_INT         shift and go to state 31
    DOT_REAL        shift and go to state 18
    EXP_REAL        shift and go to state 14
    DEC_INT         shift and go to state 15
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 13
    DECREMENT       shift and go to state 27

    constant                       shift and go to state 11
    unary_expression               shift and go to state 26
    iterative_exp                  shift and go to state 150
    function_call                  shift and go to state 7
    exp                            shift and go to state 92
    unary_operator                 shift and go to state 20

state 136

    (88) arguments -> arguments COMMA . VARIABLE
    (89) arguments -> arguments COMMA . constant
    (25) constant -> . HEX_INT
    (26) constant -> . DOT_REAL
    (27) constant -> . EXP_REAL
    (28) constant -> . DEC_INT
    (29) constant -> . CHARACTER

    VARIABLE        shift and go to state 152
    HEX_INT         shift and go to state 31
    DOT_REAL        shift and go to state 18
    EXP_REAL        shift and go to state 14
    DEC_INT         shift and go to state 15
    CHARACTER       shift and go to state 6

    constant                       shift and go to state 151

state 137

    (86) function_call -> VARIABLE LPAREN arguments RPAREN .

    ADD             reduce using rule 86 (function_call -> VARIABLE LPAREN arguments RPAREN .)
    MINUS           reduce using rule 86 (function_call -> VARIABLE LPAREN arguments RPAREN .)
    MULT            reduce using rule 86 (function_call -> VARIABLE LPAREN arguments RPAREN .)
    DIV             reduce using rule 86 (function_call -> VARIABLE LPAREN arguments RPAREN .)
    MOD             reduce using rule 86 (function_call -> VARIABLE LPAREN arguments RPAREN .)
    L_OP            reduce using rule 86 (function_call -> VARIABLE LPAREN arguments RPAREN .)
    G_OP            reduce using rule 86 (function_call -> VARIABLE LPAREN arguments RPAREN .)
    LE_OP           reduce using rule 86 (function_call -> VARIABLE LPAREN arguments RPAREN .)
    GE_OP           reduce using rule 86 (function_call -> VARIABLE LPAREN arguments RPAREN .)
    NOTEQUALS       reduce using rule 86 (function_call -> VARIABLE LPAREN arguments RPAREN .)
    EQUALS_OP       reduce using rule 86 (function_call -> VARIABLE LPAREN arguments RPAREN .)
    OR_OP           reduce using rule 86 (function_call -> VARIABLE LPAREN arguments RPAREN .)
    AND_OP          reduce using rule 86 (function_call -> VARIABLE LPAREN arguments RPAREN .)
    MUL_ASSIGN      reduce using rule 86 (function_call -> VARIABLE LPAREN arguments RPAREN .)
    DIV_ASSIGN      reduce using rule 86 (function_call -> VARIABLE LPAREN arguments RPAREN .)
    MOD_ASSIGN      reduce using rule 86 (function_call -> VARIABLE LPAREN arguments RPAREN .)
    ADD_ASSIGN      reduce using rule 86 (function_call -> VARIABLE LPAREN arguments RPAREN .)
    SUB_ASSIGN      reduce using rule 86 (function_call -> VARIABLE LPAREN arguments RPAREN .)
    LEFT_ASSIGN     reduce using rule 86 (function_call -> VARIABLE LPAREN arguments RPAREN .)
    RIGHT_ASSIGN    reduce using rule 86 (function_call -> VARIABLE LPAREN arguments RPAREN .)
    AND_ASSIGN      reduce using rule 86 (function_call -> VARIABLE LPAREN arguments RPAREN .)
    XOR_ASSIGN      reduce using rule 86 (function_call -> VARIABLE LPAREN arguments RPAREN .)
    OR_ASSIGN       reduce using rule 86 (function_call -> VARIABLE LPAREN arguments RPAREN .)
    EQUALS          reduce using rule 86 (function_call -> VARIABLE LPAREN arguments RPAREN .)
    SEMI_COLON      reduce using rule 86 (function_call -> VARIABLE LPAREN arguments RPAREN .)
    RPAREN          reduce using rule 86 (function_call -> VARIABLE LPAREN arguments RPAREN .)
    COMMA           reduce using rule 86 (function_call -> VARIABLE LPAREN arguments RPAREN .)


state 138

    (73) iterative_statement -> DO SEMI_COLON WHILE LPAREN exp . RPAREN SEMI_COLON
    (30) exp -> exp . ADD exp
    (31) exp -> exp . MINUS exp
    (32) exp -> exp . MULT exp
    (33) exp -> exp . DIV exp
    (34) exp -> exp . MOD exp
    (35) exp -> exp . L_OP exp
    (36) exp -> exp . G_OP exp
    (37) exp -> exp . LE_OP exp
    (38) exp -> exp . GE_OP exp
    (39) exp -> exp . NOTEQUALS exp
    (40) exp -> exp . EQUALS_OP exp
    (41) exp -> exp . OR_OP exp
    (42) exp -> exp . AND_OP exp
    (43) exp -> exp . MUL_ASSIGN exp
    (44) exp -> exp . DIV_ASSIGN exp
    (45) exp -> exp . MOD_ASSIGN exp
    (46) exp -> exp . ADD_ASSIGN exp
    (47) exp -> exp . SUB_ASSIGN exp
    (48) exp -> exp . LEFT_ASSIGN exp
    (49) exp -> exp . RIGHT_ASSIGN exp
    (50) exp -> exp . AND_ASSIGN exp
    (51) exp -> exp . XOR_ASSIGN exp
    (52) exp -> exp . OR_ASSIGN exp
    (53) exp -> exp . EQUALS exp

    RPAREN          shift and go to state 153
    ADD             shift and go to state 70
    MINUS           shift and go to state 60
    MULT            shift and go to state 61
    DIV             shift and go to state 59
    MOD             shift and go to state 79
    L_OP            shift and go to state 76
    G_OP            shift and go to state 64
    LE_OP           shift and go to state 62
    GE_OP           shift and go to state 71
    NOTEQUALS       shift and go to state 55
    EQUALS_OP       shift and go to state 56
    OR_OP           shift and go to state 65
    AND_OP          shift and go to state 69
    MUL_ASSIGN      shift and go to state 77
    DIV_ASSIGN      shift and go to state 57
    MOD_ASSIGN      shift and go to state 73
    ADD_ASSIGN      shift and go to state 67
    SUB_ASSIGN      shift and go to state 72
    LEFT_ASSIGN     shift and go to state 78
    RIGHT_ASSIGN    shift and go to state 63
    AND_ASSIGN      shift and go to state 66
    XOR_ASSIGN      shift and go to state 74
    OR_ASSIGN       shift and go to state 75
    EQUALS          shift and go to state 68


state 139

    (71) iterative_statement -> DO statement WHILE LPAREN exp . RPAREN SEMI_COLON
    (30) exp -> exp . ADD exp
    (31) exp -> exp . MINUS exp
    (32) exp -> exp . MULT exp
    (33) exp -> exp . DIV exp
    (34) exp -> exp . MOD exp
    (35) exp -> exp . L_OP exp
    (36) exp -> exp . G_OP exp
    (37) exp -> exp . LE_OP exp
    (38) exp -> exp . GE_OP exp
    (39) exp -> exp . NOTEQUALS exp
    (40) exp -> exp . EQUALS_OP exp
    (41) exp -> exp . OR_OP exp
    (42) exp -> exp . AND_OP exp
    (43) exp -> exp . MUL_ASSIGN exp
    (44) exp -> exp . DIV_ASSIGN exp
    (45) exp -> exp . MOD_ASSIGN exp
    (46) exp -> exp . ADD_ASSIGN exp
    (47) exp -> exp . SUB_ASSIGN exp
    (48) exp -> exp . LEFT_ASSIGN exp
    (49) exp -> exp . RIGHT_ASSIGN exp
    (50) exp -> exp . AND_ASSIGN exp
    (51) exp -> exp . XOR_ASSIGN exp
    (52) exp -> exp . OR_ASSIGN exp
    (53) exp -> exp . EQUALS exp

    RPAREN          shift and go to state 154
    ADD             shift and go to state 70
    MINUS           shift and go to state 60
    MULT            shift and go to state 61
    DIV             shift and go to state 59
    MOD             shift and go to state 79
    L_OP            shift and go to state 76
    G_OP            shift and go to state 64
    LE_OP           shift and go to state 62
    GE_OP           shift and go to state 71
    NOTEQUALS       shift and go to state 55
    EQUALS_OP       shift and go to state 56
    OR_OP           shift and go to state 65
    AND_OP          shift and go to state 69
    MUL_ASSIGN      shift and go to state 77
    DIV_ASSIGN      shift and go to state 57
    MOD_ASSIGN      shift and go to state 73
    ADD_ASSIGN      shift and go to state 67
    SUB_ASSIGN      shift and go to state 72
    LEFT_ASSIGN     shift and go to state 78
    RIGHT_ASSIGN    shift and go to state 63
    AND_ASSIGN      shift and go to state 66
    XOR_ASSIGN      shift and go to state 74
    OR_ASSIGN       shift and go to state 75
    EQUALS          shift and go to state 68


state 140

    (72) iterative_statement -> DO LBRACE statements RBRACE WHILE . LPAREN exp RPAREN SEMI_COLON

    LPAREN          shift and go to state 155


state 141

    (74) iterative_statement -> DO LBRACE RBRACE WHILE LPAREN . exp RPAREN SEMI_COLON
    (30) exp -> . exp ADD exp
    (31) exp -> . exp MINUS exp
    (32) exp -> . exp MULT exp
    (33) exp -> . exp DIV exp
    (34) exp -> . exp MOD exp
    (35) exp -> . exp L_OP exp
    (36) exp -> . exp G_OP exp
    (37) exp -> . exp LE_OP exp
    (38) exp -> . exp GE_OP exp
    (39) exp -> . exp NOTEQUALS exp
    (40) exp -> . exp EQUALS_OP exp
    (41) exp -> . exp OR_OP exp
    (42) exp -> . exp AND_OP exp
    (43) exp -> . exp MUL_ASSIGN exp
    (44) exp -> . exp DIV_ASSIGN exp
    (45) exp -> . exp MOD_ASSIGN exp
    (46) exp -> . exp ADD_ASSIGN exp
    (47) exp -> . exp SUB_ASSIGN exp
    (48) exp -> . exp LEFT_ASSIGN exp
    (49) exp -> . exp RIGHT_ASSIGN exp
    (50) exp -> . exp AND_ASSIGN exp
    (51) exp -> . exp XOR_ASSIGN exp
    (52) exp -> . exp OR_ASSIGN exp
    (53) exp -> . exp EQUALS exp
    (54) exp -> . unary_expression
    (55) exp -> . LPAREN exp RPAREN
    (56) exp -> . constant
    (57) exp -> . VARIABLE
    (58) exp -> . function_call
    (59) unary_expression -> . VARIABLE unary_operator
    (60) unary_expression -> . unary_operator VARIABLE
    (25) constant -> . HEX_INT
    (26) constant -> . DOT_REAL
    (27) constant -> . EXP_REAL
    (28) constant -> . DEC_INT
    (29) constant -> . CHARACTER
    (86) function_call -> . VARIABLE LPAREN arguments RPAREN
    (87) function_call -> . VARIABLE LPAREN RPAREN
    (61) unary_operator -> . INCREMENT
    (62) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 23
    VARIABLE        shift and go to state 25
    HEX_INT         shift and go to state 31
    DOT_REAL        shift and go to state 18
    EXP_REAL        shift and go to state 14
    DEC_INT         shift and go to state 15
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 13
    DECREMENT       shift and go to state 27

    constant                       shift and go to state 11
    unary_expression               shift and go to state 26
    function_call                  shift and go to state 7
    exp                            shift and go to state 156
    unary_operator                 shift and go to state 20

state 142

    (68) iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .

    RBRACE          reduce using rule 68 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    LPAREN          reduce using rule 68 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    VARIABLE        reduce using rule 68 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    FOR             reduce using rule 68 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    WHILE           reduce using rule 68 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    DO              reduce using rule 68 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    BREAK           reduce using rule 68 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    CONTINUE        reduce using rule 68 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    RETURN          reduce using rule 68 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    INT             reduce using rule 68 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    FLOAT           reduce using rule 68 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    CHAR            reduce using rule 68 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    DOUBLE          reduce using rule 68 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    VOID            reduce using rule 68 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    SHORT           reduce using rule 68 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    LONG            reduce using rule 68 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    HEX_INT         reduce using rule 68 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    DOT_REAL        reduce using rule 68 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    EXP_REAL        reduce using rule 68 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    DEC_INT         reduce using rule 68 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    CHARACTER       reduce using rule 68 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    INCREMENT       reduce using rule 68 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    DECREMENT       reduce using rule 68 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    $end            reduce using rule 68 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)


state 143

    (67) iterative_statement -> WHILE LPAREN exp RPAREN statement .

    RBRACE          reduce using rule 67 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    LPAREN          reduce using rule 67 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    VARIABLE        reduce using rule 67 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    FOR             reduce using rule 67 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    WHILE           reduce using rule 67 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    DO              reduce using rule 67 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    BREAK           reduce using rule 67 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    CONTINUE        reduce using rule 67 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    RETURN          reduce using rule 67 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    INT             reduce using rule 67 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    FLOAT           reduce using rule 67 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    CHAR            reduce using rule 67 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    DOUBLE          reduce using rule 67 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    VOID            reduce using rule 67 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    SHORT           reduce using rule 67 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    LONG            reduce using rule 67 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    HEX_INT         reduce using rule 67 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    DOT_REAL        reduce using rule 67 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    EXP_REAL        reduce using rule 67 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    DEC_INT         reduce using rule 67 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    CHARACTER       reduce using rule 67 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    INCREMENT       reduce using rule 67 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    DECREMENT       reduce using rule 67 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    $end            reduce using rule 67 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)


state 144

    (69) iterative_statement -> WHILE LPAREN exp RPAREN LBRACE . statements RBRACE
    (70) iterative_statement -> WHILE LPAREN exp RPAREN LBRACE . RBRACE
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (13) declaration -> . type enum_list SEMI_COLON
    (30) exp -> . exp ADD exp
    (31) exp -> . exp MINUS exp
    (32) exp -> . exp MULT exp
    (33) exp -> . exp DIV exp
    (34) exp -> . exp MOD exp
    (35) exp -> . exp L_OP exp
    (36) exp -> . exp G_OP exp
    (37) exp -> . exp LE_OP exp
    (38) exp -> . exp GE_OP exp
    (39) exp -> . exp NOTEQUALS exp
    (40) exp -> . exp EQUALS_OP exp
    (41) exp -> . exp OR_OP exp
    (42) exp -> . exp AND_OP exp
    (43) exp -> . exp MUL_ASSIGN exp
    (44) exp -> . exp DIV_ASSIGN exp
    (45) exp -> . exp MOD_ASSIGN exp
    (46) exp -> . exp ADD_ASSIGN exp
    (47) exp -> . exp SUB_ASSIGN exp
    (48) exp -> . exp LEFT_ASSIGN exp
    (49) exp -> . exp RIGHT_ASSIGN exp
    (50) exp -> . exp AND_ASSIGN exp
    (51) exp -> . exp XOR_ASSIGN exp
    (52) exp -> . exp OR_ASSIGN exp
    (53) exp -> . exp EQUALS exp
    (54) exp -> . unary_expression
    (55) exp -> . LPAREN exp RPAREN
    (56) exp -> . constant
    (57) exp -> . VARIABLE
    (58) exp -> . function_call
    (63) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (64) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE
    (65) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (66) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE
    (67) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (68) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (69) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE statements RBRACE
    (70) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (71) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (72) iterative_statement -> . DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (73) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (74) iterative_statement -> . DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (77) function -> . normal_function
    (78) function -> . main_function
    (9) constant_statement -> . BREAK SEMI_COLON
    (10) constant_statement -> . CONTINUE SEMI_COLON
    (11) constant_statement -> . RETURN SEMI_COLON
    (12) constant_statement -> . RETURN exp SEMI_COLON
    (18) type -> . INT
    (19) type -> . FLOAT
    (20) type -> . CHAR
    (21) type -> . DOUBLE
    (22) type -> . VOID
    (23) type -> . SHORT
    (24) type -> . LONG
    (59) unary_expression -> . VARIABLE unary_operator
    (60) unary_expression -> . unary_operator VARIABLE
    (25) constant -> . HEX_INT
    (26) constant -> . DOT_REAL
    (27) constant -> . EXP_REAL
    (28) constant -> . DEC_INT
    (29) constant -> . CHARACTER
    (86) function_call -> . VARIABLE LPAREN arguments RPAREN
    (87) function_call -> . VARIABLE LPAREN RPAREN
    (81) normal_function -> . type VARIABLE LPAREN parameters RPAREN LBRACE statements RBRACE
    (82) normal_function -> . type VARIABLE LPAREN parameters RPAREN LBRACE RBRACE
    (79) main_function -> . type MAIN LPAREN parameters RPAREN LBRACE statements RBRACE
    (80) main_function -> . type MAIN LPAREN parameters RPAREN LBRACE RBRACE
    (61) unary_operator -> . INCREMENT
    (62) unary_operator -> . DECREMENT

    RBRACE          shift and go to state 158
    LPAREN          shift and go to state 23
    VARIABLE        shift and go to state 25
    FOR             shift and go to state 22
    WHILE           shift and go to state 9
    DO              shift and go to state 4
    BREAK           shift and go to state 34
    CONTINUE        shift and go to state 35
    RETURN          shift and go to state 1
    INT             shift and go to state 29
    FLOAT           shift and go to state 33
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 5
    SHORT           shift and go to state 10
    LONG            shift and go to state 37
    HEX_INT         shift and go to state 31
    DOT_REAL        shift and go to state 18
    EXP_REAL        shift and go to state 14
    DEC_INT         shift and go to state 15
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 13
    DECREMENT       shift and go to state 27

    function                       shift and go to state 21
    main_function                  shift and go to state 2
    statements                     shift and go to state 157
    exp                            shift and go to state 36
    unary_expression               shift and go to state 26
    type                           shift and go to state 19
    normal_function                shift and go to state 32
    function_call                  shift and go to state 7
    statement                      shift and go to state 17
    declaration                    shift and go to state 24
    constant_statement             shift and go to state 28
    constant                       shift and go to state 11
    iterative_statement            shift and go to state 12
    unary_operator                 shift and go to state 20

state 145

    (15) enum_list -> VARIABLE EQUALS exp COMMA . enum_list
    (14) enum_list -> . VARIABLE COMMA enum_list
    (15) enum_list -> . VARIABLE EQUALS exp COMMA enum_list
    (16) enum_list -> . VARIABLE
    (17) enum_list -> . VARIABLE EQUALS exp

    VARIABLE        shift and go to state 128

    enum_list                      shift and go to state 159

state 146

    (81) normal_function -> type VARIABLE LPAREN parameters RPAREN . LBRACE statements RBRACE
    (82) normal_function -> type VARIABLE LPAREN parameters RPAREN . LBRACE RBRACE

    LBRACE          shift and go to state 160


state 147

    (83) parameters -> type VARIABLE . COMMA parameters
    (84) parameters -> type VARIABLE .

    COMMA           shift and go to state 161
    RPAREN          reduce using rule 84 (parameters -> type VARIABLE .)


state 148

    (79) main_function -> type MAIN LPAREN parameters RPAREN . LBRACE statements RBRACE
    (80) main_function -> type MAIN LPAREN parameters RPAREN . LBRACE RBRACE

    LBRACE          shift and go to state 162


state 149

    (63) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp . SEMI_COLON iterative_exp RPAREN statement
    (64) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp . SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE
    (65) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp . SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (66) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp . SEMI_COLON iterative_exp RPAREN LBRACE RBRACE

    SEMI_COLON      shift and go to state 163


state 150

    (75) iterative_exp -> exp COMMA iterative_exp .

    SEMI_COLON      reduce using rule 75 (iterative_exp -> exp COMMA iterative_exp .)
    RPAREN          reduce using rule 75 (iterative_exp -> exp COMMA iterative_exp .)


state 151

    (89) arguments -> arguments COMMA constant .

    RPAREN          reduce using rule 89 (arguments -> arguments COMMA constant .)
    COMMA           reduce using rule 89 (arguments -> arguments COMMA constant .)


state 152

    (88) arguments -> arguments COMMA VARIABLE .

    RPAREN          reduce using rule 88 (arguments -> arguments COMMA VARIABLE .)
    COMMA           reduce using rule 88 (arguments -> arguments COMMA VARIABLE .)


state 153

    (73) iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN . SEMI_COLON

    SEMI_COLON      shift and go to state 164


state 154

    (71) iterative_statement -> DO statement WHILE LPAREN exp RPAREN . SEMI_COLON

    SEMI_COLON      shift and go to state 165


state 155

    (72) iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN . exp RPAREN SEMI_COLON
    (30) exp -> . exp ADD exp
    (31) exp -> . exp MINUS exp
    (32) exp -> . exp MULT exp
    (33) exp -> . exp DIV exp
    (34) exp -> . exp MOD exp
    (35) exp -> . exp L_OP exp
    (36) exp -> . exp G_OP exp
    (37) exp -> . exp LE_OP exp
    (38) exp -> . exp GE_OP exp
    (39) exp -> . exp NOTEQUALS exp
    (40) exp -> . exp EQUALS_OP exp
    (41) exp -> . exp OR_OP exp
    (42) exp -> . exp AND_OP exp
    (43) exp -> . exp MUL_ASSIGN exp
    (44) exp -> . exp DIV_ASSIGN exp
    (45) exp -> . exp MOD_ASSIGN exp
    (46) exp -> . exp ADD_ASSIGN exp
    (47) exp -> . exp SUB_ASSIGN exp
    (48) exp -> . exp LEFT_ASSIGN exp
    (49) exp -> . exp RIGHT_ASSIGN exp
    (50) exp -> . exp AND_ASSIGN exp
    (51) exp -> . exp XOR_ASSIGN exp
    (52) exp -> . exp OR_ASSIGN exp
    (53) exp -> . exp EQUALS exp
    (54) exp -> . unary_expression
    (55) exp -> . LPAREN exp RPAREN
    (56) exp -> . constant
    (57) exp -> . VARIABLE
    (58) exp -> . function_call
    (59) unary_expression -> . VARIABLE unary_operator
    (60) unary_expression -> . unary_operator VARIABLE
    (25) constant -> . HEX_INT
    (26) constant -> . DOT_REAL
    (27) constant -> . EXP_REAL
    (28) constant -> . DEC_INT
    (29) constant -> . CHARACTER
    (86) function_call -> . VARIABLE LPAREN arguments RPAREN
    (87) function_call -> . VARIABLE LPAREN RPAREN
    (61) unary_operator -> . INCREMENT
    (62) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 23
    VARIABLE        shift and go to state 25
    HEX_INT         shift and go to state 31
    DOT_REAL        shift and go to state 18
    EXP_REAL        shift and go to state 14
    DEC_INT         shift and go to state 15
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 13
    DECREMENT       shift and go to state 27

    constant                       shift and go to state 11
    unary_expression               shift and go to state 26
    function_call                  shift and go to state 7
    exp                            shift and go to state 166
    unary_operator                 shift and go to state 20

state 156

    (74) iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp . RPAREN SEMI_COLON
    (30) exp -> exp . ADD exp
    (31) exp -> exp . MINUS exp
    (32) exp -> exp . MULT exp
    (33) exp -> exp . DIV exp
    (34) exp -> exp . MOD exp
    (35) exp -> exp . L_OP exp
    (36) exp -> exp . G_OP exp
    (37) exp -> exp . LE_OP exp
    (38) exp -> exp . GE_OP exp
    (39) exp -> exp . NOTEQUALS exp
    (40) exp -> exp . EQUALS_OP exp
    (41) exp -> exp . OR_OP exp
    (42) exp -> exp . AND_OP exp
    (43) exp -> exp . MUL_ASSIGN exp
    (44) exp -> exp . DIV_ASSIGN exp
    (45) exp -> exp . MOD_ASSIGN exp
    (46) exp -> exp . ADD_ASSIGN exp
    (47) exp -> exp . SUB_ASSIGN exp
    (48) exp -> exp . LEFT_ASSIGN exp
    (49) exp -> exp . RIGHT_ASSIGN exp
    (50) exp -> exp . AND_ASSIGN exp
    (51) exp -> exp . XOR_ASSIGN exp
    (52) exp -> exp . OR_ASSIGN exp
    (53) exp -> exp . EQUALS exp

    RPAREN          shift and go to state 167
    ADD             shift and go to state 70
    MINUS           shift and go to state 60
    MULT            shift and go to state 61
    DIV             shift and go to state 59
    MOD             shift and go to state 79
    L_OP            shift and go to state 76
    G_OP            shift and go to state 64
    LE_OP           shift and go to state 62
    GE_OP           shift and go to state 71
    NOTEQUALS       shift and go to state 55
    EQUALS_OP       shift and go to state 56
    OR_OP           shift and go to state 65
    AND_OP          shift and go to state 69
    MUL_ASSIGN      shift and go to state 77
    DIV_ASSIGN      shift and go to state 57
    MOD_ASSIGN      shift and go to state 73
    ADD_ASSIGN      shift and go to state 67
    SUB_ASSIGN      shift and go to state 72
    LEFT_ASSIGN     shift and go to state 78
    RIGHT_ASSIGN    shift and go to state 63
    AND_ASSIGN      shift and go to state 66
    XOR_ASSIGN      shift and go to state 74
    OR_ASSIGN       shift and go to state 75
    EQUALS          shift and go to state 68


state 157

    (69) iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements . RBRACE
    (2) statements -> statements . statement
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (13) declaration -> . type enum_list SEMI_COLON
    (30) exp -> . exp ADD exp
    (31) exp -> . exp MINUS exp
    (32) exp -> . exp MULT exp
    (33) exp -> . exp DIV exp
    (34) exp -> . exp MOD exp
    (35) exp -> . exp L_OP exp
    (36) exp -> . exp G_OP exp
    (37) exp -> . exp LE_OP exp
    (38) exp -> . exp GE_OP exp
    (39) exp -> . exp NOTEQUALS exp
    (40) exp -> . exp EQUALS_OP exp
    (41) exp -> . exp OR_OP exp
    (42) exp -> . exp AND_OP exp
    (43) exp -> . exp MUL_ASSIGN exp
    (44) exp -> . exp DIV_ASSIGN exp
    (45) exp -> . exp MOD_ASSIGN exp
    (46) exp -> . exp ADD_ASSIGN exp
    (47) exp -> . exp SUB_ASSIGN exp
    (48) exp -> . exp LEFT_ASSIGN exp
    (49) exp -> . exp RIGHT_ASSIGN exp
    (50) exp -> . exp AND_ASSIGN exp
    (51) exp -> . exp XOR_ASSIGN exp
    (52) exp -> . exp OR_ASSIGN exp
    (53) exp -> . exp EQUALS exp
    (54) exp -> . unary_expression
    (55) exp -> . LPAREN exp RPAREN
    (56) exp -> . constant
    (57) exp -> . VARIABLE
    (58) exp -> . function_call
    (63) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (64) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE
    (65) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (66) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE
    (67) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (68) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (69) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE statements RBRACE
    (70) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (71) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (72) iterative_statement -> . DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (73) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (74) iterative_statement -> . DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (77) function -> . normal_function
    (78) function -> . main_function
    (9) constant_statement -> . BREAK SEMI_COLON
    (10) constant_statement -> . CONTINUE SEMI_COLON
    (11) constant_statement -> . RETURN SEMI_COLON
    (12) constant_statement -> . RETURN exp SEMI_COLON
    (18) type -> . INT
    (19) type -> . FLOAT
    (20) type -> . CHAR
    (21) type -> . DOUBLE
    (22) type -> . VOID
    (23) type -> . SHORT
    (24) type -> . LONG
    (59) unary_expression -> . VARIABLE unary_operator
    (60) unary_expression -> . unary_operator VARIABLE
    (25) constant -> . HEX_INT
    (26) constant -> . DOT_REAL
    (27) constant -> . EXP_REAL
    (28) constant -> . DEC_INT
    (29) constant -> . CHARACTER
    (86) function_call -> . VARIABLE LPAREN arguments RPAREN
    (87) function_call -> . VARIABLE LPAREN RPAREN
    (81) normal_function -> . type VARIABLE LPAREN parameters RPAREN LBRACE statements RBRACE
    (82) normal_function -> . type VARIABLE LPAREN parameters RPAREN LBRACE RBRACE
    (79) main_function -> . type MAIN LPAREN parameters RPAREN LBRACE statements RBRACE
    (80) main_function -> . type MAIN LPAREN parameters RPAREN LBRACE RBRACE
    (61) unary_operator -> . INCREMENT
    (62) unary_operator -> . DECREMENT

    RBRACE          shift and go to state 168
    LPAREN          shift and go to state 23
    VARIABLE        shift and go to state 25
    FOR             shift and go to state 22
    WHILE           shift and go to state 9
    DO              shift and go to state 4
    BREAK           shift and go to state 34
    CONTINUE        shift and go to state 35
    RETURN          shift and go to state 1
    INT             shift and go to state 29
    FLOAT           shift and go to state 33
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 5
    SHORT           shift and go to state 10
    LONG            shift and go to state 37
    HEX_INT         shift and go to state 31
    DOT_REAL        shift and go to state 18
    EXP_REAL        shift and go to state 14
    DEC_INT         shift and go to state 15
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 13
    DECREMENT       shift and go to state 27

    function                       shift and go to state 21
    main_function                  shift and go to state 2
    exp                            shift and go to state 36
    unary_expression               shift and go to state 26
    type                           shift and go to state 19
    normal_function                shift and go to state 32
    function_call                  shift and go to state 7
    statement                      shift and go to state 40
    declaration                    shift and go to state 24
    constant_statement             shift and go to state 28
    constant                       shift and go to state 11
    iterative_statement            shift and go to state 12
    unary_operator                 shift and go to state 20

state 158

    (70) iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE .

    RBRACE          reduce using rule 70 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    LPAREN          reduce using rule 70 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    VARIABLE        reduce using rule 70 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    FOR             reduce using rule 70 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    WHILE           reduce using rule 70 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    DO              reduce using rule 70 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    BREAK           reduce using rule 70 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    CONTINUE        reduce using rule 70 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    RETURN          reduce using rule 70 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    INT             reduce using rule 70 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    FLOAT           reduce using rule 70 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    CHAR            reduce using rule 70 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    DOUBLE          reduce using rule 70 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    VOID            reduce using rule 70 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    SHORT           reduce using rule 70 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    LONG            reduce using rule 70 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    HEX_INT         reduce using rule 70 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    DOT_REAL        reduce using rule 70 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    EXP_REAL        reduce using rule 70 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    DEC_INT         reduce using rule 70 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    CHARACTER       reduce using rule 70 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    INCREMENT       reduce using rule 70 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    DECREMENT       reduce using rule 70 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    $end            reduce using rule 70 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)


state 159

    (15) enum_list -> VARIABLE EQUALS exp COMMA enum_list .

    SEMI_COLON      reduce using rule 15 (enum_list -> VARIABLE EQUALS exp COMMA enum_list .)


state 160

    (81) normal_function -> type VARIABLE LPAREN parameters RPAREN LBRACE . statements RBRACE
    (82) normal_function -> type VARIABLE LPAREN parameters RPAREN LBRACE . RBRACE
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (13) declaration -> . type enum_list SEMI_COLON
    (30) exp -> . exp ADD exp
    (31) exp -> . exp MINUS exp
    (32) exp -> . exp MULT exp
    (33) exp -> . exp DIV exp
    (34) exp -> . exp MOD exp
    (35) exp -> . exp L_OP exp
    (36) exp -> . exp G_OP exp
    (37) exp -> . exp LE_OP exp
    (38) exp -> . exp GE_OP exp
    (39) exp -> . exp NOTEQUALS exp
    (40) exp -> . exp EQUALS_OP exp
    (41) exp -> . exp OR_OP exp
    (42) exp -> . exp AND_OP exp
    (43) exp -> . exp MUL_ASSIGN exp
    (44) exp -> . exp DIV_ASSIGN exp
    (45) exp -> . exp MOD_ASSIGN exp
    (46) exp -> . exp ADD_ASSIGN exp
    (47) exp -> . exp SUB_ASSIGN exp
    (48) exp -> . exp LEFT_ASSIGN exp
    (49) exp -> . exp RIGHT_ASSIGN exp
    (50) exp -> . exp AND_ASSIGN exp
    (51) exp -> . exp XOR_ASSIGN exp
    (52) exp -> . exp OR_ASSIGN exp
    (53) exp -> . exp EQUALS exp
    (54) exp -> . unary_expression
    (55) exp -> . LPAREN exp RPAREN
    (56) exp -> . constant
    (57) exp -> . VARIABLE
    (58) exp -> . function_call
    (63) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (64) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE
    (65) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (66) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE
    (67) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (68) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (69) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE statements RBRACE
    (70) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (71) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (72) iterative_statement -> . DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (73) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (74) iterative_statement -> . DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (77) function -> . normal_function
    (78) function -> . main_function
    (9) constant_statement -> . BREAK SEMI_COLON
    (10) constant_statement -> . CONTINUE SEMI_COLON
    (11) constant_statement -> . RETURN SEMI_COLON
    (12) constant_statement -> . RETURN exp SEMI_COLON
    (18) type -> . INT
    (19) type -> . FLOAT
    (20) type -> . CHAR
    (21) type -> . DOUBLE
    (22) type -> . VOID
    (23) type -> . SHORT
    (24) type -> . LONG
    (59) unary_expression -> . VARIABLE unary_operator
    (60) unary_expression -> . unary_operator VARIABLE
    (25) constant -> . HEX_INT
    (26) constant -> . DOT_REAL
    (27) constant -> . EXP_REAL
    (28) constant -> . DEC_INT
    (29) constant -> . CHARACTER
    (86) function_call -> . VARIABLE LPAREN arguments RPAREN
    (87) function_call -> . VARIABLE LPAREN RPAREN
    (81) normal_function -> . type VARIABLE LPAREN parameters RPAREN LBRACE statements RBRACE
    (82) normal_function -> . type VARIABLE LPAREN parameters RPAREN LBRACE RBRACE
    (79) main_function -> . type MAIN LPAREN parameters RPAREN LBRACE statements RBRACE
    (80) main_function -> . type MAIN LPAREN parameters RPAREN LBRACE RBRACE
    (61) unary_operator -> . INCREMENT
    (62) unary_operator -> . DECREMENT

    RBRACE          shift and go to state 170
    LPAREN          shift and go to state 23
    VARIABLE        shift and go to state 25
    FOR             shift and go to state 22
    WHILE           shift and go to state 9
    DO              shift and go to state 4
    BREAK           shift and go to state 34
    CONTINUE        shift and go to state 35
    RETURN          shift and go to state 1
    INT             shift and go to state 29
    FLOAT           shift and go to state 33
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 5
    SHORT           shift and go to state 10
    LONG            shift and go to state 37
    HEX_INT         shift and go to state 31
    DOT_REAL        shift and go to state 18
    EXP_REAL        shift and go to state 14
    DEC_INT         shift and go to state 15
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 13
    DECREMENT       shift and go to state 27

    function                       shift and go to state 21
    main_function                  shift and go to state 2
    statements                     shift and go to state 169
    statement                      shift and go to state 17
    iterative_statement            shift and go to state 12
    normal_function                shift and go to state 32
    unary_expression               shift and go to state 26
    function_call                  shift and go to state 7
    exp                            shift and go to state 36
    declaration                    shift and go to state 24
    constant_statement             shift and go to state 28
    constant                       shift and go to state 11
    type                           shift and go to state 19
    unary_operator                 shift and go to state 20

state 161

    (83) parameters -> type VARIABLE COMMA . parameters
    (83) parameters -> . type VARIABLE COMMA parameters
    (84) parameters -> . type VARIABLE
    (85) parameters -> . empty
    (18) type -> . INT
    (19) type -> . FLOAT
    (20) type -> . CHAR
    (21) type -> . DOUBLE
    (22) type -> . VOID
    (23) type -> . SHORT
    (24) type -> . LONG
    (92) empty -> .

    INT             shift and go to state 29
    FLOAT           shift and go to state 33
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 5
    SHORT           shift and go to state 10
    LONG            shift and go to state 37
    RPAREN          reduce using rule 92 (empty -> .)

    type                           shift and go to state 131
    empty                          shift and go to state 132
    parameters                     shift and go to state 171

state 162

    (79) main_function -> type MAIN LPAREN parameters RPAREN LBRACE . statements RBRACE
    (80) main_function -> type MAIN LPAREN parameters RPAREN LBRACE . RBRACE
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (13) declaration -> . type enum_list SEMI_COLON
    (30) exp -> . exp ADD exp
    (31) exp -> . exp MINUS exp
    (32) exp -> . exp MULT exp
    (33) exp -> . exp DIV exp
    (34) exp -> . exp MOD exp
    (35) exp -> . exp L_OP exp
    (36) exp -> . exp G_OP exp
    (37) exp -> . exp LE_OP exp
    (38) exp -> . exp GE_OP exp
    (39) exp -> . exp NOTEQUALS exp
    (40) exp -> . exp EQUALS_OP exp
    (41) exp -> . exp OR_OP exp
    (42) exp -> . exp AND_OP exp
    (43) exp -> . exp MUL_ASSIGN exp
    (44) exp -> . exp DIV_ASSIGN exp
    (45) exp -> . exp MOD_ASSIGN exp
    (46) exp -> . exp ADD_ASSIGN exp
    (47) exp -> . exp SUB_ASSIGN exp
    (48) exp -> . exp LEFT_ASSIGN exp
    (49) exp -> . exp RIGHT_ASSIGN exp
    (50) exp -> . exp AND_ASSIGN exp
    (51) exp -> . exp XOR_ASSIGN exp
    (52) exp -> . exp OR_ASSIGN exp
    (53) exp -> . exp EQUALS exp
    (54) exp -> . unary_expression
    (55) exp -> . LPAREN exp RPAREN
    (56) exp -> . constant
    (57) exp -> . VARIABLE
    (58) exp -> . function_call
    (63) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (64) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE
    (65) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (66) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE
    (67) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (68) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (69) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE statements RBRACE
    (70) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (71) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (72) iterative_statement -> . DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (73) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (74) iterative_statement -> . DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (77) function -> . normal_function
    (78) function -> . main_function
    (9) constant_statement -> . BREAK SEMI_COLON
    (10) constant_statement -> . CONTINUE SEMI_COLON
    (11) constant_statement -> . RETURN SEMI_COLON
    (12) constant_statement -> . RETURN exp SEMI_COLON
    (18) type -> . INT
    (19) type -> . FLOAT
    (20) type -> . CHAR
    (21) type -> . DOUBLE
    (22) type -> . VOID
    (23) type -> . SHORT
    (24) type -> . LONG
    (59) unary_expression -> . VARIABLE unary_operator
    (60) unary_expression -> . unary_operator VARIABLE
    (25) constant -> . HEX_INT
    (26) constant -> . DOT_REAL
    (27) constant -> . EXP_REAL
    (28) constant -> . DEC_INT
    (29) constant -> . CHARACTER
    (86) function_call -> . VARIABLE LPAREN arguments RPAREN
    (87) function_call -> . VARIABLE LPAREN RPAREN
    (81) normal_function -> . type VARIABLE LPAREN parameters RPAREN LBRACE statements RBRACE
    (82) normal_function -> . type VARIABLE LPAREN parameters RPAREN LBRACE RBRACE
    (79) main_function -> . type MAIN LPAREN parameters RPAREN LBRACE statements RBRACE
    (80) main_function -> . type MAIN LPAREN parameters RPAREN LBRACE RBRACE
    (61) unary_operator -> . INCREMENT
    (62) unary_operator -> . DECREMENT

    RBRACE          shift and go to state 173
    LPAREN          shift and go to state 23
    VARIABLE        shift and go to state 25
    FOR             shift and go to state 22
    WHILE           shift and go to state 9
    DO              shift and go to state 4
    BREAK           shift and go to state 34
    CONTINUE        shift and go to state 35
    RETURN          shift and go to state 1
    INT             shift and go to state 29
    FLOAT           shift and go to state 33
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 5
    SHORT           shift and go to state 10
    LONG            shift and go to state 37
    HEX_INT         shift and go to state 31
    DOT_REAL        shift and go to state 18
    EXP_REAL        shift and go to state 14
    DEC_INT         shift and go to state 15
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 13
    DECREMENT       shift and go to state 27

    function                       shift and go to state 21
    main_function                  shift and go to state 2
    statements                     shift and go to state 172
    statement                      shift and go to state 17
    iterative_statement            shift and go to state 12
    normal_function                shift and go to state 32
    unary_expression               shift and go to state 26
    function_call                  shift and go to state 7
    exp                            shift and go to state 36
    declaration                    shift and go to state 24
    constant_statement             shift and go to state 28
    constant                       shift and go to state 11
    type                           shift and go to state 19
    unary_operator                 shift and go to state 20

state 163

    (63) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON . iterative_exp RPAREN statement
    (64) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON . iterative_exp RPAREN LBRACE statements RBRACE
    (65) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON . iterative_exp RPAREN SEMI_COLON
    (66) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON . iterative_exp RPAREN LBRACE RBRACE
    (75) iterative_exp -> . exp COMMA iterative_exp
    (76) iterative_exp -> . exp
    (30) exp -> . exp ADD exp
    (31) exp -> . exp MINUS exp
    (32) exp -> . exp MULT exp
    (33) exp -> . exp DIV exp
    (34) exp -> . exp MOD exp
    (35) exp -> . exp L_OP exp
    (36) exp -> . exp G_OP exp
    (37) exp -> . exp LE_OP exp
    (38) exp -> . exp GE_OP exp
    (39) exp -> . exp NOTEQUALS exp
    (40) exp -> . exp EQUALS_OP exp
    (41) exp -> . exp OR_OP exp
    (42) exp -> . exp AND_OP exp
    (43) exp -> . exp MUL_ASSIGN exp
    (44) exp -> . exp DIV_ASSIGN exp
    (45) exp -> . exp MOD_ASSIGN exp
    (46) exp -> . exp ADD_ASSIGN exp
    (47) exp -> . exp SUB_ASSIGN exp
    (48) exp -> . exp LEFT_ASSIGN exp
    (49) exp -> . exp RIGHT_ASSIGN exp
    (50) exp -> . exp AND_ASSIGN exp
    (51) exp -> . exp XOR_ASSIGN exp
    (52) exp -> . exp OR_ASSIGN exp
    (53) exp -> . exp EQUALS exp
    (54) exp -> . unary_expression
    (55) exp -> . LPAREN exp RPAREN
    (56) exp -> . constant
    (57) exp -> . VARIABLE
    (58) exp -> . function_call
    (59) unary_expression -> . VARIABLE unary_operator
    (60) unary_expression -> . unary_operator VARIABLE
    (25) constant -> . HEX_INT
    (26) constant -> . DOT_REAL
    (27) constant -> . EXP_REAL
    (28) constant -> . DEC_INT
    (29) constant -> . CHARACTER
    (86) function_call -> . VARIABLE LPAREN arguments RPAREN
    (87) function_call -> . VARIABLE LPAREN RPAREN
    (61) unary_operator -> . INCREMENT
    (62) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 23
    VARIABLE        shift and go to state 25
    HEX_INT         shift and go to state 31
    DOT_REAL        shift and go to state 18
    EXP_REAL        shift and go to state 14
    DEC_INT         shift and go to state 15
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 13
    DECREMENT       shift and go to state 27

    constant                       shift and go to state 11
    unary_expression               shift and go to state 26
    iterative_exp                  shift and go to state 174
    function_call                  shift and go to state 7
    exp                            shift and go to state 92
    unary_operator                 shift and go to state 20

state 164

    (73) iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .

    RBRACE          reduce using rule 73 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    LPAREN          reduce using rule 73 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    VARIABLE        reduce using rule 73 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    FOR             reduce using rule 73 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    WHILE           reduce using rule 73 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    DO              reduce using rule 73 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    BREAK           reduce using rule 73 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    CONTINUE        reduce using rule 73 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    RETURN          reduce using rule 73 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    INT             reduce using rule 73 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    FLOAT           reduce using rule 73 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    CHAR            reduce using rule 73 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    DOUBLE          reduce using rule 73 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    VOID            reduce using rule 73 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    SHORT           reduce using rule 73 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    LONG            reduce using rule 73 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    HEX_INT         reduce using rule 73 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    DOT_REAL        reduce using rule 73 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    EXP_REAL        reduce using rule 73 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    DEC_INT         reduce using rule 73 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    CHARACTER       reduce using rule 73 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    INCREMENT       reduce using rule 73 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    DECREMENT       reduce using rule 73 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    $end            reduce using rule 73 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)


state 165

    (71) iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .

    RBRACE          reduce using rule 71 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    LPAREN          reduce using rule 71 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    VARIABLE        reduce using rule 71 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    FOR             reduce using rule 71 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    WHILE           reduce using rule 71 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    DO              reduce using rule 71 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    BREAK           reduce using rule 71 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    CONTINUE        reduce using rule 71 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    RETURN          reduce using rule 71 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    INT             reduce using rule 71 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    FLOAT           reduce using rule 71 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    CHAR            reduce using rule 71 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    DOUBLE          reduce using rule 71 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    VOID            reduce using rule 71 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    SHORT           reduce using rule 71 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    LONG            reduce using rule 71 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    HEX_INT         reduce using rule 71 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    DOT_REAL        reduce using rule 71 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    EXP_REAL        reduce using rule 71 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    DEC_INT         reduce using rule 71 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    CHARACTER       reduce using rule 71 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    INCREMENT       reduce using rule 71 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    DECREMENT       reduce using rule 71 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    $end            reduce using rule 71 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)


state 166

    (72) iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp . RPAREN SEMI_COLON
    (30) exp -> exp . ADD exp
    (31) exp -> exp . MINUS exp
    (32) exp -> exp . MULT exp
    (33) exp -> exp . DIV exp
    (34) exp -> exp . MOD exp
    (35) exp -> exp . L_OP exp
    (36) exp -> exp . G_OP exp
    (37) exp -> exp . LE_OP exp
    (38) exp -> exp . GE_OP exp
    (39) exp -> exp . NOTEQUALS exp
    (40) exp -> exp . EQUALS_OP exp
    (41) exp -> exp . OR_OP exp
    (42) exp -> exp . AND_OP exp
    (43) exp -> exp . MUL_ASSIGN exp
    (44) exp -> exp . DIV_ASSIGN exp
    (45) exp -> exp . MOD_ASSIGN exp
    (46) exp -> exp . ADD_ASSIGN exp
    (47) exp -> exp . SUB_ASSIGN exp
    (48) exp -> exp . LEFT_ASSIGN exp
    (49) exp -> exp . RIGHT_ASSIGN exp
    (50) exp -> exp . AND_ASSIGN exp
    (51) exp -> exp . XOR_ASSIGN exp
    (52) exp -> exp . OR_ASSIGN exp
    (53) exp -> exp . EQUALS exp

    RPAREN          shift and go to state 175
    ADD             shift and go to state 70
    MINUS           shift and go to state 60
    MULT            shift and go to state 61
    DIV             shift and go to state 59
    MOD             shift and go to state 79
    L_OP            shift and go to state 76
    G_OP            shift and go to state 64
    LE_OP           shift and go to state 62
    GE_OP           shift and go to state 71
    NOTEQUALS       shift and go to state 55
    EQUALS_OP       shift and go to state 56
    OR_OP           shift and go to state 65
    AND_OP          shift and go to state 69
    MUL_ASSIGN      shift and go to state 77
    DIV_ASSIGN      shift and go to state 57
    MOD_ASSIGN      shift and go to state 73
    ADD_ASSIGN      shift and go to state 67
    SUB_ASSIGN      shift and go to state 72
    LEFT_ASSIGN     shift and go to state 78
    RIGHT_ASSIGN    shift and go to state 63
    AND_ASSIGN      shift and go to state 66
    XOR_ASSIGN      shift and go to state 74
    OR_ASSIGN       shift and go to state 75
    EQUALS          shift and go to state 68


state 167

    (74) iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN . SEMI_COLON

    SEMI_COLON      shift and go to state 176


state 168

    (69) iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE .

    RBRACE          reduce using rule 69 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE .)
    LPAREN          reduce using rule 69 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE .)
    VARIABLE        reduce using rule 69 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE .)
    FOR             reduce using rule 69 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE .)
    WHILE           reduce using rule 69 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE .)
    DO              reduce using rule 69 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE .)
    BREAK           reduce using rule 69 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE .)
    CONTINUE        reduce using rule 69 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE .)
    RETURN          reduce using rule 69 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE .)
    INT             reduce using rule 69 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE .)
    FLOAT           reduce using rule 69 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE .)
    CHAR            reduce using rule 69 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE .)
    DOUBLE          reduce using rule 69 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE .)
    VOID            reduce using rule 69 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE .)
    SHORT           reduce using rule 69 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE .)
    LONG            reduce using rule 69 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE .)
    HEX_INT         reduce using rule 69 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE .)
    DOT_REAL        reduce using rule 69 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE .)
    EXP_REAL        reduce using rule 69 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE .)
    DEC_INT         reduce using rule 69 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE .)
    CHARACTER       reduce using rule 69 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE .)
    INCREMENT       reduce using rule 69 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE .)
    DECREMENT       reduce using rule 69 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE .)
    $end            reduce using rule 69 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE .)


state 169

    (81) normal_function -> type VARIABLE LPAREN parameters RPAREN LBRACE statements . RBRACE
    (2) statements -> statements . statement
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (13) declaration -> . type enum_list SEMI_COLON
    (30) exp -> . exp ADD exp
    (31) exp -> . exp MINUS exp
    (32) exp -> . exp MULT exp
    (33) exp -> . exp DIV exp
    (34) exp -> . exp MOD exp
    (35) exp -> . exp L_OP exp
    (36) exp -> . exp G_OP exp
    (37) exp -> . exp LE_OP exp
    (38) exp -> . exp GE_OP exp
    (39) exp -> . exp NOTEQUALS exp
    (40) exp -> . exp EQUALS_OP exp
    (41) exp -> . exp OR_OP exp
    (42) exp -> . exp AND_OP exp
    (43) exp -> . exp MUL_ASSIGN exp
    (44) exp -> . exp DIV_ASSIGN exp
    (45) exp -> . exp MOD_ASSIGN exp
    (46) exp -> . exp ADD_ASSIGN exp
    (47) exp -> . exp SUB_ASSIGN exp
    (48) exp -> . exp LEFT_ASSIGN exp
    (49) exp -> . exp RIGHT_ASSIGN exp
    (50) exp -> . exp AND_ASSIGN exp
    (51) exp -> . exp XOR_ASSIGN exp
    (52) exp -> . exp OR_ASSIGN exp
    (53) exp -> . exp EQUALS exp
    (54) exp -> . unary_expression
    (55) exp -> . LPAREN exp RPAREN
    (56) exp -> . constant
    (57) exp -> . VARIABLE
    (58) exp -> . function_call
    (63) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (64) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE
    (65) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (66) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE
    (67) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (68) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (69) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE statements RBRACE
    (70) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (71) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (72) iterative_statement -> . DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (73) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (74) iterative_statement -> . DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (77) function -> . normal_function
    (78) function -> . main_function
    (9) constant_statement -> . BREAK SEMI_COLON
    (10) constant_statement -> . CONTINUE SEMI_COLON
    (11) constant_statement -> . RETURN SEMI_COLON
    (12) constant_statement -> . RETURN exp SEMI_COLON
    (18) type -> . INT
    (19) type -> . FLOAT
    (20) type -> . CHAR
    (21) type -> . DOUBLE
    (22) type -> . VOID
    (23) type -> . SHORT
    (24) type -> . LONG
    (59) unary_expression -> . VARIABLE unary_operator
    (60) unary_expression -> . unary_operator VARIABLE
    (25) constant -> . HEX_INT
    (26) constant -> . DOT_REAL
    (27) constant -> . EXP_REAL
    (28) constant -> . DEC_INT
    (29) constant -> . CHARACTER
    (86) function_call -> . VARIABLE LPAREN arguments RPAREN
    (87) function_call -> . VARIABLE LPAREN RPAREN
    (81) normal_function -> . type VARIABLE LPAREN parameters RPAREN LBRACE statements RBRACE
    (82) normal_function -> . type VARIABLE LPAREN parameters RPAREN LBRACE RBRACE
    (79) main_function -> . type MAIN LPAREN parameters RPAREN LBRACE statements RBRACE
    (80) main_function -> . type MAIN LPAREN parameters RPAREN LBRACE RBRACE
    (61) unary_operator -> . INCREMENT
    (62) unary_operator -> . DECREMENT

    RBRACE          shift and go to state 177
    LPAREN          shift and go to state 23
    VARIABLE        shift and go to state 25
    FOR             shift and go to state 22
    WHILE           shift and go to state 9
    DO              shift and go to state 4
    BREAK           shift and go to state 34
    CONTINUE        shift and go to state 35
    RETURN          shift and go to state 1
    INT             shift and go to state 29
    FLOAT           shift and go to state 33
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 5
    SHORT           shift and go to state 10
    LONG            shift and go to state 37
    HEX_INT         shift and go to state 31
    DOT_REAL        shift and go to state 18
    EXP_REAL        shift and go to state 14
    DEC_INT         shift and go to state 15
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 13
    DECREMENT       shift and go to state 27

    function                       shift and go to state 21
    main_function                  shift and go to state 2
    statement                      shift and go to state 40
    iterative_statement            shift and go to state 12
    normal_function                shift and go to state 32
    unary_expression               shift and go to state 26
    function_call                  shift and go to state 7
    exp                            shift and go to state 36
    declaration                    shift and go to state 24
    constant_statement             shift and go to state 28
    constant                       shift and go to state 11
    type                           shift and go to state 19
    unary_operator                 shift and go to state 20

state 170

    (82) normal_function -> type VARIABLE LPAREN parameters RPAREN LBRACE RBRACE .

    RBRACE          reduce using rule 82 (normal_function -> type VARIABLE LPAREN parameters RPAREN LBRACE RBRACE .)
    LPAREN          reduce using rule 82 (normal_function -> type VARIABLE LPAREN parameters RPAREN LBRACE RBRACE .)
    VARIABLE        reduce using rule 82 (normal_function -> type VARIABLE LPAREN parameters RPAREN LBRACE RBRACE .)
    FOR             reduce using rule 82 (normal_function -> type VARIABLE LPAREN parameters RPAREN LBRACE RBRACE .)
    WHILE           reduce using rule 82 (normal_function -> type VARIABLE LPAREN parameters RPAREN LBRACE RBRACE .)
    DO              reduce using rule 82 (normal_function -> type VARIABLE LPAREN parameters RPAREN LBRACE RBRACE .)
    BREAK           reduce using rule 82 (normal_function -> type VARIABLE LPAREN parameters RPAREN LBRACE RBRACE .)
    CONTINUE        reduce using rule 82 (normal_function -> type VARIABLE LPAREN parameters RPAREN LBRACE RBRACE .)
    RETURN          reduce using rule 82 (normal_function -> type VARIABLE LPAREN parameters RPAREN LBRACE RBRACE .)
    INT             reduce using rule 82 (normal_function -> type VARIABLE LPAREN parameters RPAREN LBRACE RBRACE .)
    FLOAT           reduce using rule 82 (normal_function -> type VARIABLE LPAREN parameters RPAREN LBRACE RBRACE .)
    CHAR            reduce using rule 82 (normal_function -> type VARIABLE LPAREN parameters RPAREN LBRACE RBRACE .)
    DOUBLE          reduce using rule 82 (normal_function -> type VARIABLE LPAREN parameters RPAREN LBRACE RBRACE .)
    VOID            reduce using rule 82 (normal_function -> type VARIABLE LPAREN parameters RPAREN LBRACE RBRACE .)
    SHORT           reduce using rule 82 (normal_function -> type VARIABLE LPAREN parameters RPAREN LBRACE RBRACE .)
    LONG            reduce using rule 82 (normal_function -> type VARIABLE LPAREN parameters RPAREN LBRACE RBRACE .)
    HEX_INT         reduce using rule 82 (normal_function -> type VARIABLE LPAREN parameters RPAREN LBRACE RBRACE .)
    DOT_REAL        reduce using rule 82 (normal_function -> type VARIABLE LPAREN parameters RPAREN LBRACE RBRACE .)
    EXP_REAL        reduce using rule 82 (normal_function -> type VARIABLE LPAREN parameters RPAREN LBRACE RBRACE .)
    DEC_INT         reduce using rule 82 (normal_function -> type VARIABLE LPAREN parameters RPAREN LBRACE RBRACE .)
    CHARACTER       reduce using rule 82 (normal_function -> type VARIABLE LPAREN parameters RPAREN LBRACE RBRACE .)
    INCREMENT       reduce using rule 82 (normal_function -> type VARIABLE LPAREN parameters RPAREN LBRACE RBRACE .)
    DECREMENT       reduce using rule 82 (normal_function -> type VARIABLE LPAREN parameters RPAREN LBRACE RBRACE .)
    $end            reduce using rule 82 (normal_function -> type VARIABLE LPAREN parameters RPAREN LBRACE RBRACE .)


state 171

    (83) parameters -> type VARIABLE COMMA parameters .

    RPAREN          reduce using rule 83 (parameters -> type VARIABLE COMMA parameters .)


state 172

    (79) main_function -> type MAIN LPAREN parameters RPAREN LBRACE statements . RBRACE
    (2) statements -> statements . statement
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (13) declaration -> . type enum_list SEMI_COLON
    (30) exp -> . exp ADD exp
    (31) exp -> . exp MINUS exp
    (32) exp -> . exp MULT exp
    (33) exp -> . exp DIV exp
    (34) exp -> . exp MOD exp
    (35) exp -> . exp L_OP exp
    (36) exp -> . exp G_OP exp
    (37) exp -> . exp LE_OP exp
    (38) exp -> . exp GE_OP exp
    (39) exp -> . exp NOTEQUALS exp
    (40) exp -> . exp EQUALS_OP exp
    (41) exp -> . exp OR_OP exp
    (42) exp -> . exp AND_OP exp
    (43) exp -> . exp MUL_ASSIGN exp
    (44) exp -> . exp DIV_ASSIGN exp
    (45) exp -> . exp MOD_ASSIGN exp
    (46) exp -> . exp ADD_ASSIGN exp
    (47) exp -> . exp SUB_ASSIGN exp
    (48) exp -> . exp LEFT_ASSIGN exp
    (49) exp -> . exp RIGHT_ASSIGN exp
    (50) exp -> . exp AND_ASSIGN exp
    (51) exp -> . exp XOR_ASSIGN exp
    (52) exp -> . exp OR_ASSIGN exp
    (53) exp -> . exp EQUALS exp
    (54) exp -> . unary_expression
    (55) exp -> . LPAREN exp RPAREN
    (56) exp -> . constant
    (57) exp -> . VARIABLE
    (58) exp -> . function_call
    (63) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (64) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE
    (65) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (66) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE
    (67) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (68) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (69) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE statements RBRACE
    (70) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (71) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (72) iterative_statement -> . DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (73) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (74) iterative_statement -> . DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (77) function -> . normal_function
    (78) function -> . main_function
    (9) constant_statement -> . BREAK SEMI_COLON
    (10) constant_statement -> . CONTINUE SEMI_COLON
    (11) constant_statement -> . RETURN SEMI_COLON
    (12) constant_statement -> . RETURN exp SEMI_COLON
    (18) type -> . INT
    (19) type -> . FLOAT
    (20) type -> . CHAR
    (21) type -> . DOUBLE
    (22) type -> . VOID
    (23) type -> . SHORT
    (24) type -> . LONG
    (59) unary_expression -> . VARIABLE unary_operator
    (60) unary_expression -> . unary_operator VARIABLE
    (25) constant -> . HEX_INT
    (26) constant -> . DOT_REAL
    (27) constant -> . EXP_REAL
    (28) constant -> . DEC_INT
    (29) constant -> . CHARACTER
    (86) function_call -> . VARIABLE LPAREN arguments RPAREN
    (87) function_call -> . VARIABLE LPAREN RPAREN
    (81) normal_function -> . type VARIABLE LPAREN parameters RPAREN LBRACE statements RBRACE
    (82) normal_function -> . type VARIABLE LPAREN parameters RPAREN LBRACE RBRACE
    (79) main_function -> . type MAIN LPAREN parameters RPAREN LBRACE statements RBRACE
    (80) main_function -> . type MAIN LPAREN parameters RPAREN LBRACE RBRACE
    (61) unary_operator -> . INCREMENT
    (62) unary_operator -> . DECREMENT

    RBRACE          shift and go to state 178
    LPAREN          shift and go to state 23
    VARIABLE        shift and go to state 25
    FOR             shift and go to state 22
    WHILE           shift and go to state 9
    DO              shift and go to state 4
    BREAK           shift and go to state 34
    CONTINUE        shift and go to state 35
    RETURN          shift and go to state 1
    INT             shift and go to state 29
    FLOAT           shift and go to state 33
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 5
    SHORT           shift and go to state 10
    LONG            shift and go to state 37
    HEX_INT         shift and go to state 31
    DOT_REAL        shift and go to state 18
    EXP_REAL        shift and go to state 14
    DEC_INT         shift and go to state 15
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 13
    DECREMENT       shift and go to state 27

    function                       shift and go to state 21
    main_function                  shift and go to state 2
    statement                      shift and go to state 40
    iterative_statement            shift and go to state 12
    normal_function                shift and go to state 32
    unary_expression               shift and go to state 26
    function_call                  shift and go to state 7
    exp                            shift and go to state 36
    declaration                    shift and go to state 24
    constant_statement             shift and go to state 28
    constant                       shift and go to state 11
    type                           shift and go to state 19
    unary_operator                 shift and go to state 20

state 173

    (80) main_function -> type MAIN LPAREN parameters RPAREN LBRACE RBRACE .

    WHILE           reduce using rule 80 (main_function -> type MAIN LPAREN parameters RPAREN LBRACE RBRACE .)
    RBRACE          reduce using rule 80 (main_function -> type MAIN LPAREN parameters RPAREN LBRACE RBRACE .)
    LPAREN          reduce using rule 80 (main_function -> type MAIN LPAREN parameters RPAREN LBRACE RBRACE .)
    VARIABLE        reduce using rule 80 (main_function -> type MAIN LPAREN parameters RPAREN LBRACE RBRACE .)
    FOR             reduce using rule 80 (main_function -> type MAIN LPAREN parameters RPAREN LBRACE RBRACE .)
    DO              reduce using rule 80 (main_function -> type MAIN LPAREN parameters RPAREN LBRACE RBRACE .)
    BREAK           reduce using rule 80 (main_function -> type MAIN LPAREN parameters RPAREN LBRACE RBRACE .)
    CONTINUE        reduce using rule 80 (main_function -> type MAIN LPAREN parameters RPAREN LBRACE RBRACE .)
    RETURN          reduce using rule 80 (main_function -> type MAIN LPAREN parameters RPAREN LBRACE RBRACE .)
    INT             reduce using rule 80 (main_function -> type MAIN LPAREN parameters RPAREN LBRACE RBRACE .)
    FLOAT           reduce using rule 80 (main_function -> type MAIN LPAREN parameters RPAREN LBRACE RBRACE .)
    CHAR            reduce using rule 80 (main_function -> type MAIN LPAREN parameters RPAREN LBRACE RBRACE .)
    DOUBLE          reduce using rule 80 (main_function -> type MAIN LPAREN parameters RPAREN LBRACE RBRACE .)
    VOID            reduce using rule 80 (main_function -> type MAIN LPAREN parameters RPAREN LBRACE RBRACE .)
    SHORT           reduce using rule 80 (main_function -> type MAIN LPAREN parameters RPAREN LBRACE RBRACE .)
    LONG            reduce using rule 80 (main_function -> type MAIN LPAREN parameters RPAREN LBRACE RBRACE .)
    HEX_INT         reduce using rule 80 (main_function -> type MAIN LPAREN parameters RPAREN LBRACE RBRACE .)
    DOT_REAL        reduce using rule 80 (main_function -> type MAIN LPAREN parameters RPAREN LBRACE RBRACE .)
    EXP_REAL        reduce using rule 80 (main_function -> type MAIN LPAREN parameters RPAREN LBRACE RBRACE .)
    DEC_INT         reduce using rule 80 (main_function -> type MAIN LPAREN parameters RPAREN LBRACE RBRACE .)
    CHARACTER       reduce using rule 80 (main_function -> type MAIN LPAREN parameters RPAREN LBRACE RBRACE .)
    INCREMENT       reduce using rule 80 (main_function -> type MAIN LPAREN parameters RPAREN LBRACE RBRACE .)
    DECREMENT       reduce using rule 80 (main_function -> type MAIN LPAREN parameters RPAREN LBRACE RBRACE .)
    $end            reduce using rule 80 (main_function -> type MAIN LPAREN parameters RPAREN LBRACE RBRACE .)


state 174

    (63) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp . RPAREN statement
    (64) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp . RPAREN LBRACE statements RBRACE
    (65) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp . RPAREN SEMI_COLON
    (66) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp . RPAREN LBRACE RBRACE

    RPAREN          shift and go to state 179


state 175

    (72) iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN . SEMI_COLON

    SEMI_COLON      shift and go to state 180


state 176

    (74) iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .

    RBRACE          reduce using rule 74 (iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    LPAREN          reduce using rule 74 (iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    VARIABLE        reduce using rule 74 (iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    FOR             reduce using rule 74 (iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    WHILE           reduce using rule 74 (iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    DO              reduce using rule 74 (iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    BREAK           reduce using rule 74 (iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    CONTINUE        reduce using rule 74 (iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    RETURN          reduce using rule 74 (iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    INT             reduce using rule 74 (iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    FLOAT           reduce using rule 74 (iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    CHAR            reduce using rule 74 (iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    DOUBLE          reduce using rule 74 (iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    VOID            reduce using rule 74 (iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    SHORT           reduce using rule 74 (iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    LONG            reduce using rule 74 (iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    HEX_INT         reduce using rule 74 (iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    DOT_REAL        reduce using rule 74 (iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    EXP_REAL        reduce using rule 74 (iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    DEC_INT         reduce using rule 74 (iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    CHARACTER       reduce using rule 74 (iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    INCREMENT       reduce using rule 74 (iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    DECREMENT       reduce using rule 74 (iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    $end            reduce using rule 74 (iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)


state 177

    (81) normal_function -> type VARIABLE LPAREN parameters RPAREN LBRACE statements RBRACE .

    RBRACE          reduce using rule 81 (normal_function -> type VARIABLE LPAREN parameters RPAREN LBRACE statements RBRACE .)
    LPAREN          reduce using rule 81 (normal_function -> type VARIABLE LPAREN parameters RPAREN LBRACE statements RBRACE .)
    VARIABLE        reduce using rule 81 (normal_function -> type VARIABLE LPAREN parameters RPAREN LBRACE statements RBRACE .)
    FOR             reduce using rule 81 (normal_function -> type VARIABLE LPAREN parameters RPAREN LBRACE statements RBRACE .)
    WHILE           reduce using rule 81 (normal_function -> type VARIABLE LPAREN parameters RPAREN LBRACE statements RBRACE .)
    DO              reduce using rule 81 (normal_function -> type VARIABLE LPAREN parameters RPAREN LBRACE statements RBRACE .)
    BREAK           reduce using rule 81 (normal_function -> type VARIABLE LPAREN parameters RPAREN LBRACE statements RBRACE .)
    CONTINUE        reduce using rule 81 (normal_function -> type VARIABLE LPAREN parameters RPAREN LBRACE statements RBRACE .)
    RETURN          reduce using rule 81 (normal_function -> type VARIABLE LPAREN parameters RPAREN LBRACE statements RBRACE .)
    INT             reduce using rule 81 (normal_function -> type VARIABLE LPAREN parameters RPAREN LBRACE statements RBRACE .)
    FLOAT           reduce using rule 81 (normal_function -> type VARIABLE LPAREN parameters RPAREN LBRACE statements RBRACE .)
    CHAR            reduce using rule 81 (normal_function -> type VARIABLE LPAREN parameters RPAREN LBRACE statements RBRACE .)
    DOUBLE          reduce using rule 81 (normal_function -> type VARIABLE LPAREN parameters RPAREN LBRACE statements RBRACE .)
    VOID            reduce using rule 81 (normal_function -> type VARIABLE LPAREN parameters RPAREN LBRACE statements RBRACE .)
    SHORT           reduce using rule 81 (normal_function -> type VARIABLE LPAREN parameters RPAREN LBRACE statements RBRACE .)
    LONG            reduce using rule 81 (normal_function -> type VARIABLE LPAREN parameters RPAREN LBRACE statements RBRACE .)
    HEX_INT         reduce using rule 81 (normal_function -> type VARIABLE LPAREN parameters RPAREN LBRACE statements RBRACE .)
    DOT_REAL        reduce using rule 81 (normal_function -> type VARIABLE LPAREN parameters RPAREN LBRACE statements RBRACE .)
    EXP_REAL        reduce using rule 81 (normal_function -> type VARIABLE LPAREN parameters RPAREN LBRACE statements RBRACE .)
    DEC_INT         reduce using rule 81 (normal_function -> type VARIABLE LPAREN parameters RPAREN LBRACE statements RBRACE .)
    CHARACTER       reduce using rule 81 (normal_function -> type VARIABLE LPAREN parameters RPAREN LBRACE statements RBRACE .)
    INCREMENT       reduce using rule 81 (normal_function -> type VARIABLE LPAREN parameters RPAREN LBRACE statements RBRACE .)
    DECREMENT       reduce using rule 81 (normal_function -> type VARIABLE LPAREN parameters RPAREN LBRACE statements RBRACE .)
    $end            reduce using rule 81 (normal_function -> type VARIABLE LPAREN parameters RPAREN LBRACE statements RBRACE .)


state 178

    (79) main_function -> type MAIN LPAREN parameters RPAREN LBRACE statements RBRACE .

    WHILE           reduce using rule 79 (main_function -> type MAIN LPAREN parameters RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 79 (main_function -> type MAIN LPAREN parameters RPAREN LBRACE statements RBRACE .)
    LPAREN          reduce using rule 79 (main_function -> type MAIN LPAREN parameters RPAREN LBRACE statements RBRACE .)
    VARIABLE        reduce using rule 79 (main_function -> type MAIN LPAREN parameters RPAREN LBRACE statements RBRACE .)
    FOR             reduce using rule 79 (main_function -> type MAIN LPAREN parameters RPAREN LBRACE statements RBRACE .)
    DO              reduce using rule 79 (main_function -> type MAIN LPAREN parameters RPAREN LBRACE statements RBRACE .)
    BREAK           reduce using rule 79 (main_function -> type MAIN LPAREN parameters RPAREN LBRACE statements RBRACE .)
    CONTINUE        reduce using rule 79 (main_function -> type MAIN LPAREN parameters RPAREN LBRACE statements RBRACE .)
    RETURN          reduce using rule 79 (main_function -> type MAIN LPAREN parameters RPAREN LBRACE statements RBRACE .)
    INT             reduce using rule 79 (main_function -> type MAIN LPAREN parameters RPAREN LBRACE statements RBRACE .)
    FLOAT           reduce using rule 79 (main_function -> type MAIN LPAREN parameters RPAREN LBRACE statements RBRACE .)
    CHAR            reduce using rule 79 (main_function -> type MAIN LPAREN parameters RPAREN LBRACE statements RBRACE .)
    DOUBLE          reduce using rule 79 (main_function -> type MAIN LPAREN parameters RPAREN LBRACE statements RBRACE .)
    VOID            reduce using rule 79 (main_function -> type MAIN LPAREN parameters RPAREN LBRACE statements RBRACE .)
    SHORT           reduce using rule 79 (main_function -> type MAIN LPAREN parameters RPAREN LBRACE statements RBRACE .)
    LONG            reduce using rule 79 (main_function -> type MAIN LPAREN parameters RPAREN LBRACE statements RBRACE .)
    HEX_INT         reduce using rule 79 (main_function -> type MAIN LPAREN parameters RPAREN LBRACE statements RBRACE .)
    DOT_REAL        reduce using rule 79 (main_function -> type MAIN LPAREN parameters RPAREN LBRACE statements RBRACE .)
    EXP_REAL        reduce using rule 79 (main_function -> type MAIN LPAREN parameters RPAREN LBRACE statements RBRACE .)
    DEC_INT         reduce using rule 79 (main_function -> type MAIN LPAREN parameters RPAREN LBRACE statements RBRACE .)
    CHARACTER       reduce using rule 79 (main_function -> type MAIN LPAREN parameters RPAREN LBRACE statements RBRACE .)
    INCREMENT       reduce using rule 79 (main_function -> type MAIN LPAREN parameters RPAREN LBRACE statements RBRACE .)
    DECREMENT       reduce using rule 79 (main_function -> type MAIN LPAREN parameters RPAREN LBRACE statements RBRACE .)
    $end            reduce using rule 79 (main_function -> type MAIN LPAREN parameters RPAREN LBRACE statements RBRACE .)


state 179

    (63) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN . statement
    (64) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN . LBRACE statements RBRACE
    (65) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN . SEMI_COLON
    (66) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN . LBRACE RBRACE
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (13) declaration -> . type enum_list SEMI_COLON
    (30) exp -> . exp ADD exp
    (31) exp -> . exp MINUS exp
    (32) exp -> . exp MULT exp
    (33) exp -> . exp DIV exp
    (34) exp -> . exp MOD exp
    (35) exp -> . exp L_OP exp
    (36) exp -> . exp G_OP exp
    (37) exp -> . exp LE_OP exp
    (38) exp -> . exp GE_OP exp
    (39) exp -> . exp NOTEQUALS exp
    (40) exp -> . exp EQUALS_OP exp
    (41) exp -> . exp OR_OP exp
    (42) exp -> . exp AND_OP exp
    (43) exp -> . exp MUL_ASSIGN exp
    (44) exp -> . exp DIV_ASSIGN exp
    (45) exp -> . exp MOD_ASSIGN exp
    (46) exp -> . exp ADD_ASSIGN exp
    (47) exp -> . exp SUB_ASSIGN exp
    (48) exp -> . exp LEFT_ASSIGN exp
    (49) exp -> . exp RIGHT_ASSIGN exp
    (50) exp -> . exp AND_ASSIGN exp
    (51) exp -> . exp XOR_ASSIGN exp
    (52) exp -> . exp OR_ASSIGN exp
    (53) exp -> . exp EQUALS exp
    (54) exp -> . unary_expression
    (55) exp -> . LPAREN exp RPAREN
    (56) exp -> . constant
    (57) exp -> . VARIABLE
    (58) exp -> . function_call
    (63) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (64) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE
    (65) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (66) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE
    (67) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (68) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (69) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE statements RBRACE
    (70) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (71) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (72) iterative_statement -> . DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (73) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (74) iterative_statement -> . DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (77) function -> . normal_function
    (78) function -> . main_function
    (9) constant_statement -> . BREAK SEMI_COLON
    (10) constant_statement -> . CONTINUE SEMI_COLON
    (11) constant_statement -> . RETURN SEMI_COLON
    (12) constant_statement -> . RETURN exp SEMI_COLON
    (18) type -> . INT
    (19) type -> . FLOAT
    (20) type -> . CHAR
    (21) type -> . DOUBLE
    (22) type -> . VOID
    (23) type -> . SHORT
    (24) type -> . LONG
    (59) unary_expression -> . VARIABLE unary_operator
    (60) unary_expression -> . unary_operator VARIABLE
    (25) constant -> . HEX_INT
    (26) constant -> . DOT_REAL
    (27) constant -> . EXP_REAL
    (28) constant -> . DEC_INT
    (29) constant -> . CHARACTER
    (86) function_call -> . VARIABLE LPAREN arguments RPAREN
    (87) function_call -> . VARIABLE LPAREN RPAREN
    (81) normal_function -> . type VARIABLE LPAREN parameters RPAREN LBRACE statements RBRACE
    (82) normal_function -> . type VARIABLE LPAREN parameters RPAREN LBRACE RBRACE
    (79) main_function -> . type MAIN LPAREN parameters RPAREN LBRACE statements RBRACE
    (80) main_function -> . type MAIN LPAREN parameters RPAREN LBRACE RBRACE
    (61) unary_operator -> . INCREMENT
    (62) unary_operator -> . DECREMENT

    LBRACE          shift and go to state 183
    SEMI_COLON      shift and go to state 181
    LPAREN          shift and go to state 23
    VARIABLE        shift and go to state 25
    FOR             shift and go to state 22
    WHILE           shift and go to state 9
    DO              shift and go to state 4
    BREAK           shift and go to state 34
    CONTINUE        shift and go to state 35
    RETURN          shift and go to state 1
    INT             shift and go to state 29
    FLOAT           shift and go to state 33
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 5
    SHORT           shift and go to state 10
    LONG            shift and go to state 37
    HEX_INT         shift and go to state 31
    DOT_REAL        shift and go to state 18
    EXP_REAL        shift and go to state 14
    DEC_INT         shift and go to state 15
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 13
    DECREMENT       shift and go to state 27

    function                       shift and go to state 21
    main_function                  shift and go to state 2
    statement                      shift and go to state 182
    unary_expression               shift and go to state 26
    type                           shift and go to state 19
    normal_function                shift and go to state 32
    function_call                  shift and go to state 7
    exp                            shift and go to state 36
    declaration                    shift and go to state 24
    constant_statement             shift and go to state 28
    constant                       shift and go to state 11
    iterative_statement            shift and go to state 12
    unary_operator                 shift and go to state 20

state 180

    (72) iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .

    RBRACE          reduce using rule 72 (iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    LPAREN          reduce using rule 72 (iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    VARIABLE        reduce using rule 72 (iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    FOR             reduce using rule 72 (iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    WHILE           reduce using rule 72 (iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    DO              reduce using rule 72 (iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    BREAK           reduce using rule 72 (iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    CONTINUE        reduce using rule 72 (iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    RETURN          reduce using rule 72 (iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    INT             reduce using rule 72 (iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    FLOAT           reduce using rule 72 (iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    CHAR            reduce using rule 72 (iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    DOUBLE          reduce using rule 72 (iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    VOID            reduce using rule 72 (iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    SHORT           reduce using rule 72 (iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    LONG            reduce using rule 72 (iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    HEX_INT         reduce using rule 72 (iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    DOT_REAL        reduce using rule 72 (iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    EXP_REAL        reduce using rule 72 (iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    DEC_INT         reduce using rule 72 (iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    CHARACTER       reduce using rule 72 (iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    INCREMENT       reduce using rule 72 (iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    DECREMENT       reduce using rule 72 (iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    $end            reduce using rule 72 (iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)


state 181

    (65) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .

    RBRACE          reduce using rule 65 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    LPAREN          reduce using rule 65 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    VARIABLE        reduce using rule 65 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    FOR             reduce using rule 65 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    WHILE           reduce using rule 65 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    DO              reduce using rule 65 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    BREAK           reduce using rule 65 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    CONTINUE        reduce using rule 65 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    RETURN          reduce using rule 65 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    INT             reduce using rule 65 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    FLOAT           reduce using rule 65 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    CHAR            reduce using rule 65 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    DOUBLE          reduce using rule 65 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    VOID            reduce using rule 65 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    SHORT           reduce using rule 65 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    LONG            reduce using rule 65 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    HEX_INT         reduce using rule 65 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    DOT_REAL        reduce using rule 65 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    EXP_REAL        reduce using rule 65 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    DEC_INT         reduce using rule 65 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    CHARACTER       reduce using rule 65 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    INCREMENT       reduce using rule 65 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    DECREMENT       reduce using rule 65 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    $end            reduce using rule 65 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)


state 182

    (63) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .

    RBRACE          reduce using rule 63 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    LPAREN          reduce using rule 63 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    VARIABLE        reduce using rule 63 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    FOR             reduce using rule 63 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    WHILE           reduce using rule 63 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    DO              reduce using rule 63 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    BREAK           reduce using rule 63 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    CONTINUE        reduce using rule 63 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    RETURN          reduce using rule 63 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    INT             reduce using rule 63 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    FLOAT           reduce using rule 63 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    CHAR            reduce using rule 63 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    DOUBLE          reduce using rule 63 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    VOID            reduce using rule 63 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    SHORT           reduce using rule 63 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    LONG            reduce using rule 63 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    HEX_INT         reduce using rule 63 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    DOT_REAL        reduce using rule 63 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    EXP_REAL        reduce using rule 63 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    DEC_INT         reduce using rule 63 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    CHARACTER       reduce using rule 63 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    INCREMENT       reduce using rule 63 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    DECREMENT       reduce using rule 63 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    $end            reduce using rule 63 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)


state 183

    (64) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE . statements RBRACE
    (66) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE . RBRACE
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (13) declaration -> . type enum_list SEMI_COLON
    (30) exp -> . exp ADD exp
    (31) exp -> . exp MINUS exp
    (32) exp -> . exp MULT exp
    (33) exp -> . exp DIV exp
    (34) exp -> . exp MOD exp
    (35) exp -> . exp L_OP exp
    (36) exp -> . exp G_OP exp
    (37) exp -> . exp LE_OP exp
    (38) exp -> . exp GE_OP exp
    (39) exp -> . exp NOTEQUALS exp
    (40) exp -> . exp EQUALS_OP exp
    (41) exp -> . exp OR_OP exp
    (42) exp -> . exp AND_OP exp
    (43) exp -> . exp MUL_ASSIGN exp
    (44) exp -> . exp DIV_ASSIGN exp
    (45) exp -> . exp MOD_ASSIGN exp
    (46) exp -> . exp ADD_ASSIGN exp
    (47) exp -> . exp SUB_ASSIGN exp
    (48) exp -> . exp LEFT_ASSIGN exp
    (49) exp -> . exp RIGHT_ASSIGN exp
    (50) exp -> . exp AND_ASSIGN exp
    (51) exp -> . exp XOR_ASSIGN exp
    (52) exp -> . exp OR_ASSIGN exp
    (53) exp -> . exp EQUALS exp
    (54) exp -> . unary_expression
    (55) exp -> . LPAREN exp RPAREN
    (56) exp -> . constant
    (57) exp -> . VARIABLE
    (58) exp -> . function_call
    (63) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (64) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE
    (65) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (66) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE
    (67) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (68) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (69) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE statements RBRACE
    (70) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (71) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (72) iterative_statement -> . DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (73) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (74) iterative_statement -> . DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (77) function -> . normal_function
    (78) function -> . main_function
    (9) constant_statement -> . BREAK SEMI_COLON
    (10) constant_statement -> . CONTINUE SEMI_COLON
    (11) constant_statement -> . RETURN SEMI_COLON
    (12) constant_statement -> . RETURN exp SEMI_COLON
    (18) type -> . INT
    (19) type -> . FLOAT
    (20) type -> . CHAR
    (21) type -> . DOUBLE
    (22) type -> . VOID
    (23) type -> . SHORT
    (24) type -> . LONG
    (59) unary_expression -> . VARIABLE unary_operator
    (60) unary_expression -> . unary_operator VARIABLE
    (25) constant -> . HEX_INT
    (26) constant -> . DOT_REAL
    (27) constant -> . EXP_REAL
    (28) constant -> . DEC_INT
    (29) constant -> . CHARACTER
    (86) function_call -> . VARIABLE LPAREN arguments RPAREN
    (87) function_call -> . VARIABLE LPAREN RPAREN
    (81) normal_function -> . type VARIABLE LPAREN parameters RPAREN LBRACE statements RBRACE
    (82) normal_function -> . type VARIABLE LPAREN parameters RPAREN LBRACE RBRACE
    (79) main_function -> . type MAIN LPAREN parameters RPAREN LBRACE statements RBRACE
    (80) main_function -> . type MAIN LPAREN parameters RPAREN LBRACE RBRACE
    (61) unary_operator -> . INCREMENT
    (62) unary_operator -> . DECREMENT

    RBRACE          shift and go to state 185
    LPAREN          shift and go to state 23
    VARIABLE        shift and go to state 25
    FOR             shift and go to state 22
    WHILE           shift and go to state 9
    DO              shift and go to state 4
    BREAK           shift and go to state 34
    CONTINUE        shift and go to state 35
    RETURN          shift and go to state 1
    INT             shift and go to state 29
    FLOAT           shift and go to state 33
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 5
    SHORT           shift and go to state 10
    LONG            shift and go to state 37
    HEX_INT         shift and go to state 31
    DOT_REAL        shift and go to state 18
    EXP_REAL        shift and go to state 14
    DEC_INT         shift and go to state 15
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 13
    DECREMENT       shift and go to state 27

    function                       shift and go to state 21
    main_function                  shift and go to state 2
    statements                     shift and go to state 184
    statement                      shift and go to state 17
    unary_expression               shift and go to state 26
    type                           shift and go to state 19
    normal_function                shift and go to state 32
    function_call                  shift and go to state 7
    exp                            shift and go to state 36
    declaration                    shift and go to state 24
    constant_statement             shift and go to state 28
    constant                       shift and go to state 11
    iterative_statement            shift and go to state 12
    unary_operator                 shift and go to state 20

state 184

    (64) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements . RBRACE
    (2) statements -> statements . statement
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (13) declaration -> . type enum_list SEMI_COLON
    (30) exp -> . exp ADD exp
    (31) exp -> . exp MINUS exp
    (32) exp -> . exp MULT exp
    (33) exp -> . exp DIV exp
    (34) exp -> . exp MOD exp
    (35) exp -> . exp L_OP exp
    (36) exp -> . exp G_OP exp
    (37) exp -> . exp LE_OP exp
    (38) exp -> . exp GE_OP exp
    (39) exp -> . exp NOTEQUALS exp
    (40) exp -> . exp EQUALS_OP exp
    (41) exp -> . exp OR_OP exp
    (42) exp -> . exp AND_OP exp
    (43) exp -> . exp MUL_ASSIGN exp
    (44) exp -> . exp DIV_ASSIGN exp
    (45) exp -> . exp MOD_ASSIGN exp
    (46) exp -> . exp ADD_ASSIGN exp
    (47) exp -> . exp SUB_ASSIGN exp
    (48) exp -> . exp LEFT_ASSIGN exp
    (49) exp -> . exp RIGHT_ASSIGN exp
    (50) exp -> . exp AND_ASSIGN exp
    (51) exp -> . exp XOR_ASSIGN exp
    (52) exp -> . exp OR_ASSIGN exp
    (53) exp -> . exp EQUALS exp
    (54) exp -> . unary_expression
    (55) exp -> . LPAREN exp RPAREN
    (56) exp -> . constant
    (57) exp -> . VARIABLE
    (58) exp -> . function_call
    (63) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (64) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE
    (65) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (66) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE
    (67) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (68) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (69) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE statements RBRACE
    (70) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (71) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (72) iterative_statement -> . DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (73) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (74) iterative_statement -> . DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (77) function -> . normal_function
    (78) function -> . main_function
    (9) constant_statement -> . BREAK SEMI_COLON
    (10) constant_statement -> . CONTINUE SEMI_COLON
    (11) constant_statement -> . RETURN SEMI_COLON
    (12) constant_statement -> . RETURN exp SEMI_COLON
    (18) type -> . INT
    (19) type -> . FLOAT
    (20) type -> . CHAR
    (21) type -> . DOUBLE
    (22) type -> . VOID
    (23) type -> . SHORT
    (24) type -> . LONG
    (59) unary_expression -> . VARIABLE unary_operator
    (60) unary_expression -> . unary_operator VARIABLE
    (25) constant -> . HEX_INT
    (26) constant -> . DOT_REAL
    (27) constant -> . EXP_REAL
    (28) constant -> . DEC_INT
    (29) constant -> . CHARACTER
    (86) function_call -> . VARIABLE LPAREN arguments RPAREN
    (87) function_call -> . VARIABLE LPAREN RPAREN
    (81) normal_function -> . type VARIABLE LPAREN parameters RPAREN LBRACE statements RBRACE
    (82) normal_function -> . type VARIABLE LPAREN parameters RPAREN LBRACE RBRACE
    (79) main_function -> . type MAIN LPAREN parameters RPAREN LBRACE statements RBRACE
    (80) main_function -> . type MAIN LPAREN parameters RPAREN LBRACE RBRACE
    (61) unary_operator -> . INCREMENT
    (62) unary_operator -> . DECREMENT

    RBRACE          shift and go to state 186
    LPAREN          shift and go to state 23
    VARIABLE        shift and go to state 25
    FOR             shift and go to state 22
    WHILE           shift and go to state 9
    DO              shift and go to state 4
    BREAK           shift and go to state 34
    CONTINUE        shift and go to state 35
    RETURN          shift and go to state 1
    INT             shift and go to state 29
    FLOAT           shift and go to state 33
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 5
    SHORT           shift and go to state 10
    LONG            shift and go to state 37
    HEX_INT         shift and go to state 31
    DOT_REAL        shift and go to state 18
    EXP_REAL        shift and go to state 14
    DEC_INT         shift and go to state 15
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 13
    DECREMENT       shift and go to state 27

    function                       shift and go to state 21
    main_function                  shift and go to state 2
    statement                      shift and go to state 40
    unary_expression               shift and go to state 26
    type                           shift and go to state 19
    normal_function                shift and go to state 32
    function_call                  shift and go to state 7
    exp                            shift and go to state 36
    declaration                    shift and go to state 24
    constant_statement             shift and go to state 28
    constant                       shift and go to state 11
    iterative_statement            shift and go to state 12
    unary_operator                 shift and go to state 20

state 185

    (66) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE .

    RBRACE          reduce using rule 66 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE .)
    LPAREN          reduce using rule 66 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE .)
    VARIABLE        reduce using rule 66 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE .)
    FOR             reduce using rule 66 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE .)
    WHILE           reduce using rule 66 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE .)
    DO              reduce using rule 66 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE .)
    BREAK           reduce using rule 66 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE .)
    CONTINUE        reduce using rule 66 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE .)
    RETURN          reduce using rule 66 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE .)
    INT             reduce using rule 66 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE .)
    FLOAT           reduce using rule 66 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE .)
    CHAR            reduce using rule 66 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE .)
    DOUBLE          reduce using rule 66 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE .)
    VOID            reduce using rule 66 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE .)
    SHORT           reduce using rule 66 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE .)
    LONG            reduce using rule 66 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE .)
    HEX_INT         reduce using rule 66 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE .)
    DOT_REAL        reduce using rule 66 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE .)
    EXP_REAL        reduce using rule 66 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE .)
    DEC_INT         reduce using rule 66 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE .)
    CHARACTER       reduce using rule 66 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE .)
    INCREMENT       reduce using rule 66 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE .)
    DECREMENT       reduce using rule 66 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE .)
    $end            reduce using rule 66 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE .)


state 186

    (64) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE .

    RBRACE          reduce using rule 64 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE .)
    LPAREN          reduce using rule 64 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE .)
    VARIABLE        reduce using rule 64 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE .)
    FOR             reduce using rule 64 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE .)
    WHILE           reduce using rule 64 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE .)
    DO              reduce using rule 64 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE .)
    BREAK           reduce using rule 64 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE .)
    CONTINUE        reduce using rule 64 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE .)
    RETURN          reduce using rule 64 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE .)
    INT             reduce using rule 64 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE .)
    FLOAT           reduce using rule 64 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE .)
    CHAR            reduce using rule 64 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE .)
    DOUBLE          reduce using rule 64 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE .)
    VOID            reduce using rule 64 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE .)
    SHORT           reduce using rule 64 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE .)
    LONG            reduce using rule 64 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE .)
    HEX_INT         reduce using rule 64 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE .)
    DOT_REAL        reduce using rule 64 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE .)
    EXP_REAL        reduce using rule 64 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE .)
    DEC_INT         reduce using rule 64 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE .)
    CHARACTER       reduce using rule 64 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE .)
    INCREMENT       reduce using rule 64 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE .)
    DECREMENT       reduce using rule 64 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE .)
    $end            reduce using rule 64 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE .)

