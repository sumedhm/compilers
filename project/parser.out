Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    RIGHT_OP
    NOTEQUALS
    SHORT
    RETURN
    EQUALS_OP
    DO
    DEFAULT
    FOR
    LEFT_OP
    WHILE
    COLON
    DIV_ASSIGN
    COMMENT
    RIGHT_ASSIGN
    MAIN
    RPAREN
    MUL_ASSIGN
    G_OP
    NEWLINE
    OR_OP
    CASE
    LBIG
    TILDA
    COMMA
    DOT
    INCREMENT
    IF
    ADD_ASSIGN
    SUB_ASSIGN
    RBRACE
    SIZEOF
    AND_ASSIGN
    SINGLE_QUOTES
    AND_OP
    GE_OP
    LPAREN
    ANDI
    ELSE
    LEFT_ASSIGN
    LE_OP
    AND
    MOD_ASSIGN
    LBRACE
    XOR_ASSIGN
    CONDOP
    OR_ASSIGN
    L_OP
    BREAK
    CONTINUE
    DOUBLE_QUOTES
    NOT
    DECREMENT
    SWITCH
    RBIG
    OR

Grammar

Rule 0     S' -> statements
Rule 1     statements -> statements statement SEMI_COLON
Rule 2     statements -> statement SEMI_COLON
Rule 3     statement -> declaration
Rule 4     statement -> assignment_statement
Rule 5     declaration -> type VARIABLE
Rule 6     declaration -> type VARIABLE EQUALS constant
Rule 7     declaration -> type VARIABLE EQUALS exp
Rule 8     type -> INT
Rule 9     type -> FLOAT
Rule 10    type -> CHAR
Rule 11    type -> DOUBLE
Rule 12    type -> VOID
Rule 13    type -> LONG
Rule 14    constant -> HEX_INT
Rule 15    constant -> DOT_REAL
Rule 16    constant -> EXP_REAL
Rule 17    constant -> DEC_INT
Rule 18    constant -> CHARACTER
Rule 19    assignment_statement -> VARIABLE EQUALS exp
Rule 20    exp -> exp operator exp
Rule 21    exp -> constant
Rule 22    exp -> VARIABLE
Rule 23    operator -> ADD
Rule 24    operator -> MINUS
Rule 25    operator -> MULT
Rule 26    operator -> DIV
Rule 27    operator -> MOD
Rule 28    empty -> <empty>

Terminals, with rules where they appear

ADD                  : 23
ADD_ASSIGN           : 
AND                  : 
ANDI                 : 
AND_ASSIGN           : 
AND_OP               : 
BREAK                : 
CASE                 : 
CHAR                 : 10
CHARACTER            : 18
COLON                : 
COMMA                : 
COMMENT              : 
CONDOP               : 
CONTINUE             : 
DECREMENT            : 
DEC_INT              : 17
DEFAULT              : 
DIV                  : 26
DIV_ASSIGN           : 
DO                   : 
DOT                  : 
DOT_REAL             : 15
DOUBLE               : 11
DOUBLE_QUOTES        : 
ELSE                 : 
EQUALS               : 6 7 19
EQUALS_OP            : 
EXP_REAL             : 16
FLOAT                : 9
FOR                  : 
GE_OP                : 
G_OP                 : 
HEX_INT              : 14
IF                   : 
INCREMENT            : 
INT                  : 8
LBIG                 : 
LBRACE               : 
LEFT_ASSIGN          : 
LEFT_OP              : 
LE_OP                : 
LONG                 : 13
LPAREN               : 
L_OP                 : 
MAIN                 : 
MINUS                : 24
MOD                  : 27
MOD_ASSIGN           : 
MULT                 : 25
MUL_ASSIGN           : 
NEWLINE              : 
NOT                  : 
NOTEQUALS            : 
OR                   : 
OR_ASSIGN            : 
OR_OP                : 
RBIG                 : 
RBRACE               : 
RETURN               : 
RIGHT_ASSIGN         : 
RIGHT_OP             : 
RPAREN               : 
SEMI_COLON           : 1 2
SHORT                : 
SINGLE_QUOTES        : 
SIZEOF               : 
SUB_ASSIGN           : 
SWITCH               : 
TILDA                : 
VARIABLE             : 5 6 7 19 22
VOID                 : 12
WHILE                : 
XOR_ASSIGN           : 
error                : 

Nonterminals, with rules where they appear

assignment_statement : 4
constant             : 6 21
declaration          : 3
empty                : 
exp                  : 7 19 20 20
operator             : 20
statement            : 1 2
statements           : 1 0
type                 : 5 6 7

Parsing method: LALR

state 0

    (0) S' -> . statements
    (1) statements -> . statements statement SEMI_COLON
    (2) statements -> . statement SEMI_COLON
    (3) statement -> . declaration
    (4) statement -> . assignment_statement
    (5) declaration -> . type VARIABLE
    (6) declaration -> . type VARIABLE EQUALS constant
    (7) declaration -> . type VARIABLE EQUALS exp
    (19) assignment_statement -> . VARIABLE EQUALS exp
    (8) type -> . INT
    (9) type -> . FLOAT
    (10) type -> . CHAR
    (11) type -> . DOUBLE
    (12) type -> . VOID
    (13) type -> . LONG

    VARIABLE        shift and go to state 9
    INT             shift and go to state 2
    FLOAT           shift and go to state 5
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 3
    VOID            shift and go to state 4
    LONG            shift and go to state 7

    assignment_statement           shift and go to state 6
    statement                      shift and go to state 10
    declaration                    shift and go to state 11
    statements                     shift and go to state 1
    type                           shift and go to state 12

state 1

    (0) S' -> statements .
    (1) statements -> statements . statement SEMI_COLON
    (3) statement -> . declaration
    (4) statement -> . assignment_statement
    (5) declaration -> . type VARIABLE
    (6) declaration -> . type VARIABLE EQUALS constant
    (7) declaration -> . type VARIABLE EQUALS exp
    (19) assignment_statement -> . VARIABLE EQUALS exp
    (8) type -> . INT
    (9) type -> . FLOAT
    (10) type -> . CHAR
    (11) type -> . DOUBLE
    (12) type -> . VOID
    (13) type -> . LONG

    VARIABLE        shift and go to state 9
    INT             shift and go to state 2
    FLOAT           shift and go to state 5
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 3
    VOID            shift and go to state 4
    LONG            shift and go to state 7

    assignment_statement           shift and go to state 6
    statement                      shift and go to state 13
    declaration                    shift and go to state 11
    type                           shift and go to state 12

state 2

    (8) type -> INT .

    VARIABLE        reduce using rule 8 (type -> INT .)


state 3

    (11) type -> DOUBLE .

    VARIABLE        reduce using rule 11 (type -> DOUBLE .)


state 4

    (12) type -> VOID .

    VARIABLE        reduce using rule 12 (type -> VOID .)


state 5

    (9) type -> FLOAT .

    VARIABLE        reduce using rule 9 (type -> FLOAT .)


state 6

    (4) statement -> assignment_statement .

    SEMI_COLON      reduce using rule 4 (statement -> assignment_statement .)


state 7

    (13) type -> LONG .

    VARIABLE        reduce using rule 13 (type -> LONG .)


state 8

    (10) type -> CHAR .

    VARIABLE        reduce using rule 10 (type -> CHAR .)


state 9

    (19) assignment_statement -> VARIABLE . EQUALS exp

    EQUALS          shift and go to state 14


state 10

    (2) statements -> statement . SEMI_COLON

    SEMI_COLON      shift and go to state 15


state 11

    (3) statement -> declaration .

    SEMI_COLON      reduce using rule 3 (statement -> declaration .)


state 12

    (5) declaration -> type . VARIABLE
    (6) declaration -> type . VARIABLE EQUALS constant
    (7) declaration -> type . VARIABLE EQUALS exp

    VARIABLE        shift and go to state 16


state 13

    (1) statements -> statements statement . SEMI_COLON

    SEMI_COLON      shift and go to state 17


state 14

    (19) assignment_statement -> VARIABLE EQUALS . exp
    (20) exp -> . exp operator exp
    (21) exp -> . constant
    (22) exp -> . VARIABLE
    (14) constant -> . HEX_INT
    (15) constant -> . DOT_REAL
    (16) constant -> . EXP_REAL
    (17) constant -> . DEC_INT
    (18) constant -> . CHARACTER

    VARIABLE        shift and go to state 25
    HEX_INT         shift and go to state 20
    DOT_REAL        shift and go to state 23
    EXP_REAL        shift and go to state 21
    DEC_INT         shift and go to state 22
    CHARACTER       shift and go to state 19

    constant                       shift and go to state 18
    exp                            shift and go to state 24

state 15

    (2) statements -> statement SEMI_COLON .

    VARIABLE        reduce using rule 2 (statements -> statement SEMI_COLON .)
    INT             reduce using rule 2 (statements -> statement SEMI_COLON .)
    FLOAT           reduce using rule 2 (statements -> statement SEMI_COLON .)
    CHAR            reduce using rule 2 (statements -> statement SEMI_COLON .)
    DOUBLE          reduce using rule 2 (statements -> statement SEMI_COLON .)
    VOID            reduce using rule 2 (statements -> statement SEMI_COLON .)
    LONG            reduce using rule 2 (statements -> statement SEMI_COLON .)
    $end            reduce using rule 2 (statements -> statement SEMI_COLON .)


state 16

    (5) declaration -> type VARIABLE .
    (6) declaration -> type VARIABLE . EQUALS constant
    (7) declaration -> type VARIABLE . EQUALS exp

    SEMI_COLON      reduce using rule 5 (declaration -> type VARIABLE .)
    EQUALS          shift and go to state 26


state 17

    (1) statements -> statements statement SEMI_COLON .

    VARIABLE        reduce using rule 1 (statements -> statements statement SEMI_COLON .)
    INT             reduce using rule 1 (statements -> statements statement SEMI_COLON .)
    FLOAT           reduce using rule 1 (statements -> statements statement SEMI_COLON .)
    CHAR            reduce using rule 1 (statements -> statements statement SEMI_COLON .)
    DOUBLE          reduce using rule 1 (statements -> statements statement SEMI_COLON .)
    VOID            reduce using rule 1 (statements -> statements statement SEMI_COLON .)
    LONG            reduce using rule 1 (statements -> statements statement SEMI_COLON .)
    $end            reduce using rule 1 (statements -> statements statement SEMI_COLON .)


state 18

    (21) exp -> constant .

    ADD             reduce using rule 21 (exp -> constant .)
    MINUS           reduce using rule 21 (exp -> constant .)
    MULT            reduce using rule 21 (exp -> constant .)
    DIV             reduce using rule 21 (exp -> constant .)
    MOD             reduce using rule 21 (exp -> constant .)
    SEMI_COLON      reduce using rule 21 (exp -> constant .)


state 19

    (18) constant -> CHARACTER .

    ADD             reduce using rule 18 (constant -> CHARACTER .)
    MINUS           reduce using rule 18 (constant -> CHARACTER .)
    MULT            reduce using rule 18 (constant -> CHARACTER .)
    DIV             reduce using rule 18 (constant -> CHARACTER .)
    MOD             reduce using rule 18 (constant -> CHARACTER .)
    SEMI_COLON      reduce using rule 18 (constant -> CHARACTER .)


state 20

    (14) constant -> HEX_INT .

    ADD             reduce using rule 14 (constant -> HEX_INT .)
    MINUS           reduce using rule 14 (constant -> HEX_INT .)
    MULT            reduce using rule 14 (constant -> HEX_INT .)
    DIV             reduce using rule 14 (constant -> HEX_INT .)
    MOD             reduce using rule 14 (constant -> HEX_INT .)
    SEMI_COLON      reduce using rule 14 (constant -> HEX_INT .)


state 21

    (16) constant -> EXP_REAL .

    ADD             reduce using rule 16 (constant -> EXP_REAL .)
    MINUS           reduce using rule 16 (constant -> EXP_REAL .)
    MULT            reduce using rule 16 (constant -> EXP_REAL .)
    DIV             reduce using rule 16 (constant -> EXP_REAL .)
    MOD             reduce using rule 16 (constant -> EXP_REAL .)
    SEMI_COLON      reduce using rule 16 (constant -> EXP_REAL .)


state 22

    (17) constant -> DEC_INT .

    ADD             reduce using rule 17 (constant -> DEC_INT .)
    MINUS           reduce using rule 17 (constant -> DEC_INT .)
    MULT            reduce using rule 17 (constant -> DEC_INT .)
    DIV             reduce using rule 17 (constant -> DEC_INT .)
    MOD             reduce using rule 17 (constant -> DEC_INT .)
    SEMI_COLON      reduce using rule 17 (constant -> DEC_INT .)


state 23

    (15) constant -> DOT_REAL .

    ADD             reduce using rule 15 (constant -> DOT_REAL .)
    MINUS           reduce using rule 15 (constant -> DOT_REAL .)
    MULT            reduce using rule 15 (constant -> DOT_REAL .)
    DIV             reduce using rule 15 (constant -> DOT_REAL .)
    MOD             reduce using rule 15 (constant -> DOT_REAL .)
    SEMI_COLON      reduce using rule 15 (constant -> DOT_REAL .)


state 24

    (19) assignment_statement -> VARIABLE EQUALS exp .
    (20) exp -> exp . operator exp
    (23) operator -> . ADD
    (24) operator -> . MINUS
    (25) operator -> . MULT
    (26) operator -> . DIV
    (27) operator -> . MOD

    SEMI_COLON      reduce using rule 19 (assignment_statement -> VARIABLE EQUALS exp .)
    ADD             shift and go to state 28
    MINUS           shift and go to state 30
    MULT            shift and go to state 31
    DIV             shift and go to state 29
    MOD             shift and go to state 32

    operator                       shift and go to state 27

state 25

    (22) exp -> VARIABLE .

    ADD             reduce using rule 22 (exp -> VARIABLE .)
    MINUS           reduce using rule 22 (exp -> VARIABLE .)
    MULT            reduce using rule 22 (exp -> VARIABLE .)
    DIV             reduce using rule 22 (exp -> VARIABLE .)
    MOD             reduce using rule 22 (exp -> VARIABLE .)
    SEMI_COLON      reduce using rule 22 (exp -> VARIABLE .)


state 26

    (6) declaration -> type VARIABLE EQUALS . constant
    (7) declaration -> type VARIABLE EQUALS . exp
    (14) constant -> . HEX_INT
    (15) constant -> . DOT_REAL
    (16) constant -> . EXP_REAL
    (17) constant -> . DEC_INT
    (18) constant -> . CHARACTER
    (20) exp -> . exp operator exp
    (21) exp -> . constant
    (22) exp -> . VARIABLE

    HEX_INT         shift and go to state 20
    DOT_REAL        shift and go to state 23
    EXP_REAL        shift and go to state 21
    DEC_INT         shift and go to state 22
    CHARACTER       shift and go to state 19
    VARIABLE        shift and go to state 25

    constant                       shift and go to state 33
    exp                            shift and go to state 34

state 27

    (20) exp -> exp operator . exp
    (20) exp -> . exp operator exp
    (21) exp -> . constant
    (22) exp -> . VARIABLE
    (14) constant -> . HEX_INT
    (15) constant -> . DOT_REAL
    (16) constant -> . EXP_REAL
    (17) constant -> . DEC_INT
    (18) constant -> . CHARACTER

    VARIABLE        shift and go to state 25
    HEX_INT         shift and go to state 20
    DOT_REAL        shift and go to state 23
    EXP_REAL        shift and go to state 21
    DEC_INT         shift and go to state 22
    CHARACTER       shift and go to state 19

    constant                       shift and go to state 18
    exp                            shift and go to state 35

state 28

    (23) operator -> ADD .

    VARIABLE        reduce using rule 23 (operator -> ADD .)
    HEX_INT         reduce using rule 23 (operator -> ADD .)
    DOT_REAL        reduce using rule 23 (operator -> ADD .)
    EXP_REAL        reduce using rule 23 (operator -> ADD .)
    DEC_INT         reduce using rule 23 (operator -> ADD .)
    CHARACTER       reduce using rule 23 (operator -> ADD .)


state 29

    (26) operator -> DIV .

    VARIABLE        reduce using rule 26 (operator -> DIV .)
    HEX_INT         reduce using rule 26 (operator -> DIV .)
    DOT_REAL        reduce using rule 26 (operator -> DIV .)
    EXP_REAL        reduce using rule 26 (operator -> DIV .)
    DEC_INT         reduce using rule 26 (operator -> DIV .)
    CHARACTER       reduce using rule 26 (operator -> DIV .)


state 30

    (24) operator -> MINUS .

    VARIABLE        reduce using rule 24 (operator -> MINUS .)
    HEX_INT         reduce using rule 24 (operator -> MINUS .)
    DOT_REAL        reduce using rule 24 (operator -> MINUS .)
    EXP_REAL        reduce using rule 24 (operator -> MINUS .)
    DEC_INT         reduce using rule 24 (operator -> MINUS .)
    CHARACTER       reduce using rule 24 (operator -> MINUS .)


state 31

    (25) operator -> MULT .

    VARIABLE        reduce using rule 25 (operator -> MULT .)
    HEX_INT         reduce using rule 25 (operator -> MULT .)
    DOT_REAL        reduce using rule 25 (operator -> MULT .)
    EXP_REAL        reduce using rule 25 (operator -> MULT .)
    DEC_INT         reduce using rule 25 (operator -> MULT .)
    CHARACTER       reduce using rule 25 (operator -> MULT .)


state 32

    (27) operator -> MOD .

    VARIABLE        reduce using rule 27 (operator -> MOD .)
    HEX_INT         reduce using rule 27 (operator -> MOD .)
    DOT_REAL        reduce using rule 27 (operator -> MOD .)
    EXP_REAL        reduce using rule 27 (operator -> MOD .)
    DEC_INT         reduce using rule 27 (operator -> MOD .)
    CHARACTER       reduce using rule 27 (operator -> MOD .)


state 33

    (6) declaration -> type VARIABLE EQUALS constant .
    (21) exp -> constant .

  ! reduce/reduce conflict for SEMI_COLON resolved using rule 6 (declaration -> type VARIABLE EQUALS constant .)
    SEMI_COLON      reduce using rule 6 (declaration -> type VARIABLE EQUALS constant .)
    ADD             reduce using rule 21 (exp -> constant .)
    MINUS           reduce using rule 21 (exp -> constant .)
    MULT            reduce using rule 21 (exp -> constant .)
    DIV             reduce using rule 21 (exp -> constant .)
    MOD             reduce using rule 21 (exp -> constant .)

  ! SEMI_COLON      [ reduce using rule 21 (exp -> constant .) ]


state 34

    (7) declaration -> type VARIABLE EQUALS exp .
    (20) exp -> exp . operator exp
    (23) operator -> . ADD
    (24) operator -> . MINUS
    (25) operator -> . MULT
    (26) operator -> . DIV
    (27) operator -> . MOD

    SEMI_COLON      reduce using rule 7 (declaration -> type VARIABLE EQUALS exp .)
    ADD             shift and go to state 28
    MINUS           shift and go to state 30
    MULT            shift and go to state 31
    DIV             shift and go to state 29
    MOD             shift and go to state 32

    operator                       shift and go to state 27

state 35

    (20) exp -> exp operator exp .
    (20) exp -> exp . operator exp
    (23) operator -> . ADD
    (24) operator -> . MINUS
    (25) operator -> . MULT
    (26) operator -> . DIV
    (27) operator -> . MOD

  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    SEMI_COLON      reduce using rule 20 (exp -> exp operator exp .)
    ADD             shift and go to state 28
    MINUS           shift and go to state 30
    MULT            shift and go to state 31
    DIV             shift and go to state 29
    MOD             shift and go to state 32

  ! ADD             [ reduce using rule 20 (exp -> exp operator exp .) ]
  ! MINUS           [ reduce using rule 20 (exp -> exp operator exp .) ]
  ! MULT            [ reduce using rule 20 (exp -> exp operator exp .) ]
  ! DIV             [ reduce using rule 20 (exp -> exp operator exp .) ]
  ! MOD             [ reduce using rule 20 (exp -> exp operator exp .) ]

    operator                       shift and go to state 27
WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ADD in state 35 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 35 resolved as shift
WARNING: shift/reduce conflict for MULT in state 35 resolved as shift
WARNING: shift/reduce conflict for DIV in state 35 resolved as shift
WARNING: shift/reduce conflict for MOD in state 35 resolved as shift
WARNING: reduce/reduce conflict in state 33 resolved using rule (declaration -> type VARIABLE EQUALS constant)
WARNING: rejected rule (exp -> constant) in state 33
