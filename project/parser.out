Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    RIGHT_OP
    RETURN
    DEFAULT
    LEFT_OP
    COLON
    TRUE
    COMMENT
    MAIN
    NEWLINE
    CASE
    LBIG
    TILDA
    DOT
    IF
    SIZEOF
    SINGLE_QUOTES
    ANDI
    ELSE
    AND
    CONDOP
    BREAK
    CONTINUE
    DOUBLE_QUOTES
    NOT
    SWITCH
    RBIG
    OR

Grammar

Rule 0     S' -> statements
Rule 1     statements -> statements statement
Rule 2     statements -> statement
Rule 3     statement -> declaration
Rule 4     statement -> exp SEMI_COLON
Rule 5     statement -> iterative_statement
Rule 6     declaration -> type enum_list SEMI_COLON
Rule 7     enum_list -> VARIABLE COMMA enum_list
Rule 8     enum_list -> VARIABLE EQUALS exp COMMA enum_list
Rule 9     enum_list -> VARIABLE
Rule 10    enum_list -> VARIABLE EQUALS exp
Rule 11    type -> INT
Rule 12    type -> FLOAT
Rule 13    type -> CHAR
Rule 14    type -> DOUBLE
Rule 15    type -> VOID
Rule 16    type -> SHORT
Rule 17    type -> LONG
Rule 18    constant -> HEX_INT
Rule 19    constant -> DOT_REAL
Rule 20    constant -> EXP_REAL
Rule 21    constant -> DEC_INT
Rule 22    constant -> CHARACTER
Rule 23    exp -> exp ADD exp
Rule 24    exp -> exp MINUS exp
Rule 25    exp -> exp MULT exp
Rule 26    exp -> exp DIV exp
Rule 27    exp -> exp MOD exp
Rule 28    exp -> exp L_OP exp
Rule 29    exp -> exp G_OP exp
Rule 30    exp -> exp LE_OP exp
Rule 31    exp -> exp GE_OP exp
Rule 32    exp -> exp NOTEQUALS exp
Rule 33    exp -> exp EQUALS_OP exp
Rule 34    exp -> exp OR_OP exp
Rule 35    exp -> exp AND_OP exp
Rule 36    exp -> exp MUL_ASSIGN exp
Rule 37    exp -> exp DIV_ASSIGN exp
Rule 38    exp -> exp MOD_ASSIGN exp
Rule 39    exp -> exp ADD_ASSIGN exp
Rule 40    exp -> exp SUB_ASSIGN exp
Rule 41    exp -> exp LEFT_ASSIGN exp
Rule 42    exp -> exp RIGHT_ASSIGN exp
Rule 43    exp -> exp AND_ASSIGN exp
Rule 44    exp -> exp XOR_ASSIGN exp
Rule 45    exp -> exp OR_ASSIGN exp
Rule 46    exp -> exp EQUALS exp
Rule 47    exp -> unary_expression
Rule 48    exp -> constant
Rule 49    exp -> VARIABLE
Rule 50    unary_expression -> VARIABLE unary_operator
Rule 51    unary_expression -> unary_operator VARIABLE
Rule 52    unary_operator -> INCREMENT
Rule 53    unary_operator -> DECREMENT
Rule 54    iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
Rule 55    iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE
Rule 56    iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
Rule 57    iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE
Rule 58    iterative_statement -> WHILE LPAREN exp RPAREN statement
Rule 59    iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON
Rule 60    iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE
Rule 61    iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE
Rule 62    iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON
Rule 63    iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
Rule 64    iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
Rule 65    iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
Rule 66    iterative_exp -> exp COMMA iterative_exp
Rule 67    iterative_exp -> exp
Rule 68    empty -> <empty>

Terminals, with rules where they appear

ADD                  : 23
ADD_ASSIGN           : 39
AND                  : 
ANDI                 : 
AND_ASSIGN           : 43
AND_OP               : 35
BREAK                : 
CASE                 : 
CHAR                 : 13
CHARACTER            : 22
COLON                : 
COMMA                : 7 8 66
COMMENT              : 
CONDOP               : 
CONTINUE             : 
DECREMENT            : 53
DEC_INT              : 21
DEFAULT              : 
DIV                  : 26
DIV_ASSIGN           : 37
DO                   : 62 63 64 65
DOT                  : 
DOT_REAL             : 19
DOUBLE               : 14
DOUBLE_QUOTES        : 
ELSE                 : 
EQUALS               : 8 10 46
EQUALS_OP            : 33
EXP_REAL             : 20
FLOAT                : 12
FOR                  : 54 55 56 57
GE_OP                : 31
G_OP                 : 29
HEX_INT              : 18
IF                   : 
INCREMENT            : 52
INT                  : 11
LBIG                 : 
LBRACE               : 55 57 60 61 63 65
LEFT_ASSIGN          : 41
LEFT_OP              : 
LE_OP                : 30
LONG                 : 17
LPAREN               : 54 55 56 57 58 59 60 61 62 63 64 65
L_OP                 : 28
MAIN                 : 
MINUS                : 24
MOD                  : 27
MOD_ASSIGN           : 38
MULT                 : 25
MUL_ASSIGN           : 36
NEWLINE              : 
NOT                  : 
NOTEQUALS            : 32
OR                   : 
OR_ASSIGN            : 45
OR_OP                : 34
RBIG                 : 
RBRACE               : 55 57 60 61 63 65
RETURN               : 
RIGHT_ASSIGN         : 42
RIGHT_OP             : 
RPAREN               : 54 55 56 57 58 59 60 61 62 63 64 65
SEMI_COLON           : 4 6 54 54 55 55 56 56 56 57 57 59 62 63 64 64 65
SHORT                : 16
SINGLE_QUOTES        : 
SIZEOF               : 
SUB_ASSIGN           : 40
SWITCH               : 
TILDA                : 
TRUE                 : 
VARIABLE             : 7 8 9 10 49 50 51
VOID                 : 15
WHILE                : 58 59 60 61 62 63 64 65
XOR_ASSIGN           : 44
error                : 

Nonterminals, with rules where they appear

constant             : 48
declaration          : 3
empty                : 
enum_list            : 6 7 8
exp                  : 4 8 10 23 23 24 24 25 25 26 26 27 27 28 28 29 29 30 30 31 31 32 32 33 33 34 34 35 35 36 36 37 37 38 38 39 39 40 40 41 41 42 42 43 43 44 44 45 45 46 46 58 59 60 61 62 63 64 65 66 67
iterative_exp        : 54 54 54 55 55 55 56 56 56 57 57 57 66
iterative_statement  : 5
statement            : 1 2 54 58 62
statements           : 1 55 60 63 0
type                 : 6
unary_expression     : 47
unary_operator       : 50 51

Parsing method: LALR

state 0

    (0) S' -> . statements
    (1) statements -> . statements statement
    (2) statements -> . statement
    (3) statement -> . declaration
    (4) statement -> . exp SEMI_COLON
    (5) statement -> . iterative_statement
    (6) declaration -> . type enum_list SEMI_COLON
    (23) exp -> . exp ADD exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULT exp
    (26) exp -> . exp DIV exp
    (27) exp -> . exp MOD exp
    (28) exp -> . exp L_OP exp
    (29) exp -> . exp G_OP exp
    (30) exp -> . exp LE_OP exp
    (31) exp -> . exp GE_OP exp
    (32) exp -> . exp NOTEQUALS exp
    (33) exp -> . exp EQUALS_OP exp
    (34) exp -> . exp OR_OP exp
    (35) exp -> . exp AND_OP exp
    (36) exp -> . exp MUL_ASSIGN exp
    (37) exp -> . exp DIV_ASSIGN exp
    (38) exp -> . exp MOD_ASSIGN exp
    (39) exp -> . exp ADD_ASSIGN exp
    (40) exp -> . exp SUB_ASSIGN exp
    (41) exp -> . exp LEFT_ASSIGN exp
    (42) exp -> . exp RIGHT_ASSIGN exp
    (43) exp -> . exp AND_ASSIGN exp
    (44) exp -> . exp XOR_ASSIGN exp
    (45) exp -> . exp OR_ASSIGN exp
    (46) exp -> . exp EQUALS exp
    (47) exp -> . unary_expression
    (48) exp -> . constant
    (49) exp -> . VARIABLE
    (54) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (55) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE
    (56) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (57) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE
    (58) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (59) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (60) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE statements RBRACE
    (61) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (62) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (63) iterative_statement -> . DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (64) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (65) iterative_statement -> . DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (11) type -> . INT
    (12) type -> . FLOAT
    (13) type -> . CHAR
    (14) type -> . DOUBLE
    (15) type -> . VOID
    (16) type -> . SHORT
    (17) type -> . LONG
    (50) unary_expression -> . VARIABLE unary_operator
    (51) unary_expression -> . unary_operator VARIABLE
    (18) constant -> . HEX_INT
    (19) constant -> . DOT_REAL
    (20) constant -> . EXP_REAL
    (21) constant -> . DEC_INT
    (22) constant -> . CHARACTER
    (52) unary_operator -> . INCREMENT
    (53) unary_operator -> . DECREMENT

    VARIABLE        shift and go to state 19
    FOR             shift and go to state 17
    WHILE           shift and go to state 7
    DO              shift and go to state 3
    INT             shift and go to state 22
    FLOAT           shift and go to state 25
    CHAR            shift and go to state 6
    DOUBLE          shift and go to state 23
    VOID            shift and go to state 4
    SHORT           shift and go to state 1
    LONG            shift and go to state 27
    HEX_INT         shift and go to state 24
    DOT_REAL        shift and go to state 14
    EXP_REAL        shift and go to state 11
    DEC_INT         shift and go to state 12
    CHARACTER       shift and go to state 5
    INCREMENT       shift and go to state 10
    DECREMENT       shift and go to state 21

    statements                     shift and go to state 2
    statement                      shift and go to state 13
    unary_expression               shift and go to state 20
    type                           shift and go to state 15
    exp                            shift and go to state 26
    declaration                    shift and go to state 18
    constant                       shift and go to state 8
    iterative_statement            shift and go to state 9
    unary_operator                 shift and go to state 16

state 1

    (16) type -> SHORT .

    VARIABLE        reduce using rule 16 (type -> SHORT .)


state 2

    (0) S' -> statements .
    (1) statements -> statements . statement
    (3) statement -> . declaration
    (4) statement -> . exp SEMI_COLON
    (5) statement -> . iterative_statement
    (6) declaration -> . type enum_list SEMI_COLON
    (23) exp -> . exp ADD exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULT exp
    (26) exp -> . exp DIV exp
    (27) exp -> . exp MOD exp
    (28) exp -> . exp L_OP exp
    (29) exp -> . exp G_OP exp
    (30) exp -> . exp LE_OP exp
    (31) exp -> . exp GE_OP exp
    (32) exp -> . exp NOTEQUALS exp
    (33) exp -> . exp EQUALS_OP exp
    (34) exp -> . exp OR_OP exp
    (35) exp -> . exp AND_OP exp
    (36) exp -> . exp MUL_ASSIGN exp
    (37) exp -> . exp DIV_ASSIGN exp
    (38) exp -> . exp MOD_ASSIGN exp
    (39) exp -> . exp ADD_ASSIGN exp
    (40) exp -> . exp SUB_ASSIGN exp
    (41) exp -> . exp LEFT_ASSIGN exp
    (42) exp -> . exp RIGHT_ASSIGN exp
    (43) exp -> . exp AND_ASSIGN exp
    (44) exp -> . exp XOR_ASSIGN exp
    (45) exp -> . exp OR_ASSIGN exp
    (46) exp -> . exp EQUALS exp
    (47) exp -> . unary_expression
    (48) exp -> . constant
    (49) exp -> . VARIABLE
    (54) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (55) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE
    (56) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (57) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE
    (58) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (59) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (60) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE statements RBRACE
    (61) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (62) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (63) iterative_statement -> . DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (64) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (65) iterative_statement -> . DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (11) type -> . INT
    (12) type -> . FLOAT
    (13) type -> . CHAR
    (14) type -> . DOUBLE
    (15) type -> . VOID
    (16) type -> . SHORT
    (17) type -> . LONG
    (50) unary_expression -> . VARIABLE unary_operator
    (51) unary_expression -> . unary_operator VARIABLE
    (18) constant -> . HEX_INT
    (19) constant -> . DOT_REAL
    (20) constant -> . EXP_REAL
    (21) constant -> . DEC_INT
    (22) constant -> . CHARACTER
    (52) unary_operator -> . INCREMENT
    (53) unary_operator -> . DECREMENT

    VARIABLE        shift and go to state 19
    FOR             shift and go to state 17
    WHILE           shift and go to state 7
    DO              shift and go to state 3
    INT             shift and go to state 22
    FLOAT           shift and go to state 25
    CHAR            shift and go to state 6
    DOUBLE          shift and go to state 23
    VOID            shift and go to state 4
    SHORT           shift and go to state 1
    LONG            shift and go to state 27
    HEX_INT         shift and go to state 24
    DOT_REAL        shift and go to state 14
    EXP_REAL        shift and go to state 11
    DEC_INT         shift and go to state 12
    CHARACTER       shift and go to state 5
    INCREMENT       shift and go to state 10
    DECREMENT       shift and go to state 21

    statement                      shift and go to state 28
    unary_expression               shift and go to state 20
    type                           shift and go to state 15
    exp                            shift and go to state 26
    declaration                    shift and go to state 18
    constant                       shift and go to state 8
    iterative_statement            shift and go to state 9
    unary_operator                 shift and go to state 16

state 3

    (62) iterative_statement -> DO . statement WHILE LPAREN exp RPAREN SEMI_COLON
    (63) iterative_statement -> DO . LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (64) iterative_statement -> DO . SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (65) iterative_statement -> DO . LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (3) statement -> . declaration
    (4) statement -> . exp SEMI_COLON
    (5) statement -> . iterative_statement
    (6) declaration -> . type enum_list SEMI_COLON
    (23) exp -> . exp ADD exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULT exp
    (26) exp -> . exp DIV exp
    (27) exp -> . exp MOD exp
    (28) exp -> . exp L_OP exp
    (29) exp -> . exp G_OP exp
    (30) exp -> . exp LE_OP exp
    (31) exp -> . exp GE_OP exp
    (32) exp -> . exp NOTEQUALS exp
    (33) exp -> . exp EQUALS_OP exp
    (34) exp -> . exp OR_OP exp
    (35) exp -> . exp AND_OP exp
    (36) exp -> . exp MUL_ASSIGN exp
    (37) exp -> . exp DIV_ASSIGN exp
    (38) exp -> . exp MOD_ASSIGN exp
    (39) exp -> . exp ADD_ASSIGN exp
    (40) exp -> . exp SUB_ASSIGN exp
    (41) exp -> . exp LEFT_ASSIGN exp
    (42) exp -> . exp RIGHT_ASSIGN exp
    (43) exp -> . exp AND_ASSIGN exp
    (44) exp -> . exp XOR_ASSIGN exp
    (45) exp -> . exp OR_ASSIGN exp
    (46) exp -> . exp EQUALS exp
    (47) exp -> . unary_expression
    (48) exp -> . constant
    (49) exp -> . VARIABLE
    (54) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (55) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE
    (56) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (57) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE
    (58) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (59) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (60) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE statements RBRACE
    (61) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (62) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (63) iterative_statement -> . DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (64) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (65) iterative_statement -> . DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (11) type -> . INT
    (12) type -> . FLOAT
    (13) type -> . CHAR
    (14) type -> . DOUBLE
    (15) type -> . VOID
    (16) type -> . SHORT
    (17) type -> . LONG
    (50) unary_expression -> . VARIABLE unary_operator
    (51) unary_expression -> . unary_operator VARIABLE
    (18) constant -> . HEX_INT
    (19) constant -> . DOT_REAL
    (20) constant -> . EXP_REAL
    (21) constant -> . DEC_INT
    (22) constant -> . CHARACTER
    (52) unary_operator -> . INCREMENT
    (53) unary_operator -> . DECREMENT

    LBRACE          shift and go to state 31
    SEMI_COLON      shift and go to state 29
    VARIABLE        shift and go to state 19
    FOR             shift and go to state 17
    WHILE           shift and go to state 7
    DO              shift and go to state 3
    INT             shift and go to state 22
    FLOAT           shift and go to state 25
    CHAR            shift and go to state 6
    DOUBLE          shift and go to state 23
    VOID            shift and go to state 4
    SHORT           shift and go to state 1
    LONG            shift and go to state 27
    HEX_INT         shift and go to state 24
    DOT_REAL        shift and go to state 14
    EXP_REAL        shift and go to state 11
    DEC_INT         shift and go to state 12
    CHARACTER       shift and go to state 5
    INCREMENT       shift and go to state 10
    DECREMENT       shift and go to state 21

    statement                      shift and go to state 30
    unary_expression               shift and go to state 20
    type                           shift and go to state 15
    exp                            shift and go to state 26
    declaration                    shift and go to state 18
    constant                       shift and go to state 8
    iterative_statement            shift and go to state 9
    unary_operator                 shift and go to state 16

state 4

    (15) type -> VOID .

    VARIABLE        reduce using rule 15 (type -> VOID .)


state 5

    (22) constant -> CHARACTER .

    SEMI_COLON      reduce using rule 22 (constant -> CHARACTER .)
    ADD             reduce using rule 22 (constant -> CHARACTER .)
    MINUS           reduce using rule 22 (constant -> CHARACTER .)
    MULT            reduce using rule 22 (constant -> CHARACTER .)
    DIV             reduce using rule 22 (constant -> CHARACTER .)
    MOD             reduce using rule 22 (constant -> CHARACTER .)
    L_OP            reduce using rule 22 (constant -> CHARACTER .)
    G_OP            reduce using rule 22 (constant -> CHARACTER .)
    LE_OP           reduce using rule 22 (constant -> CHARACTER .)
    GE_OP           reduce using rule 22 (constant -> CHARACTER .)
    NOTEQUALS       reduce using rule 22 (constant -> CHARACTER .)
    EQUALS_OP       reduce using rule 22 (constant -> CHARACTER .)
    OR_OP           reduce using rule 22 (constant -> CHARACTER .)
    AND_OP          reduce using rule 22 (constant -> CHARACTER .)
    MUL_ASSIGN      reduce using rule 22 (constant -> CHARACTER .)
    DIV_ASSIGN      reduce using rule 22 (constant -> CHARACTER .)
    MOD_ASSIGN      reduce using rule 22 (constant -> CHARACTER .)
    ADD_ASSIGN      reduce using rule 22 (constant -> CHARACTER .)
    SUB_ASSIGN      reduce using rule 22 (constant -> CHARACTER .)
    LEFT_ASSIGN     reduce using rule 22 (constant -> CHARACTER .)
    RIGHT_ASSIGN    reduce using rule 22 (constant -> CHARACTER .)
    AND_ASSIGN      reduce using rule 22 (constant -> CHARACTER .)
    XOR_ASSIGN      reduce using rule 22 (constant -> CHARACTER .)
    OR_ASSIGN       reduce using rule 22 (constant -> CHARACTER .)
    EQUALS          reduce using rule 22 (constant -> CHARACTER .)
    COMMA           reduce using rule 22 (constant -> CHARACTER .)
    RPAREN          reduce using rule 22 (constant -> CHARACTER .)


state 6

    (13) type -> CHAR .

    VARIABLE        reduce using rule 13 (type -> CHAR .)


state 7

    (58) iterative_statement -> WHILE . LPAREN exp RPAREN statement
    (59) iterative_statement -> WHILE . LPAREN exp RPAREN SEMI_COLON
    (60) iterative_statement -> WHILE . LPAREN exp RPAREN LBRACE statements RBRACE
    (61) iterative_statement -> WHILE . LPAREN exp RPAREN LBRACE RBRACE

    LPAREN          shift and go to state 32


state 8

    (48) exp -> constant .

    RPAREN          reduce using rule 48 (exp -> constant .)
    ADD             reduce using rule 48 (exp -> constant .)
    MINUS           reduce using rule 48 (exp -> constant .)
    MULT            reduce using rule 48 (exp -> constant .)
    DIV             reduce using rule 48 (exp -> constant .)
    MOD             reduce using rule 48 (exp -> constant .)
    L_OP            reduce using rule 48 (exp -> constant .)
    G_OP            reduce using rule 48 (exp -> constant .)
    LE_OP           reduce using rule 48 (exp -> constant .)
    GE_OP           reduce using rule 48 (exp -> constant .)
    NOTEQUALS       reduce using rule 48 (exp -> constant .)
    EQUALS_OP       reduce using rule 48 (exp -> constant .)
    OR_OP           reduce using rule 48 (exp -> constant .)
    AND_OP          reduce using rule 48 (exp -> constant .)
    MUL_ASSIGN      reduce using rule 48 (exp -> constant .)
    DIV_ASSIGN      reduce using rule 48 (exp -> constant .)
    MOD_ASSIGN      reduce using rule 48 (exp -> constant .)
    ADD_ASSIGN      reduce using rule 48 (exp -> constant .)
    SUB_ASSIGN      reduce using rule 48 (exp -> constant .)
    LEFT_ASSIGN     reduce using rule 48 (exp -> constant .)
    RIGHT_ASSIGN    reduce using rule 48 (exp -> constant .)
    AND_ASSIGN      reduce using rule 48 (exp -> constant .)
    XOR_ASSIGN      reduce using rule 48 (exp -> constant .)
    OR_ASSIGN       reduce using rule 48 (exp -> constant .)
    EQUALS          reduce using rule 48 (exp -> constant .)
    SEMI_COLON      reduce using rule 48 (exp -> constant .)
    COMMA           reduce using rule 48 (exp -> constant .)


state 9

    (5) statement -> iterative_statement .

    RBRACE          reduce using rule 5 (statement -> iterative_statement .)
    VARIABLE        reduce using rule 5 (statement -> iterative_statement .)
    FOR             reduce using rule 5 (statement -> iterative_statement .)
    WHILE           reduce using rule 5 (statement -> iterative_statement .)
    DO              reduce using rule 5 (statement -> iterative_statement .)
    INT             reduce using rule 5 (statement -> iterative_statement .)
    FLOAT           reduce using rule 5 (statement -> iterative_statement .)
    CHAR            reduce using rule 5 (statement -> iterative_statement .)
    DOUBLE          reduce using rule 5 (statement -> iterative_statement .)
    VOID            reduce using rule 5 (statement -> iterative_statement .)
    SHORT           reduce using rule 5 (statement -> iterative_statement .)
    LONG            reduce using rule 5 (statement -> iterative_statement .)
    HEX_INT         reduce using rule 5 (statement -> iterative_statement .)
    DOT_REAL        reduce using rule 5 (statement -> iterative_statement .)
    EXP_REAL        reduce using rule 5 (statement -> iterative_statement .)
    DEC_INT         reduce using rule 5 (statement -> iterative_statement .)
    CHARACTER       reduce using rule 5 (statement -> iterative_statement .)
    INCREMENT       reduce using rule 5 (statement -> iterative_statement .)
    DECREMENT       reduce using rule 5 (statement -> iterative_statement .)
    $end            reduce using rule 5 (statement -> iterative_statement .)


state 10

    (52) unary_operator -> INCREMENT .

    VARIABLE        reduce using rule 52 (unary_operator -> INCREMENT .)
    SEMI_COLON      reduce using rule 52 (unary_operator -> INCREMENT .)
    ADD             reduce using rule 52 (unary_operator -> INCREMENT .)
    MINUS           reduce using rule 52 (unary_operator -> INCREMENT .)
    MULT            reduce using rule 52 (unary_operator -> INCREMENT .)
    DIV             reduce using rule 52 (unary_operator -> INCREMENT .)
    MOD             reduce using rule 52 (unary_operator -> INCREMENT .)
    L_OP            reduce using rule 52 (unary_operator -> INCREMENT .)
    G_OP            reduce using rule 52 (unary_operator -> INCREMENT .)
    LE_OP           reduce using rule 52 (unary_operator -> INCREMENT .)
    GE_OP           reduce using rule 52 (unary_operator -> INCREMENT .)
    NOTEQUALS       reduce using rule 52 (unary_operator -> INCREMENT .)
    EQUALS_OP       reduce using rule 52 (unary_operator -> INCREMENT .)
    OR_OP           reduce using rule 52 (unary_operator -> INCREMENT .)
    AND_OP          reduce using rule 52 (unary_operator -> INCREMENT .)
    MUL_ASSIGN      reduce using rule 52 (unary_operator -> INCREMENT .)
    DIV_ASSIGN      reduce using rule 52 (unary_operator -> INCREMENT .)
    MOD_ASSIGN      reduce using rule 52 (unary_operator -> INCREMENT .)
    ADD_ASSIGN      reduce using rule 52 (unary_operator -> INCREMENT .)
    SUB_ASSIGN      reduce using rule 52 (unary_operator -> INCREMENT .)
    LEFT_ASSIGN     reduce using rule 52 (unary_operator -> INCREMENT .)
    RIGHT_ASSIGN    reduce using rule 52 (unary_operator -> INCREMENT .)
    AND_ASSIGN      reduce using rule 52 (unary_operator -> INCREMENT .)
    XOR_ASSIGN      reduce using rule 52 (unary_operator -> INCREMENT .)
    OR_ASSIGN       reduce using rule 52 (unary_operator -> INCREMENT .)
    EQUALS          reduce using rule 52 (unary_operator -> INCREMENT .)
    RPAREN          reduce using rule 52 (unary_operator -> INCREMENT .)
    COMMA           reduce using rule 52 (unary_operator -> INCREMENT .)


state 11

    (20) constant -> EXP_REAL .

    SEMI_COLON      reduce using rule 20 (constant -> EXP_REAL .)
    ADD             reduce using rule 20 (constant -> EXP_REAL .)
    MINUS           reduce using rule 20 (constant -> EXP_REAL .)
    MULT            reduce using rule 20 (constant -> EXP_REAL .)
    DIV             reduce using rule 20 (constant -> EXP_REAL .)
    MOD             reduce using rule 20 (constant -> EXP_REAL .)
    L_OP            reduce using rule 20 (constant -> EXP_REAL .)
    G_OP            reduce using rule 20 (constant -> EXP_REAL .)
    LE_OP           reduce using rule 20 (constant -> EXP_REAL .)
    GE_OP           reduce using rule 20 (constant -> EXP_REAL .)
    NOTEQUALS       reduce using rule 20 (constant -> EXP_REAL .)
    EQUALS_OP       reduce using rule 20 (constant -> EXP_REAL .)
    OR_OP           reduce using rule 20 (constant -> EXP_REAL .)
    AND_OP          reduce using rule 20 (constant -> EXP_REAL .)
    MUL_ASSIGN      reduce using rule 20 (constant -> EXP_REAL .)
    DIV_ASSIGN      reduce using rule 20 (constant -> EXP_REAL .)
    MOD_ASSIGN      reduce using rule 20 (constant -> EXP_REAL .)
    ADD_ASSIGN      reduce using rule 20 (constant -> EXP_REAL .)
    SUB_ASSIGN      reduce using rule 20 (constant -> EXP_REAL .)
    LEFT_ASSIGN     reduce using rule 20 (constant -> EXP_REAL .)
    RIGHT_ASSIGN    reduce using rule 20 (constant -> EXP_REAL .)
    AND_ASSIGN      reduce using rule 20 (constant -> EXP_REAL .)
    XOR_ASSIGN      reduce using rule 20 (constant -> EXP_REAL .)
    OR_ASSIGN       reduce using rule 20 (constant -> EXP_REAL .)
    EQUALS          reduce using rule 20 (constant -> EXP_REAL .)
    COMMA           reduce using rule 20 (constant -> EXP_REAL .)
    RPAREN          reduce using rule 20 (constant -> EXP_REAL .)


state 12

    (21) constant -> DEC_INT .

    SEMI_COLON      reduce using rule 21 (constant -> DEC_INT .)
    ADD             reduce using rule 21 (constant -> DEC_INT .)
    MINUS           reduce using rule 21 (constant -> DEC_INT .)
    MULT            reduce using rule 21 (constant -> DEC_INT .)
    DIV             reduce using rule 21 (constant -> DEC_INT .)
    MOD             reduce using rule 21 (constant -> DEC_INT .)
    L_OP            reduce using rule 21 (constant -> DEC_INT .)
    G_OP            reduce using rule 21 (constant -> DEC_INT .)
    LE_OP           reduce using rule 21 (constant -> DEC_INT .)
    GE_OP           reduce using rule 21 (constant -> DEC_INT .)
    NOTEQUALS       reduce using rule 21 (constant -> DEC_INT .)
    EQUALS_OP       reduce using rule 21 (constant -> DEC_INT .)
    OR_OP           reduce using rule 21 (constant -> DEC_INT .)
    AND_OP          reduce using rule 21 (constant -> DEC_INT .)
    MUL_ASSIGN      reduce using rule 21 (constant -> DEC_INT .)
    DIV_ASSIGN      reduce using rule 21 (constant -> DEC_INT .)
    MOD_ASSIGN      reduce using rule 21 (constant -> DEC_INT .)
    ADD_ASSIGN      reduce using rule 21 (constant -> DEC_INT .)
    SUB_ASSIGN      reduce using rule 21 (constant -> DEC_INT .)
    LEFT_ASSIGN     reduce using rule 21 (constant -> DEC_INT .)
    RIGHT_ASSIGN    reduce using rule 21 (constant -> DEC_INT .)
    AND_ASSIGN      reduce using rule 21 (constant -> DEC_INT .)
    XOR_ASSIGN      reduce using rule 21 (constant -> DEC_INT .)
    OR_ASSIGN       reduce using rule 21 (constant -> DEC_INT .)
    EQUALS          reduce using rule 21 (constant -> DEC_INT .)
    COMMA           reduce using rule 21 (constant -> DEC_INT .)
    RPAREN          reduce using rule 21 (constant -> DEC_INT .)


state 13

    (2) statements -> statement .

    VARIABLE        reduce using rule 2 (statements -> statement .)
    FOR             reduce using rule 2 (statements -> statement .)
    WHILE           reduce using rule 2 (statements -> statement .)
    DO              reduce using rule 2 (statements -> statement .)
    INT             reduce using rule 2 (statements -> statement .)
    FLOAT           reduce using rule 2 (statements -> statement .)
    CHAR            reduce using rule 2 (statements -> statement .)
    DOUBLE          reduce using rule 2 (statements -> statement .)
    VOID            reduce using rule 2 (statements -> statement .)
    SHORT           reduce using rule 2 (statements -> statement .)
    LONG            reduce using rule 2 (statements -> statement .)
    HEX_INT         reduce using rule 2 (statements -> statement .)
    DOT_REAL        reduce using rule 2 (statements -> statement .)
    EXP_REAL        reduce using rule 2 (statements -> statement .)
    DEC_INT         reduce using rule 2 (statements -> statement .)
    CHARACTER       reduce using rule 2 (statements -> statement .)
    INCREMENT       reduce using rule 2 (statements -> statement .)
    DECREMENT       reduce using rule 2 (statements -> statement .)
    $end            reduce using rule 2 (statements -> statement .)
    RBRACE          reduce using rule 2 (statements -> statement .)


state 14

    (19) constant -> DOT_REAL .

    SEMI_COLON      reduce using rule 19 (constant -> DOT_REAL .)
    ADD             reduce using rule 19 (constant -> DOT_REAL .)
    MINUS           reduce using rule 19 (constant -> DOT_REAL .)
    MULT            reduce using rule 19 (constant -> DOT_REAL .)
    DIV             reduce using rule 19 (constant -> DOT_REAL .)
    MOD             reduce using rule 19 (constant -> DOT_REAL .)
    L_OP            reduce using rule 19 (constant -> DOT_REAL .)
    G_OP            reduce using rule 19 (constant -> DOT_REAL .)
    LE_OP           reduce using rule 19 (constant -> DOT_REAL .)
    GE_OP           reduce using rule 19 (constant -> DOT_REAL .)
    NOTEQUALS       reduce using rule 19 (constant -> DOT_REAL .)
    EQUALS_OP       reduce using rule 19 (constant -> DOT_REAL .)
    OR_OP           reduce using rule 19 (constant -> DOT_REAL .)
    AND_OP          reduce using rule 19 (constant -> DOT_REAL .)
    MUL_ASSIGN      reduce using rule 19 (constant -> DOT_REAL .)
    DIV_ASSIGN      reduce using rule 19 (constant -> DOT_REAL .)
    MOD_ASSIGN      reduce using rule 19 (constant -> DOT_REAL .)
    ADD_ASSIGN      reduce using rule 19 (constant -> DOT_REAL .)
    SUB_ASSIGN      reduce using rule 19 (constant -> DOT_REAL .)
    LEFT_ASSIGN     reduce using rule 19 (constant -> DOT_REAL .)
    RIGHT_ASSIGN    reduce using rule 19 (constant -> DOT_REAL .)
    AND_ASSIGN      reduce using rule 19 (constant -> DOT_REAL .)
    XOR_ASSIGN      reduce using rule 19 (constant -> DOT_REAL .)
    OR_ASSIGN       reduce using rule 19 (constant -> DOT_REAL .)
    EQUALS          reduce using rule 19 (constant -> DOT_REAL .)
    COMMA           reduce using rule 19 (constant -> DOT_REAL .)
    RPAREN          reduce using rule 19 (constant -> DOT_REAL .)


state 15

    (6) declaration -> type . enum_list SEMI_COLON
    (7) enum_list -> . VARIABLE COMMA enum_list
    (8) enum_list -> . VARIABLE EQUALS exp COMMA enum_list
    (9) enum_list -> . VARIABLE
    (10) enum_list -> . VARIABLE EQUALS exp

    VARIABLE        shift and go to state 34

    enum_list                      shift and go to state 33

state 16

    (51) unary_expression -> unary_operator . VARIABLE

    VARIABLE        shift and go to state 35


state 17

    (54) iterative_statement -> FOR . LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (55) iterative_statement -> FOR . LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE
    (56) iterative_statement -> FOR . LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (57) iterative_statement -> FOR . LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE

    LPAREN          shift and go to state 36


state 18

    (3) statement -> declaration .

    RBRACE          reduce using rule 3 (statement -> declaration .)
    VARIABLE        reduce using rule 3 (statement -> declaration .)
    FOR             reduce using rule 3 (statement -> declaration .)
    WHILE           reduce using rule 3 (statement -> declaration .)
    DO              reduce using rule 3 (statement -> declaration .)
    INT             reduce using rule 3 (statement -> declaration .)
    FLOAT           reduce using rule 3 (statement -> declaration .)
    CHAR            reduce using rule 3 (statement -> declaration .)
    DOUBLE          reduce using rule 3 (statement -> declaration .)
    VOID            reduce using rule 3 (statement -> declaration .)
    SHORT           reduce using rule 3 (statement -> declaration .)
    LONG            reduce using rule 3 (statement -> declaration .)
    HEX_INT         reduce using rule 3 (statement -> declaration .)
    DOT_REAL        reduce using rule 3 (statement -> declaration .)
    EXP_REAL        reduce using rule 3 (statement -> declaration .)
    DEC_INT         reduce using rule 3 (statement -> declaration .)
    CHARACTER       reduce using rule 3 (statement -> declaration .)
    INCREMENT       reduce using rule 3 (statement -> declaration .)
    DECREMENT       reduce using rule 3 (statement -> declaration .)
    $end            reduce using rule 3 (statement -> declaration .)


state 19

    (49) exp -> VARIABLE .
    (50) unary_expression -> VARIABLE . unary_operator
    (52) unary_operator -> . INCREMENT
    (53) unary_operator -> . DECREMENT

    RPAREN          reduce using rule 49 (exp -> VARIABLE .)
    ADD             reduce using rule 49 (exp -> VARIABLE .)
    MINUS           reduce using rule 49 (exp -> VARIABLE .)
    MULT            reduce using rule 49 (exp -> VARIABLE .)
    DIV             reduce using rule 49 (exp -> VARIABLE .)
    MOD             reduce using rule 49 (exp -> VARIABLE .)
    L_OP            reduce using rule 49 (exp -> VARIABLE .)
    G_OP            reduce using rule 49 (exp -> VARIABLE .)
    LE_OP           reduce using rule 49 (exp -> VARIABLE .)
    GE_OP           reduce using rule 49 (exp -> VARIABLE .)
    NOTEQUALS       reduce using rule 49 (exp -> VARIABLE .)
    EQUALS_OP       reduce using rule 49 (exp -> VARIABLE .)
    OR_OP           reduce using rule 49 (exp -> VARIABLE .)
    AND_OP          reduce using rule 49 (exp -> VARIABLE .)
    MUL_ASSIGN      reduce using rule 49 (exp -> VARIABLE .)
    DIV_ASSIGN      reduce using rule 49 (exp -> VARIABLE .)
    MOD_ASSIGN      reduce using rule 49 (exp -> VARIABLE .)
    ADD_ASSIGN      reduce using rule 49 (exp -> VARIABLE .)
    SUB_ASSIGN      reduce using rule 49 (exp -> VARIABLE .)
    LEFT_ASSIGN     reduce using rule 49 (exp -> VARIABLE .)
    RIGHT_ASSIGN    reduce using rule 49 (exp -> VARIABLE .)
    AND_ASSIGN      reduce using rule 49 (exp -> VARIABLE .)
    XOR_ASSIGN      reduce using rule 49 (exp -> VARIABLE .)
    OR_ASSIGN       reduce using rule 49 (exp -> VARIABLE .)
    EQUALS          reduce using rule 49 (exp -> VARIABLE .)
    SEMI_COLON      reduce using rule 49 (exp -> VARIABLE .)
    COMMA           reduce using rule 49 (exp -> VARIABLE .)
    INCREMENT       shift and go to state 10
    DECREMENT       shift and go to state 21

    unary_operator                 shift and go to state 37

state 20

    (47) exp -> unary_expression .

    RPAREN          reduce using rule 47 (exp -> unary_expression .)
    ADD             reduce using rule 47 (exp -> unary_expression .)
    MINUS           reduce using rule 47 (exp -> unary_expression .)
    MULT            reduce using rule 47 (exp -> unary_expression .)
    DIV             reduce using rule 47 (exp -> unary_expression .)
    MOD             reduce using rule 47 (exp -> unary_expression .)
    L_OP            reduce using rule 47 (exp -> unary_expression .)
    G_OP            reduce using rule 47 (exp -> unary_expression .)
    LE_OP           reduce using rule 47 (exp -> unary_expression .)
    GE_OP           reduce using rule 47 (exp -> unary_expression .)
    NOTEQUALS       reduce using rule 47 (exp -> unary_expression .)
    EQUALS_OP       reduce using rule 47 (exp -> unary_expression .)
    OR_OP           reduce using rule 47 (exp -> unary_expression .)
    AND_OP          reduce using rule 47 (exp -> unary_expression .)
    MUL_ASSIGN      reduce using rule 47 (exp -> unary_expression .)
    DIV_ASSIGN      reduce using rule 47 (exp -> unary_expression .)
    MOD_ASSIGN      reduce using rule 47 (exp -> unary_expression .)
    ADD_ASSIGN      reduce using rule 47 (exp -> unary_expression .)
    SUB_ASSIGN      reduce using rule 47 (exp -> unary_expression .)
    LEFT_ASSIGN     reduce using rule 47 (exp -> unary_expression .)
    RIGHT_ASSIGN    reduce using rule 47 (exp -> unary_expression .)
    AND_ASSIGN      reduce using rule 47 (exp -> unary_expression .)
    XOR_ASSIGN      reduce using rule 47 (exp -> unary_expression .)
    OR_ASSIGN       reduce using rule 47 (exp -> unary_expression .)
    EQUALS          reduce using rule 47 (exp -> unary_expression .)
    SEMI_COLON      reduce using rule 47 (exp -> unary_expression .)
    COMMA           reduce using rule 47 (exp -> unary_expression .)


state 21

    (53) unary_operator -> DECREMENT .

    VARIABLE        reduce using rule 53 (unary_operator -> DECREMENT .)
    SEMI_COLON      reduce using rule 53 (unary_operator -> DECREMENT .)
    ADD             reduce using rule 53 (unary_operator -> DECREMENT .)
    MINUS           reduce using rule 53 (unary_operator -> DECREMENT .)
    MULT            reduce using rule 53 (unary_operator -> DECREMENT .)
    DIV             reduce using rule 53 (unary_operator -> DECREMENT .)
    MOD             reduce using rule 53 (unary_operator -> DECREMENT .)
    L_OP            reduce using rule 53 (unary_operator -> DECREMENT .)
    G_OP            reduce using rule 53 (unary_operator -> DECREMENT .)
    LE_OP           reduce using rule 53 (unary_operator -> DECREMENT .)
    GE_OP           reduce using rule 53 (unary_operator -> DECREMENT .)
    NOTEQUALS       reduce using rule 53 (unary_operator -> DECREMENT .)
    EQUALS_OP       reduce using rule 53 (unary_operator -> DECREMENT .)
    OR_OP           reduce using rule 53 (unary_operator -> DECREMENT .)
    AND_OP          reduce using rule 53 (unary_operator -> DECREMENT .)
    MUL_ASSIGN      reduce using rule 53 (unary_operator -> DECREMENT .)
    DIV_ASSIGN      reduce using rule 53 (unary_operator -> DECREMENT .)
    MOD_ASSIGN      reduce using rule 53 (unary_operator -> DECREMENT .)
    ADD_ASSIGN      reduce using rule 53 (unary_operator -> DECREMENT .)
    SUB_ASSIGN      reduce using rule 53 (unary_operator -> DECREMENT .)
    LEFT_ASSIGN     reduce using rule 53 (unary_operator -> DECREMENT .)
    RIGHT_ASSIGN    reduce using rule 53 (unary_operator -> DECREMENT .)
    AND_ASSIGN      reduce using rule 53 (unary_operator -> DECREMENT .)
    XOR_ASSIGN      reduce using rule 53 (unary_operator -> DECREMENT .)
    OR_ASSIGN       reduce using rule 53 (unary_operator -> DECREMENT .)
    EQUALS          reduce using rule 53 (unary_operator -> DECREMENT .)
    RPAREN          reduce using rule 53 (unary_operator -> DECREMENT .)
    COMMA           reduce using rule 53 (unary_operator -> DECREMENT .)


state 22

    (11) type -> INT .

    VARIABLE        reduce using rule 11 (type -> INT .)


state 23

    (14) type -> DOUBLE .

    VARIABLE        reduce using rule 14 (type -> DOUBLE .)


state 24

    (18) constant -> HEX_INT .

    SEMI_COLON      reduce using rule 18 (constant -> HEX_INT .)
    ADD             reduce using rule 18 (constant -> HEX_INT .)
    MINUS           reduce using rule 18 (constant -> HEX_INT .)
    MULT            reduce using rule 18 (constant -> HEX_INT .)
    DIV             reduce using rule 18 (constant -> HEX_INT .)
    MOD             reduce using rule 18 (constant -> HEX_INT .)
    L_OP            reduce using rule 18 (constant -> HEX_INT .)
    G_OP            reduce using rule 18 (constant -> HEX_INT .)
    LE_OP           reduce using rule 18 (constant -> HEX_INT .)
    GE_OP           reduce using rule 18 (constant -> HEX_INT .)
    NOTEQUALS       reduce using rule 18 (constant -> HEX_INT .)
    EQUALS_OP       reduce using rule 18 (constant -> HEX_INT .)
    OR_OP           reduce using rule 18 (constant -> HEX_INT .)
    AND_OP          reduce using rule 18 (constant -> HEX_INT .)
    MUL_ASSIGN      reduce using rule 18 (constant -> HEX_INT .)
    DIV_ASSIGN      reduce using rule 18 (constant -> HEX_INT .)
    MOD_ASSIGN      reduce using rule 18 (constant -> HEX_INT .)
    ADD_ASSIGN      reduce using rule 18 (constant -> HEX_INT .)
    SUB_ASSIGN      reduce using rule 18 (constant -> HEX_INT .)
    LEFT_ASSIGN     reduce using rule 18 (constant -> HEX_INT .)
    RIGHT_ASSIGN    reduce using rule 18 (constant -> HEX_INT .)
    AND_ASSIGN      reduce using rule 18 (constant -> HEX_INT .)
    XOR_ASSIGN      reduce using rule 18 (constant -> HEX_INT .)
    OR_ASSIGN       reduce using rule 18 (constant -> HEX_INT .)
    EQUALS          reduce using rule 18 (constant -> HEX_INT .)
    COMMA           reduce using rule 18 (constant -> HEX_INT .)
    RPAREN          reduce using rule 18 (constant -> HEX_INT .)


state 25

    (12) type -> FLOAT .

    VARIABLE        reduce using rule 12 (type -> FLOAT .)


state 26

    (4) statement -> exp . SEMI_COLON
    (23) exp -> exp . ADD exp
    (24) exp -> exp . MINUS exp
    (25) exp -> exp . MULT exp
    (26) exp -> exp . DIV exp
    (27) exp -> exp . MOD exp
    (28) exp -> exp . L_OP exp
    (29) exp -> exp . G_OP exp
    (30) exp -> exp . LE_OP exp
    (31) exp -> exp . GE_OP exp
    (32) exp -> exp . NOTEQUALS exp
    (33) exp -> exp . EQUALS_OP exp
    (34) exp -> exp . OR_OP exp
    (35) exp -> exp . AND_OP exp
    (36) exp -> exp . MUL_ASSIGN exp
    (37) exp -> exp . DIV_ASSIGN exp
    (38) exp -> exp . MOD_ASSIGN exp
    (39) exp -> exp . ADD_ASSIGN exp
    (40) exp -> exp . SUB_ASSIGN exp
    (41) exp -> exp . LEFT_ASSIGN exp
    (42) exp -> exp . RIGHT_ASSIGN exp
    (43) exp -> exp . AND_ASSIGN exp
    (44) exp -> exp . XOR_ASSIGN exp
    (45) exp -> exp . OR_ASSIGN exp
    (46) exp -> exp . EQUALS exp

    SEMI_COLON      shift and go to state 41
    ADD             shift and go to state 53
    MINUS           shift and go to state 43
    MULT            shift and go to state 44
    DIV             shift and go to state 42
    MOD             shift and go to state 62
    L_OP            shift and go to state 59
    G_OP            shift and go to state 47
    LE_OP           shift and go to state 45
    GE_OP           shift and go to state 54
    NOTEQUALS       shift and go to state 38
    EQUALS_OP       shift and go to state 39
    OR_OP           shift and go to state 48
    AND_OP          shift and go to state 52
    MUL_ASSIGN      shift and go to state 60
    DIV_ASSIGN      shift and go to state 40
    MOD_ASSIGN      shift and go to state 56
    ADD_ASSIGN      shift and go to state 50
    SUB_ASSIGN      shift and go to state 55
    LEFT_ASSIGN     shift and go to state 61
    RIGHT_ASSIGN    shift and go to state 46
    AND_ASSIGN      shift and go to state 49
    XOR_ASSIGN      shift and go to state 57
    OR_ASSIGN       shift and go to state 58
    EQUALS          shift and go to state 51


state 27

    (17) type -> LONG .

    VARIABLE        reduce using rule 17 (type -> LONG .)


state 28

    (1) statements -> statements statement .

    VARIABLE        reduce using rule 1 (statements -> statements statement .)
    FOR             reduce using rule 1 (statements -> statements statement .)
    WHILE           reduce using rule 1 (statements -> statements statement .)
    DO              reduce using rule 1 (statements -> statements statement .)
    INT             reduce using rule 1 (statements -> statements statement .)
    FLOAT           reduce using rule 1 (statements -> statements statement .)
    CHAR            reduce using rule 1 (statements -> statements statement .)
    DOUBLE          reduce using rule 1 (statements -> statements statement .)
    VOID            reduce using rule 1 (statements -> statements statement .)
    SHORT           reduce using rule 1 (statements -> statements statement .)
    LONG            reduce using rule 1 (statements -> statements statement .)
    HEX_INT         reduce using rule 1 (statements -> statements statement .)
    DOT_REAL        reduce using rule 1 (statements -> statements statement .)
    EXP_REAL        reduce using rule 1 (statements -> statements statement .)
    DEC_INT         reduce using rule 1 (statements -> statements statement .)
    CHARACTER       reduce using rule 1 (statements -> statements statement .)
    INCREMENT       reduce using rule 1 (statements -> statements statement .)
    DECREMENT       reduce using rule 1 (statements -> statements statement .)
    $end            reduce using rule 1 (statements -> statements statement .)
    RBRACE          reduce using rule 1 (statements -> statements statement .)


state 29

    (64) iterative_statement -> DO SEMI_COLON . WHILE LPAREN exp RPAREN SEMI_COLON

    WHILE           shift and go to state 63


state 30

    (62) iterative_statement -> DO statement . WHILE LPAREN exp RPAREN SEMI_COLON

    WHILE           shift and go to state 64


state 31

    (63) iterative_statement -> DO LBRACE . statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (65) iterative_statement -> DO LBRACE . RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (1) statements -> . statements statement
    (2) statements -> . statement
    (3) statement -> . declaration
    (4) statement -> . exp SEMI_COLON
    (5) statement -> . iterative_statement
    (6) declaration -> . type enum_list SEMI_COLON
    (23) exp -> . exp ADD exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULT exp
    (26) exp -> . exp DIV exp
    (27) exp -> . exp MOD exp
    (28) exp -> . exp L_OP exp
    (29) exp -> . exp G_OP exp
    (30) exp -> . exp LE_OP exp
    (31) exp -> . exp GE_OP exp
    (32) exp -> . exp NOTEQUALS exp
    (33) exp -> . exp EQUALS_OP exp
    (34) exp -> . exp OR_OP exp
    (35) exp -> . exp AND_OP exp
    (36) exp -> . exp MUL_ASSIGN exp
    (37) exp -> . exp DIV_ASSIGN exp
    (38) exp -> . exp MOD_ASSIGN exp
    (39) exp -> . exp ADD_ASSIGN exp
    (40) exp -> . exp SUB_ASSIGN exp
    (41) exp -> . exp LEFT_ASSIGN exp
    (42) exp -> . exp RIGHT_ASSIGN exp
    (43) exp -> . exp AND_ASSIGN exp
    (44) exp -> . exp XOR_ASSIGN exp
    (45) exp -> . exp OR_ASSIGN exp
    (46) exp -> . exp EQUALS exp
    (47) exp -> . unary_expression
    (48) exp -> . constant
    (49) exp -> . VARIABLE
    (54) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (55) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE
    (56) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (57) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE
    (58) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (59) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (60) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE statements RBRACE
    (61) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (62) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (63) iterative_statement -> . DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (64) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (65) iterative_statement -> . DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (11) type -> . INT
    (12) type -> . FLOAT
    (13) type -> . CHAR
    (14) type -> . DOUBLE
    (15) type -> . VOID
    (16) type -> . SHORT
    (17) type -> . LONG
    (50) unary_expression -> . VARIABLE unary_operator
    (51) unary_expression -> . unary_operator VARIABLE
    (18) constant -> . HEX_INT
    (19) constant -> . DOT_REAL
    (20) constant -> . EXP_REAL
    (21) constant -> . DEC_INT
    (22) constant -> . CHARACTER
    (52) unary_operator -> . INCREMENT
    (53) unary_operator -> . DECREMENT

    RBRACE          shift and go to state 66
    VARIABLE        shift and go to state 19
    FOR             shift and go to state 17
    WHILE           shift and go to state 7
    DO              shift and go to state 3
    INT             shift and go to state 22
    FLOAT           shift and go to state 25
    CHAR            shift and go to state 6
    DOUBLE          shift and go to state 23
    VOID            shift and go to state 4
    SHORT           shift and go to state 1
    LONG            shift and go to state 27
    HEX_INT         shift and go to state 24
    DOT_REAL        shift and go to state 14
    EXP_REAL        shift and go to state 11
    DEC_INT         shift and go to state 12
    CHARACTER       shift and go to state 5
    INCREMENT       shift and go to state 10
    DECREMENT       shift and go to state 21

    statements                     shift and go to state 65
    exp                            shift and go to state 26
    unary_expression               shift and go to state 20
    type                           shift and go to state 15
    statement                      shift and go to state 13
    declaration                    shift and go to state 18
    constant                       shift and go to state 8
    iterative_statement            shift and go to state 9
    unary_operator                 shift and go to state 16

state 32

    (58) iterative_statement -> WHILE LPAREN . exp RPAREN statement
    (59) iterative_statement -> WHILE LPAREN . exp RPAREN SEMI_COLON
    (60) iterative_statement -> WHILE LPAREN . exp RPAREN LBRACE statements RBRACE
    (61) iterative_statement -> WHILE LPAREN . exp RPAREN LBRACE RBRACE
    (23) exp -> . exp ADD exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULT exp
    (26) exp -> . exp DIV exp
    (27) exp -> . exp MOD exp
    (28) exp -> . exp L_OP exp
    (29) exp -> . exp G_OP exp
    (30) exp -> . exp LE_OP exp
    (31) exp -> . exp GE_OP exp
    (32) exp -> . exp NOTEQUALS exp
    (33) exp -> . exp EQUALS_OP exp
    (34) exp -> . exp OR_OP exp
    (35) exp -> . exp AND_OP exp
    (36) exp -> . exp MUL_ASSIGN exp
    (37) exp -> . exp DIV_ASSIGN exp
    (38) exp -> . exp MOD_ASSIGN exp
    (39) exp -> . exp ADD_ASSIGN exp
    (40) exp -> . exp SUB_ASSIGN exp
    (41) exp -> . exp LEFT_ASSIGN exp
    (42) exp -> . exp RIGHT_ASSIGN exp
    (43) exp -> . exp AND_ASSIGN exp
    (44) exp -> . exp XOR_ASSIGN exp
    (45) exp -> . exp OR_ASSIGN exp
    (46) exp -> . exp EQUALS exp
    (47) exp -> . unary_expression
    (48) exp -> . constant
    (49) exp -> . VARIABLE
    (50) unary_expression -> . VARIABLE unary_operator
    (51) unary_expression -> . unary_operator VARIABLE
    (18) constant -> . HEX_INT
    (19) constant -> . DOT_REAL
    (20) constant -> . EXP_REAL
    (21) constant -> . DEC_INT
    (22) constant -> . CHARACTER
    (52) unary_operator -> . INCREMENT
    (53) unary_operator -> . DECREMENT

    VARIABLE        shift and go to state 19
    HEX_INT         shift and go to state 24
    DOT_REAL        shift and go to state 14
    EXP_REAL        shift and go to state 11
    DEC_INT         shift and go to state 12
    CHARACTER       shift and go to state 5
    INCREMENT       shift and go to state 10
    DECREMENT       shift and go to state 21

    constant                       shift and go to state 8
    exp                            shift and go to state 67
    unary_expression               shift and go to state 20
    unary_operator                 shift and go to state 16

state 33

    (6) declaration -> type enum_list . SEMI_COLON

    SEMI_COLON      shift and go to state 68


state 34

    (7) enum_list -> VARIABLE . COMMA enum_list
    (8) enum_list -> VARIABLE . EQUALS exp COMMA enum_list
    (9) enum_list -> VARIABLE .
    (10) enum_list -> VARIABLE . EQUALS exp

    COMMA           shift and go to state 69
    EQUALS          shift and go to state 70
    SEMI_COLON      reduce using rule 9 (enum_list -> VARIABLE .)


state 35

    (51) unary_expression -> unary_operator VARIABLE .

    ADD             reduce using rule 51 (unary_expression -> unary_operator VARIABLE .)
    MINUS           reduce using rule 51 (unary_expression -> unary_operator VARIABLE .)
    MULT            reduce using rule 51 (unary_expression -> unary_operator VARIABLE .)
    DIV             reduce using rule 51 (unary_expression -> unary_operator VARIABLE .)
    MOD             reduce using rule 51 (unary_expression -> unary_operator VARIABLE .)
    L_OP            reduce using rule 51 (unary_expression -> unary_operator VARIABLE .)
    G_OP            reduce using rule 51 (unary_expression -> unary_operator VARIABLE .)
    LE_OP           reduce using rule 51 (unary_expression -> unary_operator VARIABLE .)
    GE_OP           reduce using rule 51 (unary_expression -> unary_operator VARIABLE .)
    NOTEQUALS       reduce using rule 51 (unary_expression -> unary_operator VARIABLE .)
    EQUALS_OP       reduce using rule 51 (unary_expression -> unary_operator VARIABLE .)
    OR_OP           reduce using rule 51 (unary_expression -> unary_operator VARIABLE .)
    AND_OP          reduce using rule 51 (unary_expression -> unary_operator VARIABLE .)
    MUL_ASSIGN      reduce using rule 51 (unary_expression -> unary_operator VARIABLE .)
    DIV_ASSIGN      reduce using rule 51 (unary_expression -> unary_operator VARIABLE .)
    MOD_ASSIGN      reduce using rule 51 (unary_expression -> unary_operator VARIABLE .)
    ADD_ASSIGN      reduce using rule 51 (unary_expression -> unary_operator VARIABLE .)
    SUB_ASSIGN      reduce using rule 51 (unary_expression -> unary_operator VARIABLE .)
    LEFT_ASSIGN     reduce using rule 51 (unary_expression -> unary_operator VARIABLE .)
    RIGHT_ASSIGN    reduce using rule 51 (unary_expression -> unary_operator VARIABLE .)
    AND_ASSIGN      reduce using rule 51 (unary_expression -> unary_operator VARIABLE .)
    XOR_ASSIGN      reduce using rule 51 (unary_expression -> unary_operator VARIABLE .)
    OR_ASSIGN       reduce using rule 51 (unary_expression -> unary_operator VARIABLE .)
    EQUALS          reduce using rule 51 (unary_expression -> unary_operator VARIABLE .)
    SEMI_COLON      reduce using rule 51 (unary_expression -> unary_operator VARIABLE .)
    RPAREN          reduce using rule 51 (unary_expression -> unary_operator VARIABLE .)
    COMMA           reduce using rule 51 (unary_expression -> unary_operator VARIABLE .)


state 36

    (54) iterative_statement -> FOR LPAREN . iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (55) iterative_statement -> FOR LPAREN . iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE
    (56) iterative_statement -> FOR LPAREN . iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (57) iterative_statement -> FOR LPAREN . iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE
    (66) iterative_exp -> . exp COMMA iterative_exp
    (67) iterative_exp -> . exp
    (23) exp -> . exp ADD exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULT exp
    (26) exp -> . exp DIV exp
    (27) exp -> . exp MOD exp
    (28) exp -> . exp L_OP exp
    (29) exp -> . exp G_OP exp
    (30) exp -> . exp LE_OP exp
    (31) exp -> . exp GE_OP exp
    (32) exp -> . exp NOTEQUALS exp
    (33) exp -> . exp EQUALS_OP exp
    (34) exp -> . exp OR_OP exp
    (35) exp -> . exp AND_OP exp
    (36) exp -> . exp MUL_ASSIGN exp
    (37) exp -> . exp DIV_ASSIGN exp
    (38) exp -> . exp MOD_ASSIGN exp
    (39) exp -> . exp ADD_ASSIGN exp
    (40) exp -> . exp SUB_ASSIGN exp
    (41) exp -> . exp LEFT_ASSIGN exp
    (42) exp -> . exp RIGHT_ASSIGN exp
    (43) exp -> . exp AND_ASSIGN exp
    (44) exp -> . exp XOR_ASSIGN exp
    (45) exp -> . exp OR_ASSIGN exp
    (46) exp -> . exp EQUALS exp
    (47) exp -> . unary_expression
    (48) exp -> . constant
    (49) exp -> . VARIABLE
    (50) unary_expression -> . VARIABLE unary_operator
    (51) unary_expression -> . unary_operator VARIABLE
    (18) constant -> . HEX_INT
    (19) constant -> . DOT_REAL
    (20) constant -> . EXP_REAL
    (21) constant -> . DEC_INT
    (22) constant -> . CHARACTER
    (52) unary_operator -> . INCREMENT
    (53) unary_operator -> . DECREMENT

    VARIABLE        shift and go to state 19
    HEX_INT         shift and go to state 24
    DOT_REAL        shift and go to state 14
    EXP_REAL        shift and go to state 11
    DEC_INT         shift and go to state 12
    CHARACTER       shift and go to state 5
    INCREMENT       shift and go to state 10
    DECREMENT       shift and go to state 21

    constant                       shift and go to state 8
    unary_expression               shift and go to state 20
    iterative_exp                  shift and go to state 71
    exp                            shift and go to state 72
    unary_operator                 shift and go to state 16

state 37

    (50) unary_expression -> VARIABLE unary_operator .

    ADD             reduce using rule 50 (unary_expression -> VARIABLE unary_operator .)
    MINUS           reduce using rule 50 (unary_expression -> VARIABLE unary_operator .)
    MULT            reduce using rule 50 (unary_expression -> VARIABLE unary_operator .)
    DIV             reduce using rule 50 (unary_expression -> VARIABLE unary_operator .)
    MOD             reduce using rule 50 (unary_expression -> VARIABLE unary_operator .)
    L_OP            reduce using rule 50 (unary_expression -> VARIABLE unary_operator .)
    G_OP            reduce using rule 50 (unary_expression -> VARIABLE unary_operator .)
    LE_OP           reduce using rule 50 (unary_expression -> VARIABLE unary_operator .)
    GE_OP           reduce using rule 50 (unary_expression -> VARIABLE unary_operator .)
    NOTEQUALS       reduce using rule 50 (unary_expression -> VARIABLE unary_operator .)
    EQUALS_OP       reduce using rule 50 (unary_expression -> VARIABLE unary_operator .)
    OR_OP           reduce using rule 50 (unary_expression -> VARIABLE unary_operator .)
    AND_OP          reduce using rule 50 (unary_expression -> VARIABLE unary_operator .)
    MUL_ASSIGN      reduce using rule 50 (unary_expression -> VARIABLE unary_operator .)
    DIV_ASSIGN      reduce using rule 50 (unary_expression -> VARIABLE unary_operator .)
    MOD_ASSIGN      reduce using rule 50 (unary_expression -> VARIABLE unary_operator .)
    ADD_ASSIGN      reduce using rule 50 (unary_expression -> VARIABLE unary_operator .)
    SUB_ASSIGN      reduce using rule 50 (unary_expression -> VARIABLE unary_operator .)
    LEFT_ASSIGN     reduce using rule 50 (unary_expression -> VARIABLE unary_operator .)
    RIGHT_ASSIGN    reduce using rule 50 (unary_expression -> VARIABLE unary_operator .)
    AND_ASSIGN      reduce using rule 50 (unary_expression -> VARIABLE unary_operator .)
    XOR_ASSIGN      reduce using rule 50 (unary_expression -> VARIABLE unary_operator .)
    OR_ASSIGN       reduce using rule 50 (unary_expression -> VARIABLE unary_operator .)
    EQUALS          reduce using rule 50 (unary_expression -> VARIABLE unary_operator .)
    SEMI_COLON      reduce using rule 50 (unary_expression -> VARIABLE unary_operator .)
    RPAREN          reduce using rule 50 (unary_expression -> VARIABLE unary_operator .)
    COMMA           reduce using rule 50 (unary_expression -> VARIABLE unary_operator .)


state 38

    (32) exp -> exp NOTEQUALS . exp
    (23) exp -> . exp ADD exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULT exp
    (26) exp -> . exp DIV exp
    (27) exp -> . exp MOD exp
    (28) exp -> . exp L_OP exp
    (29) exp -> . exp G_OP exp
    (30) exp -> . exp LE_OP exp
    (31) exp -> . exp GE_OP exp
    (32) exp -> . exp NOTEQUALS exp
    (33) exp -> . exp EQUALS_OP exp
    (34) exp -> . exp OR_OP exp
    (35) exp -> . exp AND_OP exp
    (36) exp -> . exp MUL_ASSIGN exp
    (37) exp -> . exp DIV_ASSIGN exp
    (38) exp -> . exp MOD_ASSIGN exp
    (39) exp -> . exp ADD_ASSIGN exp
    (40) exp -> . exp SUB_ASSIGN exp
    (41) exp -> . exp LEFT_ASSIGN exp
    (42) exp -> . exp RIGHT_ASSIGN exp
    (43) exp -> . exp AND_ASSIGN exp
    (44) exp -> . exp XOR_ASSIGN exp
    (45) exp -> . exp OR_ASSIGN exp
    (46) exp -> . exp EQUALS exp
    (47) exp -> . unary_expression
    (48) exp -> . constant
    (49) exp -> . VARIABLE
    (50) unary_expression -> . VARIABLE unary_operator
    (51) unary_expression -> . unary_operator VARIABLE
    (18) constant -> . HEX_INT
    (19) constant -> . DOT_REAL
    (20) constant -> . EXP_REAL
    (21) constant -> . DEC_INT
    (22) constant -> . CHARACTER
    (52) unary_operator -> . INCREMENT
    (53) unary_operator -> . DECREMENT

    VARIABLE        shift and go to state 19
    HEX_INT         shift and go to state 24
    DOT_REAL        shift and go to state 14
    EXP_REAL        shift and go to state 11
    DEC_INT         shift and go to state 12
    CHARACTER       shift and go to state 5
    INCREMENT       shift and go to state 10
    DECREMENT       shift and go to state 21

    constant                       shift and go to state 8
    unary_expression               shift and go to state 20
    exp                            shift and go to state 73
    unary_operator                 shift and go to state 16

state 39

    (33) exp -> exp EQUALS_OP . exp
    (23) exp -> . exp ADD exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULT exp
    (26) exp -> . exp DIV exp
    (27) exp -> . exp MOD exp
    (28) exp -> . exp L_OP exp
    (29) exp -> . exp G_OP exp
    (30) exp -> . exp LE_OP exp
    (31) exp -> . exp GE_OP exp
    (32) exp -> . exp NOTEQUALS exp
    (33) exp -> . exp EQUALS_OP exp
    (34) exp -> . exp OR_OP exp
    (35) exp -> . exp AND_OP exp
    (36) exp -> . exp MUL_ASSIGN exp
    (37) exp -> . exp DIV_ASSIGN exp
    (38) exp -> . exp MOD_ASSIGN exp
    (39) exp -> . exp ADD_ASSIGN exp
    (40) exp -> . exp SUB_ASSIGN exp
    (41) exp -> . exp LEFT_ASSIGN exp
    (42) exp -> . exp RIGHT_ASSIGN exp
    (43) exp -> . exp AND_ASSIGN exp
    (44) exp -> . exp XOR_ASSIGN exp
    (45) exp -> . exp OR_ASSIGN exp
    (46) exp -> . exp EQUALS exp
    (47) exp -> . unary_expression
    (48) exp -> . constant
    (49) exp -> . VARIABLE
    (50) unary_expression -> . VARIABLE unary_operator
    (51) unary_expression -> . unary_operator VARIABLE
    (18) constant -> . HEX_INT
    (19) constant -> . DOT_REAL
    (20) constant -> . EXP_REAL
    (21) constant -> . DEC_INT
    (22) constant -> . CHARACTER
    (52) unary_operator -> . INCREMENT
    (53) unary_operator -> . DECREMENT

    VARIABLE        shift and go to state 19
    HEX_INT         shift and go to state 24
    DOT_REAL        shift and go to state 14
    EXP_REAL        shift and go to state 11
    DEC_INT         shift and go to state 12
    CHARACTER       shift and go to state 5
    INCREMENT       shift and go to state 10
    DECREMENT       shift and go to state 21

    constant                       shift and go to state 8
    unary_expression               shift and go to state 20
    exp                            shift and go to state 74
    unary_operator                 shift and go to state 16

state 40

    (37) exp -> exp DIV_ASSIGN . exp
    (23) exp -> . exp ADD exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULT exp
    (26) exp -> . exp DIV exp
    (27) exp -> . exp MOD exp
    (28) exp -> . exp L_OP exp
    (29) exp -> . exp G_OP exp
    (30) exp -> . exp LE_OP exp
    (31) exp -> . exp GE_OP exp
    (32) exp -> . exp NOTEQUALS exp
    (33) exp -> . exp EQUALS_OP exp
    (34) exp -> . exp OR_OP exp
    (35) exp -> . exp AND_OP exp
    (36) exp -> . exp MUL_ASSIGN exp
    (37) exp -> . exp DIV_ASSIGN exp
    (38) exp -> . exp MOD_ASSIGN exp
    (39) exp -> . exp ADD_ASSIGN exp
    (40) exp -> . exp SUB_ASSIGN exp
    (41) exp -> . exp LEFT_ASSIGN exp
    (42) exp -> . exp RIGHT_ASSIGN exp
    (43) exp -> . exp AND_ASSIGN exp
    (44) exp -> . exp XOR_ASSIGN exp
    (45) exp -> . exp OR_ASSIGN exp
    (46) exp -> . exp EQUALS exp
    (47) exp -> . unary_expression
    (48) exp -> . constant
    (49) exp -> . VARIABLE
    (50) unary_expression -> . VARIABLE unary_operator
    (51) unary_expression -> . unary_operator VARIABLE
    (18) constant -> . HEX_INT
    (19) constant -> . DOT_REAL
    (20) constant -> . EXP_REAL
    (21) constant -> . DEC_INT
    (22) constant -> . CHARACTER
    (52) unary_operator -> . INCREMENT
    (53) unary_operator -> . DECREMENT

    VARIABLE        shift and go to state 19
    HEX_INT         shift and go to state 24
    DOT_REAL        shift and go to state 14
    EXP_REAL        shift and go to state 11
    DEC_INT         shift and go to state 12
    CHARACTER       shift and go to state 5
    INCREMENT       shift and go to state 10
    DECREMENT       shift and go to state 21

    constant                       shift and go to state 8
    unary_expression               shift and go to state 20
    exp                            shift and go to state 75
    unary_operator                 shift and go to state 16

state 41

    (4) statement -> exp SEMI_COLON .

    RBRACE          reduce using rule 4 (statement -> exp SEMI_COLON .)
    VARIABLE        reduce using rule 4 (statement -> exp SEMI_COLON .)
    FOR             reduce using rule 4 (statement -> exp SEMI_COLON .)
    WHILE           reduce using rule 4 (statement -> exp SEMI_COLON .)
    DO              reduce using rule 4 (statement -> exp SEMI_COLON .)
    INT             reduce using rule 4 (statement -> exp SEMI_COLON .)
    FLOAT           reduce using rule 4 (statement -> exp SEMI_COLON .)
    CHAR            reduce using rule 4 (statement -> exp SEMI_COLON .)
    DOUBLE          reduce using rule 4 (statement -> exp SEMI_COLON .)
    VOID            reduce using rule 4 (statement -> exp SEMI_COLON .)
    SHORT           reduce using rule 4 (statement -> exp SEMI_COLON .)
    LONG            reduce using rule 4 (statement -> exp SEMI_COLON .)
    HEX_INT         reduce using rule 4 (statement -> exp SEMI_COLON .)
    DOT_REAL        reduce using rule 4 (statement -> exp SEMI_COLON .)
    EXP_REAL        reduce using rule 4 (statement -> exp SEMI_COLON .)
    DEC_INT         reduce using rule 4 (statement -> exp SEMI_COLON .)
    CHARACTER       reduce using rule 4 (statement -> exp SEMI_COLON .)
    INCREMENT       reduce using rule 4 (statement -> exp SEMI_COLON .)
    DECREMENT       reduce using rule 4 (statement -> exp SEMI_COLON .)
    $end            reduce using rule 4 (statement -> exp SEMI_COLON .)


state 42

    (26) exp -> exp DIV . exp
    (23) exp -> . exp ADD exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULT exp
    (26) exp -> . exp DIV exp
    (27) exp -> . exp MOD exp
    (28) exp -> . exp L_OP exp
    (29) exp -> . exp G_OP exp
    (30) exp -> . exp LE_OP exp
    (31) exp -> . exp GE_OP exp
    (32) exp -> . exp NOTEQUALS exp
    (33) exp -> . exp EQUALS_OP exp
    (34) exp -> . exp OR_OP exp
    (35) exp -> . exp AND_OP exp
    (36) exp -> . exp MUL_ASSIGN exp
    (37) exp -> . exp DIV_ASSIGN exp
    (38) exp -> . exp MOD_ASSIGN exp
    (39) exp -> . exp ADD_ASSIGN exp
    (40) exp -> . exp SUB_ASSIGN exp
    (41) exp -> . exp LEFT_ASSIGN exp
    (42) exp -> . exp RIGHT_ASSIGN exp
    (43) exp -> . exp AND_ASSIGN exp
    (44) exp -> . exp XOR_ASSIGN exp
    (45) exp -> . exp OR_ASSIGN exp
    (46) exp -> . exp EQUALS exp
    (47) exp -> . unary_expression
    (48) exp -> . constant
    (49) exp -> . VARIABLE
    (50) unary_expression -> . VARIABLE unary_operator
    (51) unary_expression -> . unary_operator VARIABLE
    (18) constant -> . HEX_INT
    (19) constant -> . DOT_REAL
    (20) constant -> . EXP_REAL
    (21) constant -> . DEC_INT
    (22) constant -> . CHARACTER
    (52) unary_operator -> . INCREMENT
    (53) unary_operator -> . DECREMENT

    VARIABLE        shift and go to state 19
    HEX_INT         shift and go to state 24
    DOT_REAL        shift and go to state 14
    EXP_REAL        shift and go to state 11
    DEC_INT         shift and go to state 12
    CHARACTER       shift and go to state 5
    INCREMENT       shift and go to state 10
    DECREMENT       shift and go to state 21

    constant                       shift and go to state 8
    unary_expression               shift and go to state 20
    exp                            shift and go to state 76
    unary_operator                 shift and go to state 16

state 43

    (24) exp -> exp MINUS . exp
    (23) exp -> . exp ADD exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULT exp
    (26) exp -> . exp DIV exp
    (27) exp -> . exp MOD exp
    (28) exp -> . exp L_OP exp
    (29) exp -> . exp G_OP exp
    (30) exp -> . exp LE_OP exp
    (31) exp -> . exp GE_OP exp
    (32) exp -> . exp NOTEQUALS exp
    (33) exp -> . exp EQUALS_OP exp
    (34) exp -> . exp OR_OP exp
    (35) exp -> . exp AND_OP exp
    (36) exp -> . exp MUL_ASSIGN exp
    (37) exp -> . exp DIV_ASSIGN exp
    (38) exp -> . exp MOD_ASSIGN exp
    (39) exp -> . exp ADD_ASSIGN exp
    (40) exp -> . exp SUB_ASSIGN exp
    (41) exp -> . exp LEFT_ASSIGN exp
    (42) exp -> . exp RIGHT_ASSIGN exp
    (43) exp -> . exp AND_ASSIGN exp
    (44) exp -> . exp XOR_ASSIGN exp
    (45) exp -> . exp OR_ASSIGN exp
    (46) exp -> . exp EQUALS exp
    (47) exp -> . unary_expression
    (48) exp -> . constant
    (49) exp -> . VARIABLE
    (50) unary_expression -> . VARIABLE unary_operator
    (51) unary_expression -> . unary_operator VARIABLE
    (18) constant -> . HEX_INT
    (19) constant -> . DOT_REAL
    (20) constant -> . EXP_REAL
    (21) constant -> . DEC_INT
    (22) constant -> . CHARACTER
    (52) unary_operator -> . INCREMENT
    (53) unary_operator -> . DECREMENT

    VARIABLE        shift and go to state 19
    HEX_INT         shift and go to state 24
    DOT_REAL        shift and go to state 14
    EXP_REAL        shift and go to state 11
    DEC_INT         shift and go to state 12
    CHARACTER       shift and go to state 5
    INCREMENT       shift and go to state 10
    DECREMENT       shift and go to state 21

    constant                       shift and go to state 8
    unary_expression               shift and go to state 20
    exp                            shift and go to state 77
    unary_operator                 shift and go to state 16

state 44

    (25) exp -> exp MULT . exp
    (23) exp -> . exp ADD exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULT exp
    (26) exp -> . exp DIV exp
    (27) exp -> . exp MOD exp
    (28) exp -> . exp L_OP exp
    (29) exp -> . exp G_OP exp
    (30) exp -> . exp LE_OP exp
    (31) exp -> . exp GE_OP exp
    (32) exp -> . exp NOTEQUALS exp
    (33) exp -> . exp EQUALS_OP exp
    (34) exp -> . exp OR_OP exp
    (35) exp -> . exp AND_OP exp
    (36) exp -> . exp MUL_ASSIGN exp
    (37) exp -> . exp DIV_ASSIGN exp
    (38) exp -> . exp MOD_ASSIGN exp
    (39) exp -> . exp ADD_ASSIGN exp
    (40) exp -> . exp SUB_ASSIGN exp
    (41) exp -> . exp LEFT_ASSIGN exp
    (42) exp -> . exp RIGHT_ASSIGN exp
    (43) exp -> . exp AND_ASSIGN exp
    (44) exp -> . exp XOR_ASSIGN exp
    (45) exp -> . exp OR_ASSIGN exp
    (46) exp -> . exp EQUALS exp
    (47) exp -> . unary_expression
    (48) exp -> . constant
    (49) exp -> . VARIABLE
    (50) unary_expression -> . VARIABLE unary_operator
    (51) unary_expression -> . unary_operator VARIABLE
    (18) constant -> . HEX_INT
    (19) constant -> . DOT_REAL
    (20) constant -> . EXP_REAL
    (21) constant -> . DEC_INT
    (22) constant -> . CHARACTER
    (52) unary_operator -> . INCREMENT
    (53) unary_operator -> . DECREMENT

    VARIABLE        shift and go to state 19
    HEX_INT         shift and go to state 24
    DOT_REAL        shift and go to state 14
    EXP_REAL        shift and go to state 11
    DEC_INT         shift and go to state 12
    CHARACTER       shift and go to state 5
    INCREMENT       shift and go to state 10
    DECREMENT       shift and go to state 21

    constant                       shift and go to state 8
    unary_expression               shift and go to state 20
    exp                            shift and go to state 78
    unary_operator                 shift and go to state 16

state 45

    (30) exp -> exp LE_OP . exp
    (23) exp -> . exp ADD exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULT exp
    (26) exp -> . exp DIV exp
    (27) exp -> . exp MOD exp
    (28) exp -> . exp L_OP exp
    (29) exp -> . exp G_OP exp
    (30) exp -> . exp LE_OP exp
    (31) exp -> . exp GE_OP exp
    (32) exp -> . exp NOTEQUALS exp
    (33) exp -> . exp EQUALS_OP exp
    (34) exp -> . exp OR_OP exp
    (35) exp -> . exp AND_OP exp
    (36) exp -> . exp MUL_ASSIGN exp
    (37) exp -> . exp DIV_ASSIGN exp
    (38) exp -> . exp MOD_ASSIGN exp
    (39) exp -> . exp ADD_ASSIGN exp
    (40) exp -> . exp SUB_ASSIGN exp
    (41) exp -> . exp LEFT_ASSIGN exp
    (42) exp -> . exp RIGHT_ASSIGN exp
    (43) exp -> . exp AND_ASSIGN exp
    (44) exp -> . exp XOR_ASSIGN exp
    (45) exp -> . exp OR_ASSIGN exp
    (46) exp -> . exp EQUALS exp
    (47) exp -> . unary_expression
    (48) exp -> . constant
    (49) exp -> . VARIABLE
    (50) unary_expression -> . VARIABLE unary_operator
    (51) unary_expression -> . unary_operator VARIABLE
    (18) constant -> . HEX_INT
    (19) constant -> . DOT_REAL
    (20) constant -> . EXP_REAL
    (21) constant -> . DEC_INT
    (22) constant -> . CHARACTER
    (52) unary_operator -> . INCREMENT
    (53) unary_operator -> . DECREMENT

    VARIABLE        shift and go to state 19
    HEX_INT         shift and go to state 24
    DOT_REAL        shift and go to state 14
    EXP_REAL        shift and go to state 11
    DEC_INT         shift and go to state 12
    CHARACTER       shift and go to state 5
    INCREMENT       shift and go to state 10
    DECREMENT       shift and go to state 21

    constant                       shift and go to state 8
    unary_expression               shift and go to state 20
    exp                            shift and go to state 79
    unary_operator                 shift and go to state 16

state 46

    (42) exp -> exp RIGHT_ASSIGN . exp
    (23) exp -> . exp ADD exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULT exp
    (26) exp -> . exp DIV exp
    (27) exp -> . exp MOD exp
    (28) exp -> . exp L_OP exp
    (29) exp -> . exp G_OP exp
    (30) exp -> . exp LE_OP exp
    (31) exp -> . exp GE_OP exp
    (32) exp -> . exp NOTEQUALS exp
    (33) exp -> . exp EQUALS_OP exp
    (34) exp -> . exp OR_OP exp
    (35) exp -> . exp AND_OP exp
    (36) exp -> . exp MUL_ASSIGN exp
    (37) exp -> . exp DIV_ASSIGN exp
    (38) exp -> . exp MOD_ASSIGN exp
    (39) exp -> . exp ADD_ASSIGN exp
    (40) exp -> . exp SUB_ASSIGN exp
    (41) exp -> . exp LEFT_ASSIGN exp
    (42) exp -> . exp RIGHT_ASSIGN exp
    (43) exp -> . exp AND_ASSIGN exp
    (44) exp -> . exp XOR_ASSIGN exp
    (45) exp -> . exp OR_ASSIGN exp
    (46) exp -> . exp EQUALS exp
    (47) exp -> . unary_expression
    (48) exp -> . constant
    (49) exp -> . VARIABLE
    (50) unary_expression -> . VARIABLE unary_operator
    (51) unary_expression -> . unary_operator VARIABLE
    (18) constant -> . HEX_INT
    (19) constant -> . DOT_REAL
    (20) constant -> . EXP_REAL
    (21) constant -> . DEC_INT
    (22) constant -> . CHARACTER
    (52) unary_operator -> . INCREMENT
    (53) unary_operator -> . DECREMENT

    VARIABLE        shift and go to state 19
    HEX_INT         shift and go to state 24
    DOT_REAL        shift and go to state 14
    EXP_REAL        shift and go to state 11
    DEC_INT         shift and go to state 12
    CHARACTER       shift and go to state 5
    INCREMENT       shift and go to state 10
    DECREMENT       shift and go to state 21

    constant                       shift and go to state 8
    unary_expression               shift and go to state 20
    exp                            shift and go to state 80
    unary_operator                 shift and go to state 16

state 47

    (29) exp -> exp G_OP . exp
    (23) exp -> . exp ADD exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULT exp
    (26) exp -> . exp DIV exp
    (27) exp -> . exp MOD exp
    (28) exp -> . exp L_OP exp
    (29) exp -> . exp G_OP exp
    (30) exp -> . exp LE_OP exp
    (31) exp -> . exp GE_OP exp
    (32) exp -> . exp NOTEQUALS exp
    (33) exp -> . exp EQUALS_OP exp
    (34) exp -> . exp OR_OP exp
    (35) exp -> . exp AND_OP exp
    (36) exp -> . exp MUL_ASSIGN exp
    (37) exp -> . exp DIV_ASSIGN exp
    (38) exp -> . exp MOD_ASSIGN exp
    (39) exp -> . exp ADD_ASSIGN exp
    (40) exp -> . exp SUB_ASSIGN exp
    (41) exp -> . exp LEFT_ASSIGN exp
    (42) exp -> . exp RIGHT_ASSIGN exp
    (43) exp -> . exp AND_ASSIGN exp
    (44) exp -> . exp XOR_ASSIGN exp
    (45) exp -> . exp OR_ASSIGN exp
    (46) exp -> . exp EQUALS exp
    (47) exp -> . unary_expression
    (48) exp -> . constant
    (49) exp -> . VARIABLE
    (50) unary_expression -> . VARIABLE unary_operator
    (51) unary_expression -> . unary_operator VARIABLE
    (18) constant -> . HEX_INT
    (19) constant -> . DOT_REAL
    (20) constant -> . EXP_REAL
    (21) constant -> . DEC_INT
    (22) constant -> . CHARACTER
    (52) unary_operator -> . INCREMENT
    (53) unary_operator -> . DECREMENT

    VARIABLE        shift and go to state 19
    HEX_INT         shift and go to state 24
    DOT_REAL        shift and go to state 14
    EXP_REAL        shift and go to state 11
    DEC_INT         shift and go to state 12
    CHARACTER       shift and go to state 5
    INCREMENT       shift and go to state 10
    DECREMENT       shift and go to state 21

    constant                       shift and go to state 8
    unary_expression               shift and go to state 20
    exp                            shift and go to state 81
    unary_operator                 shift and go to state 16

state 48

    (34) exp -> exp OR_OP . exp
    (23) exp -> . exp ADD exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULT exp
    (26) exp -> . exp DIV exp
    (27) exp -> . exp MOD exp
    (28) exp -> . exp L_OP exp
    (29) exp -> . exp G_OP exp
    (30) exp -> . exp LE_OP exp
    (31) exp -> . exp GE_OP exp
    (32) exp -> . exp NOTEQUALS exp
    (33) exp -> . exp EQUALS_OP exp
    (34) exp -> . exp OR_OP exp
    (35) exp -> . exp AND_OP exp
    (36) exp -> . exp MUL_ASSIGN exp
    (37) exp -> . exp DIV_ASSIGN exp
    (38) exp -> . exp MOD_ASSIGN exp
    (39) exp -> . exp ADD_ASSIGN exp
    (40) exp -> . exp SUB_ASSIGN exp
    (41) exp -> . exp LEFT_ASSIGN exp
    (42) exp -> . exp RIGHT_ASSIGN exp
    (43) exp -> . exp AND_ASSIGN exp
    (44) exp -> . exp XOR_ASSIGN exp
    (45) exp -> . exp OR_ASSIGN exp
    (46) exp -> . exp EQUALS exp
    (47) exp -> . unary_expression
    (48) exp -> . constant
    (49) exp -> . VARIABLE
    (50) unary_expression -> . VARIABLE unary_operator
    (51) unary_expression -> . unary_operator VARIABLE
    (18) constant -> . HEX_INT
    (19) constant -> . DOT_REAL
    (20) constant -> . EXP_REAL
    (21) constant -> . DEC_INT
    (22) constant -> . CHARACTER
    (52) unary_operator -> . INCREMENT
    (53) unary_operator -> . DECREMENT

    VARIABLE        shift and go to state 19
    HEX_INT         shift and go to state 24
    DOT_REAL        shift and go to state 14
    EXP_REAL        shift and go to state 11
    DEC_INT         shift and go to state 12
    CHARACTER       shift and go to state 5
    INCREMENT       shift and go to state 10
    DECREMENT       shift and go to state 21

    constant                       shift and go to state 8
    unary_expression               shift and go to state 20
    exp                            shift and go to state 82
    unary_operator                 shift and go to state 16

state 49

    (43) exp -> exp AND_ASSIGN . exp
    (23) exp -> . exp ADD exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULT exp
    (26) exp -> . exp DIV exp
    (27) exp -> . exp MOD exp
    (28) exp -> . exp L_OP exp
    (29) exp -> . exp G_OP exp
    (30) exp -> . exp LE_OP exp
    (31) exp -> . exp GE_OP exp
    (32) exp -> . exp NOTEQUALS exp
    (33) exp -> . exp EQUALS_OP exp
    (34) exp -> . exp OR_OP exp
    (35) exp -> . exp AND_OP exp
    (36) exp -> . exp MUL_ASSIGN exp
    (37) exp -> . exp DIV_ASSIGN exp
    (38) exp -> . exp MOD_ASSIGN exp
    (39) exp -> . exp ADD_ASSIGN exp
    (40) exp -> . exp SUB_ASSIGN exp
    (41) exp -> . exp LEFT_ASSIGN exp
    (42) exp -> . exp RIGHT_ASSIGN exp
    (43) exp -> . exp AND_ASSIGN exp
    (44) exp -> . exp XOR_ASSIGN exp
    (45) exp -> . exp OR_ASSIGN exp
    (46) exp -> . exp EQUALS exp
    (47) exp -> . unary_expression
    (48) exp -> . constant
    (49) exp -> . VARIABLE
    (50) unary_expression -> . VARIABLE unary_operator
    (51) unary_expression -> . unary_operator VARIABLE
    (18) constant -> . HEX_INT
    (19) constant -> . DOT_REAL
    (20) constant -> . EXP_REAL
    (21) constant -> . DEC_INT
    (22) constant -> . CHARACTER
    (52) unary_operator -> . INCREMENT
    (53) unary_operator -> . DECREMENT

    VARIABLE        shift and go to state 19
    HEX_INT         shift and go to state 24
    DOT_REAL        shift and go to state 14
    EXP_REAL        shift and go to state 11
    DEC_INT         shift and go to state 12
    CHARACTER       shift and go to state 5
    INCREMENT       shift and go to state 10
    DECREMENT       shift and go to state 21

    constant                       shift and go to state 8
    unary_expression               shift and go to state 20
    exp                            shift and go to state 83
    unary_operator                 shift and go to state 16

state 50

    (39) exp -> exp ADD_ASSIGN . exp
    (23) exp -> . exp ADD exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULT exp
    (26) exp -> . exp DIV exp
    (27) exp -> . exp MOD exp
    (28) exp -> . exp L_OP exp
    (29) exp -> . exp G_OP exp
    (30) exp -> . exp LE_OP exp
    (31) exp -> . exp GE_OP exp
    (32) exp -> . exp NOTEQUALS exp
    (33) exp -> . exp EQUALS_OP exp
    (34) exp -> . exp OR_OP exp
    (35) exp -> . exp AND_OP exp
    (36) exp -> . exp MUL_ASSIGN exp
    (37) exp -> . exp DIV_ASSIGN exp
    (38) exp -> . exp MOD_ASSIGN exp
    (39) exp -> . exp ADD_ASSIGN exp
    (40) exp -> . exp SUB_ASSIGN exp
    (41) exp -> . exp LEFT_ASSIGN exp
    (42) exp -> . exp RIGHT_ASSIGN exp
    (43) exp -> . exp AND_ASSIGN exp
    (44) exp -> . exp XOR_ASSIGN exp
    (45) exp -> . exp OR_ASSIGN exp
    (46) exp -> . exp EQUALS exp
    (47) exp -> . unary_expression
    (48) exp -> . constant
    (49) exp -> . VARIABLE
    (50) unary_expression -> . VARIABLE unary_operator
    (51) unary_expression -> . unary_operator VARIABLE
    (18) constant -> . HEX_INT
    (19) constant -> . DOT_REAL
    (20) constant -> . EXP_REAL
    (21) constant -> . DEC_INT
    (22) constant -> . CHARACTER
    (52) unary_operator -> . INCREMENT
    (53) unary_operator -> . DECREMENT

    VARIABLE        shift and go to state 19
    HEX_INT         shift and go to state 24
    DOT_REAL        shift and go to state 14
    EXP_REAL        shift and go to state 11
    DEC_INT         shift and go to state 12
    CHARACTER       shift and go to state 5
    INCREMENT       shift and go to state 10
    DECREMENT       shift and go to state 21

    constant                       shift and go to state 8
    unary_expression               shift and go to state 20
    exp                            shift and go to state 84
    unary_operator                 shift and go to state 16

state 51

    (46) exp -> exp EQUALS . exp
    (23) exp -> . exp ADD exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULT exp
    (26) exp -> . exp DIV exp
    (27) exp -> . exp MOD exp
    (28) exp -> . exp L_OP exp
    (29) exp -> . exp G_OP exp
    (30) exp -> . exp LE_OP exp
    (31) exp -> . exp GE_OP exp
    (32) exp -> . exp NOTEQUALS exp
    (33) exp -> . exp EQUALS_OP exp
    (34) exp -> . exp OR_OP exp
    (35) exp -> . exp AND_OP exp
    (36) exp -> . exp MUL_ASSIGN exp
    (37) exp -> . exp DIV_ASSIGN exp
    (38) exp -> . exp MOD_ASSIGN exp
    (39) exp -> . exp ADD_ASSIGN exp
    (40) exp -> . exp SUB_ASSIGN exp
    (41) exp -> . exp LEFT_ASSIGN exp
    (42) exp -> . exp RIGHT_ASSIGN exp
    (43) exp -> . exp AND_ASSIGN exp
    (44) exp -> . exp XOR_ASSIGN exp
    (45) exp -> . exp OR_ASSIGN exp
    (46) exp -> . exp EQUALS exp
    (47) exp -> . unary_expression
    (48) exp -> . constant
    (49) exp -> . VARIABLE
    (50) unary_expression -> . VARIABLE unary_operator
    (51) unary_expression -> . unary_operator VARIABLE
    (18) constant -> . HEX_INT
    (19) constant -> . DOT_REAL
    (20) constant -> . EXP_REAL
    (21) constant -> . DEC_INT
    (22) constant -> . CHARACTER
    (52) unary_operator -> . INCREMENT
    (53) unary_operator -> . DECREMENT

    VARIABLE        shift and go to state 19
    HEX_INT         shift and go to state 24
    DOT_REAL        shift and go to state 14
    EXP_REAL        shift and go to state 11
    DEC_INT         shift and go to state 12
    CHARACTER       shift and go to state 5
    INCREMENT       shift and go to state 10
    DECREMENT       shift and go to state 21

    constant                       shift and go to state 8
    unary_expression               shift and go to state 20
    exp                            shift and go to state 85
    unary_operator                 shift and go to state 16

state 52

    (35) exp -> exp AND_OP . exp
    (23) exp -> . exp ADD exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULT exp
    (26) exp -> . exp DIV exp
    (27) exp -> . exp MOD exp
    (28) exp -> . exp L_OP exp
    (29) exp -> . exp G_OP exp
    (30) exp -> . exp LE_OP exp
    (31) exp -> . exp GE_OP exp
    (32) exp -> . exp NOTEQUALS exp
    (33) exp -> . exp EQUALS_OP exp
    (34) exp -> . exp OR_OP exp
    (35) exp -> . exp AND_OP exp
    (36) exp -> . exp MUL_ASSIGN exp
    (37) exp -> . exp DIV_ASSIGN exp
    (38) exp -> . exp MOD_ASSIGN exp
    (39) exp -> . exp ADD_ASSIGN exp
    (40) exp -> . exp SUB_ASSIGN exp
    (41) exp -> . exp LEFT_ASSIGN exp
    (42) exp -> . exp RIGHT_ASSIGN exp
    (43) exp -> . exp AND_ASSIGN exp
    (44) exp -> . exp XOR_ASSIGN exp
    (45) exp -> . exp OR_ASSIGN exp
    (46) exp -> . exp EQUALS exp
    (47) exp -> . unary_expression
    (48) exp -> . constant
    (49) exp -> . VARIABLE
    (50) unary_expression -> . VARIABLE unary_operator
    (51) unary_expression -> . unary_operator VARIABLE
    (18) constant -> . HEX_INT
    (19) constant -> . DOT_REAL
    (20) constant -> . EXP_REAL
    (21) constant -> . DEC_INT
    (22) constant -> . CHARACTER
    (52) unary_operator -> . INCREMENT
    (53) unary_operator -> . DECREMENT

    VARIABLE        shift and go to state 19
    HEX_INT         shift and go to state 24
    DOT_REAL        shift and go to state 14
    EXP_REAL        shift and go to state 11
    DEC_INT         shift and go to state 12
    CHARACTER       shift and go to state 5
    INCREMENT       shift and go to state 10
    DECREMENT       shift and go to state 21

    constant                       shift and go to state 8
    unary_expression               shift and go to state 20
    exp                            shift and go to state 86
    unary_operator                 shift and go to state 16

state 53

    (23) exp -> exp ADD . exp
    (23) exp -> . exp ADD exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULT exp
    (26) exp -> . exp DIV exp
    (27) exp -> . exp MOD exp
    (28) exp -> . exp L_OP exp
    (29) exp -> . exp G_OP exp
    (30) exp -> . exp LE_OP exp
    (31) exp -> . exp GE_OP exp
    (32) exp -> . exp NOTEQUALS exp
    (33) exp -> . exp EQUALS_OP exp
    (34) exp -> . exp OR_OP exp
    (35) exp -> . exp AND_OP exp
    (36) exp -> . exp MUL_ASSIGN exp
    (37) exp -> . exp DIV_ASSIGN exp
    (38) exp -> . exp MOD_ASSIGN exp
    (39) exp -> . exp ADD_ASSIGN exp
    (40) exp -> . exp SUB_ASSIGN exp
    (41) exp -> . exp LEFT_ASSIGN exp
    (42) exp -> . exp RIGHT_ASSIGN exp
    (43) exp -> . exp AND_ASSIGN exp
    (44) exp -> . exp XOR_ASSIGN exp
    (45) exp -> . exp OR_ASSIGN exp
    (46) exp -> . exp EQUALS exp
    (47) exp -> . unary_expression
    (48) exp -> . constant
    (49) exp -> . VARIABLE
    (50) unary_expression -> . VARIABLE unary_operator
    (51) unary_expression -> . unary_operator VARIABLE
    (18) constant -> . HEX_INT
    (19) constant -> . DOT_REAL
    (20) constant -> . EXP_REAL
    (21) constant -> . DEC_INT
    (22) constant -> . CHARACTER
    (52) unary_operator -> . INCREMENT
    (53) unary_operator -> . DECREMENT

    VARIABLE        shift and go to state 19
    HEX_INT         shift and go to state 24
    DOT_REAL        shift and go to state 14
    EXP_REAL        shift and go to state 11
    DEC_INT         shift and go to state 12
    CHARACTER       shift and go to state 5
    INCREMENT       shift and go to state 10
    DECREMENT       shift and go to state 21

    constant                       shift and go to state 8
    unary_expression               shift and go to state 20
    exp                            shift and go to state 87
    unary_operator                 shift and go to state 16

state 54

    (31) exp -> exp GE_OP . exp
    (23) exp -> . exp ADD exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULT exp
    (26) exp -> . exp DIV exp
    (27) exp -> . exp MOD exp
    (28) exp -> . exp L_OP exp
    (29) exp -> . exp G_OP exp
    (30) exp -> . exp LE_OP exp
    (31) exp -> . exp GE_OP exp
    (32) exp -> . exp NOTEQUALS exp
    (33) exp -> . exp EQUALS_OP exp
    (34) exp -> . exp OR_OP exp
    (35) exp -> . exp AND_OP exp
    (36) exp -> . exp MUL_ASSIGN exp
    (37) exp -> . exp DIV_ASSIGN exp
    (38) exp -> . exp MOD_ASSIGN exp
    (39) exp -> . exp ADD_ASSIGN exp
    (40) exp -> . exp SUB_ASSIGN exp
    (41) exp -> . exp LEFT_ASSIGN exp
    (42) exp -> . exp RIGHT_ASSIGN exp
    (43) exp -> . exp AND_ASSIGN exp
    (44) exp -> . exp XOR_ASSIGN exp
    (45) exp -> . exp OR_ASSIGN exp
    (46) exp -> . exp EQUALS exp
    (47) exp -> . unary_expression
    (48) exp -> . constant
    (49) exp -> . VARIABLE
    (50) unary_expression -> . VARIABLE unary_operator
    (51) unary_expression -> . unary_operator VARIABLE
    (18) constant -> . HEX_INT
    (19) constant -> . DOT_REAL
    (20) constant -> . EXP_REAL
    (21) constant -> . DEC_INT
    (22) constant -> . CHARACTER
    (52) unary_operator -> . INCREMENT
    (53) unary_operator -> . DECREMENT

    VARIABLE        shift and go to state 19
    HEX_INT         shift and go to state 24
    DOT_REAL        shift and go to state 14
    EXP_REAL        shift and go to state 11
    DEC_INT         shift and go to state 12
    CHARACTER       shift and go to state 5
    INCREMENT       shift and go to state 10
    DECREMENT       shift and go to state 21

    constant                       shift and go to state 8
    unary_expression               shift and go to state 20
    exp                            shift and go to state 88
    unary_operator                 shift and go to state 16

state 55

    (40) exp -> exp SUB_ASSIGN . exp
    (23) exp -> . exp ADD exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULT exp
    (26) exp -> . exp DIV exp
    (27) exp -> . exp MOD exp
    (28) exp -> . exp L_OP exp
    (29) exp -> . exp G_OP exp
    (30) exp -> . exp LE_OP exp
    (31) exp -> . exp GE_OP exp
    (32) exp -> . exp NOTEQUALS exp
    (33) exp -> . exp EQUALS_OP exp
    (34) exp -> . exp OR_OP exp
    (35) exp -> . exp AND_OP exp
    (36) exp -> . exp MUL_ASSIGN exp
    (37) exp -> . exp DIV_ASSIGN exp
    (38) exp -> . exp MOD_ASSIGN exp
    (39) exp -> . exp ADD_ASSIGN exp
    (40) exp -> . exp SUB_ASSIGN exp
    (41) exp -> . exp LEFT_ASSIGN exp
    (42) exp -> . exp RIGHT_ASSIGN exp
    (43) exp -> . exp AND_ASSIGN exp
    (44) exp -> . exp XOR_ASSIGN exp
    (45) exp -> . exp OR_ASSIGN exp
    (46) exp -> . exp EQUALS exp
    (47) exp -> . unary_expression
    (48) exp -> . constant
    (49) exp -> . VARIABLE
    (50) unary_expression -> . VARIABLE unary_operator
    (51) unary_expression -> . unary_operator VARIABLE
    (18) constant -> . HEX_INT
    (19) constant -> . DOT_REAL
    (20) constant -> . EXP_REAL
    (21) constant -> . DEC_INT
    (22) constant -> . CHARACTER
    (52) unary_operator -> . INCREMENT
    (53) unary_operator -> . DECREMENT

    VARIABLE        shift and go to state 19
    HEX_INT         shift and go to state 24
    DOT_REAL        shift and go to state 14
    EXP_REAL        shift and go to state 11
    DEC_INT         shift and go to state 12
    CHARACTER       shift and go to state 5
    INCREMENT       shift and go to state 10
    DECREMENT       shift and go to state 21

    constant                       shift and go to state 8
    unary_expression               shift and go to state 20
    exp                            shift and go to state 89
    unary_operator                 shift and go to state 16

state 56

    (38) exp -> exp MOD_ASSIGN . exp
    (23) exp -> . exp ADD exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULT exp
    (26) exp -> . exp DIV exp
    (27) exp -> . exp MOD exp
    (28) exp -> . exp L_OP exp
    (29) exp -> . exp G_OP exp
    (30) exp -> . exp LE_OP exp
    (31) exp -> . exp GE_OP exp
    (32) exp -> . exp NOTEQUALS exp
    (33) exp -> . exp EQUALS_OP exp
    (34) exp -> . exp OR_OP exp
    (35) exp -> . exp AND_OP exp
    (36) exp -> . exp MUL_ASSIGN exp
    (37) exp -> . exp DIV_ASSIGN exp
    (38) exp -> . exp MOD_ASSIGN exp
    (39) exp -> . exp ADD_ASSIGN exp
    (40) exp -> . exp SUB_ASSIGN exp
    (41) exp -> . exp LEFT_ASSIGN exp
    (42) exp -> . exp RIGHT_ASSIGN exp
    (43) exp -> . exp AND_ASSIGN exp
    (44) exp -> . exp XOR_ASSIGN exp
    (45) exp -> . exp OR_ASSIGN exp
    (46) exp -> . exp EQUALS exp
    (47) exp -> . unary_expression
    (48) exp -> . constant
    (49) exp -> . VARIABLE
    (50) unary_expression -> . VARIABLE unary_operator
    (51) unary_expression -> . unary_operator VARIABLE
    (18) constant -> . HEX_INT
    (19) constant -> . DOT_REAL
    (20) constant -> . EXP_REAL
    (21) constant -> . DEC_INT
    (22) constant -> . CHARACTER
    (52) unary_operator -> . INCREMENT
    (53) unary_operator -> . DECREMENT

    VARIABLE        shift and go to state 19
    HEX_INT         shift and go to state 24
    DOT_REAL        shift and go to state 14
    EXP_REAL        shift and go to state 11
    DEC_INT         shift and go to state 12
    CHARACTER       shift and go to state 5
    INCREMENT       shift and go to state 10
    DECREMENT       shift and go to state 21

    constant                       shift and go to state 8
    unary_expression               shift and go to state 20
    exp                            shift and go to state 90
    unary_operator                 shift and go to state 16

state 57

    (44) exp -> exp XOR_ASSIGN . exp
    (23) exp -> . exp ADD exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULT exp
    (26) exp -> . exp DIV exp
    (27) exp -> . exp MOD exp
    (28) exp -> . exp L_OP exp
    (29) exp -> . exp G_OP exp
    (30) exp -> . exp LE_OP exp
    (31) exp -> . exp GE_OP exp
    (32) exp -> . exp NOTEQUALS exp
    (33) exp -> . exp EQUALS_OP exp
    (34) exp -> . exp OR_OP exp
    (35) exp -> . exp AND_OP exp
    (36) exp -> . exp MUL_ASSIGN exp
    (37) exp -> . exp DIV_ASSIGN exp
    (38) exp -> . exp MOD_ASSIGN exp
    (39) exp -> . exp ADD_ASSIGN exp
    (40) exp -> . exp SUB_ASSIGN exp
    (41) exp -> . exp LEFT_ASSIGN exp
    (42) exp -> . exp RIGHT_ASSIGN exp
    (43) exp -> . exp AND_ASSIGN exp
    (44) exp -> . exp XOR_ASSIGN exp
    (45) exp -> . exp OR_ASSIGN exp
    (46) exp -> . exp EQUALS exp
    (47) exp -> . unary_expression
    (48) exp -> . constant
    (49) exp -> . VARIABLE
    (50) unary_expression -> . VARIABLE unary_operator
    (51) unary_expression -> . unary_operator VARIABLE
    (18) constant -> . HEX_INT
    (19) constant -> . DOT_REAL
    (20) constant -> . EXP_REAL
    (21) constant -> . DEC_INT
    (22) constant -> . CHARACTER
    (52) unary_operator -> . INCREMENT
    (53) unary_operator -> . DECREMENT

    VARIABLE        shift and go to state 19
    HEX_INT         shift and go to state 24
    DOT_REAL        shift and go to state 14
    EXP_REAL        shift and go to state 11
    DEC_INT         shift and go to state 12
    CHARACTER       shift and go to state 5
    INCREMENT       shift and go to state 10
    DECREMENT       shift and go to state 21

    constant                       shift and go to state 8
    unary_expression               shift and go to state 20
    exp                            shift and go to state 91
    unary_operator                 shift and go to state 16

state 58

    (45) exp -> exp OR_ASSIGN . exp
    (23) exp -> . exp ADD exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULT exp
    (26) exp -> . exp DIV exp
    (27) exp -> . exp MOD exp
    (28) exp -> . exp L_OP exp
    (29) exp -> . exp G_OP exp
    (30) exp -> . exp LE_OP exp
    (31) exp -> . exp GE_OP exp
    (32) exp -> . exp NOTEQUALS exp
    (33) exp -> . exp EQUALS_OP exp
    (34) exp -> . exp OR_OP exp
    (35) exp -> . exp AND_OP exp
    (36) exp -> . exp MUL_ASSIGN exp
    (37) exp -> . exp DIV_ASSIGN exp
    (38) exp -> . exp MOD_ASSIGN exp
    (39) exp -> . exp ADD_ASSIGN exp
    (40) exp -> . exp SUB_ASSIGN exp
    (41) exp -> . exp LEFT_ASSIGN exp
    (42) exp -> . exp RIGHT_ASSIGN exp
    (43) exp -> . exp AND_ASSIGN exp
    (44) exp -> . exp XOR_ASSIGN exp
    (45) exp -> . exp OR_ASSIGN exp
    (46) exp -> . exp EQUALS exp
    (47) exp -> . unary_expression
    (48) exp -> . constant
    (49) exp -> . VARIABLE
    (50) unary_expression -> . VARIABLE unary_operator
    (51) unary_expression -> . unary_operator VARIABLE
    (18) constant -> . HEX_INT
    (19) constant -> . DOT_REAL
    (20) constant -> . EXP_REAL
    (21) constant -> . DEC_INT
    (22) constant -> . CHARACTER
    (52) unary_operator -> . INCREMENT
    (53) unary_operator -> . DECREMENT

    VARIABLE        shift and go to state 19
    HEX_INT         shift and go to state 24
    DOT_REAL        shift and go to state 14
    EXP_REAL        shift and go to state 11
    DEC_INT         shift and go to state 12
    CHARACTER       shift and go to state 5
    INCREMENT       shift and go to state 10
    DECREMENT       shift and go to state 21

    constant                       shift and go to state 8
    unary_expression               shift and go to state 20
    exp                            shift and go to state 92
    unary_operator                 shift and go to state 16

state 59

    (28) exp -> exp L_OP . exp
    (23) exp -> . exp ADD exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULT exp
    (26) exp -> . exp DIV exp
    (27) exp -> . exp MOD exp
    (28) exp -> . exp L_OP exp
    (29) exp -> . exp G_OP exp
    (30) exp -> . exp LE_OP exp
    (31) exp -> . exp GE_OP exp
    (32) exp -> . exp NOTEQUALS exp
    (33) exp -> . exp EQUALS_OP exp
    (34) exp -> . exp OR_OP exp
    (35) exp -> . exp AND_OP exp
    (36) exp -> . exp MUL_ASSIGN exp
    (37) exp -> . exp DIV_ASSIGN exp
    (38) exp -> . exp MOD_ASSIGN exp
    (39) exp -> . exp ADD_ASSIGN exp
    (40) exp -> . exp SUB_ASSIGN exp
    (41) exp -> . exp LEFT_ASSIGN exp
    (42) exp -> . exp RIGHT_ASSIGN exp
    (43) exp -> . exp AND_ASSIGN exp
    (44) exp -> . exp XOR_ASSIGN exp
    (45) exp -> . exp OR_ASSIGN exp
    (46) exp -> . exp EQUALS exp
    (47) exp -> . unary_expression
    (48) exp -> . constant
    (49) exp -> . VARIABLE
    (50) unary_expression -> . VARIABLE unary_operator
    (51) unary_expression -> . unary_operator VARIABLE
    (18) constant -> . HEX_INT
    (19) constant -> . DOT_REAL
    (20) constant -> . EXP_REAL
    (21) constant -> . DEC_INT
    (22) constant -> . CHARACTER
    (52) unary_operator -> . INCREMENT
    (53) unary_operator -> . DECREMENT

    VARIABLE        shift and go to state 19
    HEX_INT         shift and go to state 24
    DOT_REAL        shift and go to state 14
    EXP_REAL        shift and go to state 11
    DEC_INT         shift and go to state 12
    CHARACTER       shift and go to state 5
    INCREMENT       shift and go to state 10
    DECREMENT       shift and go to state 21

    constant                       shift and go to state 8
    unary_expression               shift and go to state 20
    exp                            shift and go to state 93
    unary_operator                 shift and go to state 16

state 60

    (36) exp -> exp MUL_ASSIGN . exp
    (23) exp -> . exp ADD exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULT exp
    (26) exp -> . exp DIV exp
    (27) exp -> . exp MOD exp
    (28) exp -> . exp L_OP exp
    (29) exp -> . exp G_OP exp
    (30) exp -> . exp LE_OP exp
    (31) exp -> . exp GE_OP exp
    (32) exp -> . exp NOTEQUALS exp
    (33) exp -> . exp EQUALS_OP exp
    (34) exp -> . exp OR_OP exp
    (35) exp -> . exp AND_OP exp
    (36) exp -> . exp MUL_ASSIGN exp
    (37) exp -> . exp DIV_ASSIGN exp
    (38) exp -> . exp MOD_ASSIGN exp
    (39) exp -> . exp ADD_ASSIGN exp
    (40) exp -> . exp SUB_ASSIGN exp
    (41) exp -> . exp LEFT_ASSIGN exp
    (42) exp -> . exp RIGHT_ASSIGN exp
    (43) exp -> . exp AND_ASSIGN exp
    (44) exp -> . exp XOR_ASSIGN exp
    (45) exp -> . exp OR_ASSIGN exp
    (46) exp -> . exp EQUALS exp
    (47) exp -> . unary_expression
    (48) exp -> . constant
    (49) exp -> . VARIABLE
    (50) unary_expression -> . VARIABLE unary_operator
    (51) unary_expression -> . unary_operator VARIABLE
    (18) constant -> . HEX_INT
    (19) constant -> . DOT_REAL
    (20) constant -> . EXP_REAL
    (21) constant -> . DEC_INT
    (22) constant -> . CHARACTER
    (52) unary_operator -> . INCREMENT
    (53) unary_operator -> . DECREMENT

    VARIABLE        shift and go to state 19
    HEX_INT         shift and go to state 24
    DOT_REAL        shift and go to state 14
    EXP_REAL        shift and go to state 11
    DEC_INT         shift and go to state 12
    CHARACTER       shift and go to state 5
    INCREMENT       shift and go to state 10
    DECREMENT       shift and go to state 21

    constant                       shift and go to state 8
    unary_expression               shift and go to state 20
    exp                            shift and go to state 94
    unary_operator                 shift and go to state 16

state 61

    (41) exp -> exp LEFT_ASSIGN . exp
    (23) exp -> . exp ADD exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULT exp
    (26) exp -> . exp DIV exp
    (27) exp -> . exp MOD exp
    (28) exp -> . exp L_OP exp
    (29) exp -> . exp G_OP exp
    (30) exp -> . exp LE_OP exp
    (31) exp -> . exp GE_OP exp
    (32) exp -> . exp NOTEQUALS exp
    (33) exp -> . exp EQUALS_OP exp
    (34) exp -> . exp OR_OP exp
    (35) exp -> . exp AND_OP exp
    (36) exp -> . exp MUL_ASSIGN exp
    (37) exp -> . exp DIV_ASSIGN exp
    (38) exp -> . exp MOD_ASSIGN exp
    (39) exp -> . exp ADD_ASSIGN exp
    (40) exp -> . exp SUB_ASSIGN exp
    (41) exp -> . exp LEFT_ASSIGN exp
    (42) exp -> . exp RIGHT_ASSIGN exp
    (43) exp -> . exp AND_ASSIGN exp
    (44) exp -> . exp XOR_ASSIGN exp
    (45) exp -> . exp OR_ASSIGN exp
    (46) exp -> . exp EQUALS exp
    (47) exp -> . unary_expression
    (48) exp -> . constant
    (49) exp -> . VARIABLE
    (50) unary_expression -> . VARIABLE unary_operator
    (51) unary_expression -> . unary_operator VARIABLE
    (18) constant -> . HEX_INT
    (19) constant -> . DOT_REAL
    (20) constant -> . EXP_REAL
    (21) constant -> . DEC_INT
    (22) constant -> . CHARACTER
    (52) unary_operator -> . INCREMENT
    (53) unary_operator -> . DECREMENT

    VARIABLE        shift and go to state 19
    HEX_INT         shift and go to state 24
    DOT_REAL        shift and go to state 14
    EXP_REAL        shift and go to state 11
    DEC_INT         shift and go to state 12
    CHARACTER       shift and go to state 5
    INCREMENT       shift and go to state 10
    DECREMENT       shift and go to state 21

    constant                       shift and go to state 8
    unary_expression               shift and go to state 20
    exp                            shift and go to state 95
    unary_operator                 shift and go to state 16

state 62

    (27) exp -> exp MOD . exp
    (23) exp -> . exp ADD exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULT exp
    (26) exp -> . exp DIV exp
    (27) exp -> . exp MOD exp
    (28) exp -> . exp L_OP exp
    (29) exp -> . exp G_OP exp
    (30) exp -> . exp LE_OP exp
    (31) exp -> . exp GE_OP exp
    (32) exp -> . exp NOTEQUALS exp
    (33) exp -> . exp EQUALS_OP exp
    (34) exp -> . exp OR_OP exp
    (35) exp -> . exp AND_OP exp
    (36) exp -> . exp MUL_ASSIGN exp
    (37) exp -> . exp DIV_ASSIGN exp
    (38) exp -> . exp MOD_ASSIGN exp
    (39) exp -> . exp ADD_ASSIGN exp
    (40) exp -> . exp SUB_ASSIGN exp
    (41) exp -> . exp LEFT_ASSIGN exp
    (42) exp -> . exp RIGHT_ASSIGN exp
    (43) exp -> . exp AND_ASSIGN exp
    (44) exp -> . exp XOR_ASSIGN exp
    (45) exp -> . exp OR_ASSIGN exp
    (46) exp -> . exp EQUALS exp
    (47) exp -> . unary_expression
    (48) exp -> . constant
    (49) exp -> . VARIABLE
    (50) unary_expression -> . VARIABLE unary_operator
    (51) unary_expression -> . unary_operator VARIABLE
    (18) constant -> . HEX_INT
    (19) constant -> . DOT_REAL
    (20) constant -> . EXP_REAL
    (21) constant -> . DEC_INT
    (22) constant -> . CHARACTER
    (52) unary_operator -> . INCREMENT
    (53) unary_operator -> . DECREMENT

    VARIABLE        shift and go to state 19
    HEX_INT         shift and go to state 24
    DOT_REAL        shift and go to state 14
    EXP_REAL        shift and go to state 11
    DEC_INT         shift and go to state 12
    CHARACTER       shift and go to state 5
    INCREMENT       shift and go to state 10
    DECREMENT       shift and go to state 21

    constant                       shift and go to state 8
    unary_expression               shift and go to state 20
    exp                            shift and go to state 96
    unary_operator                 shift and go to state 16

state 63

    (64) iterative_statement -> DO SEMI_COLON WHILE . LPAREN exp RPAREN SEMI_COLON

    LPAREN          shift and go to state 97


state 64

    (62) iterative_statement -> DO statement WHILE . LPAREN exp RPAREN SEMI_COLON

    LPAREN          shift and go to state 98


state 65

    (63) iterative_statement -> DO LBRACE statements . RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (1) statements -> statements . statement
    (3) statement -> . declaration
    (4) statement -> . exp SEMI_COLON
    (5) statement -> . iterative_statement
    (6) declaration -> . type enum_list SEMI_COLON
    (23) exp -> . exp ADD exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULT exp
    (26) exp -> . exp DIV exp
    (27) exp -> . exp MOD exp
    (28) exp -> . exp L_OP exp
    (29) exp -> . exp G_OP exp
    (30) exp -> . exp LE_OP exp
    (31) exp -> . exp GE_OP exp
    (32) exp -> . exp NOTEQUALS exp
    (33) exp -> . exp EQUALS_OP exp
    (34) exp -> . exp OR_OP exp
    (35) exp -> . exp AND_OP exp
    (36) exp -> . exp MUL_ASSIGN exp
    (37) exp -> . exp DIV_ASSIGN exp
    (38) exp -> . exp MOD_ASSIGN exp
    (39) exp -> . exp ADD_ASSIGN exp
    (40) exp -> . exp SUB_ASSIGN exp
    (41) exp -> . exp LEFT_ASSIGN exp
    (42) exp -> . exp RIGHT_ASSIGN exp
    (43) exp -> . exp AND_ASSIGN exp
    (44) exp -> . exp XOR_ASSIGN exp
    (45) exp -> . exp OR_ASSIGN exp
    (46) exp -> . exp EQUALS exp
    (47) exp -> . unary_expression
    (48) exp -> . constant
    (49) exp -> . VARIABLE
    (54) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (55) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE
    (56) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (57) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE
    (58) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (59) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (60) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE statements RBRACE
    (61) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (62) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (63) iterative_statement -> . DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (64) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (65) iterative_statement -> . DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (11) type -> . INT
    (12) type -> . FLOAT
    (13) type -> . CHAR
    (14) type -> . DOUBLE
    (15) type -> . VOID
    (16) type -> . SHORT
    (17) type -> . LONG
    (50) unary_expression -> . VARIABLE unary_operator
    (51) unary_expression -> . unary_operator VARIABLE
    (18) constant -> . HEX_INT
    (19) constant -> . DOT_REAL
    (20) constant -> . EXP_REAL
    (21) constant -> . DEC_INT
    (22) constant -> . CHARACTER
    (52) unary_operator -> . INCREMENT
    (53) unary_operator -> . DECREMENT

    RBRACE          shift and go to state 99
    VARIABLE        shift and go to state 19
    FOR             shift and go to state 17
    WHILE           shift and go to state 7
    DO              shift and go to state 3
    INT             shift and go to state 22
    FLOAT           shift and go to state 25
    CHAR            shift and go to state 6
    DOUBLE          shift and go to state 23
    VOID            shift and go to state 4
    SHORT           shift and go to state 1
    LONG            shift and go to state 27
    HEX_INT         shift and go to state 24
    DOT_REAL        shift and go to state 14
    EXP_REAL        shift and go to state 11
    DEC_INT         shift and go to state 12
    CHARACTER       shift and go to state 5
    INCREMENT       shift and go to state 10
    DECREMENT       shift and go to state 21

    exp                            shift and go to state 26
    unary_expression               shift and go to state 20
    type                           shift and go to state 15
    statement                      shift and go to state 28
    declaration                    shift and go to state 18
    constant                       shift and go to state 8
    iterative_statement            shift and go to state 9
    unary_operator                 shift and go to state 16

state 66

    (65) iterative_statement -> DO LBRACE RBRACE . WHILE LPAREN exp RPAREN SEMI_COLON

    WHILE           shift and go to state 100


state 67

    (58) iterative_statement -> WHILE LPAREN exp . RPAREN statement
    (59) iterative_statement -> WHILE LPAREN exp . RPAREN SEMI_COLON
    (60) iterative_statement -> WHILE LPAREN exp . RPAREN LBRACE statements RBRACE
    (61) iterative_statement -> WHILE LPAREN exp . RPAREN LBRACE RBRACE
    (23) exp -> exp . ADD exp
    (24) exp -> exp . MINUS exp
    (25) exp -> exp . MULT exp
    (26) exp -> exp . DIV exp
    (27) exp -> exp . MOD exp
    (28) exp -> exp . L_OP exp
    (29) exp -> exp . G_OP exp
    (30) exp -> exp . LE_OP exp
    (31) exp -> exp . GE_OP exp
    (32) exp -> exp . NOTEQUALS exp
    (33) exp -> exp . EQUALS_OP exp
    (34) exp -> exp . OR_OP exp
    (35) exp -> exp . AND_OP exp
    (36) exp -> exp . MUL_ASSIGN exp
    (37) exp -> exp . DIV_ASSIGN exp
    (38) exp -> exp . MOD_ASSIGN exp
    (39) exp -> exp . ADD_ASSIGN exp
    (40) exp -> exp . SUB_ASSIGN exp
    (41) exp -> exp . LEFT_ASSIGN exp
    (42) exp -> exp . RIGHT_ASSIGN exp
    (43) exp -> exp . AND_ASSIGN exp
    (44) exp -> exp . XOR_ASSIGN exp
    (45) exp -> exp . OR_ASSIGN exp
    (46) exp -> exp . EQUALS exp

    RPAREN          shift and go to state 101
    ADD             shift and go to state 53
    MINUS           shift and go to state 43
    MULT            shift and go to state 44
    DIV             shift and go to state 42
    MOD             shift and go to state 62
    L_OP            shift and go to state 59
    G_OP            shift and go to state 47
    LE_OP           shift and go to state 45
    GE_OP           shift and go to state 54
    NOTEQUALS       shift and go to state 38
    EQUALS_OP       shift and go to state 39
    OR_OP           shift and go to state 48
    AND_OP          shift and go to state 52
    MUL_ASSIGN      shift and go to state 60
    DIV_ASSIGN      shift and go to state 40
    MOD_ASSIGN      shift and go to state 56
    ADD_ASSIGN      shift and go to state 50
    SUB_ASSIGN      shift and go to state 55
    LEFT_ASSIGN     shift and go to state 61
    RIGHT_ASSIGN    shift and go to state 46
    AND_ASSIGN      shift and go to state 49
    XOR_ASSIGN      shift and go to state 57
    OR_ASSIGN       shift and go to state 58
    EQUALS          shift and go to state 51


state 68

    (6) declaration -> type enum_list SEMI_COLON .

    VARIABLE        reduce using rule 6 (declaration -> type enum_list SEMI_COLON .)
    FOR             reduce using rule 6 (declaration -> type enum_list SEMI_COLON .)
    WHILE           reduce using rule 6 (declaration -> type enum_list SEMI_COLON .)
    DO              reduce using rule 6 (declaration -> type enum_list SEMI_COLON .)
    INT             reduce using rule 6 (declaration -> type enum_list SEMI_COLON .)
    FLOAT           reduce using rule 6 (declaration -> type enum_list SEMI_COLON .)
    CHAR            reduce using rule 6 (declaration -> type enum_list SEMI_COLON .)
    DOUBLE          reduce using rule 6 (declaration -> type enum_list SEMI_COLON .)
    VOID            reduce using rule 6 (declaration -> type enum_list SEMI_COLON .)
    SHORT           reduce using rule 6 (declaration -> type enum_list SEMI_COLON .)
    LONG            reduce using rule 6 (declaration -> type enum_list SEMI_COLON .)
    HEX_INT         reduce using rule 6 (declaration -> type enum_list SEMI_COLON .)
    DOT_REAL        reduce using rule 6 (declaration -> type enum_list SEMI_COLON .)
    EXP_REAL        reduce using rule 6 (declaration -> type enum_list SEMI_COLON .)
    DEC_INT         reduce using rule 6 (declaration -> type enum_list SEMI_COLON .)
    CHARACTER       reduce using rule 6 (declaration -> type enum_list SEMI_COLON .)
    INCREMENT       reduce using rule 6 (declaration -> type enum_list SEMI_COLON .)
    DECREMENT       reduce using rule 6 (declaration -> type enum_list SEMI_COLON .)
    $end            reduce using rule 6 (declaration -> type enum_list SEMI_COLON .)
    RBRACE          reduce using rule 6 (declaration -> type enum_list SEMI_COLON .)


state 69

    (7) enum_list -> VARIABLE COMMA . enum_list
    (7) enum_list -> . VARIABLE COMMA enum_list
    (8) enum_list -> . VARIABLE EQUALS exp COMMA enum_list
    (9) enum_list -> . VARIABLE
    (10) enum_list -> . VARIABLE EQUALS exp

    VARIABLE        shift and go to state 34

    enum_list                      shift and go to state 102

state 70

    (8) enum_list -> VARIABLE EQUALS . exp COMMA enum_list
    (10) enum_list -> VARIABLE EQUALS . exp
    (23) exp -> . exp ADD exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULT exp
    (26) exp -> . exp DIV exp
    (27) exp -> . exp MOD exp
    (28) exp -> . exp L_OP exp
    (29) exp -> . exp G_OP exp
    (30) exp -> . exp LE_OP exp
    (31) exp -> . exp GE_OP exp
    (32) exp -> . exp NOTEQUALS exp
    (33) exp -> . exp EQUALS_OP exp
    (34) exp -> . exp OR_OP exp
    (35) exp -> . exp AND_OP exp
    (36) exp -> . exp MUL_ASSIGN exp
    (37) exp -> . exp DIV_ASSIGN exp
    (38) exp -> . exp MOD_ASSIGN exp
    (39) exp -> . exp ADD_ASSIGN exp
    (40) exp -> . exp SUB_ASSIGN exp
    (41) exp -> . exp LEFT_ASSIGN exp
    (42) exp -> . exp RIGHT_ASSIGN exp
    (43) exp -> . exp AND_ASSIGN exp
    (44) exp -> . exp XOR_ASSIGN exp
    (45) exp -> . exp OR_ASSIGN exp
    (46) exp -> . exp EQUALS exp
    (47) exp -> . unary_expression
    (48) exp -> . constant
    (49) exp -> . VARIABLE
    (50) unary_expression -> . VARIABLE unary_operator
    (51) unary_expression -> . unary_operator VARIABLE
    (18) constant -> . HEX_INT
    (19) constant -> . DOT_REAL
    (20) constant -> . EXP_REAL
    (21) constant -> . DEC_INT
    (22) constant -> . CHARACTER
    (52) unary_operator -> . INCREMENT
    (53) unary_operator -> . DECREMENT

    VARIABLE        shift and go to state 19
    HEX_INT         shift and go to state 24
    DOT_REAL        shift and go to state 14
    EXP_REAL        shift and go to state 11
    DEC_INT         shift and go to state 12
    CHARACTER       shift and go to state 5
    INCREMENT       shift and go to state 10
    DECREMENT       shift and go to state 21

    unary_operator                 shift and go to state 16
    constant                       shift and go to state 8
    unary_expression               shift and go to state 20
    exp                            shift and go to state 103

state 71

    (54) iterative_statement -> FOR LPAREN iterative_exp . SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (55) iterative_statement -> FOR LPAREN iterative_exp . SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE
    (56) iterative_statement -> FOR LPAREN iterative_exp . SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (57) iterative_statement -> FOR LPAREN iterative_exp . SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE

    SEMI_COLON      shift and go to state 104


state 72

    (66) iterative_exp -> exp . COMMA iterative_exp
    (67) iterative_exp -> exp .
    (23) exp -> exp . ADD exp
    (24) exp -> exp . MINUS exp
    (25) exp -> exp . MULT exp
    (26) exp -> exp . DIV exp
    (27) exp -> exp . MOD exp
    (28) exp -> exp . L_OP exp
    (29) exp -> exp . G_OP exp
    (30) exp -> exp . LE_OP exp
    (31) exp -> exp . GE_OP exp
    (32) exp -> exp . NOTEQUALS exp
    (33) exp -> exp . EQUALS_OP exp
    (34) exp -> exp . OR_OP exp
    (35) exp -> exp . AND_OP exp
    (36) exp -> exp . MUL_ASSIGN exp
    (37) exp -> exp . DIV_ASSIGN exp
    (38) exp -> exp . MOD_ASSIGN exp
    (39) exp -> exp . ADD_ASSIGN exp
    (40) exp -> exp . SUB_ASSIGN exp
    (41) exp -> exp . LEFT_ASSIGN exp
    (42) exp -> exp . RIGHT_ASSIGN exp
    (43) exp -> exp . AND_ASSIGN exp
    (44) exp -> exp . XOR_ASSIGN exp
    (45) exp -> exp . OR_ASSIGN exp
    (46) exp -> exp . EQUALS exp

    COMMA           shift and go to state 105
    RPAREN          reduce using rule 67 (iterative_exp -> exp .)
    SEMI_COLON      reduce using rule 67 (iterative_exp -> exp .)
    ADD             shift and go to state 53
    MINUS           shift and go to state 43
    MULT            shift and go to state 44
    DIV             shift and go to state 42
    MOD             shift and go to state 62
    L_OP            shift and go to state 59
    G_OP            shift and go to state 47
    LE_OP           shift and go to state 45
    GE_OP           shift and go to state 54
    NOTEQUALS       shift and go to state 38
    EQUALS_OP       shift and go to state 39
    OR_OP           shift and go to state 48
    AND_OP          shift and go to state 52
    MUL_ASSIGN      shift and go to state 60
    DIV_ASSIGN      shift and go to state 40
    MOD_ASSIGN      shift and go to state 56
    ADD_ASSIGN      shift and go to state 50
    SUB_ASSIGN      shift and go to state 55
    LEFT_ASSIGN     shift and go to state 61
    RIGHT_ASSIGN    shift and go to state 46
    AND_ASSIGN      shift and go to state 49
    XOR_ASSIGN      shift and go to state 57
    OR_ASSIGN       shift and go to state 58
    EQUALS          shift and go to state 51


state 73

    (32) exp -> exp NOTEQUALS exp .
    (23) exp -> exp . ADD exp
    (24) exp -> exp . MINUS exp
    (25) exp -> exp . MULT exp
    (26) exp -> exp . DIV exp
    (27) exp -> exp . MOD exp
    (28) exp -> exp . L_OP exp
    (29) exp -> exp . G_OP exp
    (30) exp -> exp . LE_OP exp
    (31) exp -> exp . GE_OP exp
    (32) exp -> exp . NOTEQUALS exp
    (33) exp -> exp . EQUALS_OP exp
    (34) exp -> exp . OR_OP exp
    (35) exp -> exp . AND_OP exp
    (36) exp -> exp . MUL_ASSIGN exp
    (37) exp -> exp . DIV_ASSIGN exp
    (38) exp -> exp . MOD_ASSIGN exp
    (39) exp -> exp . ADD_ASSIGN exp
    (40) exp -> exp . SUB_ASSIGN exp
    (41) exp -> exp . LEFT_ASSIGN exp
    (42) exp -> exp . RIGHT_ASSIGN exp
    (43) exp -> exp . AND_ASSIGN exp
    (44) exp -> exp . XOR_ASSIGN exp
    (45) exp -> exp . OR_ASSIGN exp
    (46) exp -> exp . EQUALS exp

    RPAREN          reduce using rule 32 (exp -> exp NOTEQUALS exp .)
    ADD             reduce using rule 32 (exp -> exp NOTEQUALS exp .)
    MINUS           reduce using rule 32 (exp -> exp NOTEQUALS exp .)
    MULT            reduce using rule 32 (exp -> exp NOTEQUALS exp .)
    DIV             reduce using rule 32 (exp -> exp NOTEQUALS exp .)
    MOD             reduce using rule 32 (exp -> exp NOTEQUALS exp .)
    L_OP            reduce using rule 32 (exp -> exp NOTEQUALS exp .)
    G_OP            reduce using rule 32 (exp -> exp NOTEQUALS exp .)
    LE_OP           reduce using rule 32 (exp -> exp NOTEQUALS exp .)
    GE_OP           reduce using rule 32 (exp -> exp NOTEQUALS exp .)
    NOTEQUALS       reduce using rule 32 (exp -> exp NOTEQUALS exp .)
    EQUALS_OP       reduce using rule 32 (exp -> exp NOTEQUALS exp .)
    SEMI_COLON      reduce using rule 32 (exp -> exp NOTEQUALS exp .)
    COMMA           reduce using rule 32 (exp -> exp NOTEQUALS exp .)
    OR_OP           shift and go to state 48
    AND_OP          shift and go to state 52
    MUL_ASSIGN      shift and go to state 60
    DIV_ASSIGN      shift and go to state 40
    MOD_ASSIGN      shift and go to state 56
    ADD_ASSIGN      shift and go to state 50
    SUB_ASSIGN      shift and go to state 55
    LEFT_ASSIGN     shift and go to state 61
    RIGHT_ASSIGN    shift and go to state 46
    AND_ASSIGN      shift and go to state 49
    XOR_ASSIGN      shift and go to state 57
    OR_ASSIGN       shift and go to state 58
    EQUALS          shift and go to state 51

  ! OR_OP           [ reduce using rule 32 (exp -> exp NOTEQUALS exp .) ]
  ! AND_OP          [ reduce using rule 32 (exp -> exp NOTEQUALS exp .) ]
  ! MUL_ASSIGN      [ reduce using rule 32 (exp -> exp NOTEQUALS exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 32 (exp -> exp NOTEQUALS exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 32 (exp -> exp NOTEQUALS exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 32 (exp -> exp NOTEQUALS exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 32 (exp -> exp NOTEQUALS exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 32 (exp -> exp NOTEQUALS exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 32 (exp -> exp NOTEQUALS exp .) ]
  ! AND_ASSIGN      [ reduce using rule 32 (exp -> exp NOTEQUALS exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 32 (exp -> exp NOTEQUALS exp .) ]
  ! OR_ASSIGN       [ reduce using rule 32 (exp -> exp NOTEQUALS exp .) ]
  ! EQUALS          [ reduce using rule 32 (exp -> exp NOTEQUALS exp .) ]
  ! ADD             [ shift and go to state 53 ]
  ! MINUS           [ shift and go to state 43 ]
  ! MULT            [ shift and go to state 44 ]
  ! DIV             [ shift and go to state 42 ]
  ! MOD             [ shift and go to state 62 ]
  ! L_OP            [ shift and go to state 59 ]
  ! G_OP            [ shift and go to state 47 ]
  ! LE_OP           [ shift and go to state 45 ]
  ! GE_OP           [ shift and go to state 54 ]
  ! NOTEQUALS       [ shift and go to state 38 ]
  ! EQUALS_OP       [ shift and go to state 39 ]


state 74

    (33) exp -> exp EQUALS_OP exp .
    (23) exp -> exp . ADD exp
    (24) exp -> exp . MINUS exp
    (25) exp -> exp . MULT exp
    (26) exp -> exp . DIV exp
    (27) exp -> exp . MOD exp
    (28) exp -> exp . L_OP exp
    (29) exp -> exp . G_OP exp
    (30) exp -> exp . LE_OP exp
    (31) exp -> exp . GE_OP exp
    (32) exp -> exp . NOTEQUALS exp
    (33) exp -> exp . EQUALS_OP exp
    (34) exp -> exp . OR_OP exp
    (35) exp -> exp . AND_OP exp
    (36) exp -> exp . MUL_ASSIGN exp
    (37) exp -> exp . DIV_ASSIGN exp
    (38) exp -> exp . MOD_ASSIGN exp
    (39) exp -> exp . ADD_ASSIGN exp
    (40) exp -> exp . SUB_ASSIGN exp
    (41) exp -> exp . LEFT_ASSIGN exp
    (42) exp -> exp . RIGHT_ASSIGN exp
    (43) exp -> exp . AND_ASSIGN exp
    (44) exp -> exp . XOR_ASSIGN exp
    (45) exp -> exp . OR_ASSIGN exp
    (46) exp -> exp . EQUALS exp

    RPAREN          reduce using rule 33 (exp -> exp EQUALS_OP exp .)
    ADD             reduce using rule 33 (exp -> exp EQUALS_OP exp .)
    MINUS           reduce using rule 33 (exp -> exp EQUALS_OP exp .)
    MULT            reduce using rule 33 (exp -> exp EQUALS_OP exp .)
    DIV             reduce using rule 33 (exp -> exp EQUALS_OP exp .)
    MOD             reduce using rule 33 (exp -> exp EQUALS_OP exp .)
    L_OP            reduce using rule 33 (exp -> exp EQUALS_OP exp .)
    G_OP            reduce using rule 33 (exp -> exp EQUALS_OP exp .)
    LE_OP           reduce using rule 33 (exp -> exp EQUALS_OP exp .)
    GE_OP           reduce using rule 33 (exp -> exp EQUALS_OP exp .)
    NOTEQUALS       reduce using rule 33 (exp -> exp EQUALS_OP exp .)
    EQUALS_OP       reduce using rule 33 (exp -> exp EQUALS_OP exp .)
    SEMI_COLON      reduce using rule 33 (exp -> exp EQUALS_OP exp .)
    COMMA           reduce using rule 33 (exp -> exp EQUALS_OP exp .)
    OR_OP           shift and go to state 48
    AND_OP          shift and go to state 52
    MUL_ASSIGN      shift and go to state 60
    DIV_ASSIGN      shift and go to state 40
    MOD_ASSIGN      shift and go to state 56
    ADD_ASSIGN      shift and go to state 50
    SUB_ASSIGN      shift and go to state 55
    LEFT_ASSIGN     shift and go to state 61
    RIGHT_ASSIGN    shift and go to state 46
    AND_ASSIGN      shift and go to state 49
    XOR_ASSIGN      shift and go to state 57
    OR_ASSIGN       shift and go to state 58
    EQUALS          shift and go to state 51

  ! OR_OP           [ reduce using rule 33 (exp -> exp EQUALS_OP exp .) ]
  ! AND_OP          [ reduce using rule 33 (exp -> exp EQUALS_OP exp .) ]
  ! MUL_ASSIGN      [ reduce using rule 33 (exp -> exp EQUALS_OP exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 33 (exp -> exp EQUALS_OP exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 33 (exp -> exp EQUALS_OP exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 33 (exp -> exp EQUALS_OP exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 33 (exp -> exp EQUALS_OP exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 33 (exp -> exp EQUALS_OP exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 33 (exp -> exp EQUALS_OP exp .) ]
  ! AND_ASSIGN      [ reduce using rule 33 (exp -> exp EQUALS_OP exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 33 (exp -> exp EQUALS_OP exp .) ]
  ! OR_ASSIGN       [ reduce using rule 33 (exp -> exp EQUALS_OP exp .) ]
  ! EQUALS          [ reduce using rule 33 (exp -> exp EQUALS_OP exp .) ]
  ! ADD             [ shift and go to state 53 ]
  ! MINUS           [ shift and go to state 43 ]
  ! MULT            [ shift and go to state 44 ]
  ! DIV             [ shift and go to state 42 ]
  ! MOD             [ shift and go to state 62 ]
  ! L_OP            [ shift and go to state 59 ]
  ! G_OP            [ shift and go to state 47 ]
  ! LE_OP           [ shift and go to state 45 ]
  ! GE_OP           [ shift and go to state 54 ]
  ! NOTEQUALS       [ shift and go to state 38 ]
  ! EQUALS_OP       [ shift and go to state 39 ]


state 75

    (37) exp -> exp DIV_ASSIGN exp .
    (23) exp -> exp . ADD exp
    (24) exp -> exp . MINUS exp
    (25) exp -> exp . MULT exp
    (26) exp -> exp . DIV exp
    (27) exp -> exp . MOD exp
    (28) exp -> exp . L_OP exp
    (29) exp -> exp . G_OP exp
    (30) exp -> exp . LE_OP exp
    (31) exp -> exp . GE_OP exp
    (32) exp -> exp . NOTEQUALS exp
    (33) exp -> exp . EQUALS_OP exp
    (34) exp -> exp . OR_OP exp
    (35) exp -> exp . AND_OP exp
    (36) exp -> exp . MUL_ASSIGN exp
    (37) exp -> exp . DIV_ASSIGN exp
    (38) exp -> exp . MOD_ASSIGN exp
    (39) exp -> exp . ADD_ASSIGN exp
    (40) exp -> exp . SUB_ASSIGN exp
    (41) exp -> exp . LEFT_ASSIGN exp
    (42) exp -> exp . RIGHT_ASSIGN exp
    (43) exp -> exp . AND_ASSIGN exp
    (44) exp -> exp . XOR_ASSIGN exp
    (45) exp -> exp . OR_ASSIGN exp
    (46) exp -> exp . EQUALS exp

    RPAREN          reduce using rule 37 (exp -> exp DIV_ASSIGN exp .)
    ADD             reduce using rule 37 (exp -> exp DIV_ASSIGN exp .)
    MINUS           reduce using rule 37 (exp -> exp DIV_ASSIGN exp .)
    MULT            reduce using rule 37 (exp -> exp DIV_ASSIGN exp .)
    DIV             reduce using rule 37 (exp -> exp DIV_ASSIGN exp .)
    MOD             reduce using rule 37 (exp -> exp DIV_ASSIGN exp .)
    L_OP            reduce using rule 37 (exp -> exp DIV_ASSIGN exp .)
    G_OP            reduce using rule 37 (exp -> exp DIV_ASSIGN exp .)
    LE_OP           reduce using rule 37 (exp -> exp DIV_ASSIGN exp .)
    GE_OP           reduce using rule 37 (exp -> exp DIV_ASSIGN exp .)
    NOTEQUALS       reduce using rule 37 (exp -> exp DIV_ASSIGN exp .)
    EQUALS_OP       reduce using rule 37 (exp -> exp DIV_ASSIGN exp .)
    OR_OP           reduce using rule 37 (exp -> exp DIV_ASSIGN exp .)
    AND_OP          reduce using rule 37 (exp -> exp DIV_ASSIGN exp .)
    SEMI_COLON      reduce using rule 37 (exp -> exp DIV_ASSIGN exp .)
    COMMA           reduce using rule 37 (exp -> exp DIV_ASSIGN exp .)
    MUL_ASSIGN      shift and go to state 60
    DIV_ASSIGN      shift and go to state 40
    MOD_ASSIGN      shift and go to state 56
    ADD_ASSIGN      shift and go to state 50
    SUB_ASSIGN      shift and go to state 55
    LEFT_ASSIGN     shift and go to state 61
    RIGHT_ASSIGN    shift and go to state 46
    AND_ASSIGN      shift and go to state 49
    XOR_ASSIGN      shift and go to state 57
    OR_ASSIGN       shift and go to state 58
    EQUALS          shift and go to state 51

  ! MUL_ASSIGN      [ reduce using rule 37 (exp -> exp DIV_ASSIGN exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 37 (exp -> exp DIV_ASSIGN exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 37 (exp -> exp DIV_ASSIGN exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 37 (exp -> exp DIV_ASSIGN exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 37 (exp -> exp DIV_ASSIGN exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 37 (exp -> exp DIV_ASSIGN exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 37 (exp -> exp DIV_ASSIGN exp .) ]
  ! AND_ASSIGN      [ reduce using rule 37 (exp -> exp DIV_ASSIGN exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 37 (exp -> exp DIV_ASSIGN exp .) ]
  ! OR_ASSIGN       [ reduce using rule 37 (exp -> exp DIV_ASSIGN exp .) ]
  ! EQUALS          [ reduce using rule 37 (exp -> exp DIV_ASSIGN exp .) ]
  ! ADD             [ shift and go to state 53 ]
  ! MINUS           [ shift and go to state 43 ]
  ! MULT            [ shift and go to state 44 ]
  ! DIV             [ shift and go to state 42 ]
  ! MOD             [ shift and go to state 62 ]
  ! L_OP            [ shift and go to state 59 ]
  ! G_OP            [ shift and go to state 47 ]
  ! LE_OP           [ shift and go to state 45 ]
  ! GE_OP           [ shift and go to state 54 ]
  ! NOTEQUALS       [ shift and go to state 38 ]
  ! EQUALS_OP       [ shift and go to state 39 ]
  ! OR_OP           [ shift and go to state 48 ]
  ! AND_OP          [ shift and go to state 52 ]


state 76

    (26) exp -> exp DIV exp .
    (23) exp -> exp . ADD exp
    (24) exp -> exp . MINUS exp
    (25) exp -> exp . MULT exp
    (26) exp -> exp . DIV exp
    (27) exp -> exp . MOD exp
    (28) exp -> exp . L_OP exp
    (29) exp -> exp . G_OP exp
    (30) exp -> exp . LE_OP exp
    (31) exp -> exp . GE_OP exp
    (32) exp -> exp . NOTEQUALS exp
    (33) exp -> exp . EQUALS_OP exp
    (34) exp -> exp . OR_OP exp
    (35) exp -> exp . AND_OP exp
    (36) exp -> exp . MUL_ASSIGN exp
    (37) exp -> exp . DIV_ASSIGN exp
    (38) exp -> exp . MOD_ASSIGN exp
    (39) exp -> exp . ADD_ASSIGN exp
    (40) exp -> exp . SUB_ASSIGN exp
    (41) exp -> exp . LEFT_ASSIGN exp
    (42) exp -> exp . RIGHT_ASSIGN exp
    (43) exp -> exp . AND_ASSIGN exp
    (44) exp -> exp . XOR_ASSIGN exp
    (45) exp -> exp . OR_ASSIGN exp
    (46) exp -> exp . EQUALS exp

    RPAREN          reduce using rule 26 (exp -> exp DIV exp .)
    ADD             reduce using rule 26 (exp -> exp DIV exp .)
    MINUS           reduce using rule 26 (exp -> exp DIV exp .)
    MULT            reduce using rule 26 (exp -> exp DIV exp .)
    DIV             reduce using rule 26 (exp -> exp DIV exp .)
    MOD             reduce using rule 26 (exp -> exp DIV exp .)
    SEMI_COLON      reduce using rule 26 (exp -> exp DIV exp .)
    COMMA           reduce using rule 26 (exp -> exp DIV exp .)
    L_OP            shift and go to state 59
    G_OP            shift and go to state 47
    LE_OP           shift and go to state 45
    GE_OP           shift and go to state 54
    NOTEQUALS       shift and go to state 38
    EQUALS_OP       shift and go to state 39
    OR_OP           shift and go to state 48
    AND_OP          shift and go to state 52
    MUL_ASSIGN      shift and go to state 60
    DIV_ASSIGN      shift and go to state 40
    MOD_ASSIGN      shift and go to state 56
    ADD_ASSIGN      shift and go to state 50
    SUB_ASSIGN      shift and go to state 55
    LEFT_ASSIGN     shift and go to state 61
    RIGHT_ASSIGN    shift and go to state 46
    AND_ASSIGN      shift and go to state 49
    XOR_ASSIGN      shift and go to state 57
    OR_ASSIGN       shift and go to state 58
    EQUALS          shift and go to state 51

  ! L_OP            [ reduce using rule 26 (exp -> exp DIV exp .) ]
  ! G_OP            [ reduce using rule 26 (exp -> exp DIV exp .) ]
  ! LE_OP           [ reduce using rule 26 (exp -> exp DIV exp .) ]
  ! GE_OP           [ reduce using rule 26 (exp -> exp DIV exp .) ]
  ! NOTEQUALS       [ reduce using rule 26 (exp -> exp DIV exp .) ]
  ! EQUALS_OP       [ reduce using rule 26 (exp -> exp DIV exp .) ]
  ! OR_OP           [ reduce using rule 26 (exp -> exp DIV exp .) ]
  ! AND_OP          [ reduce using rule 26 (exp -> exp DIV exp .) ]
  ! MUL_ASSIGN      [ reduce using rule 26 (exp -> exp DIV exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 26 (exp -> exp DIV exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 26 (exp -> exp DIV exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 26 (exp -> exp DIV exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 26 (exp -> exp DIV exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 26 (exp -> exp DIV exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 26 (exp -> exp DIV exp .) ]
  ! AND_ASSIGN      [ reduce using rule 26 (exp -> exp DIV exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 26 (exp -> exp DIV exp .) ]
  ! OR_ASSIGN       [ reduce using rule 26 (exp -> exp DIV exp .) ]
  ! EQUALS          [ reduce using rule 26 (exp -> exp DIV exp .) ]
  ! ADD             [ shift and go to state 53 ]
  ! MINUS           [ shift and go to state 43 ]
  ! MULT            [ shift and go to state 44 ]
  ! DIV             [ shift and go to state 42 ]
  ! MOD             [ shift and go to state 62 ]


state 77

    (24) exp -> exp MINUS exp .
    (23) exp -> exp . ADD exp
    (24) exp -> exp . MINUS exp
    (25) exp -> exp . MULT exp
    (26) exp -> exp . DIV exp
    (27) exp -> exp . MOD exp
    (28) exp -> exp . L_OP exp
    (29) exp -> exp . G_OP exp
    (30) exp -> exp . LE_OP exp
    (31) exp -> exp . GE_OP exp
    (32) exp -> exp . NOTEQUALS exp
    (33) exp -> exp . EQUALS_OP exp
    (34) exp -> exp . OR_OP exp
    (35) exp -> exp . AND_OP exp
    (36) exp -> exp . MUL_ASSIGN exp
    (37) exp -> exp . DIV_ASSIGN exp
    (38) exp -> exp . MOD_ASSIGN exp
    (39) exp -> exp . ADD_ASSIGN exp
    (40) exp -> exp . SUB_ASSIGN exp
    (41) exp -> exp . LEFT_ASSIGN exp
    (42) exp -> exp . RIGHT_ASSIGN exp
    (43) exp -> exp . AND_ASSIGN exp
    (44) exp -> exp . XOR_ASSIGN exp
    (45) exp -> exp . OR_ASSIGN exp
    (46) exp -> exp . EQUALS exp

    RPAREN          reduce using rule 24 (exp -> exp MINUS exp .)
    ADD             reduce using rule 24 (exp -> exp MINUS exp .)
    MINUS           reduce using rule 24 (exp -> exp MINUS exp .)
    SEMI_COLON      reduce using rule 24 (exp -> exp MINUS exp .)
    COMMA           reduce using rule 24 (exp -> exp MINUS exp .)
    MULT            shift and go to state 44
    DIV             shift and go to state 42
    MOD             shift and go to state 62
    L_OP            shift and go to state 59
    G_OP            shift and go to state 47
    LE_OP           shift and go to state 45
    GE_OP           shift and go to state 54
    NOTEQUALS       shift and go to state 38
    EQUALS_OP       shift and go to state 39
    OR_OP           shift and go to state 48
    AND_OP          shift and go to state 52
    MUL_ASSIGN      shift and go to state 60
    DIV_ASSIGN      shift and go to state 40
    MOD_ASSIGN      shift and go to state 56
    ADD_ASSIGN      shift and go to state 50
    SUB_ASSIGN      shift and go to state 55
    LEFT_ASSIGN     shift and go to state 61
    RIGHT_ASSIGN    shift and go to state 46
    AND_ASSIGN      shift and go to state 49
    XOR_ASSIGN      shift and go to state 57
    OR_ASSIGN       shift and go to state 58
    EQUALS          shift and go to state 51

  ! MULT            [ reduce using rule 24 (exp -> exp MINUS exp .) ]
  ! DIV             [ reduce using rule 24 (exp -> exp MINUS exp .) ]
  ! MOD             [ reduce using rule 24 (exp -> exp MINUS exp .) ]
  ! L_OP            [ reduce using rule 24 (exp -> exp MINUS exp .) ]
  ! G_OP            [ reduce using rule 24 (exp -> exp MINUS exp .) ]
  ! LE_OP           [ reduce using rule 24 (exp -> exp MINUS exp .) ]
  ! GE_OP           [ reduce using rule 24 (exp -> exp MINUS exp .) ]
  ! NOTEQUALS       [ reduce using rule 24 (exp -> exp MINUS exp .) ]
  ! EQUALS_OP       [ reduce using rule 24 (exp -> exp MINUS exp .) ]
  ! OR_OP           [ reduce using rule 24 (exp -> exp MINUS exp .) ]
  ! AND_OP          [ reduce using rule 24 (exp -> exp MINUS exp .) ]
  ! MUL_ASSIGN      [ reduce using rule 24 (exp -> exp MINUS exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 24 (exp -> exp MINUS exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 24 (exp -> exp MINUS exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 24 (exp -> exp MINUS exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 24 (exp -> exp MINUS exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 24 (exp -> exp MINUS exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 24 (exp -> exp MINUS exp .) ]
  ! AND_ASSIGN      [ reduce using rule 24 (exp -> exp MINUS exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 24 (exp -> exp MINUS exp .) ]
  ! OR_ASSIGN       [ reduce using rule 24 (exp -> exp MINUS exp .) ]
  ! EQUALS          [ reduce using rule 24 (exp -> exp MINUS exp .) ]
  ! ADD             [ shift and go to state 53 ]
  ! MINUS           [ shift and go to state 43 ]


state 78

    (25) exp -> exp MULT exp .
    (23) exp -> exp . ADD exp
    (24) exp -> exp . MINUS exp
    (25) exp -> exp . MULT exp
    (26) exp -> exp . DIV exp
    (27) exp -> exp . MOD exp
    (28) exp -> exp . L_OP exp
    (29) exp -> exp . G_OP exp
    (30) exp -> exp . LE_OP exp
    (31) exp -> exp . GE_OP exp
    (32) exp -> exp . NOTEQUALS exp
    (33) exp -> exp . EQUALS_OP exp
    (34) exp -> exp . OR_OP exp
    (35) exp -> exp . AND_OP exp
    (36) exp -> exp . MUL_ASSIGN exp
    (37) exp -> exp . DIV_ASSIGN exp
    (38) exp -> exp . MOD_ASSIGN exp
    (39) exp -> exp . ADD_ASSIGN exp
    (40) exp -> exp . SUB_ASSIGN exp
    (41) exp -> exp . LEFT_ASSIGN exp
    (42) exp -> exp . RIGHT_ASSIGN exp
    (43) exp -> exp . AND_ASSIGN exp
    (44) exp -> exp . XOR_ASSIGN exp
    (45) exp -> exp . OR_ASSIGN exp
    (46) exp -> exp . EQUALS exp

    RPAREN          reduce using rule 25 (exp -> exp MULT exp .)
    ADD             reduce using rule 25 (exp -> exp MULT exp .)
    MINUS           reduce using rule 25 (exp -> exp MULT exp .)
    MULT            reduce using rule 25 (exp -> exp MULT exp .)
    DIV             reduce using rule 25 (exp -> exp MULT exp .)
    MOD             reduce using rule 25 (exp -> exp MULT exp .)
    SEMI_COLON      reduce using rule 25 (exp -> exp MULT exp .)
    COMMA           reduce using rule 25 (exp -> exp MULT exp .)
    L_OP            shift and go to state 59
    G_OP            shift and go to state 47
    LE_OP           shift and go to state 45
    GE_OP           shift and go to state 54
    NOTEQUALS       shift and go to state 38
    EQUALS_OP       shift and go to state 39
    OR_OP           shift and go to state 48
    AND_OP          shift and go to state 52
    MUL_ASSIGN      shift and go to state 60
    DIV_ASSIGN      shift and go to state 40
    MOD_ASSIGN      shift and go to state 56
    ADD_ASSIGN      shift and go to state 50
    SUB_ASSIGN      shift and go to state 55
    LEFT_ASSIGN     shift and go to state 61
    RIGHT_ASSIGN    shift and go to state 46
    AND_ASSIGN      shift and go to state 49
    XOR_ASSIGN      shift and go to state 57
    OR_ASSIGN       shift and go to state 58
    EQUALS          shift and go to state 51

  ! L_OP            [ reduce using rule 25 (exp -> exp MULT exp .) ]
  ! G_OP            [ reduce using rule 25 (exp -> exp MULT exp .) ]
  ! LE_OP           [ reduce using rule 25 (exp -> exp MULT exp .) ]
  ! GE_OP           [ reduce using rule 25 (exp -> exp MULT exp .) ]
  ! NOTEQUALS       [ reduce using rule 25 (exp -> exp MULT exp .) ]
  ! EQUALS_OP       [ reduce using rule 25 (exp -> exp MULT exp .) ]
  ! OR_OP           [ reduce using rule 25 (exp -> exp MULT exp .) ]
  ! AND_OP          [ reduce using rule 25 (exp -> exp MULT exp .) ]
  ! MUL_ASSIGN      [ reduce using rule 25 (exp -> exp MULT exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 25 (exp -> exp MULT exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 25 (exp -> exp MULT exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 25 (exp -> exp MULT exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 25 (exp -> exp MULT exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 25 (exp -> exp MULT exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 25 (exp -> exp MULT exp .) ]
  ! AND_ASSIGN      [ reduce using rule 25 (exp -> exp MULT exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 25 (exp -> exp MULT exp .) ]
  ! OR_ASSIGN       [ reduce using rule 25 (exp -> exp MULT exp .) ]
  ! EQUALS          [ reduce using rule 25 (exp -> exp MULT exp .) ]
  ! ADD             [ shift and go to state 53 ]
  ! MINUS           [ shift and go to state 43 ]
  ! MULT            [ shift and go to state 44 ]
  ! DIV             [ shift and go to state 42 ]
  ! MOD             [ shift and go to state 62 ]


state 79

    (30) exp -> exp LE_OP exp .
    (23) exp -> exp . ADD exp
    (24) exp -> exp . MINUS exp
    (25) exp -> exp . MULT exp
    (26) exp -> exp . DIV exp
    (27) exp -> exp . MOD exp
    (28) exp -> exp . L_OP exp
    (29) exp -> exp . G_OP exp
    (30) exp -> exp . LE_OP exp
    (31) exp -> exp . GE_OP exp
    (32) exp -> exp . NOTEQUALS exp
    (33) exp -> exp . EQUALS_OP exp
    (34) exp -> exp . OR_OP exp
    (35) exp -> exp . AND_OP exp
    (36) exp -> exp . MUL_ASSIGN exp
    (37) exp -> exp . DIV_ASSIGN exp
    (38) exp -> exp . MOD_ASSIGN exp
    (39) exp -> exp . ADD_ASSIGN exp
    (40) exp -> exp . SUB_ASSIGN exp
    (41) exp -> exp . LEFT_ASSIGN exp
    (42) exp -> exp . RIGHT_ASSIGN exp
    (43) exp -> exp . AND_ASSIGN exp
    (44) exp -> exp . XOR_ASSIGN exp
    (45) exp -> exp . OR_ASSIGN exp
    (46) exp -> exp . EQUALS exp

    RPAREN          reduce using rule 30 (exp -> exp LE_OP exp .)
    ADD             reduce using rule 30 (exp -> exp LE_OP exp .)
    MINUS           reduce using rule 30 (exp -> exp LE_OP exp .)
    MULT            reduce using rule 30 (exp -> exp LE_OP exp .)
    DIV             reduce using rule 30 (exp -> exp LE_OP exp .)
    MOD             reduce using rule 30 (exp -> exp LE_OP exp .)
    L_OP            reduce using rule 30 (exp -> exp LE_OP exp .)
    G_OP            reduce using rule 30 (exp -> exp LE_OP exp .)
    LE_OP           reduce using rule 30 (exp -> exp LE_OP exp .)
    GE_OP           reduce using rule 30 (exp -> exp LE_OP exp .)
    SEMI_COLON      reduce using rule 30 (exp -> exp LE_OP exp .)
    COMMA           reduce using rule 30 (exp -> exp LE_OP exp .)
    NOTEQUALS       shift and go to state 38
    EQUALS_OP       shift and go to state 39
    OR_OP           shift and go to state 48
    AND_OP          shift and go to state 52
    MUL_ASSIGN      shift and go to state 60
    DIV_ASSIGN      shift and go to state 40
    MOD_ASSIGN      shift and go to state 56
    ADD_ASSIGN      shift and go to state 50
    SUB_ASSIGN      shift and go to state 55
    LEFT_ASSIGN     shift and go to state 61
    RIGHT_ASSIGN    shift and go to state 46
    AND_ASSIGN      shift and go to state 49
    XOR_ASSIGN      shift and go to state 57
    OR_ASSIGN       shift and go to state 58
    EQUALS          shift and go to state 51

  ! NOTEQUALS       [ reduce using rule 30 (exp -> exp LE_OP exp .) ]
  ! EQUALS_OP       [ reduce using rule 30 (exp -> exp LE_OP exp .) ]
  ! OR_OP           [ reduce using rule 30 (exp -> exp LE_OP exp .) ]
  ! AND_OP          [ reduce using rule 30 (exp -> exp LE_OP exp .) ]
  ! MUL_ASSIGN      [ reduce using rule 30 (exp -> exp LE_OP exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 30 (exp -> exp LE_OP exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 30 (exp -> exp LE_OP exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 30 (exp -> exp LE_OP exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 30 (exp -> exp LE_OP exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 30 (exp -> exp LE_OP exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 30 (exp -> exp LE_OP exp .) ]
  ! AND_ASSIGN      [ reduce using rule 30 (exp -> exp LE_OP exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 30 (exp -> exp LE_OP exp .) ]
  ! OR_ASSIGN       [ reduce using rule 30 (exp -> exp LE_OP exp .) ]
  ! EQUALS          [ reduce using rule 30 (exp -> exp LE_OP exp .) ]
  ! ADD             [ shift and go to state 53 ]
  ! MINUS           [ shift and go to state 43 ]
  ! MULT            [ shift and go to state 44 ]
  ! DIV             [ shift and go to state 42 ]
  ! MOD             [ shift and go to state 62 ]
  ! L_OP            [ shift and go to state 59 ]
  ! G_OP            [ shift and go to state 47 ]
  ! LE_OP           [ shift and go to state 45 ]
  ! GE_OP           [ shift and go to state 54 ]


state 80

    (42) exp -> exp RIGHT_ASSIGN exp .
    (23) exp -> exp . ADD exp
    (24) exp -> exp . MINUS exp
    (25) exp -> exp . MULT exp
    (26) exp -> exp . DIV exp
    (27) exp -> exp . MOD exp
    (28) exp -> exp . L_OP exp
    (29) exp -> exp . G_OP exp
    (30) exp -> exp . LE_OP exp
    (31) exp -> exp . GE_OP exp
    (32) exp -> exp . NOTEQUALS exp
    (33) exp -> exp . EQUALS_OP exp
    (34) exp -> exp . OR_OP exp
    (35) exp -> exp . AND_OP exp
    (36) exp -> exp . MUL_ASSIGN exp
    (37) exp -> exp . DIV_ASSIGN exp
    (38) exp -> exp . MOD_ASSIGN exp
    (39) exp -> exp . ADD_ASSIGN exp
    (40) exp -> exp . SUB_ASSIGN exp
    (41) exp -> exp . LEFT_ASSIGN exp
    (42) exp -> exp . RIGHT_ASSIGN exp
    (43) exp -> exp . AND_ASSIGN exp
    (44) exp -> exp . XOR_ASSIGN exp
    (45) exp -> exp . OR_ASSIGN exp
    (46) exp -> exp . EQUALS exp

    RPAREN          reduce using rule 42 (exp -> exp RIGHT_ASSIGN exp .)
    ADD             reduce using rule 42 (exp -> exp RIGHT_ASSIGN exp .)
    MINUS           reduce using rule 42 (exp -> exp RIGHT_ASSIGN exp .)
    MULT            reduce using rule 42 (exp -> exp RIGHT_ASSIGN exp .)
    DIV             reduce using rule 42 (exp -> exp RIGHT_ASSIGN exp .)
    MOD             reduce using rule 42 (exp -> exp RIGHT_ASSIGN exp .)
    L_OP            reduce using rule 42 (exp -> exp RIGHT_ASSIGN exp .)
    G_OP            reduce using rule 42 (exp -> exp RIGHT_ASSIGN exp .)
    LE_OP           reduce using rule 42 (exp -> exp RIGHT_ASSIGN exp .)
    GE_OP           reduce using rule 42 (exp -> exp RIGHT_ASSIGN exp .)
    NOTEQUALS       reduce using rule 42 (exp -> exp RIGHT_ASSIGN exp .)
    EQUALS_OP       reduce using rule 42 (exp -> exp RIGHT_ASSIGN exp .)
    OR_OP           reduce using rule 42 (exp -> exp RIGHT_ASSIGN exp .)
    AND_OP          reduce using rule 42 (exp -> exp RIGHT_ASSIGN exp .)
    SEMI_COLON      reduce using rule 42 (exp -> exp RIGHT_ASSIGN exp .)
    COMMA           reduce using rule 42 (exp -> exp RIGHT_ASSIGN exp .)
    MUL_ASSIGN      shift and go to state 60
    DIV_ASSIGN      shift and go to state 40
    MOD_ASSIGN      shift and go to state 56
    ADD_ASSIGN      shift and go to state 50
    SUB_ASSIGN      shift and go to state 55
    LEFT_ASSIGN     shift and go to state 61
    RIGHT_ASSIGN    shift and go to state 46
    AND_ASSIGN      shift and go to state 49
    XOR_ASSIGN      shift and go to state 57
    OR_ASSIGN       shift and go to state 58
    EQUALS          shift and go to state 51

  ! MUL_ASSIGN      [ reduce using rule 42 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 42 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 42 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 42 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 42 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 42 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 42 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! AND_ASSIGN      [ reduce using rule 42 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 42 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! OR_ASSIGN       [ reduce using rule 42 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! EQUALS          [ reduce using rule 42 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! ADD             [ shift and go to state 53 ]
  ! MINUS           [ shift and go to state 43 ]
  ! MULT            [ shift and go to state 44 ]
  ! DIV             [ shift and go to state 42 ]
  ! MOD             [ shift and go to state 62 ]
  ! L_OP            [ shift and go to state 59 ]
  ! G_OP            [ shift and go to state 47 ]
  ! LE_OP           [ shift and go to state 45 ]
  ! GE_OP           [ shift and go to state 54 ]
  ! NOTEQUALS       [ shift and go to state 38 ]
  ! EQUALS_OP       [ shift and go to state 39 ]
  ! OR_OP           [ shift and go to state 48 ]
  ! AND_OP          [ shift and go to state 52 ]


state 81

    (29) exp -> exp G_OP exp .
    (23) exp -> exp . ADD exp
    (24) exp -> exp . MINUS exp
    (25) exp -> exp . MULT exp
    (26) exp -> exp . DIV exp
    (27) exp -> exp . MOD exp
    (28) exp -> exp . L_OP exp
    (29) exp -> exp . G_OP exp
    (30) exp -> exp . LE_OP exp
    (31) exp -> exp . GE_OP exp
    (32) exp -> exp . NOTEQUALS exp
    (33) exp -> exp . EQUALS_OP exp
    (34) exp -> exp . OR_OP exp
    (35) exp -> exp . AND_OP exp
    (36) exp -> exp . MUL_ASSIGN exp
    (37) exp -> exp . DIV_ASSIGN exp
    (38) exp -> exp . MOD_ASSIGN exp
    (39) exp -> exp . ADD_ASSIGN exp
    (40) exp -> exp . SUB_ASSIGN exp
    (41) exp -> exp . LEFT_ASSIGN exp
    (42) exp -> exp . RIGHT_ASSIGN exp
    (43) exp -> exp . AND_ASSIGN exp
    (44) exp -> exp . XOR_ASSIGN exp
    (45) exp -> exp . OR_ASSIGN exp
    (46) exp -> exp . EQUALS exp

    RPAREN          reduce using rule 29 (exp -> exp G_OP exp .)
    ADD             reduce using rule 29 (exp -> exp G_OP exp .)
    MINUS           reduce using rule 29 (exp -> exp G_OP exp .)
    MULT            reduce using rule 29 (exp -> exp G_OP exp .)
    DIV             reduce using rule 29 (exp -> exp G_OP exp .)
    MOD             reduce using rule 29 (exp -> exp G_OP exp .)
    L_OP            reduce using rule 29 (exp -> exp G_OP exp .)
    G_OP            reduce using rule 29 (exp -> exp G_OP exp .)
    LE_OP           reduce using rule 29 (exp -> exp G_OP exp .)
    GE_OP           reduce using rule 29 (exp -> exp G_OP exp .)
    SEMI_COLON      reduce using rule 29 (exp -> exp G_OP exp .)
    COMMA           reduce using rule 29 (exp -> exp G_OP exp .)
    NOTEQUALS       shift and go to state 38
    EQUALS_OP       shift and go to state 39
    OR_OP           shift and go to state 48
    AND_OP          shift and go to state 52
    MUL_ASSIGN      shift and go to state 60
    DIV_ASSIGN      shift and go to state 40
    MOD_ASSIGN      shift and go to state 56
    ADD_ASSIGN      shift and go to state 50
    SUB_ASSIGN      shift and go to state 55
    LEFT_ASSIGN     shift and go to state 61
    RIGHT_ASSIGN    shift and go to state 46
    AND_ASSIGN      shift and go to state 49
    XOR_ASSIGN      shift and go to state 57
    OR_ASSIGN       shift and go to state 58
    EQUALS          shift and go to state 51

  ! NOTEQUALS       [ reduce using rule 29 (exp -> exp G_OP exp .) ]
  ! EQUALS_OP       [ reduce using rule 29 (exp -> exp G_OP exp .) ]
  ! OR_OP           [ reduce using rule 29 (exp -> exp G_OP exp .) ]
  ! AND_OP          [ reduce using rule 29 (exp -> exp G_OP exp .) ]
  ! MUL_ASSIGN      [ reduce using rule 29 (exp -> exp G_OP exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 29 (exp -> exp G_OP exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 29 (exp -> exp G_OP exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 29 (exp -> exp G_OP exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 29 (exp -> exp G_OP exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 29 (exp -> exp G_OP exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 29 (exp -> exp G_OP exp .) ]
  ! AND_ASSIGN      [ reduce using rule 29 (exp -> exp G_OP exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 29 (exp -> exp G_OP exp .) ]
  ! OR_ASSIGN       [ reduce using rule 29 (exp -> exp G_OP exp .) ]
  ! EQUALS          [ reduce using rule 29 (exp -> exp G_OP exp .) ]
  ! ADD             [ shift and go to state 53 ]
  ! MINUS           [ shift and go to state 43 ]
  ! MULT            [ shift and go to state 44 ]
  ! DIV             [ shift and go to state 42 ]
  ! MOD             [ shift and go to state 62 ]
  ! L_OP            [ shift and go to state 59 ]
  ! G_OP            [ shift and go to state 47 ]
  ! LE_OP           [ shift and go to state 45 ]
  ! GE_OP           [ shift and go to state 54 ]


state 82

    (34) exp -> exp OR_OP exp .
    (23) exp -> exp . ADD exp
    (24) exp -> exp . MINUS exp
    (25) exp -> exp . MULT exp
    (26) exp -> exp . DIV exp
    (27) exp -> exp . MOD exp
    (28) exp -> exp . L_OP exp
    (29) exp -> exp . G_OP exp
    (30) exp -> exp . LE_OP exp
    (31) exp -> exp . GE_OP exp
    (32) exp -> exp . NOTEQUALS exp
    (33) exp -> exp . EQUALS_OP exp
    (34) exp -> exp . OR_OP exp
    (35) exp -> exp . AND_OP exp
    (36) exp -> exp . MUL_ASSIGN exp
    (37) exp -> exp . DIV_ASSIGN exp
    (38) exp -> exp . MOD_ASSIGN exp
    (39) exp -> exp . ADD_ASSIGN exp
    (40) exp -> exp . SUB_ASSIGN exp
    (41) exp -> exp . LEFT_ASSIGN exp
    (42) exp -> exp . RIGHT_ASSIGN exp
    (43) exp -> exp . AND_ASSIGN exp
    (44) exp -> exp . XOR_ASSIGN exp
    (45) exp -> exp . OR_ASSIGN exp
    (46) exp -> exp . EQUALS exp

    RPAREN          reduce using rule 34 (exp -> exp OR_OP exp .)
    ADD             reduce using rule 34 (exp -> exp OR_OP exp .)
    MINUS           reduce using rule 34 (exp -> exp OR_OP exp .)
    MULT            reduce using rule 34 (exp -> exp OR_OP exp .)
    DIV             reduce using rule 34 (exp -> exp OR_OP exp .)
    MOD             reduce using rule 34 (exp -> exp OR_OP exp .)
    L_OP            reduce using rule 34 (exp -> exp OR_OP exp .)
    G_OP            reduce using rule 34 (exp -> exp OR_OP exp .)
    LE_OP           reduce using rule 34 (exp -> exp OR_OP exp .)
    GE_OP           reduce using rule 34 (exp -> exp OR_OP exp .)
    NOTEQUALS       reduce using rule 34 (exp -> exp OR_OP exp .)
    EQUALS_OP       reduce using rule 34 (exp -> exp OR_OP exp .)
    OR_OP           reduce using rule 34 (exp -> exp OR_OP exp .)
    AND_OP          reduce using rule 34 (exp -> exp OR_OP exp .)
    SEMI_COLON      reduce using rule 34 (exp -> exp OR_OP exp .)
    COMMA           reduce using rule 34 (exp -> exp OR_OP exp .)
    MUL_ASSIGN      shift and go to state 60
    DIV_ASSIGN      shift and go to state 40
    MOD_ASSIGN      shift and go to state 56
    ADD_ASSIGN      shift and go to state 50
    SUB_ASSIGN      shift and go to state 55
    LEFT_ASSIGN     shift and go to state 61
    RIGHT_ASSIGN    shift and go to state 46
    AND_ASSIGN      shift and go to state 49
    XOR_ASSIGN      shift and go to state 57
    OR_ASSIGN       shift and go to state 58
    EQUALS          shift and go to state 51

  ! MUL_ASSIGN      [ reduce using rule 34 (exp -> exp OR_OP exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 34 (exp -> exp OR_OP exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 34 (exp -> exp OR_OP exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 34 (exp -> exp OR_OP exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 34 (exp -> exp OR_OP exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 34 (exp -> exp OR_OP exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 34 (exp -> exp OR_OP exp .) ]
  ! AND_ASSIGN      [ reduce using rule 34 (exp -> exp OR_OP exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 34 (exp -> exp OR_OP exp .) ]
  ! OR_ASSIGN       [ reduce using rule 34 (exp -> exp OR_OP exp .) ]
  ! EQUALS          [ reduce using rule 34 (exp -> exp OR_OP exp .) ]
  ! ADD             [ shift and go to state 53 ]
  ! MINUS           [ shift and go to state 43 ]
  ! MULT            [ shift and go to state 44 ]
  ! DIV             [ shift and go to state 42 ]
  ! MOD             [ shift and go to state 62 ]
  ! L_OP            [ shift and go to state 59 ]
  ! G_OP            [ shift and go to state 47 ]
  ! LE_OP           [ shift and go to state 45 ]
  ! GE_OP           [ shift and go to state 54 ]
  ! NOTEQUALS       [ shift and go to state 38 ]
  ! EQUALS_OP       [ shift and go to state 39 ]
  ! OR_OP           [ shift and go to state 48 ]
  ! AND_OP          [ shift and go to state 52 ]


state 83

    (43) exp -> exp AND_ASSIGN exp .
    (23) exp -> exp . ADD exp
    (24) exp -> exp . MINUS exp
    (25) exp -> exp . MULT exp
    (26) exp -> exp . DIV exp
    (27) exp -> exp . MOD exp
    (28) exp -> exp . L_OP exp
    (29) exp -> exp . G_OP exp
    (30) exp -> exp . LE_OP exp
    (31) exp -> exp . GE_OP exp
    (32) exp -> exp . NOTEQUALS exp
    (33) exp -> exp . EQUALS_OP exp
    (34) exp -> exp . OR_OP exp
    (35) exp -> exp . AND_OP exp
    (36) exp -> exp . MUL_ASSIGN exp
    (37) exp -> exp . DIV_ASSIGN exp
    (38) exp -> exp . MOD_ASSIGN exp
    (39) exp -> exp . ADD_ASSIGN exp
    (40) exp -> exp . SUB_ASSIGN exp
    (41) exp -> exp . LEFT_ASSIGN exp
    (42) exp -> exp . RIGHT_ASSIGN exp
    (43) exp -> exp . AND_ASSIGN exp
    (44) exp -> exp . XOR_ASSIGN exp
    (45) exp -> exp . OR_ASSIGN exp
    (46) exp -> exp . EQUALS exp

    RPAREN          reduce using rule 43 (exp -> exp AND_ASSIGN exp .)
    ADD             reduce using rule 43 (exp -> exp AND_ASSIGN exp .)
    MINUS           reduce using rule 43 (exp -> exp AND_ASSIGN exp .)
    MULT            reduce using rule 43 (exp -> exp AND_ASSIGN exp .)
    DIV             reduce using rule 43 (exp -> exp AND_ASSIGN exp .)
    MOD             reduce using rule 43 (exp -> exp AND_ASSIGN exp .)
    L_OP            reduce using rule 43 (exp -> exp AND_ASSIGN exp .)
    G_OP            reduce using rule 43 (exp -> exp AND_ASSIGN exp .)
    LE_OP           reduce using rule 43 (exp -> exp AND_ASSIGN exp .)
    GE_OP           reduce using rule 43 (exp -> exp AND_ASSIGN exp .)
    NOTEQUALS       reduce using rule 43 (exp -> exp AND_ASSIGN exp .)
    EQUALS_OP       reduce using rule 43 (exp -> exp AND_ASSIGN exp .)
    OR_OP           reduce using rule 43 (exp -> exp AND_ASSIGN exp .)
    AND_OP          reduce using rule 43 (exp -> exp AND_ASSIGN exp .)
    SEMI_COLON      reduce using rule 43 (exp -> exp AND_ASSIGN exp .)
    COMMA           reduce using rule 43 (exp -> exp AND_ASSIGN exp .)
    MUL_ASSIGN      shift and go to state 60
    DIV_ASSIGN      shift and go to state 40
    MOD_ASSIGN      shift and go to state 56
    ADD_ASSIGN      shift and go to state 50
    SUB_ASSIGN      shift and go to state 55
    LEFT_ASSIGN     shift and go to state 61
    RIGHT_ASSIGN    shift and go to state 46
    AND_ASSIGN      shift and go to state 49
    XOR_ASSIGN      shift and go to state 57
    OR_ASSIGN       shift and go to state 58
    EQUALS          shift and go to state 51

  ! MUL_ASSIGN      [ reduce using rule 43 (exp -> exp AND_ASSIGN exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 43 (exp -> exp AND_ASSIGN exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 43 (exp -> exp AND_ASSIGN exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 43 (exp -> exp AND_ASSIGN exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 43 (exp -> exp AND_ASSIGN exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 43 (exp -> exp AND_ASSIGN exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 43 (exp -> exp AND_ASSIGN exp .) ]
  ! AND_ASSIGN      [ reduce using rule 43 (exp -> exp AND_ASSIGN exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 43 (exp -> exp AND_ASSIGN exp .) ]
  ! OR_ASSIGN       [ reduce using rule 43 (exp -> exp AND_ASSIGN exp .) ]
  ! EQUALS          [ reduce using rule 43 (exp -> exp AND_ASSIGN exp .) ]
  ! ADD             [ shift and go to state 53 ]
  ! MINUS           [ shift and go to state 43 ]
  ! MULT            [ shift and go to state 44 ]
  ! DIV             [ shift and go to state 42 ]
  ! MOD             [ shift and go to state 62 ]
  ! L_OP            [ shift and go to state 59 ]
  ! G_OP            [ shift and go to state 47 ]
  ! LE_OP           [ shift and go to state 45 ]
  ! GE_OP           [ shift and go to state 54 ]
  ! NOTEQUALS       [ shift and go to state 38 ]
  ! EQUALS_OP       [ shift and go to state 39 ]
  ! OR_OP           [ shift and go to state 48 ]
  ! AND_OP          [ shift and go to state 52 ]


state 84

    (39) exp -> exp ADD_ASSIGN exp .
    (23) exp -> exp . ADD exp
    (24) exp -> exp . MINUS exp
    (25) exp -> exp . MULT exp
    (26) exp -> exp . DIV exp
    (27) exp -> exp . MOD exp
    (28) exp -> exp . L_OP exp
    (29) exp -> exp . G_OP exp
    (30) exp -> exp . LE_OP exp
    (31) exp -> exp . GE_OP exp
    (32) exp -> exp . NOTEQUALS exp
    (33) exp -> exp . EQUALS_OP exp
    (34) exp -> exp . OR_OP exp
    (35) exp -> exp . AND_OP exp
    (36) exp -> exp . MUL_ASSIGN exp
    (37) exp -> exp . DIV_ASSIGN exp
    (38) exp -> exp . MOD_ASSIGN exp
    (39) exp -> exp . ADD_ASSIGN exp
    (40) exp -> exp . SUB_ASSIGN exp
    (41) exp -> exp . LEFT_ASSIGN exp
    (42) exp -> exp . RIGHT_ASSIGN exp
    (43) exp -> exp . AND_ASSIGN exp
    (44) exp -> exp . XOR_ASSIGN exp
    (45) exp -> exp . OR_ASSIGN exp
    (46) exp -> exp . EQUALS exp

    RPAREN          reduce using rule 39 (exp -> exp ADD_ASSIGN exp .)
    ADD             reduce using rule 39 (exp -> exp ADD_ASSIGN exp .)
    MINUS           reduce using rule 39 (exp -> exp ADD_ASSIGN exp .)
    MULT            reduce using rule 39 (exp -> exp ADD_ASSIGN exp .)
    DIV             reduce using rule 39 (exp -> exp ADD_ASSIGN exp .)
    MOD             reduce using rule 39 (exp -> exp ADD_ASSIGN exp .)
    L_OP            reduce using rule 39 (exp -> exp ADD_ASSIGN exp .)
    G_OP            reduce using rule 39 (exp -> exp ADD_ASSIGN exp .)
    LE_OP           reduce using rule 39 (exp -> exp ADD_ASSIGN exp .)
    GE_OP           reduce using rule 39 (exp -> exp ADD_ASSIGN exp .)
    NOTEQUALS       reduce using rule 39 (exp -> exp ADD_ASSIGN exp .)
    EQUALS_OP       reduce using rule 39 (exp -> exp ADD_ASSIGN exp .)
    OR_OP           reduce using rule 39 (exp -> exp ADD_ASSIGN exp .)
    AND_OP          reduce using rule 39 (exp -> exp ADD_ASSIGN exp .)
    SEMI_COLON      reduce using rule 39 (exp -> exp ADD_ASSIGN exp .)
    COMMA           reduce using rule 39 (exp -> exp ADD_ASSIGN exp .)
    MUL_ASSIGN      shift and go to state 60
    DIV_ASSIGN      shift and go to state 40
    MOD_ASSIGN      shift and go to state 56
    ADD_ASSIGN      shift and go to state 50
    SUB_ASSIGN      shift and go to state 55
    LEFT_ASSIGN     shift and go to state 61
    RIGHT_ASSIGN    shift and go to state 46
    AND_ASSIGN      shift and go to state 49
    XOR_ASSIGN      shift and go to state 57
    OR_ASSIGN       shift and go to state 58
    EQUALS          shift and go to state 51

  ! MUL_ASSIGN      [ reduce using rule 39 (exp -> exp ADD_ASSIGN exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 39 (exp -> exp ADD_ASSIGN exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 39 (exp -> exp ADD_ASSIGN exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 39 (exp -> exp ADD_ASSIGN exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 39 (exp -> exp ADD_ASSIGN exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 39 (exp -> exp ADD_ASSIGN exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 39 (exp -> exp ADD_ASSIGN exp .) ]
  ! AND_ASSIGN      [ reduce using rule 39 (exp -> exp ADD_ASSIGN exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 39 (exp -> exp ADD_ASSIGN exp .) ]
  ! OR_ASSIGN       [ reduce using rule 39 (exp -> exp ADD_ASSIGN exp .) ]
  ! EQUALS          [ reduce using rule 39 (exp -> exp ADD_ASSIGN exp .) ]
  ! ADD             [ shift and go to state 53 ]
  ! MINUS           [ shift and go to state 43 ]
  ! MULT            [ shift and go to state 44 ]
  ! DIV             [ shift and go to state 42 ]
  ! MOD             [ shift and go to state 62 ]
  ! L_OP            [ shift and go to state 59 ]
  ! G_OP            [ shift and go to state 47 ]
  ! LE_OP           [ shift and go to state 45 ]
  ! GE_OP           [ shift and go to state 54 ]
  ! NOTEQUALS       [ shift and go to state 38 ]
  ! EQUALS_OP       [ shift and go to state 39 ]
  ! OR_OP           [ shift and go to state 48 ]
  ! AND_OP          [ shift and go to state 52 ]


state 85

    (46) exp -> exp EQUALS exp .
    (23) exp -> exp . ADD exp
    (24) exp -> exp . MINUS exp
    (25) exp -> exp . MULT exp
    (26) exp -> exp . DIV exp
    (27) exp -> exp . MOD exp
    (28) exp -> exp . L_OP exp
    (29) exp -> exp . G_OP exp
    (30) exp -> exp . LE_OP exp
    (31) exp -> exp . GE_OP exp
    (32) exp -> exp . NOTEQUALS exp
    (33) exp -> exp . EQUALS_OP exp
    (34) exp -> exp . OR_OP exp
    (35) exp -> exp . AND_OP exp
    (36) exp -> exp . MUL_ASSIGN exp
    (37) exp -> exp . DIV_ASSIGN exp
    (38) exp -> exp . MOD_ASSIGN exp
    (39) exp -> exp . ADD_ASSIGN exp
    (40) exp -> exp . SUB_ASSIGN exp
    (41) exp -> exp . LEFT_ASSIGN exp
    (42) exp -> exp . RIGHT_ASSIGN exp
    (43) exp -> exp . AND_ASSIGN exp
    (44) exp -> exp . XOR_ASSIGN exp
    (45) exp -> exp . OR_ASSIGN exp
    (46) exp -> exp . EQUALS exp

    RPAREN          reduce using rule 46 (exp -> exp EQUALS exp .)
    ADD             reduce using rule 46 (exp -> exp EQUALS exp .)
    MINUS           reduce using rule 46 (exp -> exp EQUALS exp .)
    MULT            reduce using rule 46 (exp -> exp EQUALS exp .)
    DIV             reduce using rule 46 (exp -> exp EQUALS exp .)
    MOD             reduce using rule 46 (exp -> exp EQUALS exp .)
    L_OP            reduce using rule 46 (exp -> exp EQUALS exp .)
    G_OP            reduce using rule 46 (exp -> exp EQUALS exp .)
    LE_OP           reduce using rule 46 (exp -> exp EQUALS exp .)
    GE_OP           reduce using rule 46 (exp -> exp EQUALS exp .)
    NOTEQUALS       reduce using rule 46 (exp -> exp EQUALS exp .)
    EQUALS_OP       reduce using rule 46 (exp -> exp EQUALS exp .)
    OR_OP           reduce using rule 46 (exp -> exp EQUALS exp .)
    AND_OP          reduce using rule 46 (exp -> exp EQUALS exp .)
    SEMI_COLON      reduce using rule 46 (exp -> exp EQUALS exp .)
    COMMA           reduce using rule 46 (exp -> exp EQUALS exp .)
    MUL_ASSIGN      shift and go to state 60
    DIV_ASSIGN      shift and go to state 40
    MOD_ASSIGN      shift and go to state 56
    ADD_ASSIGN      shift and go to state 50
    SUB_ASSIGN      shift and go to state 55
    LEFT_ASSIGN     shift and go to state 61
    RIGHT_ASSIGN    shift and go to state 46
    AND_ASSIGN      shift and go to state 49
    XOR_ASSIGN      shift and go to state 57
    OR_ASSIGN       shift and go to state 58
    EQUALS          shift and go to state 51

  ! MUL_ASSIGN      [ reduce using rule 46 (exp -> exp EQUALS exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 46 (exp -> exp EQUALS exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 46 (exp -> exp EQUALS exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 46 (exp -> exp EQUALS exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 46 (exp -> exp EQUALS exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 46 (exp -> exp EQUALS exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 46 (exp -> exp EQUALS exp .) ]
  ! AND_ASSIGN      [ reduce using rule 46 (exp -> exp EQUALS exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 46 (exp -> exp EQUALS exp .) ]
  ! OR_ASSIGN       [ reduce using rule 46 (exp -> exp EQUALS exp .) ]
  ! EQUALS          [ reduce using rule 46 (exp -> exp EQUALS exp .) ]
  ! ADD             [ shift and go to state 53 ]
  ! MINUS           [ shift and go to state 43 ]
  ! MULT            [ shift and go to state 44 ]
  ! DIV             [ shift and go to state 42 ]
  ! MOD             [ shift and go to state 62 ]
  ! L_OP            [ shift and go to state 59 ]
  ! G_OP            [ shift and go to state 47 ]
  ! LE_OP           [ shift and go to state 45 ]
  ! GE_OP           [ shift and go to state 54 ]
  ! NOTEQUALS       [ shift and go to state 38 ]
  ! EQUALS_OP       [ shift and go to state 39 ]
  ! OR_OP           [ shift and go to state 48 ]
  ! AND_OP          [ shift and go to state 52 ]


state 86

    (35) exp -> exp AND_OP exp .
    (23) exp -> exp . ADD exp
    (24) exp -> exp . MINUS exp
    (25) exp -> exp . MULT exp
    (26) exp -> exp . DIV exp
    (27) exp -> exp . MOD exp
    (28) exp -> exp . L_OP exp
    (29) exp -> exp . G_OP exp
    (30) exp -> exp . LE_OP exp
    (31) exp -> exp . GE_OP exp
    (32) exp -> exp . NOTEQUALS exp
    (33) exp -> exp . EQUALS_OP exp
    (34) exp -> exp . OR_OP exp
    (35) exp -> exp . AND_OP exp
    (36) exp -> exp . MUL_ASSIGN exp
    (37) exp -> exp . DIV_ASSIGN exp
    (38) exp -> exp . MOD_ASSIGN exp
    (39) exp -> exp . ADD_ASSIGN exp
    (40) exp -> exp . SUB_ASSIGN exp
    (41) exp -> exp . LEFT_ASSIGN exp
    (42) exp -> exp . RIGHT_ASSIGN exp
    (43) exp -> exp . AND_ASSIGN exp
    (44) exp -> exp . XOR_ASSIGN exp
    (45) exp -> exp . OR_ASSIGN exp
    (46) exp -> exp . EQUALS exp

    RPAREN          reduce using rule 35 (exp -> exp AND_OP exp .)
    ADD             reduce using rule 35 (exp -> exp AND_OP exp .)
    MINUS           reduce using rule 35 (exp -> exp AND_OP exp .)
    MULT            reduce using rule 35 (exp -> exp AND_OP exp .)
    DIV             reduce using rule 35 (exp -> exp AND_OP exp .)
    MOD             reduce using rule 35 (exp -> exp AND_OP exp .)
    L_OP            reduce using rule 35 (exp -> exp AND_OP exp .)
    G_OP            reduce using rule 35 (exp -> exp AND_OP exp .)
    LE_OP           reduce using rule 35 (exp -> exp AND_OP exp .)
    GE_OP           reduce using rule 35 (exp -> exp AND_OP exp .)
    NOTEQUALS       reduce using rule 35 (exp -> exp AND_OP exp .)
    EQUALS_OP       reduce using rule 35 (exp -> exp AND_OP exp .)
    OR_OP           reduce using rule 35 (exp -> exp AND_OP exp .)
    AND_OP          reduce using rule 35 (exp -> exp AND_OP exp .)
    SEMI_COLON      reduce using rule 35 (exp -> exp AND_OP exp .)
    COMMA           reduce using rule 35 (exp -> exp AND_OP exp .)
    MUL_ASSIGN      shift and go to state 60
    DIV_ASSIGN      shift and go to state 40
    MOD_ASSIGN      shift and go to state 56
    ADD_ASSIGN      shift and go to state 50
    SUB_ASSIGN      shift and go to state 55
    LEFT_ASSIGN     shift and go to state 61
    RIGHT_ASSIGN    shift and go to state 46
    AND_ASSIGN      shift and go to state 49
    XOR_ASSIGN      shift and go to state 57
    OR_ASSIGN       shift and go to state 58
    EQUALS          shift and go to state 51

  ! MUL_ASSIGN      [ reduce using rule 35 (exp -> exp AND_OP exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 35 (exp -> exp AND_OP exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 35 (exp -> exp AND_OP exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 35 (exp -> exp AND_OP exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 35 (exp -> exp AND_OP exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 35 (exp -> exp AND_OP exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 35 (exp -> exp AND_OP exp .) ]
  ! AND_ASSIGN      [ reduce using rule 35 (exp -> exp AND_OP exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 35 (exp -> exp AND_OP exp .) ]
  ! OR_ASSIGN       [ reduce using rule 35 (exp -> exp AND_OP exp .) ]
  ! EQUALS          [ reduce using rule 35 (exp -> exp AND_OP exp .) ]
  ! ADD             [ shift and go to state 53 ]
  ! MINUS           [ shift and go to state 43 ]
  ! MULT            [ shift and go to state 44 ]
  ! DIV             [ shift and go to state 42 ]
  ! MOD             [ shift and go to state 62 ]
  ! L_OP            [ shift and go to state 59 ]
  ! G_OP            [ shift and go to state 47 ]
  ! LE_OP           [ shift and go to state 45 ]
  ! GE_OP           [ shift and go to state 54 ]
  ! NOTEQUALS       [ shift and go to state 38 ]
  ! EQUALS_OP       [ shift and go to state 39 ]
  ! OR_OP           [ shift and go to state 48 ]
  ! AND_OP          [ shift and go to state 52 ]


state 87

    (23) exp -> exp ADD exp .
    (23) exp -> exp . ADD exp
    (24) exp -> exp . MINUS exp
    (25) exp -> exp . MULT exp
    (26) exp -> exp . DIV exp
    (27) exp -> exp . MOD exp
    (28) exp -> exp . L_OP exp
    (29) exp -> exp . G_OP exp
    (30) exp -> exp . LE_OP exp
    (31) exp -> exp . GE_OP exp
    (32) exp -> exp . NOTEQUALS exp
    (33) exp -> exp . EQUALS_OP exp
    (34) exp -> exp . OR_OP exp
    (35) exp -> exp . AND_OP exp
    (36) exp -> exp . MUL_ASSIGN exp
    (37) exp -> exp . DIV_ASSIGN exp
    (38) exp -> exp . MOD_ASSIGN exp
    (39) exp -> exp . ADD_ASSIGN exp
    (40) exp -> exp . SUB_ASSIGN exp
    (41) exp -> exp . LEFT_ASSIGN exp
    (42) exp -> exp . RIGHT_ASSIGN exp
    (43) exp -> exp . AND_ASSIGN exp
    (44) exp -> exp . XOR_ASSIGN exp
    (45) exp -> exp . OR_ASSIGN exp
    (46) exp -> exp . EQUALS exp

    RPAREN          reduce using rule 23 (exp -> exp ADD exp .)
    ADD             reduce using rule 23 (exp -> exp ADD exp .)
    MINUS           reduce using rule 23 (exp -> exp ADD exp .)
    SEMI_COLON      reduce using rule 23 (exp -> exp ADD exp .)
    COMMA           reduce using rule 23 (exp -> exp ADD exp .)
    MULT            shift and go to state 44
    DIV             shift and go to state 42
    MOD             shift and go to state 62
    L_OP            shift and go to state 59
    G_OP            shift and go to state 47
    LE_OP           shift and go to state 45
    GE_OP           shift and go to state 54
    NOTEQUALS       shift and go to state 38
    EQUALS_OP       shift and go to state 39
    OR_OP           shift and go to state 48
    AND_OP          shift and go to state 52
    MUL_ASSIGN      shift and go to state 60
    DIV_ASSIGN      shift and go to state 40
    MOD_ASSIGN      shift and go to state 56
    ADD_ASSIGN      shift and go to state 50
    SUB_ASSIGN      shift and go to state 55
    LEFT_ASSIGN     shift and go to state 61
    RIGHT_ASSIGN    shift and go to state 46
    AND_ASSIGN      shift and go to state 49
    XOR_ASSIGN      shift and go to state 57
    OR_ASSIGN       shift and go to state 58
    EQUALS          shift and go to state 51

  ! MULT            [ reduce using rule 23 (exp -> exp ADD exp .) ]
  ! DIV             [ reduce using rule 23 (exp -> exp ADD exp .) ]
  ! MOD             [ reduce using rule 23 (exp -> exp ADD exp .) ]
  ! L_OP            [ reduce using rule 23 (exp -> exp ADD exp .) ]
  ! G_OP            [ reduce using rule 23 (exp -> exp ADD exp .) ]
  ! LE_OP           [ reduce using rule 23 (exp -> exp ADD exp .) ]
  ! GE_OP           [ reduce using rule 23 (exp -> exp ADD exp .) ]
  ! NOTEQUALS       [ reduce using rule 23 (exp -> exp ADD exp .) ]
  ! EQUALS_OP       [ reduce using rule 23 (exp -> exp ADD exp .) ]
  ! OR_OP           [ reduce using rule 23 (exp -> exp ADD exp .) ]
  ! AND_OP          [ reduce using rule 23 (exp -> exp ADD exp .) ]
  ! MUL_ASSIGN      [ reduce using rule 23 (exp -> exp ADD exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 23 (exp -> exp ADD exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 23 (exp -> exp ADD exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 23 (exp -> exp ADD exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 23 (exp -> exp ADD exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 23 (exp -> exp ADD exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 23 (exp -> exp ADD exp .) ]
  ! AND_ASSIGN      [ reduce using rule 23 (exp -> exp ADD exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 23 (exp -> exp ADD exp .) ]
  ! OR_ASSIGN       [ reduce using rule 23 (exp -> exp ADD exp .) ]
  ! EQUALS          [ reduce using rule 23 (exp -> exp ADD exp .) ]
  ! ADD             [ shift and go to state 53 ]
  ! MINUS           [ shift and go to state 43 ]


state 88

    (31) exp -> exp GE_OP exp .
    (23) exp -> exp . ADD exp
    (24) exp -> exp . MINUS exp
    (25) exp -> exp . MULT exp
    (26) exp -> exp . DIV exp
    (27) exp -> exp . MOD exp
    (28) exp -> exp . L_OP exp
    (29) exp -> exp . G_OP exp
    (30) exp -> exp . LE_OP exp
    (31) exp -> exp . GE_OP exp
    (32) exp -> exp . NOTEQUALS exp
    (33) exp -> exp . EQUALS_OP exp
    (34) exp -> exp . OR_OP exp
    (35) exp -> exp . AND_OP exp
    (36) exp -> exp . MUL_ASSIGN exp
    (37) exp -> exp . DIV_ASSIGN exp
    (38) exp -> exp . MOD_ASSIGN exp
    (39) exp -> exp . ADD_ASSIGN exp
    (40) exp -> exp . SUB_ASSIGN exp
    (41) exp -> exp . LEFT_ASSIGN exp
    (42) exp -> exp . RIGHT_ASSIGN exp
    (43) exp -> exp . AND_ASSIGN exp
    (44) exp -> exp . XOR_ASSIGN exp
    (45) exp -> exp . OR_ASSIGN exp
    (46) exp -> exp . EQUALS exp

    RPAREN          reduce using rule 31 (exp -> exp GE_OP exp .)
    ADD             reduce using rule 31 (exp -> exp GE_OP exp .)
    MINUS           reduce using rule 31 (exp -> exp GE_OP exp .)
    MULT            reduce using rule 31 (exp -> exp GE_OP exp .)
    DIV             reduce using rule 31 (exp -> exp GE_OP exp .)
    MOD             reduce using rule 31 (exp -> exp GE_OP exp .)
    L_OP            reduce using rule 31 (exp -> exp GE_OP exp .)
    G_OP            reduce using rule 31 (exp -> exp GE_OP exp .)
    LE_OP           reduce using rule 31 (exp -> exp GE_OP exp .)
    GE_OP           reduce using rule 31 (exp -> exp GE_OP exp .)
    SEMI_COLON      reduce using rule 31 (exp -> exp GE_OP exp .)
    COMMA           reduce using rule 31 (exp -> exp GE_OP exp .)
    NOTEQUALS       shift and go to state 38
    EQUALS_OP       shift and go to state 39
    OR_OP           shift and go to state 48
    AND_OP          shift and go to state 52
    MUL_ASSIGN      shift and go to state 60
    DIV_ASSIGN      shift and go to state 40
    MOD_ASSIGN      shift and go to state 56
    ADD_ASSIGN      shift and go to state 50
    SUB_ASSIGN      shift and go to state 55
    LEFT_ASSIGN     shift and go to state 61
    RIGHT_ASSIGN    shift and go to state 46
    AND_ASSIGN      shift and go to state 49
    XOR_ASSIGN      shift and go to state 57
    OR_ASSIGN       shift and go to state 58
    EQUALS          shift and go to state 51

  ! NOTEQUALS       [ reduce using rule 31 (exp -> exp GE_OP exp .) ]
  ! EQUALS_OP       [ reduce using rule 31 (exp -> exp GE_OP exp .) ]
  ! OR_OP           [ reduce using rule 31 (exp -> exp GE_OP exp .) ]
  ! AND_OP          [ reduce using rule 31 (exp -> exp GE_OP exp .) ]
  ! MUL_ASSIGN      [ reduce using rule 31 (exp -> exp GE_OP exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 31 (exp -> exp GE_OP exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 31 (exp -> exp GE_OP exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 31 (exp -> exp GE_OP exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 31 (exp -> exp GE_OP exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 31 (exp -> exp GE_OP exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 31 (exp -> exp GE_OP exp .) ]
  ! AND_ASSIGN      [ reduce using rule 31 (exp -> exp GE_OP exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 31 (exp -> exp GE_OP exp .) ]
  ! OR_ASSIGN       [ reduce using rule 31 (exp -> exp GE_OP exp .) ]
  ! EQUALS          [ reduce using rule 31 (exp -> exp GE_OP exp .) ]
  ! ADD             [ shift and go to state 53 ]
  ! MINUS           [ shift and go to state 43 ]
  ! MULT            [ shift and go to state 44 ]
  ! DIV             [ shift and go to state 42 ]
  ! MOD             [ shift and go to state 62 ]
  ! L_OP            [ shift and go to state 59 ]
  ! G_OP            [ shift and go to state 47 ]
  ! LE_OP           [ shift and go to state 45 ]
  ! GE_OP           [ shift and go to state 54 ]


state 89

    (40) exp -> exp SUB_ASSIGN exp .
    (23) exp -> exp . ADD exp
    (24) exp -> exp . MINUS exp
    (25) exp -> exp . MULT exp
    (26) exp -> exp . DIV exp
    (27) exp -> exp . MOD exp
    (28) exp -> exp . L_OP exp
    (29) exp -> exp . G_OP exp
    (30) exp -> exp . LE_OP exp
    (31) exp -> exp . GE_OP exp
    (32) exp -> exp . NOTEQUALS exp
    (33) exp -> exp . EQUALS_OP exp
    (34) exp -> exp . OR_OP exp
    (35) exp -> exp . AND_OP exp
    (36) exp -> exp . MUL_ASSIGN exp
    (37) exp -> exp . DIV_ASSIGN exp
    (38) exp -> exp . MOD_ASSIGN exp
    (39) exp -> exp . ADD_ASSIGN exp
    (40) exp -> exp . SUB_ASSIGN exp
    (41) exp -> exp . LEFT_ASSIGN exp
    (42) exp -> exp . RIGHT_ASSIGN exp
    (43) exp -> exp . AND_ASSIGN exp
    (44) exp -> exp . XOR_ASSIGN exp
    (45) exp -> exp . OR_ASSIGN exp
    (46) exp -> exp . EQUALS exp

    RPAREN          reduce using rule 40 (exp -> exp SUB_ASSIGN exp .)
    ADD             reduce using rule 40 (exp -> exp SUB_ASSIGN exp .)
    MINUS           reduce using rule 40 (exp -> exp SUB_ASSIGN exp .)
    MULT            reduce using rule 40 (exp -> exp SUB_ASSIGN exp .)
    DIV             reduce using rule 40 (exp -> exp SUB_ASSIGN exp .)
    MOD             reduce using rule 40 (exp -> exp SUB_ASSIGN exp .)
    L_OP            reduce using rule 40 (exp -> exp SUB_ASSIGN exp .)
    G_OP            reduce using rule 40 (exp -> exp SUB_ASSIGN exp .)
    LE_OP           reduce using rule 40 (exp -> exp SUB_ASSIGN exp .)
    GE_OP           reduce using rule 40 (exp -> exp SUB_ASSIGN exp .)
    NOTEQUALS       reduce using rule 40 (exp -> exp SUB_ASSIGN exp .)
    EQUALS_OP       reduce using rule 40 (exp -> exp SUB_ASSIGN exp .)
    OR_OP           reduce using rule 40 (exp -> exp SUB_ASSIGN exp .)
    AND_OP          reduce using rule 40 (exp -> exp SUB_ASSIGN exp .)
    SEMI_COLON      reduce using rule 40 (exp -> exp SUB_ASSIGN exp .)
    COMMA           reduce using rule 40 (exp -> exp SUB_ASSIGN exp .)
    MUL_ASSIGN      shift and go to state 60
    DIV_ASSIGN      shift and go to state 40
    MOD_ASSIGN      shift and go to state 56
    ADD_ASSIGN      shift and go to state 50
    SUB_ASSIGN      shift and go to state 55
    LEFT_ASSIGN     shift and go to state 61
    RIGHT_ASSIGN    shift and go to state 46
    AND_ASSIGN      shift and go to state 49
    XOR_ASSIGN      shift and go to state 57
    OR_ASSIGN       shift and go to state 58
    EQUALS          shift and go to state 51

  ! MUL_ASSIGN      [ reduce using rule 40 (exp -> exp SUB_ASSIGN exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 40 (exp -> exp SUB_ASSIGN exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 40 (exp -> exp SUB_ASSIGN exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 40 (exp -> exp SUB_ASSIGN exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 40 (exp -> exp SUB_ASSIGN exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 40 (exp -> exp SUB_ASSIGN exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 40 (exp -> exp SUB_ASSIGN exp .) ]
  ! AND_ASSIGN      [ reduce using rule 40 (exp -> exp SUB_ASSIGN exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 40 (exp -> exp SUB_ASSIGN exp .) ]
  ! OR_ASSIGN       [ reduce using rule 40 (exp -> exp SUB_ASSIGN exp .) ]
  ! EQUALS          [ reduce using rule 40 (exp -> exp SUB_ASSIGN exp .) ]
  ! ADD             [ shift and go to state 53 ]
  ! MINUS           [ shift and go to state 43 ]
  ! MULT            [ shift and go to state 44 ]
  ! DIV             [ shift and go to state 42 ]
  ! MOD             [ shift and go to state 62 ]
  ! L_OP            [ shift and go to state 59 ]
  ! G_OP            [ shift and go to state 47 ]
  ! LE_OP           [ shift and go to state 45 ]
  ! GE_OP           [ shift and go to state 54 ]
  ! NOTEQUALS       [ shift and go to state 38 ]
  ! EQUALS_OP       [ shift and go to state 39 ]
  ! OR_OP           [ shift and go to state 48 ]
  ! AND_OP          [ shift and go to state 52 ]


state 90

    (38) exp -> exp MOD_ASSIGN exp .
    (23) exp -> exp . ADD exp
    (24) exp -> exp . MINUS exp
    (25) exp -> exp . MULT exp
    (26) exp -> exp . DIV exp
    (27) exp -> exp . MOD exp
    (28) exp -> exp . L_OP exp
    (29) exp -> exp . G_OP exp
    (30) exp -> exp . LE_OP exp
    (31) exp -> exp . GE_OP exp
    (32) exp -> exp . NOTEQUALS exp
    (33) exp -> exp . EQUALS_OP exp
    (34) exp -> exp . OR_OP exp
    (35) exp -> exp . AND_OP exp
    (36) exp -> exp . MUL_ASSIGN exp
    (37) exp -> exp . DIV_ASSIGN exp
    (38) exp -> exp . MOD_ASSIGN exp
    (39) exp -> exp . ADD_ASSIGN exp
    (40) exp -> exp . SUB_ASSIGN exp
    (41) exp -> exp . LEFT_ASSIGN exp
    (42) exp -> exp . RIGHT_ASSIGN exp
    (43) exp -> exp . AND_ASSIGN exp
    (44) exp -> exp . XOR_ASSIGN exp
    (45) exp -> exp . OR_ASSIGN exp
    (46) exp -> exp . EQUALS exp

    RPAREN          reduce using rule 38 (exp -> exp MOD_ASSIGN exp .)
    ADD             reduce using rule 38 (exp -> exp MOD_ASSIGN exp .)
    MINUS           reduce using rule 38 (exp -> exp MOD_ASSIGN exp .)
    MULT            reduce using rule 38 (exp -> exp MOD_ASSIGN exp .)
    DIV             reduce using rule 38 (exp -> exp MOD_ASSIGN exp .)
    MOD             reduce using rule 38 (exp -> exp MOD_ASSIGN exp .)
    L_OP            reduce using rule 38 (exp -> exp MOD_ASSIGN exp .)
    G_OP            reduce using rule 38 (exp -> exp MOD_ASSIGN exp .)
    LE_OP           reduce using rule 38 (exp -> exp MOD_ASSIGN exp .)
    GE_OP           reduce using rule 38 (exp -> exp MOD_ASSIGN exp .)
    NOTEQUALS       reduce using rule 38 (exp -> exp MOD_ASSIGN exp .)
    EQUALS_OP       reduce using rule 38 (exp -> exp MOD_ASSIGN exp .)
    OR_OP           reduce using rule 38 (exp -> exp MOD_ASSIGN exp .)
    AND_OP          reduce using rule 38 (exp -> exp MOD_ASSIGN exp .)
    SEMI_COLON      reduce using rule 38 (exp -> exp MOD_ASSIGN exp .)
    COMMA           reduce using rule 38 (exp -> exp MOD_ASSIGN exp .)
    MUL_ASSIGN      shift and go to state 60
    DIV_ASSIGN      shift and go to state 40
    MOD_ASSIGN      shift and go to state 56
    ADD_ASSIGN      shift and go to state 50
    SUB_ASSIGN      shift and go to state 55
    LEFT_ASSIGN     shift and go to state 61
    RIGHT_ASSIGN    shift and go to state 46
    AND_ASSIGN      shift and go to state 49
    XOR_ASSIGN      shift and go to state 57
    OR_ASSIGN       shift and go to state 58
    EQUALS          shift and go to state 51

  ! MUL_ASSIGN      [ reduce using rule 38 (exp -> exp MOD_ASSIGN exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 38 (exp -> exp MOD_ASSIGN exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 38 (exp -> exp MOD_ASSIGN exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 38 (exp -> exp MOD_ASSIGN exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 38 (exp -> exp MOD_ASSIGN exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 38 (exp -> exp MOD_ASSIGN exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 38 (exp -> exp MOD_ASSIGN exp .) ]
  ! AND_ASSIGN      [ reduce using rule 38 (exp -> exp MOD_ASSIGN exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 38 (exp -> exp MOD_ASSIGN exp .) ]
  ! OR_ASSIGN       [ reduce using rule 38 (exp -> exp MOD_ASSIGN exp .) ]
  ! EQUALS          [ reduce using rule 38 (exp -> exp MOD_ASSIGN exp .) ]
  ! ADD             [ shift and go to state 53 ]
  ! MINUS           [ shift and go to state 43 ]
  ! MULT            [ shift and go to state 44 ]
  ! DIV             [ shift and go to state 42 ]
  ! MOD             [ shift and go to state 62 ]
  ! L_OP            [ shift and go to state 59 ]
  ! G_OP            [ shift and go to state 47 ]
  ! LE_OP           [ shift and go to state 45 ]
  ! GE_OP           [ shift and go to state 54 ]
  ! NOTEQUALS       [ shift and go to state 38 ]
  ! EQUALS_OP       [ shift and go to state 39 ]
  ! OR_OP           [ shift and go to state 48 ]
  ! AND_OP          [ shift and go to state 52 ]


state 91

    (44) exp -> exp XOR_ASSIGN exp .
    (23) exp -> exp . ADD exp
    (24) exp -> exp . MINUS exp
    (25) exp -> exp . MULT exp
    (26) exp -> exp . DIV exp
    (27) exp -> exp . MOD exp
    (28) exp -> exp . L_OP exp
    (29) exp -> exp . G_OP exp
    (30) exp -> exp . LE_OP exp
    (31) exp -> exp . GE_OP exp
    (32) exp -> exp . NOTEQUALS exp
    (33) exp -> exp . EQUALS_OP exp
    (34) exp -> exp . OR_OP exp
    (35) exp -> exp . AND_OP exp
    (36) exp -> exp . MUL_ASSIGN exp
    (37) exp -> exp . DIV_ASSIGN exp
    (38) exp -> exp . MOD_ASSIGN exp
    (39) exp -> exp . ADD_ASSIGN exp
    (40) exp -> exp . SUB_ASSIGN exp
    (41) exp -> exp . LEFT_ASSIGN exp
    (42) exp -> exp . RIGHT_ASSIGN exp
    (43) exp -> exp . AND_ASSIGN exp
    (44) exp -> exp . XOR_ASSIGN exp
    (45) exp -> exp . OR_ASSIGN exp
    (46) exp -> exp . EQUALS exp

    RPAREN          reduce using rule 44 (exp -> exp XOR_ASSIGN exp .)
    ADD             reduce using rule 44 (exp -> exp XOR_ASSIGN exp .)
    MINUS           reduce using rule 44 (exp -> exp XOR_ASSIGN exp .)
    MULT            reduce using rule 44 (exp -> exp XOR_ASSIGN exp .)
    DIV             reduce using rule 44 (exp -> exp XOR_ASSIGN exp .)
    MOD             reduce using rule 44 (exp -> exp XOR_ASSIGN exp .)
    L_OP            reduce using rule 44 (exp -> exp XOR_ASSIGN exp .)
    G_OP            reduce using rule 44 (exp -> exp XOR_ASSIGN exp .)
    LE_OP           reduce using rule 44 (exp -> exp XOR_ASSIGN exp .)
    GE_OP           reduce using rule 44 (exp -> exp XOR_ASSIGN exp .)
    NOTEQUALS       reduce using rule 44 (exp -> exp XOR_ASSIGN exp .)
    EQUALS_OP       reduce using rule 44 (exp -> exp XOR_ASSIGN exp .)
    OR_OP           reduce using rule 44 (exp -> exp XOR_ASSIGN exp .)
    AND_OP          reduce using rule 44 (exp -> exp XOR_ASSIGN exp .)
    SEMI_COLON      reduce using rule 44 (exp -> exp XOR_ASSIGN exp .)
    COMMA           reduce using rule 44 (exp -> exp XOR_ASSIGN exp .)
    MUL_ASSIGN      shift and go to state 60
    DIV_ASSIGN      shift and go to state 40
    MOD_ASSIGN      shift and go to state 56
    ADD_ASSIGN      shift and go to state 50
    SUB_ASSIGN      shift and go to state 55
    LEFT_ASSIGN     shift and go to state 61
    RIGHT_ASSIGN    shift and go to state 46
    AND_ASSIGN      shift and go to state 49
    XOR_ASSIGN      shift and go to state 57
    OR_ASSIGN       shift and go to state 58
    EQUALS          shift and go to state 51

  ! MUL_ASSIGN      [ reduce using rule 44 (exp -> exp XOR_ASSIGN exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 44 (exp -> exp XOR_ASSIGN exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 44 (exp -> exp XOR_ASSIGN exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 44 (exp -> exp XOR_ASSIGN exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 44 (exp -> exp XOR_ASSIGN exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 44 (exp -> exp XOR_ASSIGN exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 44 (exp -> exp XOR_ASSIGN exp .) ]
  ! AND_ASSIGN      [ reduce using rule 44 (exp -> exp XOR_ASSIGN exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 44 (exp -> exp XOR_ASSIGN exp .) ]
  ! OR_ASSIGN       [ reduce using rule 44 (exp -> exp XOR_ASSIGN exp .) ]
  ! EQUALS          [ reduce using rule 44 (exp -> exp XOR_ASSIGN exp .) ]
  ! ADD             [ shift and go to state 53 ]
  ! MINUS           [ shift and go to state 43 ]
  ! MULT            [ shift and go to state 44 ]
  ! DIV             [ shift and go to state 42 ]
  ! MOD             [ shift and go to state 62 ]
  ! L_OP            [ shift and go to state 59 ]
  ! G_OP            [ shift and go to state 47 ]
  ! LE_OP           [ shift and go to state 45 ]
  ! GE_OP           [ shift and go to state 54 ]
  ! NOTEQUALS       [ shift and go to state 38 ]
  ! EQUALS_OP       [ shift and go to state 39 ]
  ! OR_OP           [ shift and go to state 48 ]
  ! AND_OP          [ shift and go to state 52 ]


state 92

    (45) exp -> exp OR_ASSIGN exp .
    (23) exp -> exp . ADD exp
    (24) exp -> exp . MINUS exp
    (25) exp -> exp . MULT exp
    (26) exp -> exp . DIV exp
    (27) exp -> exp . MOD exp
    (28) exp -> exp . L_OP exp
    (29) exp -> exp . G_OP exp
    (30) exp -> exp . LE_OP exp
    (31) exp -> exp . GE_OP exp
    (32) exp -> exp . NOTEQUALS exp
    (33) exp -> exp . EQUALS_OP exp
    (34) exp -> exp . OR_OP exp
    (35) exp -> exp . AND_OP exp
    (36) exp -> exp . MUL_ASSIGN exp
    (37) exp -> exp . DIV_ASSIGN exp
    (38) exp -> exp . MOD_ASSIGN exp
    (39) exp -> exp . ADD_ASSIGN exp
    (40) exp -> exp . SUB_ASSIGN exp
    (41) exp -> exp . LEFT_ASSIGN exp
    (42) exp -> exp . RIGHT_ASSIGN exp
    (43) exp -> exp . AND_ASSIGN exp
    (44) exp -> exp . XOR_ASSIGN exp
    (45) exp -> exp . OR_ASSIGN exp
    (46) exp -> exp . EQUALS exp

    RPAREN          reduce using rule 45 (exp -> exp OR_ASSIGN exp .)
    ADD             reduce using rule 45 (exp -> exp OR_ASSIGN exp .)
    MINUS           reduce using rule 45 (exp -> exp OR_ASSIGN exp .)
    MULT            reduce using rule 45 (exp -> exp OR_ASSIGN exp .)
    DIV             reduce using rule 45 (exp -> exp OR_ASSIGN exp .)
    MOD             reduce using rule 45 (exp -> exp OR_ASSIGN exp .)
    L_OP            reduce using rule 45 (exp -> exp OR_ASSIGN exp .)
    G_OP            reduce using rule 45 (exp -> exp OR_ASSIGN exp .)
    LE_OP           reduce using rule 45 (exp -> exp OR_ASSIGN exp .)
    GE_OP           reduce using rule 45 (exp -> exp OR_ASSIGN exp .)
    NOTEQUALS       reduce using rule 45 (exp -> exp OR_ASSIGN exp .)
    EQUALS_OP       reduce using rule 45 (exp -> exp OR_ASSIGN exp .)
    OR_OP           reduce using rule 45 (exp -> exp OR_ASSIGN exp .)
    AND_OP          reduce using rule 45 (exp -> exp OR_ASSIGN exp .)
    SEMI_COLON      reduce using rule 45 (exp -> exp OR_ASSIGN exp .)
    COMMA           reduce using rule 45 (exp -> exp OR_ASSIGN exp .)
    MUL_ASSIGN      shift and go to state 60
    DIV_ASSIGN      shift and go to state 40
    MOD_ASSIGN      shift and go to state 56
    ADD_ASSIGN      shift and go to state 50
    SUB_ASSIGN      shift and go to state 55
    LEFT_ASSIGN     shift and go to state 61
    RIGHT_ASSIGN    shift and go to state 46
    AND_ASSIGN      shift and go to state 49
    XOR_ASSIGN      shift and go to state 57
    OR_ASSIGN       shift and go to state 58
    EQUALS          shift and go to state 51

  ! MUL_ASSIGN      [ reduce using rule 45 (exp -> exp OR_ASSIGN exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 45 (exp -> exp OR_ASSIGN exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 45 (exp -> exp OR_ASSIGN exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 45 (exp -> exp OR_ASSIGN exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 45 (exp -> exp OR_ASSIGN exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 45 (exp -> exp OR_ASSIGN exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 45 (exp -> exp OR_ASSIGN exp .) ]
  ! AND_ASSIGN      [ reduce using rule 45 (exp -> exp OR_ASSIGN exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 45 (exp -> exp OR_ASSIGN exp .) ]
  ! OR_ASSIGN       [ reduce using rule 45 (exp -> exp OR_ASSIGN exp .) ]
  ! EQUALS          [ reduce using rule 45 (exp -> exp OR_ASSIGN exp .) ]
  ! ADD             [ shift and go to state 53 ]
  ! MINUS           [ shift and go to state 43 ]
  ! MULT            [ shift and go to state 44 ]
  ! DIV             [ shift and go to state 42 ]
  ! MOD             [ shift and go to state 62 ]
  ! L_OP            [ shift and go to state 59 ]
  ! G_OP            [ shift and go to state 47 ]
  ! LE_OP           [ shift and go to state 45 ]
  ! GE_OP           [ shift and go to state 54 ]
  ! NOTEQUALS       [ shift and go to state 38 ]
  ! EQUALS_OP       [ shift and go to state 39 ]
  ! OR_OP           [ shift and go to state 48 ]
  ! AND_OP          [ shift and go to state 52 ]


state 93

    (28) exp -> exp L_OP exp .
    (23) exp -> exp . ADD exp
    (24) exp -> exp . MINUS exp
    (25) exp -> exp . MULT exp
    (26) exp -> exp . DIV exp
    (27) exp -> exp . MOD exp
    (28) exp -> exp . L_OP exp
    (29) exp -> exp . G_OP exp
    (30) exp -> exp . LE_OP exp
    (31) exp -> exp . GE_OP exp
    (32) exp -> exp . NOTEQUALS exp
    (33) exp -> exp . EQUALS_OP exp
    (34) exp -> exp . OR_OP exp
    (35) exp -> exp . AND_OP exp
    (36) exp -> exp . MUL_ASSIGN exp
    (37) exp -> exp . DIV_ASSIGN exp
    (38) exp -> exp . MOD_ASSIGN exp
    (39) exp -> exp . ADD_ASSIGN exp
    (40) exp -> exp . SUB_ASSIGN exp
    (41) exp -> exp . LEFT_ASSIGN exp
    (42) exp -> exp . RIGHT_ASSIGN exp
    (43) exp -> exp . AND_ASSIGN exp
    (44) exp -> exp . XOR_ASSIGN exp
    (45) exp -> exp . OR_ASSIGN exp
    (46) exp -> exp . EQUALS exp

    RPAREN          reduce using rule 28 (exp -> exp L_OP exp .)
    ADD             reduce using rule 28 (exp -> exp L_OP exp .)
    MINUS           reduce using rule 28 (exp -> exp L_OP exp .)
    MULT            reduce using rule 28 (exp -> exp L_OP exp .)
    DIV             reduce using rule 28 (exp -> exp L_OP exp .)
    MOD             reduce using rule 28 (exp -> exp L_OP exp .)
    L_OP            reduce using rule 28 (exp -> exp L_OP exp .)
    G_OP            reduce using rule 28 (exp -> exp L_OP exp .)
    LE_OP           reduce using rule 28 (exp -> exp L_OP exp .)
    GE_OP           reduce using rule 28 (exp -> exp L_OP exp .)
    SEMI_COLON      reduce using rule 28 (exp -> exp L_OP exp .)
    COMMA           reduce using rule 28 (exp -> exp L_OP exp .)
    NOTEQUALS       shift and go to state 38
    EQUALS_OP       shift and go to state 39
    OR_OP           shift and go to state 48
    AND_OP          shift and go to state 52
    MUL_ASSIGN      shift and go to state 60
    DIV_ASSIGN      shift and go to state 40
    MOD_ASSIGN      shift and go to state 56
    ADD_ASSIGN      shift and go to state 50
    SUB_ASSIGN      shift and go to state 55
    LEFT_ASSIGN     shift and go to state 61
    RIGHT_ASSIGN    shift and go to state 46
    AND_ASSIGN      shift and go to state 49
    XOR_ASSIGN      shift and go to state 57
    OR_ASSIGN       shift and go to state 58
    EQUALS          shift and go to state 51

  ! NOTEQUALS       [ reduce using rule 28 (exp -> exp L_OP exp .) ]
  ! EQUALS_OP       [ reduce using rule 28 (exp -> exp L_OP exp .) ]
  ! OR_OP           [ reduce using rule 28 (exp -> exp L_OP exp .) ]
  ! AND_OP          [ reduce using rule 28 (exp -> exp L_OP exp .) ]
  ! MUL_ASSIGN      [ reduce using rule 28 (exp -> exp L_OP exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 28 (exp -> exp L_OP exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 28 (exp -> exp L_OP exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 28 (exp -> exp L_OP exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 28 (exp -> exp L_OP exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 28 (exp -> exp L_OP exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 28 (exp -> exp L_OP exp .) ]
  ! AND_ASSIGN      [ reduce using rule 28 (exp -> exp L_OP exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 28 (exp -> exp L_OP exp .) ]
  ! OR_ASSIGN       [ reduce using rule 28 (exp -> exp L_OP exp .) ]
  ! EQUALS          [ reduce using rule 28 (exp -> exp L_OP exp .) ]
  ! ADD             [ shift and go to state 53 ]
  ! MINUS           [ shift and go to state 43 ]
  ! MULT            [ shift and go to state 44 ]
  ! DIV             [ shift and go to state 42 ]
  ! MOD             [ shift and go to state 62 ]
  ! L_OP            [ shift and go to state 59 ]
  ! G_OP            [ shift and go to state 47 ]
  ! LE_OP           [ shift and go to state 45 ]
  ! GE_OP           [ shift and go to state 54 ]


state 94

    (36) exp -> exp MUL_ASSIGN exp .
    (23) exp -> exp . ADD exp
    (24) exp -> exp . MINUS exp
    (25) exp -> exp . MULT exp
    (26) exp -> exp . DIV exp
    (27) exp -> exp . MOD exp
    (28) exp -> exp . L_OP exp
    (29) exp -> exp . G_OP exp
    (30) exp -> exp . LE_OP exp
    (31) exp -> exp . GE_OP exp
    (32) exp -> exp . NOTEQUALS exp
    (33) exp -> exp . EQUALS_OP exp
    (34) exp -> exp . OR_OP exp
    (35) exp -> exp . AND_OP exp
    (36) exp -> exp . MUL_ASSIGN exp
    (37) exp -> exp . DIV_ASSIGN exp
    (38) exp -> exp . MOD_ASSIGN exp
    (39) exp -> exp . ADD_ASSIGN exp
    (40) exp -> exp . SUB_ASSIGN exp
    (41) exp -> exp . LEFT_ASSIGN exp
    (42) exp -> exp . RIGHT_ASSIGN exp
    (43) exp -> exp . AND_ASSIGN exp
    (44) exp -> exp . XOR_ASSIGN exp
    (45) exp -> exp . OR_ASSIGN exp
    (46) exp -> exp . EQUALS exp

    RPAREN          reduce using rule 36 (exp -> exp MUL_ASSIGN exp .)
    ADD             reduce using rule 36 (exp -> exp MUL_ASSIGN exp .)
    MINUS           reduce using rule 36 (exp -> exp MUL_ASSIGN exp .)
    MULT            reduce using rule 36 (exp -> exp MUL_ASSIGN exp .)
    DIV             reduce using rule 36 (exp -> exp MUL_ASSIGN exp .)
    MOD             reduce using rule 36 (exp -> exp MUL_ASSIGN exp .)
    L_OP            reduce using rule 36 (exp -> exp MUL_ASSIGN exp .)
    G_OP            reduce using rule 36 (exp -> exp MUL_ASSIGN exp .)
    LE_OP           reduce using rule 36 (exp -> exp MUL_ASSIGN exp .)
    GE_OP           reduce using rule 36 (exp -> exp MUL_ASSIGN exp .)
    NOTEQUALS       reduce using rule 36 (exp -> exp MUL_ASSIGN exp .)
    EQUALS_OP       reduce using rule 36 (exp -> exp MUL_ASSIGN exp .)
    OR_OP           reduce using rule 36 (exp -> exp MUL_ASSIGN exp .)
    AND_OP          reduce using rule 36 (exp -> exp MUL_ASSIGN exp .)
    SEMI_COLON      reduce using rule 36 (exp -> exp MUL_ASSIGN exp .)
    COMMA           reduce using rule 36 (exp -> exp MUL_ASSIGN exp .)
    MUL_ASSIGN      shift and go to state 60
    DIV_ASSIGN      shift and go to state 40
    MOD_ASSIGN      shift and go to state 56
    ADD_ASSIGN      shift and go to state 50
    SUB_ASSIGN      shift and go to state 55
    LEFT_ASSIGN     shift and go to state 61
    RIGHT_ASSIGN    shift and go to state 46
    AND_ASSIGN      shift and go to state 49
    XOR_ASSIGN      shift and go to state 57
    OR_ASSIGN       shift and go to state 58
    EQUALS          shift and go to state 51

  ! MUL_ASSIGN      [ reduce using rule 36 (exp -> exp MUL_ASSIGN exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 36 (exp -> exp MUL_ASSIGN exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 36 (exp -> exp MUL_ASSIGN exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 36 (exp -> exp MUL_ASSIGN exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 36 (exp -> exp MUL_ASSIGN exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 36 (exp -> exp MUL_ASSIGN exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 36 (exp -> exp MUL_ASSIGN exp .) ]
  ! AND_ASSIGN      [ reduce using rule 36 (exp -> exp MUL_ASSIGN exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 36 (exp -> exp MUL_ASSIGN exp .) ]
  ! OR_ASSIGN       [ reduce using rule 36 (exp -> exp MUL_ASSIGN exp .) ]
  ! EQUALS          [ reduce using rule 36 (exp -> exp MUL_ASSIGN exp .) ]
  ! ADD             [ shift and go to state 53 ]
  ! MINUS           [ shift and go to state 43 ]
  ! MULT            [ shift and go to state 44 ]
  ! DIV             [ shift and go to state 42 ]
  ! MOD             [ shift and go to state 62 ]
  ! L_OP            [ shift and go to state 59 ]
  ! G_OP            [ shift and go to state 47 ]
  ! LE_OP           [ shift and go to state 45 ]
  ! GE_OP           [ shift and go to state 54 ]
  ! NOTEQUALS       [ shift and go to state 38 ]
  ! EQUALS_OP       [ shift and go to state 39 ]
  ! OR_OP           [ shift and go to state 48 ]
  ! AND_OP          [ shift and go to state 52 ]


state 95

    (41) exp -> exp LEFT_ASSIGN exp .
    (23) exp -> exp . ADD exp
    (24) exp -> exp . MINUS exp
    (25) exp -> exp . MULT exp
    (26) exp -> exp . DIV exp
    (27) exp -> exp . MOD exp
    (28) exp -> exp . L_OP exp
    (29) exp -> exp . G_OP exp
    (30) exp -> exp . LE_OP exp
    (31) exp -> exp . GE_OP exp
    (32) exp -> exp . NOTEQUALS exp
    (33) exp -> exp . EQUALS_OP exp
    (34) exp -> exp . OR_OP exp
    (35) exp -> exp . AND_OP exp
    (36) exp -> exp . MUL_ASSIGN exp
    (37) exp -> exp . DIV_ASSIGN exp
    (38) exp -> exp . MOD_ASSIGN exp
    (39) exp -> exp . ADD_ASSIGN exp
    (40) exp -> exp . SUB_ASSIGN exp
    (41) exp -> exp . LEFT_ASSIGN exp
    (42) exp -> exp . RIGHT_ASSIGN exp
    (43) exp -> exp . AND_ASSIGN exp
    (44) exp -> exp . XOR_ASSIGN exp
    (45) exp -> exp . OR_ASSIGN exp
    (46) exp -> exp . EQUALS exp

    RPAREN          reduce using rule 41 (exp -> exp LEFT_ASSIGN exp .)
    ADD             reduce using rule 41 (exp -> exp LEFT_ASSIGN exp .)
    MINUS           reduce using rule 41 (exp -> exp LEFT_ASSIGN exp .)
    MULT            reduce using rule 41 (exp -> exp LEFT_ASSIGN exp .)
    DIV             reduce using rule 41 (exp -> exp LEFT_ASSIGN exp .)
    MOD             reduce using rule 41 (exp -> exp LEFT_ASSIGN exp .)
    L_OP            reduce using rule 41 (exp -> exp LEFT_ASSIGN exp .)
    G_OP            reduce using rule 41 (exp -> exp LEFT_ASSIGN exp .)
    LE_OP           reduce using rule 41 (exp -> exp LEFT_ASSIGN exp .)
    GE_OP           reduce using rule 41 (exp -> exp LEFT_ASSIGN exp .)
    NOTEQUALS       reduce using rule 41 (exp -> exp LEFT_ASSIGN exp .)
    EQUALS_OP       reduce using rule 41 (exp -> exp LEFT_ASSIGN exp .)
    OR_OP           reduce using rule 41 (exp -> exp LEFT_ASSIGN exp .)
    AND_OP          reduce using rule 41 (exp -> exp LEFT_ASSIGN exp .)
    SEMI_COLON      reduce using rule 41 (exp -> exp LEFT_ASSIGN exp .)
    COMMA           reduce using rule 41 (exp -> exp LEFT_ASSIGN exp .)
    MUL_ASSIGN      shift and go to state 60
    DIV_ASSIGN      shift and go to state 40
    MOD_ASSIGN      shift and go to state 56
    ADD_ASSIGN      shift and go to state 50
    SUB_ASSIGN      shift and go to state 55
    LEFT_ASSIGN     shift and go to state 61
    RIGHT_ASSIGN    shift and go to state 46
    AND_ASSIGN      shift and go to state 49
    XOR_ASSIGN      shift and go to state 57
    OR_ASSIGN       shift and go to state 58
    EQUALS          shift and go to state 51

  ! MUL_ASSIGN      [ reduce using rule 41 (exp -> exp LEFT_ASSIGN exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 41 (exp -> exp LEFT_ASSIGN exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 41 (exp -> exp LEFT_ASSIGN exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 41 (exp -> exp LEFT_ASSIGN exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 41 (exp -> exp LEFT_ASSIGN exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 41 (exp -> exp LEFT_ASSIGN exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 41 (exp -> exp LEFT_ASSIGN exp .) ]
  ! AND_ASSIGN      [ reduce using rule 41 (exp -> exp LEFT_ASSIGN exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 41 (exp -> exp LEFT_ASSIGN exp .) ]
  ! OR_ASSIGN       [ reduce using rule 41 (exp -> exp LEFT_ASSIGN exp .) ]
  ! EQUALS          [ reduce using rule 41 (exp -> exp LEFT_ASSIGN exp .) ]
  ! ADD             [ shift and go to state 53 ]
  ! MINUS           [ shift and go to state 43 ]
  ! MULT            [ shift and go to state 44 ]
  ! DIV             [ shift and go to state 42 ]
  ! MOD             [ shift and go to state 62 ]
  ! L_OP            [ shift and go to state 59 ]
  ! G_OP            [ shift and go to state 47 ]
  ! LE_OP           [ shift and go to state 45 ]
  ! GE_OP           [ shift and go to state 54 ]
  ! NOTEQUALS       [ shift and go to state 38 ]
  ! EQUALS_OP       [ shift and go to state 39 ]
  ! OR_OP           [ shift and go to state 48 ]
  ! AND_OP          [ shift and go to state 52 ]


state 96

    (27) exp -> exp MOD exp .
    (23) exp -> exp . ADD exp
    (24) exp -> exp . MINUS exp
    (25) exp -> exp . MULT exp
    (26) exp -> exp . DIV exp
    (27) exp -> exp . MOD exp
    (28) exp -> exp . L_OP exp
    (29) exp -> exp . G_OP exp
    (30) exp -> exp . LE_OP exp
    (31) exp -> exp . GE_OP exp
    (32) exp -> exp . NOTEQUALS exp
    (33) exp -> exp . EQUALS_OP exp
    (34) exp -> exp . OR_OP exp
    (35) exp -> exp . AND_OP exp
    (36) exp -> exp . MUL_ASSIGN exp
    (37) exp -> exp . DIV_ASSIGN exp
    (38) exp -> exp . MOD_ASSIGN exp
    (39) exp -> exp . ADD_ASSIGN exp
    (40) exp -> exp . SUB_ASSIGN exp
    (41) exp -> exp . LEFT_ASSIGN exp
    (42) exp -> exp . RIGHT_ASSIGN exp
    (43) exp -> exp . AND_ASSIGN exp
    (44) exp -> exp . XOR_ASSIGN exp
    (45) exp -> exp . OR_ASSIGN exp
    (46) exp -> exp . EQUALS exp

    RPAREN          reduce using rule 27 (exp -> exp MOD exp .)
    ADD             reduce using rule 27 (exp -> exp MOD exp .)
    MINUS           reduce using rule 27 (exp -> exp MOD exp .)
    MULT            reduce using rule 27 (exp -> exp MOD exp .)
    DIV             reduce using rule 27 (exp -> exp MOD exp .)
    MOD             reduce using rule 27 (exp -> exp MOD exp .)
    SEMI_COLON      reduce using rule 27 (exp -> exp MOD exp .)
    COMMA           reduce using rule 27 (exp -> exp MOD exp .)
    L_OP            shift and go to state 59
    G_OP            shift and go to state 47
    LE_OP           shift and go to state 45
    GE_OP           shift and go to state 54
    NOTEQUALS       shift and go to state 38
    EQUALS_OP       shift and go to state 39
    OR_OP           shift and go to state 48
    AND_OP          shift and go to state 52
    MUL_ASSIGN      shift and go to state 60
    DIV_ASSIGN      shift and go to state 40
    MOD_ASSIGN      shift and go to state 56
    ADD_ASSIGN      shift and go to state 50
    SUB_ASSIGN      shift and go to state 55
    LEFT_ASSIGN     shift and go to state 61
    RIGHT_ASSIGN    shift and go to state 46
    AND_ASSIGN      shift and go to state 49
    XOR_ASSIGN      shift and go to state 57
    OR_ASSIGN       shift and go to state 58
    EQUALS          shift and go to state 51

  ! L_OP            [ reduce using rule 27 (exp -> exp MOD exp .) ]
  ! G_OP            [ reduce using rule 27 (exp -> exp MOD exp .) ]
  ! LE_OP           [ reduce using rule 27 (exp -> exp MOD exp .) ]
  ! GE_OP           [ reduce using rule 27 (exp -> exp MOD exp .) ]
  ! NOTEQUALS       [ reduce using rule 27 (exp -> exp MOD exp .) ]
  ! EQUALS_OP       [ reduce using rule 27 (exp -> exp MOD exp .) ]
  ! OR_OP           [ reduce using rule 27 (exp -> exp MOD exp .) ]
  ! AND_OP          [ reduce using rule 27 (exp -> exp MOD exp .) ]
  ! MUL_ASSIGN      [ reduce using rule 27 (exp -> exp MOD exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 27 (exp -> exp MOD exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 27 (exp -> exp MOD exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 27 (exp -> exp MOD exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 27 (exp -> exp MOD exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 27 (exp -> exp MOD exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 27 (exp -> exp MOD exp .) ]
  ! AND_ASSIGN      [ reduce using rule 27 (exp -> exp MOD exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 27 (exp -> exp MOD exp .) ]
  ! OR_ASSIGN       [ reduce using rule 27 (exp -> exp MOD exp .) ]
  ! EQUALS          [ reduce using rule 27 (exp -> exp MOD exp .) ]
  ! ADD             [ shift and go to state 53 ]
  ! MINUS           [ shift and go to state 43 ]
  ! MULT            [ shift and go to state 44 ]
  ! DIV             [ shift and go to state 42 ]
  ! MOD             [ shift and go to state 62 ]


state 97

    (64) iterative_statement -> DO SEMI_COLON WHILE LPAREN . exp RPAREN SEMI_COLON
    (23) exp -> . exp ADD exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULT exp
    (26) exp -> . exp DIV exp
    (27) exp -> . exp MOD exp
    (28) exp -> . exp L_OP exp
    (29) exp -> . exp G_OP exp
    (30) exp -> . exp LE_OP exp
    (31) exp -> . exp GE_OP exp
    (32) exp -> . exp NOTEQUALS exp
    (33) exp -> . exp EQUALS_OP exp
    (34) exp -> . exp OR_OP exp
    (35) exp -> . exp AND_OP exp
    (36) exp -> . exp MUL_ASSIGN exp
    (37) exp -> . exp DIV_ASSIGN exp
    (38) exp -> . exp MOD_ASSIGN exp
    (39) exp -> . exp ADD_ASSIGN exp
    (40) exp -> . exp SUB_ASSIGN exp
    (41) exp -> . exp LEFT_ASSIGN exp
    (42) exp -> . exp RIGHT_ASSIGN exp
    (43) exp -> . exp AND_ASSIGN exp
    (44) exp -> . exp XOR_ASSIGN exp
    (45) exp -> . exp OR_ASSIGN exp
    (46) exp -> . exp EQUALS exp
    (47) exp -> . unary_expression
    (48) exp -> . constant
    (49) exp -> . VARIABLE
    (50) unary_expression -> . VARIABLE unary_operator
    (51) unary_expression -> . unary_operator VARIABLE
    (18) constant -> . HEX_INT
    (19) constant -> . DOT_REAL
    (20) constant -> . EXP_REAL
    (21) constant -> . DEC_INT
    (22) constant -> . CHARACTER
    (52) unary_operator -> . INCREMENT
    (53) unary_operator -> . DECREMENT

    VARIABLE        shift and go to state 19
    HEX_INT         shift and go to state 24
    DOT_REAL        shift and go to state 14
    EXP_REAL        shift and go to state 11
    DEC_INT         shift and go to state 12
    CHARACTER       shift and go to state 5
    INCREMENT       shift and go to state 10
    DECREMENT       shift and go to state 21

    constant                       shift and go to state 8
    unary_expression               shift and go to state 20
    exp                            shift and go to state 106
    unary_operator                 shift and go to state 16

state 98

    (62) iterative_statement -> DO statement WHILE LPAREN . exp RPAREN SEMI_COLON
    (23) exp -> . exp ADD exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULT exp
    (26) exp -> . exp DIV exp
    (27) exp -> . exp MOD exp
    (28) exp -> . exp L_OP exp
    (29) exp -> . exp G_OP exp
    (30) exp -> . exp LE_OP exp
    (31) exp -> . exp GE_OP exp
    (32) exp -> . exp NOTEQUALS exp
    (33) exp -> . exp EQUALS_OP exp
    (34) exp -> . exp OR_OP exp
    (35) exp -> . exp AND_OP exp
    (36) exp -> . exp MUL_ASSIGN exp
    (37) exp -> . exp DIV_ASSIGN exp
    (38) exp -> . exp MOD_ASSIGN exp
    (39) exp -> . exp ADD_ASSIGN exp
    (40) exp -> . exp SUB_ASSIGN exp
    (41) exp -> . exp LEFT_ASSIGN exp
    (42) exp -> . exp RIGHT_ASSIGN exp
    (43) exp -> . exp AND_ASSIGN exp
    (44) exp -> . exp XOR_ASSIGN exp
    (45) exp -> . exp OR_ASSIGN exp
    (46) exp -> . exp EQUALS exp
    (47) exp -> . unary_expression
    (48) exp -> . constant
    (49) exp -> . VARIABLE
    (50) unary_expression -> . VARIABLE unary_operator
    (51) unary_expression -> . unary_operator VARIABLE
    (18) constant -> . HEX_INT
    (19) constant -> . DOT_REAL
    (20) constant -> . EXP_REAL
    (21) constant -> . DEC_INT
    (22) constant -> . CHARACTER
    (52) unary_operator -> . INCREMENT
    (53) unary_operator -> . DECREMENT

    VARIABLE        shift and go to state 19
    HEX_INT         shift and go to state 24
    DOT_REAL        shift and go to state 14
    EXP_REAL        shift and go to state 11
    DEC_INT         shift and go to state 12
    CHARACTER       shift and go to state 5
    INCREMENT       shift and go to state 10
    DECREMENT       shift and go to state 21

    constant                       shift and go to state 8
    unary_expression               shift and go to state 20
    exp                            shift and go to state 107
    unary_operator                 shift and go to state 16

state 99

    (63) iterative_statement -> DO LBRACE statements RBRACE . WHILE LPAREN exp RPAREN SEMI_COLON

    WHILE           shift and go to state 108


state 100

    (65) iterative_statement -> DO LBRACE RBRACE WHILE . LPAREN exp RPAREN SEMI_COLON

    LPAREN          shift and go to state 109


state 101

    (58) iterative_statement -> WHILE LPAREN exp RPAREN . statement
    (59) iterative_statement -> WHILE LPAREN exp RPAREN . SEMI_COLON
    (60) iterative_statement -> WHILE LPAREN exp RPAREN . LBRACE statements RBRACE
    (61) iterative_statement -> WHILE LPAREN exp RPAREN . LBRACE RBRACE
    (3) statement -> . declaration
    (4) statement -> . exp SEMI_COLON
    (5) statement -> . iterative_statement
    (6) declaration -> . type enum_list SEMI_COLON
    (23) exp -> . exp ADD exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULT exp
    (26) exp -> . exp DIV exp
    (27) exp -> . exp MOD exp
    (28) exp -> . exp L_OP exp
    (29) exp -> . exp G_OP exp
    (30) exp -> . exp LE_OP exp
    (31) exp -> . exp GE_OP exp
    (32) exp -> . exp NOTEQUALS exp
    (33) exp -> . exp EQUALS_OP exp
    (34) exp -> . exp OR_OP exp
    (35) exp -> . exp AND_OP exp
    (36) exp -> . exp MUL_ASSIGN exp
    (37) exp -> . exp DIV_ASSIGN exp
    (38) exp -> . exp MOD_ASSIGN exp
    (39) exp -> . exp ADD_ASSIGN exp
    (40) exp -> . exp SUB_ASSIGN exp
    (41) exp -> . exp LEFT_ASSIGN exp
    (42) exp -> . exp RIGHT_ASSIGN exp
    (43) exp -> . exp AND_ASSIGN exp
    (44) exp -> . exp XOR_ASSIGN exp
    (45) exp -> . exp OR_ASSIGN exp
    (46) exp -> . exp EQUALS exp
    (47) exp -> . unary_expression
    (48) exp -> . constant
    (49) exp -> . VARIABLE
    (54) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (55) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE
    (56) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (57) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE
    (58) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (59) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (60) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE statements RBRACE
    (61) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (62) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (63) iterative_statement -> . DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (64) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (65) iterative_statement -> . DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (11) type -> . INT
    (12) type -> . FLOAT
    (13) type -> . CHAR
    (14) type -> . DOUBLE
    (15) type -> . VOID
    (16) type -> . SHORT
    (17) type -> . LONG
    (50) unary_expression -> . VARIABLE unary_operator
    (51) unary_expression -> . unary_operator VARIABLE
    (18) constant -> . HEX_INT
    (19) constant -> . DOT_REAL
    (20) constant -> . EXP_REAL
    (21) constant -> . DEC_INT
    (22) constant -> . CHARACTER
    (52) unary_operator -> . INCREMENT
    (53) unary_operator -> . DECREMENT

    SEMI_COLON      shift and go to state 110
    LBRACE          shift and go to state 112
    VARIABLE        shift and go to state 19
    FOR             shift and go to state 17
    WHILE           shift and go to state 7
    DO              shift and go to state 3
    INT             shift and go to state 22
    FLOAT           shift and go to state 25
    CHAR            shift and go to state 6
    DOUBLE          shift and go to state 23
    VOID            shift and go to state 4
    SHORT           shift and go to state 1
    LONG            shift and go to state 27
    HEX_INT         shift and go to state 24
    DOT_REAL        shift and go to state 14
    EXP_REAL        shift and go to state 11
    DEC_INT         shift and go to state 12
    CHARACTER       shift and go to state 5
    INCREMENT       shift and go to state 10
    DECREMENT       shift and go to state 21

    exp                            shift and go to state 26
    unary_expression               shift and go to state 20
    type                           shift and go to state 15
    statement                      shift and go to state 111
    declaration                    shift and go to state 18
    constant                       shift and go to state 8
    iterative_statement            shift and go to state 9
    unary_operator                 shift and go to state 16

state 102

    (7) enum_list -> VARIABLE COMMA enum_list .

    SEMI_COLON      reduce using rule 7 (enum_list -> VARIABLE COMMA enum_list .)


state 103

    (8) enum_list -> VARIABLE EQUALS exp . COMMA enum_list
    (10) enum_list -> VARIABLE EQUALS exp .
    (23) exp -> exp . ADD exp
    (24) exp -> exp . MINUS exp
    (25) exp -> exp . MULT exp
    (26) exp -> exp . DIV exp
    (27) exp -> exp . MOD exp
    (28) exp -> exp . L_OP exp
    (29) exp -> exp . G_OP exp
    (30) exp -> exp . LE_OP exp
    (31) exp -> exp . GE_OP exp
    (32) exp -> exp . NOTEQUALS exp
    (33) exp -> exp . EQUALS_OP exp
    (34) exp -> exp . OR_OP exp
    (35) exp -> exp . AND_OP exp
    (36) exp -> exp . MUL_ASSIGN exp
    (37) exp -> exp . DIV_ASSIGN exp
    (38) exp -> exp . MOD_ASSIGN exp
    (39) exp -> exp . ADD_ASSIGN exp
    (40) exp -> exp . SUB_ASSIGN exp
    (41) exp -> exp . LEFT_ASSIGN exp
    (42) exp -> exp . RIGHT_ASSIGN exp
    (43) exp -> exp . AND_ASSIGN exp
    (44) exp -> exp . XOR_ASSIGN exp
    (45) exp -> exp . OR_ASSIGN exp
    (46) exp -> exp . EQUALS exp

    COMMA           shift and go to state 113
    SEMI_COLON      reduce using rule 10 (enum_list -> VARIABLE EQUALS exp .)
    ADD             shift and go to state 53
    MINUS           shift and go to state 43
    MULT            shift and go to state 44
    DIV             shift and go to state 42
    MOD             shift and go to state 62
    L_OP            shift and go to state 59
    G_OP            shift and go to state 47
    LE_OP           shift and go to state 45
    GE_OP           shift and go to state 54
    NOTEQUALS       shift and go to state 38
    EQUALS_OP       shift and go to state 39
    OR_OP           shift and go to state 48
    AND_OP          shift and go to state 52
    MUL_ASSIGN      shift and go to state 60
    DIV_ASSIGN      shift and go to state 40
    MOD_ASSIGN      shift and go to state 56
    ADD_ASSIGN      shift and go to state 50
    SUB_ASSIGN      shift and go to state 55
    LEFT_ASSIGN     shift and go to state 61
    RIGHT_ASSIGN    shift and go to state 46
    AND_ASSIGN      shift and go to state 49
    XOR_ASSIGN      shift and go to state 57
    OR_ASSIGN       shift and go to state 58
    EQUALS          shift and go to state 51


state 104

    (54) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON . iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (55) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON . iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE
    (56) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON . iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (57) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON . iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE
    (66) iterative_exp -> . exp COMMA iterative_exp
    (67) iterative_exp -> . exp
    (23) exp -> . exp ADD exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULT exp
    (26) exp -> . exp DIV exp
    (27) exp -> . exp MOD exp
    (28) exp -> . exp L_OP exp
    (29) exp -> . exp G_OP exp
    (30) exp -> . exp LE_OP exp
    (31) exp -> . exp GE_OP exp
    (32) exp -> . exp NOTEQUALS exp
    (33) exp -> . exp EQUALS_OP exp
    (34) exp -> . exp OR_OP exp
    (35) exp -> . exp AND_OP exp
    (36) exp -> . exp MUL_ASSIGN exp
    (37) exp -> . exp DIV_ASSIGN exp
    (38) exp -> . exp MOD_ASSIGN exp
    (39) exp -> . exp ADD_ASSIGN exp
    (40) exp -> . exp SUB_ASSIGN exp
    (41) exp -> . exp LEFT_ASSIGN exp
    (42) exp -> . exp RIGHT_ASSIGN exp
    (43) exp -> . exp AND_ASSIGN exp
    (44) exp -> . exp XOR_ASSIGN exp
    (45) exp -> . exp OR_ASSIGN exp
    (46) exp -> . exp EQUALS exp
    (47) exp -> . unary_expression
    (48) exp -> . constant
    (49) exp -> . VARIABLE
    (50) unary_expression -> . VARIABLE unary_operator
    (51) unary_expression -> . unary_operator VARIABLE
    (18) constant -> . HEX_INT
    (19) constant -> . DOT_REAL
    (20) constant -> . EXP_REAL
    (21) constant -> . DEC_INT
    (22) constant -> . CHARACTER
    (52) unary_operator -> . INCREMENT
    (53) unary_operator -> . DECREMENT

    VARIABLE        shift and go to state 19
    HEX_INT         shift and go to state 24
    DOT_REAL        shift and go to state 14
    EXP_REAL        shift and go to state 11
    DEC_INT         shift and go to state 12
    CHARACTER       shift and go to state 5
    INCREMENT       shift and go to state 10
    DECREMENT       shift and go to state 21

    constant                       shift and go to state 8
    unary_expression               shift and go to state 20
    iterative_exp                  shift and go to state 114
    exp                            shift and go to state 72
    unary_operator                 shift and go to state 16

state 105

    (66) iterative_exp -> exp COMMA . iterative_exp
    (66) iterative_exp -> . exp COMMA iterative_exp
    (67) iterative_exp -> . exp
    (23) exp -> . exp ADD exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULT exp
    (26) exp -> . exp DIV exp
    (27) exp -> . exp MOD exp
    (28) exp -> . exp L_OP exp
    (29) exp -> . exp G_OP exp
    (30) exp -> . exp LE_OP exp
    (31) exp -> . exp GE_OP exp
    (32) exp -> . exp NOTEQUALS exp
    (33) exp -> . exp EQUALS_OP exp
    (34) exp -> . exp OR_OP exp
    (35) exp -> . exp AND_OP exp
    (36) exp -> . exp MUL_ASSIGN exp
    (37) exp -> . exp DIV_ASSIGN exp
    (38) exp -> . exp MOD_ASSIGN exp
    (39) exp -> . exp ADD_ASSIGN exp
    (40) exp -> . exp SUB_ASSIGN exp
    (41) exp -> . exp LEFT_ASSIGN exp
    (42) exp -> . exp RIGHT_ASSIGN exp
    (43) exp -> . exp AND_ASSIGN exp
    (44) exp -> . exp XOR_ASSIGN exp
    (45) exp -> . exp OR_ASSIGN exp
    (46) exp -> . exp EQUALS exp
    (47) exp -> . unary_expression
    (48) exp -> . constant
    (49) exp -> . VARIABLE
    (50) unary_expression -> . VARIABLE unary_operator
    (51) unary_expression -> . unary_operator VARIABLE
    (18) constant -> . HEX_INT
    (19) constant -> . DOT_REAL
    (20) constant -> . EXP_REAL
    (21) constant -> . DEC_INT
    (22) constant -> . CHARACTER
    (52) unary_operator -> . INCREMENT
    (53) unary_operator -> . DECREMENT

    VARIABLE        shift and go to state 19
    HEX_INT         shift and go to state 24
    DOT_REAL        shift and go to state 14
    EXP_REAL        shift and go to state 11
    DEC_INT         shift and go to state 12
    CHARACTER       shift and go to state 5
    INCREMENT       shift and go to state 10
    DECREMENT       shift and go to state 21

    iterative_exp                  shift and go to state 115
    constant                       shift and go to state 8
    unary_expression               shift and go to state 20
    exp                            shift and go to state 72
    unary_operator                 shift and go to state 16

state 106

    (64) iterative_statement -> DO SEMI_COLON WHILE LPAREN exp . RPAREN SEMI_COLON
    (23) exp -> exp . ADD exp
    (24) exp -> exp . MINUS exp
    (25) exp -> exp . MULT exp
    (26) exp -> exp . DIV exp
    (27) exp -> exp . MOD exp
    (28) exp -> exp . L_OP exp
    (29) exp -> exp . G_OP exp
    (30) exp -> exp . LE_OP exp
    (31) exp -> exp . GE_OP exp
    (32) exp -> exp . NOTEQUALS exp
    (33) exp -> exp . EQUALS_OP exp
    (34) exp -> exp . OR_OP exp
    (35) exp -> exp . AND_OP exp
    (36) exp -> exp . MUL_ASSIGN exp
    (37) exp -> exp . DIV_ASSIGN exp
    (38) exp -> exp . MOD_ASSIGN exp
    (39) exp -> exp . ADD_ASSIGN exp
    (40) exp -> exp . SUB_ASSIGN exp
    (41) exp -> exp . LEFT_ASSIGN exp
    (42) exp -> exp . RIGHT_ASSIGN exp
    (43) exp -> exp . AND_ASSIGN exp
    (44) exp -> exp . XOR_ASSIGN exp
    (45) exp -> exp . OR_ASSIGN exp
    (46) exp -> exp . EQUALS exp

    RPAREN          shift and go to state 116
    ADD             shift and go to state 53
    MINUS           shift and go to state 43
    MULT            shift and go to state 44
    DIV             shift and go to state 42
    MOD             shift and go to state 62
    L_OP            shift and go to state 59
    G_OP            shift and go to state 47
    LE_OP           shift and go to state 45
    GE_OP           shift and go to state 54
    NOTEQUALS       shift and go to state 38
    EQUALS_OP       shift and go to state 39
    OR_OP           shift and go to state 48
    AND_OP          shift and go to state 52
    MUL_ASSIGN      shift and go to state 60
    DIV_ASSIGN      shift and go to state 40
    MOD_ASSIGN      shift and go to state 56
    ADD_ASSIGN      shift and go to state 50
    SUB_ASSIGN      shift and go to state 55
    LEFT_ASSIGN     shift and go to state 61
    RIGHT_ASSIGN    shift and go to state 46
    AND_ASSIGN      shift and go to state 49
    XOR_ASSIGN      shift and go to state 57
    OR_ASSIGN       shift and go to state 58
    EQUALS          shift and go to state 51


state 107

    (62) iterative_statement -> DO statement WHILE LPAREN exp . RPAREN SEMI_COLON
    (23) exp -> exp . ADD exp
    (24) exp -> exp . MINUS exp
    (25) exp -> exp . MULT exp
    (26) exp -> exp . DIV exp
    (27) exp -> exp . MOD exp
    (28) exp -> exp . L_OP exp
    (29) exp -> exp . G_OP exp
    (30) exp -> exp . LE_OP exp
    (31) exp -> exp . GE_OP exp
    (32) exp -> exp . NOTEQUALS exp
    (33) exp -> exp . EQUALS_OP exp
    (34) exp -> exp . OR_OP exp
    (35) exp -> exp . AND_OP exp
    (36) exp -> exp . MUL_ASSIGN exp
    (37) exp -> exp . DIV_ASSIGN exp
    (38) exp -> exp . MOD_ASSIGN exp
    (39) exp -> exp . ADD_ASSIGN exp
    (40) exp -> exp . SUB_ASSIGN exp
    (41) exp -> exp . LEFT_ASSIGN exp
    (42) exp -> exp . RIGHT_ASSIGN exp
    (43) exp -> exp . AND_ASSIGN exp
    (44) exp -> exp . XOR_ASSIGN exp
    (45) exp -> exp . OR_ASSIGN exp
    (46) exp -> exp . EQUALS exp

    RPAREN          shift and go to state 117
    ADD             shift and go to state 53
    MINUS           shift and go to state 43
    MULT            shift and go to state 44
    DIV             shift and go to state 42
    MOD             shift and go to state 62
    L_OP            shift and go to state 59
    G_OP            shift and go to state 47
    LE_OP           shift and go to state 45
    GE_OP           shift and go to state 54
    NOTEQUALS       shift and go to state 38
    EQUALS_OP       shift and go to state 39
    OR_OP           shift and go to state 48
    AND_OP          shift and go to state 52
    MUL_ASSIGN      shift and go to state 60
    DIV_ASSIGN      shift and go to state 40
    MOD_ASSIGN      shift and go to state 56
    ADD_ASSIGN      shift and go to state 50
    SUB_ASSIGN      shift and go to state 55
    LEFT_ASSIGN     shift and go to state 61
    RIGHT_ASSIGN    shift and go to state 46
    AND_ASSIGN      shift and go to state 49
    XOR_ASSIGN      shift and go to state 57
    OR_ASSIGN       shift and go to state 58
    EQUALS          shift and go to state 51


state 108

    (63) iterative_statement -> DO LBRACE statements RBRACE WHILE . LPAREN exp RPAREN SEMI_COLON

    LPAREN          shift and go to state 118


state 109

    (65) iterative_statement -> DO LBRACE RBRACE WHILE LPAREN . exp RPAREN SEMI_COLON
    (23) exp -> . exp ADD exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULT exp
    (26) exp -> . exp DIV exp
    (27) exp -> . exp MOD exp
    (28) exp -> . exp L_OP exp
    (29) exp -> . exp G_OP exp
    (30) exp -> . exp LE_OP exp
    (31) exp -> . exp GE_OP exp
    (32) exp -> . exp NOTEQUALS exp
    (33) exp -> . exp EQUALS_OP exp
    (34) exp -> . exp OR_OP exp
    (35) exp -> . exp AND_OP exp
    (36) exp -> . exp MUL_ASSIGN exp
    (37) exp -> . exp DIV_ASSIGN exp
    (38) exp -> . exp MOD_ASSIGN exp
    (39) exp -> . exp ADD_ASSIGN exp
    (40) exp -> . exp SUB_ASSIGN exp
    (41) exp -> . exp LEFT_ASSIGN exp
    (42) exp -> . exp RIGHT_ASSIGN exp
    (43) exp -> . exp AND_ASSIGN exp
    (44) exp -> . exp XOR_ASSIGN exp
    (45) exp -> . exp OR_ASSIGN exp
    (46) exp -> . exp EQUALS exp
    (47) exp -> . unary_expression
    (48) exp -> . constant
    (49) exp -> . VARIABLE
    (50) unary_expression -> . VARIABLE unary_operator
    (51) unary_expression -> . unary_operator VARIABLE
    (18) constant -> . HEX_INT
    (19) constant -> . DOT_REAL
    (20) constant -> . EXP_REAL
    (21) constant -> . DEC_INT
    (22) constant -> . CHARACTER
    (52) unary_operator -> . INCREMENT
    (53) unary_operator -> . DECREMENT

    VARIABLE        shift and go to state 19
    HEX_INT         shift and go to state 24
    DOT_REAL        shift and go to state 14
    EXP_REAL        shift and go to state 11
    DEC_INT         shift and go to state 12
    CHARACTER       shift and go to state 5
    INCREMENT       shift and go to state 10
    DECREMENT       shift and go to state 21

    constant                       shift and go to state 8
    unary_expression               shift and go to state 20
    exp                            shift and go to state 119
    unary_operator                 shift and go to state 16

state 110

    (59) iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .

    WHILE           reduce using rule 59 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    RBRACE          reduce using rule 59 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    VARIABLE        reduce using rule 59 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    FOR             reduce using rule 59 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    DO              reduce using rule 59 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    INT             reduce using rule 59 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    FLOAT           reduce using rule 59 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    CHAR            reduce using rule 59 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    DOUBLE          reduce using rule 59 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    VOID            reduce using rule 59 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    SHORT           reduce using rule 59 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    LONG            reduce using rule 59 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    HEX_INT         reduce using rule 59 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    DOT_REAL        reduce using rule 59 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    EXP_REAL        reduce using rule 59 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    DEC_INT         reduce using rule 59 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    CHARACTER       reduce using rule 59 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    INCREMENT       reduce using rule 59 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    DECREMENT       reduce using rule 59 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    $end            reduce using rule 59 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)


state 111

    (58) iterative_statement -> WHILE LPAREN exp RPAREN statement .

    WHILE           reduce using rule 58 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    RBRACE          reduce using rule 58 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    VARIABLE        reduce using rule 58 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    FOR             reduce using rule 58 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    DO              reduce using rule 58 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    INT             reduce using rule 58 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    FLOAT           reduce using rule 58 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    CHAR            reduce using rule 58 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    DOUBLE          reduce using rule 58 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    VOID            reduce using rule 58 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    SHORT           reduce using rule 58 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    LONG            reduce using rule 58 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    HEX_INT         reduce using rule 58 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    DOT_REAL        reduce using rule 58 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    EXP_REAL        reduce using rule 58 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    DEC_INT         reduce using rule 58 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    CHARACTER       reduce using rule 58 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    INCREMENT       reduce using rule 58 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    DECREMENT       reduce using rule 58 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    $end            reduce using rule 58 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)


state 112

    (60) iterative_statement -> WHILE LPAREN exp RPAREN LBRACE . statements RBRACE
    (61) iterative_statement -> WHILE LPAREN exp RPAREN LBRACE . RBRACE
    (1) statements -> . statements statement
    (2) statements -> . statement
    (3) statement -> . declaration
    (4) statement -> . exp SEMI_COLON
    (5) statement -> . iterative_statement
    (6) declaration -> . type enum_list SEMI_COLON
    (23) exp -> . exp ADD exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULT exp
    (26) exp -> . exp DIV exp
    (27) exp -> . exp MOD exp
    (28) exp -> . exp L_OP exp
    (29) exp -> . exp G_OP exp
    (30) exp -> . exp LE_OP exp
    (31) exp -> . exp GE_OP exp
    (32) exp -> . exp NOTEQUALS exp
    (33) exp -> . exp EQUALS_OP exp
    (34) exp -> . exp OR_OP exp
    (35) exp -> . exp AND_OP exp
    (36) exp -> . exp MUL_ASSIGN exp
    (37) exp -> . exp DIV_ASSIGN exp
    (38) exp -> . exp MOD_ASSIGN exp
    (39) exp -> . exp ADD_ASSIGN exp
    (40) exp -> . exp SUB_ASSIGN exp
    (41) exp -> . exp LEFT_ASSIGN exp
    (42) exp -> . exp RIGHT_ASSIGN exp
    (43) exp -> . exp AND_ASSIGN exp
    (44) exp -> . exp XOR_ASSIGN exp
    (45) exp -> . exp OR_ASSIGN exp
    (46) exp -> . exp EQUALS exp
    (47) exp -> . unary_expression
    (48) exp -> . constant
    (49) exp -> . VARIABLE
    (54) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (55) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE
    (56) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (57) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE
    (58) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (59) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (60) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE statements RBRACE
    (61) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (62) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (63) iterative_statement -> . DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (64) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (65) iterative_statement -> . DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (11) type -> . INT
    (12) type -> . FLOAT
    (13) type -> . CHAR
    (14) type -> . DOUBLE
    (15) type -> . VOID
    (16) type -> . SHORT
    (17) type -> . LONG
    (50) unary_expression -> . VARIABLE unary_operator
    (51) unary_expression -> . unary_operator VARIABLE
    (18) constant -> . HEX_INT
    (19) constant -> . DOT_REAL
    (20) constant -> . EXP_REAL
    (21) constant -> . DEC_INT
    (22) constant -> . CHARACTER
    (52) unary_operator -> . INCREMENT
    (53) unary_operator -> . DECREMENT

    RBRACE          shift and go to state 121
    VARIABLE        shift and go to state 19
    FOR             shift and go to state 17
    WHILE           shift and go to state 7
    DO              shift and go to state 3
    INT             shift and go to state 22
    FLOAT           shift and go to state 25
    CHAR            shift and go to state 6
    DOUBLE          shift and go to state 23
    VOID            shift and go to state 4
    SHORT           shift and go to state 1
    LONG            shift and go to state 27
    HEX_INT         shift and go to state 24
    DOT_REAL        shift and go to state 14
    EXP_REAL        shift and go to state 11
    DEC_INT         shift and go to state 12
    CHARACTER       shift and go to state 5
    INCREMENT       shift and go to state 10
    DECREMENT       shift and go to state 21

    statements                     shift and go to state 120
    exp                            shift and go to state 26
    unary_expression               shift and go to state 20
    type                           shift and go to state 15
    statement                      shift and go to state 13
    declaration                    shift and go to state 18
    constant                       shift and go to state 8
    iterative_statement            shift and go to state 9
    unary_operator                 shift and go to state 16

state 113

    (8) enum_list -> VARIABLE EQUALS exp COMMA . enum_list
    (7) enum_list -> . VARIABLE COMMA enum_list
    (8) enum_list -> . VARIABLE EQUALS exp COMMA enum_list
    (9) enum_list -> . VARIABLE
    (10) enum_list -> . VARIABLE EQUALS exp

    VARIABLE        shift and go to state 34

    enum_list                      shift and go to state 122

state 114

    (54) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp . SEMI_COLON iterative_exp RPAREN statement
    (55) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp . SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE
    (56) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp . SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (57) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp . SEMI_COLON iterative_exp RPAREN LBRACE RBRACE

    SEMI_COLON      shift and go to state 123


state 115

    (66) iterative_exp -> exp COMMA iterative_exp .

    RPAREN          reduce using rule 66 (iterative_exp -> exp COMMA iterative_exp .)
    SEMI_COLON      reduce using rule 66 (iterative_exp -> exp COMMA iterative_exp .)


state 116

    (64) iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN . SEMI_COLON

    SEMI_COLON      shift and go to state 124


state 117

    (62) iterative_statement -> DO statement WHILE LPAREN exp RPAREN . SEMI_COLON

    SEMI_COLON      shift and go to state 125


state 118

    (63) iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN . exp RPAREN SEMI_COLON
    (23) exp -> . exp ADD exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULT exp
    (26) exp -> . exp DIV exp
    (27) exp -> . exp MOD exp
    (28) exp -> . exp L_OP exp
    (29) exp -> . exp G_OP exp
    (30) exp -> . exp LE_OP exp
    (31) exp -> . exp GE_OP exp
    (32) exp -> . exp NOTEQUALS exp
    (33) exp -> . exp EQUALS_OP exp
    (34) exp -> . exp OR_OP exp
    (35) exp -> . exp AND_OP exp
    (36) exp -> . exp MUL_ASSIGN exp
    (37) exp -> . exp DIV_ASSIGN exp
    (38) exp -> . exp MOD_ASSIGN exp
    (39) exp -> . exp ADD_ASSIGN exp
    (40) exp -> . exp SUB_ASSIGN exp
    (41) exp -> . exp LEFT_ASSIGN exp
    (42) exp -> . exp RIGHT_ASSIGN exp
    (43) exp -> . exp AND_ASSIGN exp
    (44) exp -> . exp XOR_ASSIGN exp
    (45) exp -> . exp OR_ASSIGN exp
    (46) exp -> . exp EQUALS exp
    (47) exp -> . unary_expression
    (48) exp -> . constant
    (49) exp -> . VARIABLE
    (50) unary_expression -> . VARIABLE unary_operator
    (51) unary_expression -> . unary_operator VARIABLE
    (18) constant -> . HEX_INT
    (19) constant -> . DOT_REAL
    (20) constant -> . EXP_REAL
    (21) constant -> . DEC_INT
    (22) constant -> . CHARACTER
    (52) unary_operator -> . INCREMENT
    (53) unary_operator -> . DECREMENT

    VARIABLE        shift and go to state 19
    HEX_INT         shift and go to state 24
    DOT_REAL        shift and go to state 14
    EXP_REAL        shift and go to state 11
    DEC_INT         shift and go to state 12
    CHARACTER       shift and go to state 5
    INCREMENT       shift and go to state 10
    DECREMENT       shift and go to state 21

    constant                       shift and go to state 8
    unary_expression               shift and go to state 20
    exp                            shift and go to state 126
    unary_operator                 shift and go to state 16

state 119

    (65) iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp . RPAREN SEMI_COLON
    (23) exp -> exp . ADD exp
    (24) exp -> exp . MINUS exp
    (25) exp -> exp . MULT exp
    (26) exp -> exp . DIV exp
    (27) exp -> exp . MOD exp
    (28) exp -> exp . L_OP exp
    (29) exp -> exp . G_OP exp
    (30) exp -> exp . LE_OP exp
    (31) exp -> exp . GE_OP exp
    (32) exp -> exp . NOTEQUALS exp
    (33) exp -> exp . EQUALS_OP exp
    (34) exp -> exp . OR_OP exp
    (35) exp -> exp . AND_OP exp
    (36) exp -> exp . MUL_ASSIGN exp
    (37) exp -> exp . DIV_ASSIGN exp
    (38) exp -> exp . MOD_ASSIGN exp
    (39) exp -> exp . ADD_ASSIGN exp
    (40) exp -> exp . SUB_ASSIGN exp
    (41) exp -> exp . LEFT_ASSIGN exp
    (42) exp -> exp . RIGHT_ASSIGN exp
    (43) exp -> exp . AND_ASSIGN exp
    (44) exp -> exp . XOR_ASSIGN exp
    (45) exp -> exp . OR_ASSIGN exp
    (46) exp -> exp . EQUALS exp

    RPAREN          shift and go to state 127
    ADD             shift and go to state 53
    MINUS           shift and go to state 43
    MULT            shift and go to state 44
    DIV             shift and go to state 42
    MOD             shift and go to state 62
    L_OP            shift and go to state 59
    G_OP            shift and go to state 47
    LE_OP           shift and go to state 45
    GE_OP           shift and go to state 54
    NOTEQUALS       shift and go to state 38
    EQUALS_OP       shift and go to state 39
    OR_OP           shift and go to state 48
    AND_OP          shift and go to state 52
    MUL_ASSIGN      shift and go to state 60
    DIV_ASSIGN      shift and go to state 40
    MOD_ASSIGN      shift and go to state 56
    ADD_ASSIGN      shift and go to state 50
    SUB_ASSIGN      shift and go to state 55
    LEFT_ASSIGN     shift and go to state 61
    RIGHT_ASSIGN    shift and go to state 46
    AND_ASSIGN      shift and go to state 49
    XOR_ASSIGN      shift and go to state 57
    OR_ASSIGN       shift and go to state 58
    EQUALS          shift and go to state 51


state 120

    (60) iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements . RBRACE
    (1) statements -> statements . statement
    (3) statement -> . declaration
    (4) statement -> . exp SEMI_COLON
    (5) statement -> . iterative_statement
    (6) declaration -> . type enum_list SEMI_COLON
    (23) exp -> . exp ADD exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULT exp
    (26) exp -> . exp DIV exp
    (27) exp -> . exp MOD exp
    (28) exp -> . exp L_OP exp
    (29) exp -> . exp G_OP exp
    (30) exp -> . exp LE_OP exp
    (31) exp -> . exp GE_OP exp
    (32) exp -> . exp NOTEQUALS exp
    (33) exp -> . exp EQUALS_OP exp
    (34) exp -> . exp OR_OP exp
    (35) exp -> . exp AND_OP exp
    (36) exp -> . exp MUL_ASSIGN exp
    (37) exp -> . exp DIV_ASSIGN exp
    (38) exp -> . exp MOD_ASSIGN exp
    (39) exp -> . exp ADD_ASSIGN exp
    (40) exp -> . exp SUB_ASSIGN exp
    (41) exp -> . exp LEFT_ASSIGN exp
    (42) exp -> . exp RIGHT_ASSIGN exp
    (43) exp -> . exp AND_ASSIGN exp
    (44) exp -> . exp XOR_ASSIGN exp
    (45) exp -> . exp OR_ASSIGN exp
    (46) exp -> . exp EQUALS exp
    (47) exp -> . unary_expression
    (48) exp -> . constant
    (49) exp -> . VARIABLE
    (54) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (55) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE
    (56) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (57) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE
    (58) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (59) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (60) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE statements RBRACE
    (61) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (62) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (63) iterative_statement -> . DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (64) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (65) iterative_statement -> . DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (11) type -> . INT
    (12) type -> . FLOAT
    (13) type -> . CHAR
    (14) type -> . DOUBLE
    (15) type -> . VOID
    (16) type -> . SHORT
    (17) type -> . LONG
    (50) unary_expression -> . VARIABLE unary_operator
    (51) unary_expression -> . unary_operator VARIABLE
    (18) constant -> . HEX_INT
    (19) constant -> . DOT_REAL
    (20) constant -> . EXP_REAL
    (21) constant -> . DEC_INT
    (22) constant -> . CHARACTER
    (52) unary_operator -> . INCREMENT
    (53) unary_operator -> . DECREMENT

    RBRACE          shift and go to state 128
    VARIABLE        shift and go to state 19
    FOR             shift and go to state 17
    WHILE           shift and go to state 7
    DO              shift and go to state 3
    INT             shift and go to state 22
    FLOAT           shift and go to state 25
    CHAR            shift and go to state 6
    DOUBLE          shift and go to state 23
    VOID            shift and go to state 4
    SHORT           shift and go to state 1
    LONG            shift and go to state 27
    HEX_INT         shift and go to state 24
    DOT_REAL        shift and go to state 14
    EXP_REAL        shift and go to state 11
    DEC_INT         shift and go to state 12
    CHARACTER       shift and go to state 5
    INCREMENT       shift and go to state 10
    DECREMENT       shift and go to state 21

    exp                            shift and go to state 26
    unary_expression               shift and go to state 20
    type                           shift and go to state 15
    statement                      shift and go to state 28
    declaration                    shift and go to state 18
    constant                       shift and go to state 8
    iterative_statement            shift and go to state 9
    unary_operator                 shift and go to state 16

state 121

    (61) iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE .

    WHILE           reduce using rule 61 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    RBRACE          reduce using rule 61 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    VARIABLE        reduce using rule 61 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    FOR             reduce using rule 61 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    DO              reduce using rule 61 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    INT             reduce using rule 61 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    FLOAT           reduce using rule 61 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    CHAR            reduce using rule 61 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    DOUBLE          reduce using rule 61 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    VOID            reduce using rule 61 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    SHORT           reduce using rule 61 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    LONG            reduce using rule 61 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    HEX_INT         reduce using rule 61 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    DOT_REAL        reduce using rule 61 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    EXP_REAL        reduce using rule 61 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    DEC_INT         reduce using rule 61 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    CHARACTER       reduce using rule 61 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    INCREMENT       reduce using rule 61 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    DECREMENT       reduce using rule 61 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    $end            reduce using rule 61 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)


state 122

    (8) enum_list -> VARIABLE EQUALS exp COMMA enum_list .

    SEMI_COLON      reduce using rule 8 (enum_list -> VARIABLE EQUALS exp COMMA enum_list .)


state 123

    (54) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON . iterative_exp RPAREN statement
    (55) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON . iterative_exp RPAREN LBRACE statements RBRACE
    (56) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON . iterative_exp RPAREN SEMI_COLON
    (57) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON . iterative_exp RPAREN LBRACE RBRACE
    (66) iterative_exp -> . exp COMMA iterative_exp
    (67) iterative_exp -> . exp
    (23) exp -> . exp ADD exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULT exp
    (26) exp -> . exp DIV exp
    (27) exp -> . exp MOD exp
    (28) exp -> . exp L_OP exp
    (29) exp -> . exp G_OP exp
    (30) exp -> . exp LE_OP exp
    (31) exp -> . exp GE_OP exp
    (32) exp -> . exp NOTEQUALS exp
    (33) exp -> . exp EQUALS_OP exp
    (34) exp -> . exp OR_OP exp
    (35) exp -> . exp AND_OP exp
    (36) exp -> . exp MUL_ASSIGN exp
    (37) exp -> . exp DIV_ASSIGN exp
    (38) exp -> . exp MOD_ASSIGN exp
    (39) exp -> . exp ADD_ASSIGN exp
    (40) exp -> . exp SUB_ASSIGN exp
    (41) exp -> . exp LEFT_ASSIGN exp
    (42) exp -> . exp RIGHT_ASSIGN exp
    (43) exp -> . exp AND_ASSIGN exp
    (44) exp -> . exp XOR_ASSIGN exp
    (45) exp -> . exp OR_ASSIGN exp
    (46) exp -> . exp EQUALS exp
    (47) exp -> . unary_expression
    (48) exp -> . constant
    (49) exp -> . VARIABLE
    (50) unary_expression -> . VARIABLE unary_operator
    (51) unary_expression -> . unary_operator VARIABLE
    (18) constant -> . HEX_INT
    (19) constant -> . DOT_REAL
    (20) constant -> . EXP_REAL
    (21) constant -> . DEC_INT
    (22) constant -> . CHARACTER
    (52) unary_operator -> . INCREMENT
    (53) unary_operator -> . DECREMENT

    VARIABLE        shift and go to state 19
    HEX_INT         shift and go to state 24
    DOT_REAL        shift and go to state 14
    EXP_REAL        shift and go to state 11
    DEC_INT         shift and go to state 12
    CHARACTER       shift and go to state 5
    INCREMENT       shift and go to state 10
    DECREMENT       shift and go to state 21

    constant                       shift and go to state 8
    unary_expression               shift and go to state 20
    iterative_exp                  shift and go to state 129
    exp                            shift and go to state 72
    unary_operator                 shift and go to state 16

state 124

    (64) iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .

    WHILE           reduce using rule 64 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    RBRACE          reduce using rule 64 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    VARIABLE        reduce using rule 64 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    FOR             reduce using rule 64 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    DO              reduce using rule 64 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    INT             reduce using rule 64 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    FLOAT           reduce using rule 64 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    CHAR            reduce using rule 64 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    DOUBLE          reduce using rule 64 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    VOID            reduce using rule 64 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    SHORT           reduce using rule 64 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    LONG            reduce using rule 64 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    HEX_INT         reduce using rule 64 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    DOT_REAL        reduce using rule 64 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    EXP_REAL        reduce using rule 64 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    DEC_INT         reduce using rule 64 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    CHARACTER       reduce using rule 64 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    INCREMENT       reduce using rule 64 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    DECREMENT       reduce using rule 64 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    $end            reduce using rule 64 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)


state 125

    (62) iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .

    WHILE           reduce using rule 62 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    RBRACE          reduce using rule 62 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    VARIABLE        reduce using rule 62 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    FOR             reduce using rule 62 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    DO              reduce using rule 62 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    INT             reduce using rule 62 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    FLOAT           reduce using rule 62 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    CHAR            reduce using rule 62 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    DOUBLE          reduce using rule 62 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    VOID            reduce using rule 62 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    SHORT           reduce using rule 62 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    LONG            reduce using rule 62 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    HEX_INT         reduce using rule 62 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    DOT_REAL        reduce using rule 62 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    EXP_REAL        reduce using rule 62 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    DEC_INT         reduce using rule 62 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    CHARACTER       reduce using rule 62 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    INCREMENT       reduce using rule 62 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    DECREMENT       reduce using rule 62 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    $end            reduce using rule 62 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)


state 126

    (63) iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp . RPAREN SEMI_COLON
    (23) exp -> exp . ADD exp
    (24) exp -> exp . MINUS exp
    (25) exp -> exp . MULT exp
    (26) exp -> exp . DIV exp
    (27) exp -> exp . MOD exp
    (28) exp -> exp . L_OP exp
    (29) exp -> exp . G_OP exp
    (30) exp -> exp . LE_OP exp
    (31) exp -> exp . GE_OP exp
    (32) exp -> exp . NOTEQUALS exp
    (33) exp -> exp . EQUALS_OP exp
    (34) exp -> exp . OR_OP exp
    (35) exp -> exp . AND_OP exp
    (36) exp -> exp . MUL_ASSIGN exp
    (37) exp -> exp . DIV_ASSIGN exp
    (38) exp -> exp . MOD_ASSIGN exp
    (39) exp -> exp . ADD_ASSIGN exp
    (40) exp -> exp . SUB_ASSIGN exp
    (41) exp -> exp . LEFT_ASSIGN exp
    (42) exp -> exp . RIGHT_ASSIGN exp
    (43) exp -> exp . AND_ASSIGN exp
    (44) exp -> exp . XOR_ASSIGN exp
    (45) exp -> exp . OR_ASSIGN exp
    (46) exp -> exp . EQUALS exp

    RPAREN          shift and go to state 130
    ADD             shift and go to state 53
    MINUS           shift and go to state 43
    MULT            shift and go to state 44
    DIV             shift and go to state 42
    MOD             shift and go to state 62
    L_OP            shift and go to state 59
    G_OP            shift and go to state 47
    LE_OP           shift and go to state 45
    GE_OP           shift and go to state 54
    NOTEQUALS       shift and go to state 38
    EQUALS_OP       shift and go to state 39
    OR_OP           shift and go to state 48
    AND_OP          shift and go to state 52
    MUL_ASSIGN      shift and go to state 60
    DIV_ASSIGN      shift and go to state 40
    MOD_ASSIGN      shift and go to state 56
    ADD_ASSIGN      shift and go to state 50
    SUB_ASSIGN      shift and go to state 55
    LEFT_ASSIGN     shift and go to state 61
    RIGHT_ASSIGN    shift and go to state 46
    AND_ASSIGN      shift and go to state 49
    XOR_ASSIGN      shift and go to state 57
    OR_ASSIGN       shift and go to state 58
    EQUALS          shift and go to state 51


state 127

    (65) iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN . SEMI_COLON

    SEMI_COLON      shift and go to state 131


state 128

    (60) iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE .

    WHILE           reduce using rule 60 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 60 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE .)
    VARIABLE        reduce using rule 60 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE .)
    FOR             reduce using rule 60 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE .)
    DO              reduce using rule 60 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE .)
    INT             reduce using rule 60 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE .)
    FLOAT           reduce using rule 60 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE .)
    CHAR            reduce using rule 60 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE .)
    DOUBLE          reduce using rule 60 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE .)
    VOID            reduce using rule 60 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE .)
    SHORT           reduce using rule 60 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE .)
    LONG            reduce using rule 60 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE .)
    HEX_INT         reduce using rule 60 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE .)
    DOT_REAL        reduce using rule 60 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE .)
    EXP_REAL        reduce using rule 60 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE .)
    DEC_INT         reduce using rule 60 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE .)
    CHARACTER       reduce using rule 60 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE .)
    INCREMENT       reduce using rule 60 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE .)
    DECREMENT       reduce using rule 60 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE .)
    $end            reduce using rule 60 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE .)


state 129

    (54) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp . RPAREN statement
    (55) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp . RPAREN LBRACE statements RBRACE
    (56) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp . RPAREN SEMI_COLON
    (57) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp . RPAREN LBRACE RBRACE

    RPAREN          shift and go to state 132


state 130

    (63) iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN . SEMI_COLON

    SEMI_COLON      shift and go to state 133


state 131

    (65) iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .

    WHILE           reduce using rule 65 (iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    RBRACE          reduce using rule 65 (iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    VARIABLE        reduce using rule 65 (iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    FOR             reduce using rule 65 (iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    DO              reduce using rule 65 (iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    INT             reduce using rule 65 (iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    FLOAT           reduce using rule 65 (iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    CHAR            reduce using rule 65 (iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    DOUBLE          reduce using rule 65 (iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    VOID            reduce using rule 65 (iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    SHORT           reduce using rule 65 (iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    LONG            reduce using rule 65 (iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    HEX_INT         reduce using rule 65 (iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    DOT_REAL        reduce using rule 65 (iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    EXP_REAL        reduce using rule 65 (iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    DEC_INT         reduce using rule 65 (iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    CHARACTER       reduce using rule 65 (iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    INCREMENT       reduce using rule 65 (iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    DECREMENT       reduce using rule 65 (iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    $end            reduce using rule 65 (iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)


state 132

    (54) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN . statement
    (55) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN . LBRACE statements RBRACE
    (56) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN . SEMI_COLON
    (57) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN . LBRACE RBRACE
    (3) statement -> . declaration
    (4) statement -> . exp SEMI_COLON
    (5) statement -> . iterative_statement
    (6) declaration -> . type enum_list SEMI_COLON
    (23) exp -> . exp ADD exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULT exp
    (26) exp -> . exp DIV exp
    (27) exp -> . exp MOD exp
    (28) exp -> . exp L_OP exp
    (29) exp -> . exp G_OP exp
    (30) exp -> . exp LE_OP exp
    (31) exp -> . exp GE_OP exp
    (32) exp -> . exp NOTEQUALS exp
    (33) exp -> . exp EQUALS_OP exp
    (34) exp -> . exp OR_OP exp
    (35) exp -> . exp AND_OP exp
    (36) exp -> . exp MUL_ASSIGN exp
    (37) exp -> . exp DIV_ASSIGN exp
    (38) exp -> . exp MOD_ASSIGN exp
    (39) exp -> . exp ADD_ASSIGN exp
    (40) exp -> . exp SUB_ASSIGN exp
    (41) exp -> . exp LEFT_ASSIGN exp
    (42) exp -> . exp RIGHT_ASSIGN exp
    (43) exp -> . exp AND_ASSIGN exp
    (44) exp -> . exp XOR_ASSIGN exp
    (45) exp -> . exp OR_ASSIGN exp
    (46) exp -> . exp EQUALS exp
    (47) exp -> . unary_expression
    (48) exp -> . constant
    (49) exp -> . VARIABLE
    (54) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (55) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE
    (56) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (57) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE
    (58) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (59) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (60) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE statements RBRACE
    (61) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (62) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (63) iterative_statement -> . DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (64) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (65) iterative_statement -> . DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (11) type -> . INT
    (12) type -> . FLOAT
    (13) type -> . CHAR
    (14) type -> . DOUBLE
    (15) type -> . VOID
    (16) type -> . SHORT
    (17) type -> . LONG
    (50) unary_expression -> . VARIABLE unary_operator
    (51) unary_expression -> . unary_operator VARIABLE
    (18) constant -> . HEX_INT
    (19) constant -> . DOT_REAL
    (20) constant -> . EXP_REAL
    (21) constant -> . DEC_INT
    (22) constant -> . CHARACTER
    (52) unary_operator -> . INCREMENT
    (53) unary_operator -> . DECREMENT

    LBRACE          shift and go to state 136
    SEMI_COLON      shift and go to state 134
    VARIABLE        shift and go to state 19
    FOR             shift and go to state 17
    WHILE           shift and go to state 7
    DO              shift and go to state 3
    INT             shift and go to state 22
    FLOAT           shift and go to state 25
    CHAR            shift and go to state 6
    DOUBLE          shift and go to state 23
    VOID            shift and go to state 4
    SHORT           shift and go to state 1
    LONG            shift and go to state 27
    HEX_INT         shift and go to state 24
    DOT_REAL        shift and go to state 14
    EXP_REAL        shift and go to state 11
    DEC_INT         shift and go to state 12
    CHARACTER       shift and go to state 5
    INCREMENT       shift and go to state 10
    DECREMENT       shift and go to state 21

    statement                      shift and go to state 135
    unary_expression               shift and go to state 20
    type                           shift and go to state 15
    exp                            shift and go to state 26
    declaration                    shift and go to state 18
    constant                       shift and go to state 8
    iterative_statement            shift and go to state 9
    unary_operator                 shift and go to state 16

state 133

    (63) iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .

    WHILE           reduce using rule 63 (iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    RBRACE          reduce using rule 63 (iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    VARIABLE        reduce using rule 63 (iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    FOR             reduce using rule 63 (iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    DO              reduce using rule 63 (iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    INT             reduce using rule 63 (iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    FLOAT           reduce using rule 63 (iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    CHAR            reduce using rule 63 (iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    DOUBLE          reduce using rule 63 (iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    VOID            reduce using rule 63 (iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    SHORT           reduce using rule 63 (iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    LONG            reduce using rule 63 (iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    HEX_INT         reduce using rule 63 (iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    DOT_REAL        reduce using rule 63 (iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    EXP_REAL        reduce using rule 63 (iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    DEC_INT         reduce using rule 63 (iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    CHARACTER       reduce using rule 63 (iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    INCREMENT       reduce using rule 63 (iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    DECREMENT       reduce using rule 63 (iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    $end            reduce using rule 63 (iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)


state 134

    (56) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .

    WHILE           reduce using rule 56 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    RBRACE          reduce using rule 56 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    VARIABLE        reduce using rule 56 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    FOR             reduce using rule 56 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    DO              reduce using rule 56 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    INT             reduce using rule 56 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    FLOAT           reduce using rule 56 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    CHAR            reduce using rule 56 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    DOUBLE          reduce using rule 56 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    VOID            reduce using rule 56 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    SHORT           reduce using rule 56 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    LONG            reduce using rule 56 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    HEX_INT         reduce using rule 56 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    DOT_REAL        reduce using rule 56 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    EXP_REAL        reduce using rule 56 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    DEC_INT         reduce using rule 56 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    CHARACTER       reduce using rule 56 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    INCREMENT       reduce using rule 56 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    DECREMENT       reduce using rule 56 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    $end            reduce using rule 56 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)


state 135

    (54) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .

    WHILE           reduce using rule 54 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    RBRACE          reduce using rule 54 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    VARIABLE        reduce using rule 54 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    FOR             reduce using rule 54 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    DO              reduce using rule 54 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    INT             reduce using rule 54 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    FLOAT           reduce using rule 54 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    CHAR            reduce using rule 54 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    DOUBLE          reduce using rule 54 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    VOID            reduce using rule 54 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    SHORT           reduce using rule 54 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    LONG            reduce using rule 54 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    HEX_INT         reduce using rule 54 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    DOT_REAL        reduce using rule 54 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    EXP_REAL        reduce using rule 54 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    DEC_INT         reduce using rule 54 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    CHARACTER       reduce using rule 54 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    INCREMENT       reduce using rule 54 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    DECREMENT       reduce using rule 54 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    $end            reduce using rule 54 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)


state 136

    (55) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE . statements RBRACE
    (57) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE . RBRACE
    (1) statements -> . statements statement
    (2) statements -> . statement
    (3) statement -> . declaration
    (4) statement -> . exp SEMI_COLON
    (5) statement -> . iterative_statement
    (6) declaration -> . type enum_list SEMI_COLON
    (23) exp -> . exp ADD exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULT exp
    (26) exp -> . exp DIV exp
    (27) exp -> . exp MOD exp
    (28) exp -> . exp L_OP exp
    (29) exp -> . exp G_OP exp
    (30) exp -> . exp LE_OP exp
    (31) exp -> . exp GE_OP exp
    (32) exp -> . exp NOTEQUALS exp
    (33) exp -> . exp EQUALS_OP exp
    (34) exp -> . exp OR_OP exp
    (35) exp -> . exp AND_OP exp
    (36) exp -> . exp MUL_ASSIGN exp
    (37) exp -> . exp DIV_ASSIGN exp
    (38) exp -> . exp MOD_ASSIGN exp
    (39) exp -> . exp ADD_ASSIGN exp
    (40) exp -> . exp SUB_ASSIGN exp
    (41) exp -> . exp LEFT_ASSIGN exp
    (42) exp -> . exp RIGHT_ASSIGN exp
    (43) exp -> . exp AND_ASSIGN exp
    (44) exp -> . exp XOR_ASSIGN exp
    (45) exp -> . exp OR_ASSIGN exp
    (46) exp -> . exp EQUALS exp
    (47) exp -> . unary_expression
    (48) exp -> . constant
    (49) exp -> . VARIABLE
    (54) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (55) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE
    (56) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (57) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE
    (58) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (59) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (60) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE statements RBRACE
    (61) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (62) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (63) iterative_statement -> . DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (64) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (65) iterative_statement -> . DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (11) type -> . INT
    (12) type -> . FLOAT
    (13) type -> . CHAR
    (14) type -> . DOUBLE
    (15) type -> . VOID
    (16) type -> . SHORT
    (17) type -> . LONG
    (50) unary_expression -> . VARIABLE unary_operator
    (51) unary_expression -> . unary_operator VARIABLE
    (18) constant -> . HEX_INT
    (19) constant -> . DOT_REAL
    (20) constant -> . EXP_REAL
    (21) constant -> . DEC_INT
    (22) constant -> . CHARACTER
    (52) unary_operator -> . INCREMENT
    (53) unary_operator -> . DECREMENT

    RBRACE          shift and go to state 138
    VARIABLE        shift and go to state 19
    FOR             shift and go to state 17
    WHILE           shift and go to state 7
    DO              shift and go to state 3
    INT             shift and go to state 22
    FLOAT           shift and go to state 25
    CHAR            shift and go to state 6
    DOUBLE          shift and go to state 23
    VOID            shift and go to state 4
    SHORT           shift and go to state 1
    LONG            shift and go to state 27
    HEX_INT         shift and go to state 24
    DOT_REAL        shift and go to state 14
    EXP_REAL        shift and go to state 11
    DEC_INT         shift and go to state 12
    CHARACTER       shift and go to state 5
    INCREMENT       shift and go to state 10
    DECREMENT       shift and go to state 21

    statements                     shift and go to state 137
    statement                      shift and go to state 13
    unary_expression               shift and go to state 20
    type                           shift and go to state 15
    exp                            shift and go to state 26
    declaration                    shift and go to state 18
    constant                       shift and go to state 8
    iterative_statement            shift and go to state 9
    unary_operator                 shift and go to state 16

state 137

    (55) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements . RBRACE
    (1) statements -> statements . statement
    (3) statement -> . declaration
    (4) statement -> . exp SEMI_COLON
    (5) statement -> . iterative_statement
    (6) declaration -> . type enum_list SEMI_COLON
    (23) exp -> . exp ADD exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULT exp
    (26) exp -> . exp DIV exp
    (27) exp -> . exp MOD exp
    (28) exp -> . exp L_OP exp
    (29) exp -> . exp G_OP exp
    (30) exp -> . exp LE_OP exp
    (31) exp -> . exp GE_OP exp
    (32) exp -> . exp NOTEQUALS exp
    (33) exp -> . exp EQUALS_OP exp
    (34) exp -> . exp OR_OP exp
    (35) exp -> . exp AND_OP exp
    (36) exp -> . exp MUL_ASSIGN exp
    (37) exp -> . exp DIV_ASSIGN exp
    (38) exp -> . exp MOD_ASSIGN exp
    (39) exp -> . exp ADD_ASSIGN exp
    (40) exp -> . exp SUB_ASSIGN exp
    (41) exp -> . exp LEFT_ASSIGN exp
    (42) exp -> . exp RIGHT_ASSIGN exp
    (43) exp -> . exp AND_ASSIGN exp
    (44) exp -> . exp XOR_ASSIGN exp
    (45) exp -> . exp OR_ASSIGN exp
    (46) exp -> . exp EQUALS exp
    (47) exp -> . unary_expression
    (48) exp -> . constant
    (49) exp -> . VARIABLE
    (54) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (55) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE
    (56) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (57) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE
    (58) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (59) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (60) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE statements RBRACE
    (61) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (62) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (63) iterative_statement -> . DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (64) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (65) iterative_statement -> . DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (11) type -> . INT
    (12) type -> . FLOAT
    (13) type -> . CHAR
    (14) type -> . DOUBLE
    (15) type -> . VOID
    (16) type -> . SHORT
    (17) type -> . LONG
    (50) unary_expression -> . VARIABLE unary_operator
    (51) unary_expression -> . unary_operator VARIABLE
    (18) constant -> . HEX_INT
    (19) constant -> . DOT_REAL
    (20) constant -> . EXP_REAL
    (21) constant -> . DEC_INT
    (22) constant -> . CHARACTER
    (52) unary_operator -> . INCREMENT
    (53) unary_operator -> . DECREMENT

    RBRACE          shift and go to state 139
    VARIABLE        shift and go to state 19
    FOR             shift and go to state 17
    WHILE           shift and go to state 7
    DO              shift and go to state 3
    INT             shift and go to state 22
    FLOAT           shift and go to state 25
    CHAR            shift and go to state 6
    DOUBLE          shift and go to state 23
    VOID            shift and go to state 4
    SHORT           shift and go to state 1
    LONG            shift and go to state 27
    HEX_INT         shift and go to state 24
    DOT_REAL        shift and go to state 14
    EXP_REAL        shift and go to state 11
    DEC_INT         shift and go to state 12
    CHARACTER       shift and go to state 5
    INCREMENT       shift and go to state 10
    DECREMENT       shift and go to state 21

    statement                      shift and go to state 28
    unary_expression               shift and go to state 20
    type                           shift and go to state 15
    exp                            shift and go to state 26
    declaration                    shift and go to state 18
    constant                       shift and go to state 8
    iterative_statement            shift and go to state 9
    unary_operator                 shift and go to state 16

state 138

    (57) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE .

    WHILE           reduce using rule 57 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE .)
    RBRACE          reduce using rule 57 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE .)
    VARIABLE        reduce using rule 57 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE .)
    FOR             reduce using rule 57 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE .)
    DO              reduce using rule 57 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE .)
    INT             reduce using rule 57 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE .)
    FLOAT           reduce using rule 57 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE .)
    CHAR            reduce using rule 57 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE .)
    DOUBLE          reduce using rule 57 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE .)
    VOID            reduce using rule 57 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE .)
    SHORT           reduce using rule 57 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE .)
    LONG            reduce using rule 57 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE .)
    HEX_INT         reduce using rule 57 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE .)
    DOT_REAL        reduce using rule 57 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE .)
    EXP_REAL        reduce using rule 57 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE .)
    DEC_INT         reduce using rule 57 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE .)
    CHARACTER       reduce using rule 57 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE .)
    INCREMENT       reduce using rule 57 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE .)
    DECREMENT       reduce using rule 57 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE .)
    $end            reduce using rule 57 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE .)


state 139

    (55) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE .

    WHILE           reduce using rule 55 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 55 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE .)
    VARIABLE        reduce using rule 55 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE .)
    FOR             reduce using rule 55 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE .)
    DO              reduce using rule 55 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE .)
    INT             reduce using rule 55 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE .)
    FLOAT           reduce using rule 55 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE .)
    CHAR            reduce using rule 55 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE .)
    DOUBLE          reduce using rule 55 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE .)
    VOID            reduce using rule 55 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE .)
    SHORT           reduce using rule 55 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE .)
    LONG            reduce using rule 55 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE .)
    HEX_INT         reduce using rule 55 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE .)
    DOT_REAL        reduce using rule 55 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE .)
    EXP_REAL        reduce using rule 55 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE .)
    DEC_INT         reduce using rule 55 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE .)
    CHARACTER       reduce using rule 55 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE .)
    INCREMENT       reduce using rule 55 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE .)
    DECREMENT       reduce using rule 55 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE .)
    $end            reduce using rule 55 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE .)

