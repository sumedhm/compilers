Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    RIGHT_OP
    DEFAULT
    LEFT_OP
    COLON
    TRUE
    NEWLINE
    CASE
    TILDA
    DOT
    DEFINE
    HASH
    SIZEOF
    SINGLE_QUOTES
    ANDI
    INCLUDE
    AND
    CONDOP
    DOUBLE_QUOTES
    NOT
    SWITCH
    OR

Grammar

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     statements -> statements statement
Rule 3     statements -> statement
Rule 4     statement -> declaration
Rule 5     statement -> exp SEMI_COLON
Rule 6     statement -> iterative_statement
Rule 7     statement -> function
Rule 8     statement -> constant_statement
Rule 9     statement -> conditional_statement
Rule 10    statement -> COMMENT
Rule 11    constant_statement -> BREAK SEMI_COLON
Rule 12    constant_statement -> CONTINUE SEMI_COLON
Rule 13    constant_statement -> RETURN SEMI_COLON
Rule 14    constant_statement -> RETURN exp SEMI_COLON
Rule 15    declaration -> type enum_list SEMI_COLON
Rule 16    enum_list -> VARIABLE COMMA enum_list
Rule 17    enum_list -> VARIABLE EQUALS exp COMMA enum_list
Rule 18    enum_list -> VARIABLE
Rule 19    enum_list -> VARIABLE EQUALS exp
Rule 20    enum_list -> VARIABLE LBIG exp RBIG COMMA enum_list
Rule 21    enum_list -> VARIABLE LBIG exp RBIG EQUALS LBRACE num_list RBRACE COMMA enum_list
Rule 22    enum_list -> VARIABLE LBIG exp RBIG
Rule 23    enum_list -> VARIABLE LBIG exp RBIG EQUALS LBRACE num_list RBRACE
Rule 24    num_list -> exp COMMA num_list
Rule 25    num_list -> exp
Rule 26    type -> INT
Rule 27    type -> FLOAT
Rule 28    type -> CHAR
Rule 29    type -> DOUBLE
Rule 30    type -> VOID
Rule 31    type -> SHORT
Rule 32    type -> LONG
Rule 33    constant -> HEX_INT
Rule 34    constant -> DOT_REAL
Rule 35    constant -> EXP_REAL
Rule 36    constant -> DEC_INT
Rule 37    constant -> CHARACTER
Rule 38    exp -> exp ADD exp
Rule 39    exp -> exp MINUS exp
Rule 40    exp -> exp MULT exp
Rule 41    exp -> exp DIV exp
Rule 42    exp -> exp MOD exp
Rule 43    exp -> exp L_OP exp
Rule 44    exp -> exp G_OP exp
Rule 45    exp -> exp LE_OP exp
Rule 46    exp -> exp GE_OP exp
Rule 47    exp -> exp NOTEQUALS exp
Rule 48    exp -> exp EQUALS_OP exp
Rule 49    exp -> exp OR_OP exp
Rule 50    exp -> exp AND_OP exp
Rule 51    exp -> exp MUL_ASSIGN exp
Rule 52    exp -> exp DIV_ASSIGN exp
Rule 53    exp -> exp MOD_ASSIGN exp
Rule 54    exp -> exp ADD_ASSIGN exp
Rule 55    exp -> exp SUB_ASSIGN exp
Rule 56    exp -> exp LEFT_ASSIGN exp
Rule 57    exp -> exp RIGHT_ASSIGN exp
Rule 58    exp -> exp AND_ASSIGN exp
Rule 59    exp -> exp XOR_ASSIGN exp
Rule 60    exp -> exp OR_ASSIGN exp
Rule 61    exp -> exp EQUALS exp
Rule 62    exp -> unary_expression
Rule 63    exp -> LPAREN exp RPAREN
Rule 64    exp -> constant
Rule 65    exp -> VARIABLE
Rule 66    exp -> VARIABLE LBIG exp RBIG
Rule 67    exp -> function_call
Rule 68    unary_expression -> VARIABLE unary_operator
Rule 69    unary_expression -> unary_operator VARIABLE
Rule 70    unary_expression -> VARIABLE LBIG exp RBIG unary_operator
Rule 71    unary_expression -> unary_operator VARIABLE LBIG exp RBIG
Rule 72    unary_operator -> INCREMENT
Rule 73    unary_operator -> DECREMENT
Rule 74    iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
Rule 75    iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace statements rbrace
Rule 76    iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
Rule 77    iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace rbrace
Rule 78    iterative_statement -> WHILE LPAREN exp RPAREN statement
Rule 79    iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON
Rule 80    iterative_statement -> WHILE LPAREN exp RPAREN lbrace statements rbrace
Rule 81    iterative_statement -> WHILE LPAREN exp RPAREN lbrace rbrace
Rule 82    iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON
Rule 83    iterative_statement -> DO lbrace statements rbrace WHILE LPAREN exp RPAREN SEMI_COLON
Rule 84    iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
Rule 85    iterative_statement -> DO lbrace rbrace WHILE LPAREN exp RPAREN SEMI_COLON
Rule 86    iterative_exp -> exp COMMA iterative_exp
Rule 87    iterative_exp -> exp
Rule 88    conditional_statement -> IF LPAREN exp RPAREN statement
Rule 89    conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace
Rule 90    conditional_statement -> IF LPAREN exp RPAREN statement ELSE statement
Rule 91    conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace ELSE statement
Rule 92    conditional_statement -> IF LPAREN exp RPAREN statement ELSE lbrace statements rbrace
Rule 93    conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace ELSE lbrace statements rbrace
Rule 94    function -> normal_function
Rule 95    function -> main_function
Rule 96    main_function -> type MAIN LPAREN parameters RPAREN lbrace statements rbrace
Rule 97    main_function -> type MAIN LPAREN parameters RPAREN lbrace rbrace
Rule 98    main_function -> MAIN LPAREN parameters RPAREN lbrace statements rbrace
Rule 99    main_function -> MAIN LPAREN parameters RPAREN lbrace rbrace
Rule 100   main_function -> type MAIN LPAREN RPAREN lbrace statements rbrace
Rule 101   main_function -> type MAIN LPAREN RPAREN lbrace rbrace
Rule 102   main_function -> MAIN LPAREN RPAREN lbrace statements rbrace
Rule 103   main_function -> MAIN LPAREN RPAREN lbrace rbrace
Rule 104   normal_function -> type VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
Rule 105   normal_function -> type VARIABLE LPAREN parameters RPAREN lbrace rbrace
Rule 106   normal_function -> VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
Rule 107   normal_function -> VARIABLE LPAREN parameters RPAREN lbrace rbrace
Rule 108   normal_function -> type VARIABLE LPAREN RPAREN lbrace statements rbrace
Rule 109   normal_function -> type VARIABLE LPAREN RPAREN lbrace rbrace
Rule 110   normal_function -> VARIABLE LPAREN RPAREN lbrace statements rbrace
Rule 111   normal_function -> VARIABLE LPAREN RPAREN lbrace rbrace
Rule 112   parameters -> type VARIABLE COMMA parameters
Rule 113   parameters -> type VARIABLE
Rule 114   function_call -> VARIABLE LPAREN arguments RPAREN
Rule 115   function_call -> VARIABLE LPAREN RPAREN
Rule 116   arguments -> arguments COMMA VARIABLE
Rule 117   arguments -> arguments COMMA constant
Rule 118   arguments -> VARIABLE
Rule 119   arguments -> constant
Rule 120   lbrace -> LBRACE
Rule 121   rbrace -> RBRACE
Rule 122   empty -> <empty>

Terminals, with rules where they appear

ADD                  : 38
ADD_ASSIGN           : 54
AND                  : 
ANDI                 : 
AND_ASSIGN           : 58
AND_OP               : 50
BREAK                : 11
CASE                 : 
CHAR                 : 28
CHARACTER            : 37
COLON                : 
COMMA                : 16 17 20 21 24 86 112 116 117
COMMENT              : 10
CONDOP               : 
CONTINUE             : 12
DECREMENT            : 73
DEC_INT              : 36
DEFAULT              : 
DEFINE               : 
DIV                  : 41
DIV_ASSIGN           : 52
DO                   : 82 83 84 85
DOT                  : 
DOT_REAL             : 34
DOUBLE               : 29
DOUBLE_QUOTES        : 
ELSE                 : 90 91 92 93
EQUALS               : 17 19 21 23 61
EQUALS_OP            : 48
EXP_REAL             : 35
FLOAT                : 27
FOR                  : 74 75 76 77
GE_OP                : 46
G_OP                 : 44
HASH                 : 
HEX_INT              : 33
IF                   : 88 89 90 91 92 93
INCLUDE              : 
INCREMENT            : 72
INT                  : 26
LBIG                 : 20 21 22 23 66 70 71
LBRACE               : 21 23 120
LEFT_ASSIGN          : 56
LEFT_OP              : 
LE_OP                : 45
LONG                 : 32
LPAREN               : 63 74 75 76 77 78 79 80 81 82 83 84 85 88 89 90 91 92 93 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 114 115
L_OP                 : 43
MAIN                 : 96 97 98 99 100 101 102 103
MINUS                : 39
MOD                  : 42
MOD_ASSIGN           : 53
MULT                 : 40
MUL_ASSIGN           : 51
NEWLINE              : 
NOT                  : 
NOTEQUALS            : 47
OR                   : 
OR_ASSIGN            : 60
OR_OP                : 49
RBIG                 : 20 21 22 23 66 70 71
RBRACE               : 21 23 121
RETURN               : 13 14
RIGHT_ASSIGN         : 57
RIGHT_OP             : 
RPAREN               : 63 74 75 76 77 78 79 80 81 82 83 84 85 88 89 90 91 92 93 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 114 115
SEMI_COLON           : 5 11 12 13 14 15 74 74 75 75 76 76 76 77 77 79 82 83 84 84 85
SHORT                : 31
SINGLE_QUOTES        : 
SIZEOF               : 
SUB_ASSIGN           : 55
SWITCH               : 
TILDA                : 
TRUE                 : 
VARIABLE             : 16 17 18 19 20 21 22 23 65 66 68 69 70 71 104 105 106 107 108 109 110 111 112 113 114 115 116 118
VOID                 : 30
WHILE                : 78 79 80 81 82 83 84 85
XOR_ASSIGN           : 59
error                : 

Nonterminals, with rules where they appear

arguments            : 114 116 117
conditional_statement : 9
constant             : 64 117 119
constant_statement   : 8
declaration          : 4
empty                : 
enum_list            : 15 16 17 20 21
exp                  : 5 14 17 19 20 21 22 23 24 25 38 38 39 39 40 40 41 41 42 42 43 43 44 44 45 45 46 46 47 47 48 48 49 49 50 50 51 51 52 52 53 53 54 54 55 55 56 56 57 57 58 58 59 59 60 60 61 61 63 66 70 71 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93
function             : 7
function_call        : 67
iterative_exp        : 74 74 74 75 75 75 76 76 76 77 77 77 86
iterative_statement  : 6
lbrace               : 75 77 80 81 83 85 89 91 92 93 93 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111
main_function        : 95
normal_function      : 94
num_list             : 21 23 24
parameters           : 96 97 98 99 104 105 106 107 112
program              : 0
rbrace               : 75 77 80 81 83 85 89 91 92 93 93 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111
statement            : 2 3 74 78 82 88 90 90 91 92
statements           : 1 2 75 80 83 89 91 92 93 93 96 98 100 102 104 106 108 110
type                 : 15 96 97 100 101 104 105 108 109 112 113
unary_expression     : 62
unary_operator       : 68 69 70 71

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (9) statement -> . conditional_statement
    (10) statement -> . COMMENT
    (15) declaration -> . type enum_list SEMI_COLON
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (74) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (75) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace statements rbrace
    (76) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (77) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace rbrace
    (78) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (79) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (80) iterative_statement -> . WHILE LPAREN exp RPAREN lbrace statements rbrace
    (81) iterative_statement -> . WHILE LPAREN exp RPAREN lbrace rbrace
    (82) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (83) iterative_statement -> . DO lbrace statements rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (84) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (85) iterative_statement -> . DO lbrace rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (94) function -> . normal_function
    (95) function -> . main_function
    (11) constant_statement -> . BREAK SEMI_COLON
    (12) constant_statement -> . CONTINUE SEMI_COLON
    (13) constant_statement -> . RETURN SEMI_COLON
    (14) constant_statement -> . RETURN exp SEMI_COLON
    (88) conditional_statement -> . IF LPAREN exp RPAREN statement
    (89) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace
    (90) conditional_statement -> . IF LPAREN exp RPAREN statement ELSE statement
    (91) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace ELSE statement
    (92) conditional_statement -> . IF LPAREN exp RPAREN statement ELSE lbrace statements rbrace
    (93) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace ELSE lbrace statements rbrace
    (26) type -> . INT
    (27) type -> . FLOAT
    (28) type -> . CHAR
    (29) type -> . DOUBLE
    (30) type -> . VOID
    (31) type -> . SHORT
    (32) type -> . LONG
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (104) normal_function -> . type VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (105) normal_function -> . type VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (106) normal_function -> . VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (107) normal_function -> . VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (108) normal_function -> . type VARIABLE LPAREN RPAREN lbrace statements rbrace
    (109) normal_function -> . type VARIABLE LPAREN RPAREN lbrace rbrace
    (110) normal_function -> . VARIABLE LPAREN RPAREN lbrace statements rbrace
    (111) normal_function -> . VARIABLE LPAREN RPAREN lbrace rbrace
    (96) main_function -> . type MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (97) main_function -> . type MAIN LPAREN parameters RPAREN lbrace rbrace
    (98) main_function -> . MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (99) main_function -> . MAIN LPAREN parameters RPAREN lbrace rbrace
    (100) main_function -> . type MAIN LPAREN RPAREN lbrace statements rbrace
    (101) main_function -> . type MAIN LPAREN RPAREN lbrace rbrace
    (102) main_function -> . MAIN LPAREN RPAREN lbrace statements rbrace
    (103) main_function -> . MAIN LPAREN RPAREN lbrace rbrace
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    COMMENT         shift and go to state 13
    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 28
    FOR             shift and go to state 25
    WHILE           shift and go to state 9
    DO              shift and go to state 4
    BREAK           shift and go to state 38
    CONTINUE        shift and go to state 39
    RETURN          shift and go to state 1
    IF              shift and go to state 31
    INT             shift and go to state 33
    FLOAT           shift and go to state 37
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 34
    VOID            shift and go to state 5
    SHORT           shift and go to state 10
    LONG            shift and go to state 41
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    MAIN            shift and go to state 14
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    main_function                  shift and go to state 2
    statements                     shift and go to state 3
    unary_expression               shift and go to state 29
    function_call                  shift and go to state 7
    constant                       shift and go to state 11
    iterative_statement            shift and go to state 12
    conditional_statement          shift and go to state 17
    program                        shift and go to state 18
    statement                      shift and go to state 19
    type                           shift and go to state 21
    unary_operator                 shift and go to state 22
    function                       shift and go to state 23
    declaration                    shift and go to state 27
    constant_statement             shift and go to state 32
    normal_function                shift and go to state 36
    exp                            shift and go to state 40

state 1

    (13) constant_statement -> RETURN . SEMI_COLON
    (14) constant_statement -> RETURN . exp SEMI_COLON
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    SEMI_COLON      shift and go to state 42
    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 43
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    constant                       shift and go to state 11
    unary_expression               shift and go to state 29
    function_call                  shift and go to state 7
    exp                            shift and go to state 44
    unary_operator                 shift and go to state 22

state 2

    (95) function -> main_function .

    RBRACE          reduce using rule 95 (function -> main_function .)
    COMMENT         reduce using rule 95 (function -> main_function .)
    LPAREN          reduce using rule 95 (function -> main_function .)
    VARIABLE        reduce using rule 95 (function -> main_function .)
    FOR             reduce using rule 95 (function -> main_function .)
    WHILE           reduce using rule 95 (function -> main_function .)
    DO              reduce using rule 95 (function -> main_function .)
    BREAK           reduce using rule 95 (function -> main_function .)
    CONTINUE        reduce using rule 95 (function -> main_function .)
    RETURN          reduce using rule 95 (function -> main_function .)
    IF              reduce using rule 95 (function -> main_function .)
    INT             reduce using rule 95 (function -> main_function .)
    FLOAT           reduce using rule 95 (function -> main_function .)
    CHAR            reduce using rule 95 (function -> main_function .)
    DOUBLE          reduce using rule 95 (function -> main_function .)
    VOID            reduce using rule 95 (function -> main_function .)
    SHORT           reduce using rule 95 (function -> main_function .)
    LONG            reduce using rule 95 (function -> main_function .)
    HEX_INT         reduce using rule 95 (function -> main_function .)
    DOT_REAL        reduce using rule 95 (function -> main_function .)
    EXP_REAL        reduce using rule 95 (function -> main_function .)
    DEC_INT         reduce using rule 95 (function -> main_function .)
    CHARACTER       reduce using rule 95 (function -> main_function .)
    MAIN            reduce using rule 95 (function -> main_function .)
    INCREMENT       reduce using rule 95 (function -> main_function .)
    DECREMENT       reduce using rule 95 (function -> main_function .)
    $end            reduce using rule 95 (function -> main_function .)
    ELSE            reduce using rule 95 (function -> main_function .)


state 3

    (1) program -> statements .
    (2) statements -> statements . statement
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (9) statement -> . conditional_statement
    (10) statement -> . COMMENT
    (15) declaration -> . type enum_list SEMI_COLON
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (74) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (75) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace statements rbrace
    (76) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (77) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace rbrace
    (78) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (79) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (80) iterative_statement -> . WHILE LPAREN exp RPAREN lbrace statements rbrace
    (81) iterative_statement -> . WHILE LPAREN exp RPAREN lbrace rbrace
    (82) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (83) iterative_statement -> . DO lbrace statements rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (84) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (85) iterative_statement -> . DO lbrace rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (94) function -> . normal_function
    (95) function -> . main_function
    (11) constant_statement -> . BREAK SEMI_COLON
    (12) constant_statement -> . CONTINUE SEMI_COLON
    (13) constant_statement -> . RETURN SEMI_COLON
    (14) constant_statement -> . RETURN exp SEMI_COLON
    (88) conditional_statement -> . IF LPAREN exp RPAREN statement
    (89) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace
    (90) conditional_statement -> . IF LPAREN exp RPAREN statement ELSE statement
    (91) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace ELSE statement
    (92) conditional_statement -> . IF LPAREN exp RPAREN statement ELSE lbrace statements rbrace
    (93) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace ELSE lbrace statements rbrace
    (26) type -> . INT
    (27) type -> . FLOAT
    (28) type -> . CHAR
    (29) type -> . DOUBLE
    (30) type -> . VOID
    (31) type -> . SHORT
    (32) type -> . LONG
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (104) normal_function -> . type VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (105) normal_function -> . type VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (106) normal_function -> . VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (107) normal_function -> . VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (108) normal_function -> . type VARIABLE LPAREN RPAREN lbrace statements rbrace
    (109) normal_function -> . type VARIABLE LPAREN RPAREN lbrace rbrace
    (110) normal_function -> . VARIABLE LPAREN RPAREN lbrace statements rbrace
    (111) normal_function -> . VARIABLE LPAREN RPAREN lbrace rbrace
    (96) main_function -> . type MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (97) main_function -> . type MAIN LPAREN parameters RPAREN lbrace rbrace
    (98) main_function -> . MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (99) main_function -> . MAIN LPAREN parameters RPAREN lbrace rbrace
    (100) main_function -> . type MAIN LPAREN RPAREN lbrace statements rbrace
    (101) main_function -> . type MAIN LPAREN RPAREN lbrace rbrace
    (102) main_function -> . MAIN LPAREN RPAREN lbrace statements rbrace
    (103) main_function -> . MAIN LPAREN RPAREN lbrace rbrace
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    $end            reduce using rule 1 (program -> statements .)
    COMMENT         shift and go to state 13
    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 28
    FOR             shift and go to state 25
    WHILE           shift and go to state 9
    DO              shift and go to state 4
    BREAK           shift and go to state 38
    CONTINUE        shift and go to state 39
    RETURN          shift and go to state 1
    IF              shift and go to state 31
    INT             shift and go to state 33
    FLOAT           shift and go to state 37
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 34
    VOID            shift and go to state 5
    SHORT           shift and go to state 10
    LONG            shift and go to state 41
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    MAIN            shift and go to state 14
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    function                       shift and go to state 23
    statement                      shift and go to state 45
    unary_expression               shift and go to state 29
    type                           shift and go to state 21
    normal_function                shift and go to state 36
    function_call                  shift and go to state 7
    conditional_statement          shift and go to state 17
    main_function                  shift and go to state 2
    exp                            shift and go to state 40
    declaration                    shift and go to state 27
    constant_statement             shift and go to state 32
    constant                       shift and go to state 11
    iterative_statement            shift and go to state 12
    unary_operator                 shift and go to state 22

state 4

    (82) iterative_statement -> DO . statement WHILE LPAREN exp RPAREN SEMI_COLON
    (83) iterative_statement -> DO . lbrace statements rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (84) iterative_statement -> DO . SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (85) iterative_statement -> DO . lbrace rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (9) statement -> . conditional_statement
    (10) statement -> . COMMENT
    (120) lbrace -> . LBRACE
    (15) declaration -> . type enum_list SEMI_COLON
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (74) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (75) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace statements rbrace
    (76) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (77) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace rbrace
    (78) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (79) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (80) iterative_statement -> . WHILE LPAREN exp RPAREN lbrace statements rbrace
    (81) iterative_statement -> . WHILE LPAREN exp RPAREN lbrace rbrace
    (82) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (83) iterative_statement -> . DO lbrace statements rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (84) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (85) iterative_statement -> . DO lbrace rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (94) function -> . normal_function
    (95) function -> . main_function
    (11) constant_statement -> . BREAK SEMI_COLON
    (12) constant_statement -> . CONTINUE SEMI_COLON
    (13) constant_statement -> . RETURN SEMI_COLON
    (14) constant_statement -> . RETURN exp SEMI_COLON
    (88) conditional_statement -> . IF LPAREN exp RPAREN statement
    (89) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace
    (90) conditional_statement -> . IF LPAREN exp RPAREN statement ELSE statement
    (91) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace ELSE statement
    (92) conditional_statement -> . IF LPAREN exp RPAREN statement ELSE lbrace statements rbrace
    (93) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace ELSE lbrace statements rbrace
    (26) type -> . INT
    (27) type -> . FLOAT
    (28) type -> . CHAR
    (29) type -> . DOUBLE
    (30) type -> . VOID
    (31) type -> . SHORT
    (32) type -> . LONG
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (104) normal_function -> . type VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (105) normal_function -> . type VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (106) normal_function -> . VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (107) normal_function -> . VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (108) normal_function -> . type VARIABLE LPAREN RPAREN lbrace statements rbrace
    (109) normal_function -> . type VARIABLE LPAREN RPAREN lbrace rbrace
    (110) normal_function -> . VARIABLE LPAREN RPAREN lbrace statements rbrace
    (111) normal_function -> . VARIABLE LPAREN RPAREN lbrace rbrace
    (96) main_function -> . type MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (97) main_function -> . type MAIN LPAREN parameters RPAREN lbrace rbrace
    (98) main_function -> . MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (99) main_function -> . MAIN LPAREN parameters RPAREN lbrace rbrace
    (100) main_function -> . type MAIN LPAREN RPAREN lbrace statements rbrace
    (101) main_function -> . type MAIN LPAREN RPAREN lbrace rbrace
    (102) main_function -> . MAIN LPAREN RPAREN lbrace statements rbrace
    (103) main_function -> . MAIN LPAREN RPAREN lbrace rbrace
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    SEMI_COLON      shift and go to state 46
    COMMENT         shift and go to state 13
    LBRACE          shift and go to state 48
    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 28
    FOR             shift and go to state 25
    WHILE           shift and go to state 9
    DO              shift and go to state 4
    BREAK           shift and go to state 38
    CONTINUE        shift and go to state 39
    RETURN          shift and go to state 1
    IF              shift and go to state 31
    INT             shift and go to state 33
    FLOAT           shift and go to state 37
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 34
    VOID            shift and go to state 5
    SHORT           shift and go to state 10
    LONG            shift and go to state 41
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    MAIN            shift and go to state 14
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    function                       shift and go to state 23
    lbrace                         shift and go to state 49
    statement                      shift and go to state 47
    unary_expression               shift and go to state 29
    type                           shift and go to state 21
    normal_function                shift and go to state 36
    function_call                  shift and go to state 7
    conditional_statement          shift and go to state 17
    main_function                  shift and go to state 2
    exp                            shift and go to state 40
    declaration                    shift and go to state 27
    constant_statement             shift and go to state 32
    constant                       shift and go to state 11
    iterative_statement            shift and go to state 12
    unary_operator                 shift and go to state 22

state 5

    (30) type -> VOID .

    VARIABLE        reduce using rule 30 (type -> VOID .)
    MAIN            reduce using rule 30 (type -> VOID .)


state 6

    (37) constant -> CHARACTER .

    RPAREN          reduce using rule 37 (constant -> CHARACTER .)
    ADD             reduce using rule 37 (constant -> CHARACTER .)
    MINUS           reduce using rule 37 (constant -> CHARACTER .)
    MULT            reduce using rule 37 (constant -> CHARACTER .)
    DIV             reduce using rule 37 (constant -> CHARACTER .)
    MOD             reduce using rule 37 (constant -> CHARACTER .)
    L_OP            reduce using rule 37 (constant -> CHARACTER .)
    G_OP            reduce using rule 37 (constant -> CHARACTER .)
    LE_OP           reduce using rule 37 (constant -> CHARACTER .)
    GE_OP           reduce using rule 37 (constant -> CHARACTER .)
    NOTEQUALS       reduce using rule 37 (constant -> CHARACTER .)
    EQUALS_OP       reduce using rule 37 (constant -> CHARACTER .)
    OR_OP           reduce using rule 37 (constant -> CHARACTER .)
    AND_OP          reduce using rule 37 (constant -> CHARACTER .)
    MUL_ASSIGN      reduce using rule 37 (constant -> CHARACTER .)
    DIV_ASSIGN      reduce using rule 37 (constant -> CHARACTER .)
    MOD_ASSIGN      reduce using rule 37 (constant -> CHARACTER .)
    ADD_ASSIGN      reduce using rule 37 (constant -> CHARACTER .)
    SUB_ASSIGN      reduce using rule 37 (constant -> CHARACTER .)
    LEFT_ASSIGN     reduce using rule 37 (constant -> CHARACTER .)
    RIGHT_ASSIGN    reduce using rule 37 (constant -> CHARACTER .)
    AND_ASSIGN      reduce using rule 37 (constant -> CHARACTER .)
    XOR_ASSIGN      reduce using rule 37 (constant -> CHARACTER .)
    OR_ASSIGN       reduce using rule 37 (constant -> CHARACTER .)
    EQUALS          reduce using rule 37 (constant -> CHARACTER .)
    SEMI_COLON      reduce using rule 37 (constant -> CHARACTER .)
    COMMA           reduce using rule 37 (constant -> CHARACTER .)
    RBIG            reduce using rule 37 (constant -> CHARACTER .)
    RBRACE          reduce using rule 37 (constant -> CHARACTER .)


state 7

    (67) exp -> function_call .

    SEMI_COLON      reduce using rule 67 (exp -> function_call .)
    ADD             reduce using rule 67 (exp -> function_call .)
    MINUS           reduce using rule 67 (exp -> function_call .)
    MULT            reduce using rule 67 (exp -> function_call .)
    DIV             reduce using rule 67 (exp -> function_call .)
    MOD             reduce using rule 67 (exp -> function_call .)
    L_OP            reduce using rule 67 (exp -> function_call .)
    G_OP            reduce using rule 67 (exp -> function_call .)
    LE_OP           reduce using rule 67 (exp -> function_call .)
    GE_OP           reduce using rule 67 (exp -> function_call .)
    NOTEQUALS       reduce using rule 67 (exp -> function_call .)
    EQUALS_OP       reduce using rule 67 (exp -> function_call .)
    OR_OP           reduce using rule 67 (exp -> function_call .)
    AND_OP          reduce using rule 67 (exp -> function_call .)
    MUL_ASSIGN      reduce using rule 67 (exp -> function_call .)
    DIV_ASSIGN      reduce using rule 67 (exp -> function_call .)
    MOD_ASSIGN      reduce using rule 67 (exp -> function_call .)
    ADD_ASSIGN      reduce using rule 67 (exp -> function_call .)
    SUB_ASSIGN      reduce using rule 67 (exp -> function_call .)
    LEFT_ASSIGN     reduce using rule 67 (exp -> function_call .)
    RIGHT_ASSIGN    reduce using rule 67 (exp -> function_call .)
    AND_ASSIGN      reduce using rule 67 (exp -> function_call .)
    XOR_ASSIGN      reduce using rule 67 (exp -> function_call .)
    OR_ASSIGN       reduce using rule 67 (exp -> function_call .)
    EQUALS          reduce using rule 67 (exp -> function_call .)
    RPAREN          reduce using rule 67 (exp -> function_call .)
    COMMA           reduce using rule 67 (exp -> function_call .)
    RBIG            reduce using rule 67 (exp -> function_call .)
    RBRACE          reduce using rule 67 (exp -> function_call .)


state 8

    (28) type -> CHAR .

    VARIABLE        reduce using rule 28 (type -> CHAR .)
    MAIN            reduce using rule 28 (type -> CHAR .)


state 9

    (78) iterative_statement -> WHILE . LPAREN exp RPAREN statement
    (79) iterative_statement -> WHILE . LPAREN exp RPAREN SEMI_COLON
    (80) iterative_statement -> WHILE . LPAREN exp RPAREN lbrace statements rbrace
    (81) iterative_statement -> WHILE . LPAREN exp RPAREN lbrace rbrace

    LPAREN          shift and go to state 50


state 10

    (31) type -> SHORT .

    VARIABLE        reduce using rule 31 (type -> SHORT .)
    MAIN            reduce using rule 31 (type -> SHORT .)


state 11

    (64) exp -> constant .

    SEMI_COLON      reduce using rule 64 (exp -> constant .)
    ADD             reduce using rule 64 (exp -> constant .)
    MINUS           reduce using rule 64 (exp -> constant .)
    MULT            reduce using rule 64 (exp -> constant .)
    DIV             reduce using rule 64 (exp -> constant .)
    MOD             reduce using rule 64 (exp -> constant .)
    L_OP            reduce using rule 64 (exp -> constant .)
    G_OP            reduce using rule 64 (exp -> constant .)
    LE_OP           reduce using rule 64 (exp -> constant .)
    GE_OP           reduce using rule 64 (exp -> constant .)
    NOTEQUALS       reduce using rule 64 (exp -> constant .)
    EQUALS_OP       reduce using rule 64 (exp -> constant .)
    OR_OP           reduce using rule 64 (exp -> constant .)
    AND_OP          reduce using rule 64 (exp -> constant .)
    MUL_ASSIGN      reduce using rule 64 (exp -> constant .)
    DIV_ASSIGN      reduce using rule 64 (exp -> constant .)
    MOD_ASSIGN      reduce using rule 64 (exp -> constant .)
    ADD_ASSIGN      reduce using rule 64 (exp -> constant .)
    SUB_ASSIGN      reduce using rule 64 (exp -> constant .)
    LEFT_ASSIGN     reduce using rule 64 (exp -> constant .)
    RIGHT_ASSIGN    reduce using rule 64 (exp -> constant .)
    AND_ASSIGN      reduce using rule 64 (exp -> constant .)
    XOR_ASSIGN      reduce using rule 64 (exp -> constant .)
    OR_ASSIGN       reduce using rule 64 (exp -> constant .)
    EQUALS          reduce using rule 64 (exp -> constant .)
    RPAREN          reduce using rule 64 (exp -> constant .)
    COMMA           reduce using rule 64 (exp -> constant .)
    RBIG            reduce using rule 64 (exp -> constant .)
    RBRACE          reduce using rule 64 (exp -> constant .)


state 12

    (6) statement -> iterative_statement .

    COMMENT         reduce using rule 6 (statement -> iterative_statement .)
    LPAREN          reduce using rule 6 (statement -> iterative_statement .)
    VARIABLE        reduce using rule 6 (statement -> iterative_statement .)
    FOR             reduce using rule 6 (statement -> iterative_statement .)
    WHILE           reduce using rule 6 (statement -> iterative_statement .)
    DO              reduce using rule 6 (statement -> iterative_statement .)
    BREAK           reduce using rule 6 (statement -> iterative_statement .)
    CONTINUE        reduce using rule 6 (statement -> iterative_statement .)
    RETURN          reduce using rule 6 (statement -> iterative_statement .)
    IF              reduce using rule 6 (statement -> iterative_statement .)
    INT             reduce using rule 6 (statement -> iterative_statement .)
    FLOAT           reduce using rule 6 (statement -> iterative_statement .)
    CHAR            reduce using rule 6 (statement -> iterative_statement .)
    DOUBLE          reduce using rule 6 (statement -> iterative_statement .)
    VOID            reduce using rule 6 (statement -> iterative_statement .)
    SHORT           reduce using rule 6 (statement -> iterative_statement .)
    LONG            reduce using rule 6 (statement -> iterative_statement .)
    HEX_INT         reduce using rule 6 (statement -> iterative_statement .)
    DOT_REAL        reduce using rule 6 (statement -> iterative_statement .)
    EXP_REAL        reduce using rule 6 (statement -> iterative_statement .)
    DEC_INT         reduce using rule 6 (statement -> iterative_statement .)
    CHARACTER       reduce using rule 6 (statement -> iterative_statement .)
    MAIN            reduce using rule 6 (statement -> iterative_statement .)
    INCREMENT       reduce using rule 6 (statement -> iterative_statement .)
    DECREMENT       reduce using rule 6 (statement -> iterative_statement .)
    $end            reduce using rule 6 (statement -> iterative_statement .)
    RBRACE          reduce using rule 6 (statement -> iterative_statement .)
    ELSE            reduce using rule 6 (statement -> iterative_statement .)


state 13

    (10) statement -> COMMENT .

    COMMENT         reduce using rule 10 (statement -> COMMENT .)
    LPAREN          reduce using rule 10 (statement -> COMMENT .)
    VARIABLE        reduce using rule 10 (statement -> COMMENT .)
    FOR             reduce using rule 10 (statement -> COMMENT .)
    WHILE           reduce using rule 10 (statement -> COMMENT .)
    DO              reduce using rule 10 (statement -> COMMENT .)
    BREAK           reduce using rule 10 (statement -> COMMENT .)
    CONTINUE        reduce using rule 10 (statement -> COMMENT .)
    RETURN          reduce using rule 10 (statement -> COMMENT .)
    IF              reduce using rule 10 (statement -> COMMENT .)
    INT             reduce using rule 10 (statement -> COMMENT .)
    FLOAT           reduce using rule 10 (statement -> COMMENT .)
    CHAR            reduce using rule 10 (statement -> COMMENT .)
    DOUBLE          reduce using rule 10 (statement -> COMMENT .)
    VOID            reduce using rule 10 (statement -> COMMENT .)
    SHORT           reduce using rule 10 (statement -> COMMENT .)
    LONG            reduce using rule 10 (statement -> COMMENT .)
    HEX_INT         reduce using rule 10 (statement -> COMMENT .)
    DOT_REAL        reduce using rule 10 (statement -> COMMENT .)
    EXP_REAL        reduce using rule 10 (statement -> COMMENT .)
    DEC_INT         reduce using rule 10 (statement -> COMMENT .)
    CHARACTER       reduce using rule 10 (statement -> COMMENT .)
    MAIN            reduce using rule 10 (statement -> COMMENT .)
    INCREMENT       reduce using rule 10 (statement -> COMMENT .)
    DECREMENT       reduce using rule 10 (statement -> COMMENT .)
    $end            reduce using rule 10 (statement -> COMMENT .)
    RBRACE          reduce using rule 10 (statement -> COMMENT .)
    ELSE            reduce using rule 10 (statement -> COMMENT .)


state 14

    (98) main_function -> MAIN . LPAREN parameters RPAREN lbrace statements rbrace
    (99) main_function -> MAIN . LPAREN parameters RPAREN lbrace rbrace
    (102) main_function -> MAIN . LPAREN RPAREN lbrace statements rbrace
    (103) main_function -> MAIN . LPAREN RPAREN lbrace rbrace

    LPAREN          shift and go to state 51


state 15

    (35) constant -> EXP_REAL .

    RPAREN          reduce using rule 35 (constant -> EXP_REAL .)
    ADD             reduce using rule 35 (constant -> EXP_REAL .)
    MINUS           reduce using rule 35 (constant -> EXP_REAL .)
    MULT            reduce using rule 35 (constant -> EXP_REAL .)
    DIV             reduce using rule 35 (constant -> EXP_REAL .)
    MOD             reduce using rule 35 (constant -> EXP_REAL .)
    L_OP            reduce using rule 35 (constant -> EXP_REAL .)
    G_OP            reduce using rule 35 (constant -> EXP_REAL .)
    LE_OP           reduce using rule 35 (constant -> EXP_REAL .)
    GE_OP           reduce using rule 35 (constant -> EXP_REAL .)
    NOTEQUALS       reduce using rule 35 (constant -> EXP_REAL .)
    EQUALS_OP       reduce using rule 35 (constant -> EXP_REAL .)
    OR_OP           reduce using rule 35 (constant -> EXP_REAL .)
    AND_OP          reduce using rule 35 (constant -> EXP_REAL .)
    MUL_ASSIGN      reduce using rule 35 (constant -> EXP_REAL .)
    DIV_ASSIGN      reduce using rule 35 (constant -> EXP_REAL .)
    MOD_ASSIGN      reduce using rule 35 (constant -> EXP_REAL .)
    ADD_ASSIGN      reduce using rule 35 (constant -> EXP_REAL .)
    SUB_ASSIGN      reduce using rule 35 (constant -> EXP_REAL .)
    LEFT_ASSIGN     reduce using rule 35 (constant -> EXP_REAL .)
    RIGHT_ASSIGN    reduce using rule 35 (constant -> EXP_REAL .)
    AND_ASSIGN      reduce using rule 35 (constant -> EXP_REAL .)
    XOR_ASSIGN      reduce using rule 35 (constant -> EXP_REAL .)
    OR_ASSIGN       reduce using rule 35 (constant -> EXP_REAL .)
    EQUALS          reduce using rule 35 (constant -> EXP_REAL .)
    SEMI_COLON      reduce using rule 35 (constant -> EXP_REAL .)
    COMMA           reduce using rule 35 (constant -> EXP_REAL .)
    RBIG            reduce using rule 35 (constant -> EXP_REAL .)
    RBRACE          reduce using rule 35 (constant -> EXP_REAL .)


state 16

    (36) constant -> DEC_INT .

    RPAREN          reduce using rule 36 (constant -> DEC_INT .)
    ADD             reduce using rule 36 (constant -> DEC_INT .)
    MINUS           reduce using rule 36 (constant -> DEC_INT .)
    MULT            reduce using rule 36 (constant -> DEC_INT .)
    DIV             reduce using rule 36 (constant -> DEC_INT .)
    MOD             reduce using rule 36 (constant -> DEC_INT .)
    L_OP            reduce using rule 36 (constant -> DEC_INT .)
    G_OP            reduce using rule 36 (constant -> DEC_INT .)
    LE_OP           reduce using rule 36 (constant -> DEC_INT .)
    GE_OP           reduce using rule 36 (constant -> DEC_INT .)
    NOTEQUALS       reduce using rule 36 (constant -> DEC_INT .)
    EQUALS_OP       reduce using rule 36 (constant -> DEC_INT .)
    OR_OP           reduce using rule 36 (constant -> DEC_INT .)
    AND_OP          reduce using rule 36 (constant -> DEC_INT .)
    MUL_ASSIGN      reduce using rule 36 (constant -> DEC_INT .)
    DIV_ASSIGN      reduce using rule 36 (constant -> DEC_INT .)
    MOD_ASSIGN      reduce using rule 36 (constant -> DEC_INT .)
    ADD_ASSIGN      reduce using rule 36 (constant -> DEC_INT .)
    SUB_ASSIGN      reduce using rule 36 (constant -> DEC_INT .)
    LEFT_ASSIGN     reduce using rule 36 (constant -> DEC_INT .)
    RIGHT_ASSIGN    reduce using rule 36 (constant -> DEC_INT .)
    AND_ASSIGN      reduce using rule 36 (constant -> DEC_INT .)
    XOR_ASSIGN      reduce using rule 36 (constant -> DEC_INT .)
    OR_ASSIGN       reduce using rule 36 (constant -> DEC_INT .)
    EQUALS          reduce using rule 36 (constant -> DEC_INT .)
    SEMI_COLON      reduce using rule 36 (constant -> DEC_INT .)
    COMMA           reduce using rule 36 (constant -> DEC_INT .)
    RBIG            reduce using rule 36 (constant -> DEC_INT .)
    RBRACE          reduce using rule 36 (constant -> DEC_INT .)


state 17

    (9) statement -> conditional_statement .

    COMMENT         reduce using rule 9 (statement -> conditional_statement .)
    LPAREN          reduce using rule 9 (statement -> conditional_statement .)
    VARIABLE        reduce using rule 9 (statement -> conditional_statement .)
    FOR             reduce using rule 9 (statement -> conditional_statement .)
    WHILE           reduce using rule 9 (statement -> conditional_statement .)
    DO              reduce using rule 9 (statement -> conditional_statement .)
    BREAK           reduce using rule 9 (statement -> conditional_statement .)
    CONTINUE        reduce using rule 9 (statement -> conditional_statement .)
    RETURN          reduce using rule 9 (statement -> conditional_statement .)
    IF              reduce using rule 9 (statement -> conditional_statement .)
    INT             reduce using rule 9 (statement -> conditional_statement .)
    FLOAT           reduce using rule 9 (statement -> conditional_statement .)
    CHAR            reduce using rule 9 (statement -> conditional_statement .)
    DOUBLE          reduce using rule 9 (statement -> conditional_statement .)
    VOID            reduce using rule 9 (statement -> conditional_statement .)
    SHORT           reduce using rule 9 (statement -> conditional_statement .)
    LONG            reduce using rule 9 (statement -> conditional_statement .)
    HEX_INT         reduce using rule 9 (statement -> conditional_statement .)
    DOT_REAL        reduce using rule 9 (statement -> conditional_statement .)
    EXP_REAL        reduce using rule 9 (statement -> conditional_statement .)
    DEC_INT         reduce using rule 9 (statement -> conditional_statement .)
    CHARACTER       reduce using rule 9 (statement -> conditional_statement .)
    MAIN            reduce using rule 9 (statement -> conditional_statement .)
    INCREMENT       reduce using rule 9 (statement -> conditional_statement .)
    DECREMENT       reduce using rule 9 (statement -> conditional_statement .)
    $end            reduce using rule 9 (statement -> conditional_statement .)
    RBRACE          reduce using rule 9 (statement -> conditional_statement .)
    ELSE            reduce using rule 9 (statement -> conditional_statement .)


state 18

    (0) S' -> program .



state 19

    (3) statements -> statement .

    RBRACE          reduce using rule 3 (statements -> statement .)
    COMMENT         reduce using rule 3 (statements -> statement .)
    LPAREN          reduce using rule 3 (statements -> statement .)
    VARIABLE        reduce using rule 3 (statements -> statement .)
    FOR             reduce using rule 3 (statements -> statement .)
    WHILE           reduce using rule 3 (statements -> statement .)
    DO              reduce using rule 3 (statements -> statement .)
    BREAK           reduce using rule 3 (statements -> statement .)
    CONTINUE        reduce using rule 3 (statements -> statement .)
    RETURN          reduce using rule 3 (statements -> statement .)
    IF              reduce using rule 3 (statements -> statement .)
    INT             reduce using rule 3 (statements -> statement .)
    FLOAT           reduce using rule 3 (statements -> statement .)
    CHAR            reduce using rule 3 (statements -> statement .)
    DOUBLE          reduce using rule 3 (statements -> statement .)
    VOID            reduce using rule 3 (statements -> statement .)
    SHORT           reduce using rule 3 (statements -> statement .)
    LONG            reduce using rule 3 (statements -> statement .)
    HEX_INT         reduce using rule 3 (statements -> statement .)
    DOT_REAL        reduce using rule 3 (statements -> statement .)
    EXP_REAL        reduce using rule 3 (statements -> statement .)
    DEC_INT         reduce using rule 3 (statements -> statement .)
    CHARACTER       reduce using rule 3 (statements -> statement .)
    MAIN            reduce using rule 3 (statements -> statement .)
    INCREMENT       reduce using rule 3 (statements -> statement .)
    DECREMENT       reduce using rule 3 (statements -> statement .)
    $end            reduce using rule 3 (statements -> statement .)


state 20

    (34) constant -> DOT_REAL .

    RPAREN          reduce using rule 34 (constant -> DOT_REAL .)
    ADD             reduce using rule 34 (constant -> DOT_REAL .)
    MINUS           reduce using rule 34 (constant -> DOT_REAL .)
    MULT            reduce using rule 34 (constant -> DOT_REAL .)
    DIV             reduce using rule 34 (constant -> DOT_REAL .)
    MOD             reduce using rule 34 (constant -> DOT_REAL .)
    L_OP            reduce using rule 34 (constant -> DOT_REAL .)
    G_OP            reduce using rule 34 (constant -> DOT_REAL .)
    LE_OP           reduce using rule 34 (constant -> DOT_REAL .)
    GE_OP           reduce using rule 34 (constant -> DOT_REAL .)
    NOTEQUALS       reduce using rule 34 (constant -> DOT_REAL .)
    EQUALS_OP       reduce using rule 34 (constant -> DOT_REAL .)
    OR_OP           reduce using rule 34 (constant -> DOT_REAL .)
    AND_OP          reduce using rule 34 (constant -> DOT_REAL .)
    MUL_ASSIGN      reduce using rule 34 (constant -> DOT_REAL .)
    DIV_ASSIGN      reduce using rule 34 (constant -> DOT_REAL .)
    MOD_ASSIGN      reduce using rule 34 (constant -> DOT_REAL .)
    ADD_ASSIGN      reduce using rule 34 (constant -> DOT_REAL .)
    SUB_ASSIGN      reduce using rule 34 (constant -> DOT_REAL .)
    LEFT_ASSIGN     reduce using rule 34 (constant -> DOT_REAL .)
    RIGHT_ASSIGN    reduce using rule 34 (constant -> DOT_REAL .)
    AND_ASSIGN      reduce using rule 34 (constant -> DOT_REAL .)
    XOR_ASSIGN      reduce using rule 34 (constant -> DOT_REAL .)
    OR_ASSIGN       reduce using rule 34 (constant -> DOT_REAL .)
    EQUALS          reduce using rule 34 (constant -> DOT_REAL .)
    SEMI_COLON      reduce using rule 34 (constant -> DOT_REAL .)
    COMMA           reduce using rule 34 (constant -> DOT_REAL .)
    RBIG            reduce using rule 34 (constant -> DOT_REAL .)
    RBRACE          reduce using rule 34 (constant -> DOT_REAL .)


state 21

    (15) declaration -> type . enum_list SEMI_COLON
    (104) normal_function -> type . VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (105) normal_function -> type . VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (108) normal_function -> type . VARIABLE LPAREN RPAREN lbrace statements rbrace
    (109) normal_function -> type . VARIABLE LPAREN RPAREN lbrace rbrace
    (96) main_function -> type . MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (97) main_function -> type . MAIN LPAREN parameters RPAREN lbrace rbrace
    (100) main_function -> type . MAIN LPAREN RPAREN lbrace statements rbrace
    (101) main_function -> type . MAIN LPAREN RPAREN lbrace rbrace
    (16) enum_list -> . VARIABLE COMMA enum_list
    (17) enum_list -> . VARIABLE EQUALS exp COMMA enum_list
    (18) enum_list -> . VARIABLE
    (19) enum_list -> . VARIABLE EQUALS exp
    (20) enum_list -> . VARIABLE LBIG exp RBIG COMMA enum_list
    (21) enum_list -> . VARIABLE LBIG exp RBIG EQUALS LBRACE num_list RBRACE COMMA enum_list
    (22) enum_list -> . VARIABLE LBIG exp RBIG
    (23) enum_list -> . VARIABLE LBIG exp RBIG EQUALS LBRACE num_list RBRACE

    VARIABLE        shift and go to state 53
    MAIN            shift and go to state 54

    enum_list                      shift and go to state 52

state 22

    (69) unary_expression -> unary_operator . VARIABLE
    (71) unary_expression -> unary_operator . VARIABLE LBIG exp RBIG

    VARIABLE        shift and go to state 55


state 23

    (7) statement -> function .

    COMMENT         reduce using rule 7 (statement -> function .)
    LPAREN          reduce using rule 7 (statement -> function .)
    VARIABLE        reduce using rule 7 (statement -> function .)
    FOR             reduce using rule 7 (statement -> function .)
    WHILE           reduce using rule 7 (statement -> function .)
    DO              reduce using rule 7 (statement -> function .)
    BREAK           reduce using rule 7 (statement -> function .)
    CONTINUE        reduce using rule 7 (statement -> function .)
    RETURN          reduce using rule 7 (statement -> function .)
    IF              reduce using rule 7 (statement -> function .)
    INT             reduce using rule 7 (statement -> function .)
    FLOAT           reduce using rule 7 (statement -> function .)
    CHAR            reduce using rule 7 (statement -> function .)
    DOUBLE          reduce using rule 7 (statement -> function .)
    VOID            reduce using rule 7 (statement -> function .)
    SHORT           reduce using rule 7 (statement -> function .)
    LONG            reduce using rule 7 (statement -> function .)
    HEX_INT         reduce using rule 7 (statement -> function .)
    DOT_REAL        reduce using rule 7 (statement -> function .)
    EXP_REAL        reduce using rule 7 (statement -> function .)
    DEC_INT         reduce using rule 7 (statement -> function .)
    CHARACTER       reduce using rule 7 (statement -> function .)
    MAIN            reduce using rule 7 (statement -> function .)
    INCREMENT       reduce using rule 7 (statement -> function .)
    DECREMENT       reduce using rule 7 (statement -> function .)
    $end            reduce using rule 7 (statement -> function .)
    RBRACE          reduce using rule 7 (statement -> function .)
    ELSE            reduce using rule 7 (statement -> function .)


state 24

    (72) unary_operator -> INCREMENT .

    VARIABLE        reduce using rule 72 (unary_operator -> INCREMENT .)
    SEMI_COLON      reduce using rule 72 (unary_operator -> INCREMENT .)
    ADD             reduce using rule 72 (unary_operator -> INCREMENT .)
    MINUS           reduce using rule 72 (unary_operator -> INCREMENT .)
    MULT            reduce using rule 72 (unary_operator -> INCREMENT .)
    DIV             reduce using rule 72 (unary_operator -> INCREMENT .)
    MOD             reduce using rule 72 (unary_operator -> INCREMENT .)
    L_OP            reduce using rule 72 (unary_operator -> INCREMENT .)
    G_OP            reduce using rule 72 (unary_operator -> INCREMENT .)
    LE_OP           reduce using rule 72 (unary_operator -> INCREMENT .)
    GE_OP           reduce using rule 72 (unary_operator -> INCREMENT .)
    NOTEQUALS       reduce using rule 72 (unary_operator -> INCREMENT .)
    EQUALS_OP       reduce using rule 72 (unary_operator -> INCREMENT .)
    OR_OP           reduce using rule 72 (unary_operator -> INCREMENT .)
    AND_OP          reduce using rule 72 (unary_operator -> INCREMENT .)
    MUL_ASSIGN      reduce using rule 72 (unary_operator -> INCREMENT .)
    DIV_ASSIGN      reduce using rule 72 (unary_operator -> INCREMENT .)
    MOD_ASSIGN      reduce using rule 72 (unary_operator -> INCREMENT .)
    ADD_ASSIGN      reduce using rule 72 (unary_operator -> INCREMENT .)
    SUB_ASSIGN      reduce using rule 72 (unary_operator -> INCREMENT .)
    LEFT_ASSIGN     reduce using rule 72 (unary_operator -> INCREMENT .)
    RIGHT_ASSIGN    reduce using rule 72 (unary_operator -> INCREMENT .)
    AND_ASSIGN      reduce using rule 72 (unary_operator -> INCREMENT .)
    XOR_ASSIGN      reduce using rule 72 (unary_operator -> INCREMENT .)
    OR_ASSIGN       reduce using rule 72 (unary_operator -> INCREMENT .)
    EQUALS          reduce using rule 72 (unary_operator -> INCREMENT .)
    RPAREN          reduce using rule 72 (unary_operator -> INCREMENT .)
    COMMA           reduce using rule 72 (unary_operator -> INCREMENT .)
    RBIG            reduce using rule 72 (unary_operator -> INCREMENT .)
    RBRACE          reduce using rule 72 (unary_operator -> INCREMENT .)


state 25

    (74) iterative_statement -> FOR . LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (75) iterative_statement -> FOR . LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace statements rbrace
    (76) iterative_statement -> FOR . LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (77) iterative_statement -> FOR . LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace rbrace

    LPAREN          shift and go to state 56


state 26

    (63) exp -> LPAREN . exp RPAREN
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 43
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    constant                       shift and go to state 11
    unary_expression               shift and go to state 29
    function_call                  shift and go to state 7
    exp                            shift and go to state 57
    unary_operator                 shift and go to state 22

state 27

    (4) statement -> declaration .

    COMMENT         reduce using rule 4 (statement -> declaration .)
    LPAREN          reduce using rule 4 (statement -> declaration .)
    VARIABLE        reduce using rule 4 (statement -> declaration .)
    FOR             reduce using rule 4 (statement -> declaration .)
    WHILE           reduce using rule 4 (statement -> declaration .)
    DO              reduce using rule 4 (statement -> declaration .)
    BREAK           reduce using rule 4 (statement -> declaration .)
    CONTINUE        reduce using rule 4 (statement -> declaration .)
    RETURN          reduce using rule 4 (statement -> declaration .)
    IF              reduce using rule 4 (statement -> declaration .)
    INT             reduce using rule 4 (statement -> declaration .)
    FLOAT           reduce using rule 4 (statement -> declaration .)
    CHAR            reduce using rule 4 (statement -> declaration .)
    DOUBLE          reduce using rule 4 (statement -> declaration .)
    VOID            reduce using rule 4 (statement -> declaration .)
    SHORT           reduce using rule 4 (statement -> declaration .)
    LONG            reduce using rule 4 (statement -> declaration .)
    HEX_INT         reduce using rule 4 (statement -> declaration .)
    DOT_REAL        reduce using rule 4 (statement -> declaration .)
    EXP_REAL        reduce using rule 4 (statement -> declaration .)
    DEC_INT         reduce using rule 4 (statement -> declaration .)
    CHARACTER       reduce using rule 4 (statement -> declaration .)
    MAIN            reduce using rule 4 (statement -> declaration .)
    INCREMENT       reduce using rule 4 (statement -> declaration .)
    DECREMENT       reduce using rule 4 (statement -> declaration .)
    $end            reduce using rule 4 (statement -> declaration .)
    RBRACE          reduce using rule 4 (statement -> declaration .)
    ELSE            reduce using rule 4 (statement -> declaration .)


state 28

    (65) exp -> VARIABLE .
    (66) exp -> VARIABLE . LBIG exp RBIG
    (68) unary_expression -> VARIABLE . unary_operator
    (70) unary_expression -> VARIABLE . LBIG exp RBIG unary_operator
    (114) function_call -> VARIABLE . LPAREN arguments RPAREN
    (115) function_call -> VARIABLE . LPAREN RPAREN
    (106) normal_function -> VARIABLE . LPAREN parameters RPAREN lbrace statements rbrace
    (107) normal_function -> VARIABLE . LPAREN parameters RPAREN lbrace rbrace
    (110) normal_function -> VARIABLE . LPAREN RPAREN lbrace statements rbrace
    (111) normal_function -> VARIABLE . LPAREN RPAREN lbrace rbrace
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    SEMI_COLON      reduce using rule 65 (exp -> VARIABLE .)
    ADD             reduce using rule 65 (exp -> VARIABLE .)
    MINUS           reduce using rule 65 (exp -> VARIABLE .)
    MULT            reduce using rule 65 (exp -> VARIABLE .)
    DIV             reduce using rule 65 (exp -> VARIABLE .)
    MOD             reduce using rule 65 (exp -> VARIABLE .)
    L_OP            reduce using rule 65 (exp -> VARIABLE .)
    G_OP            reduce using rule 65 (exp -> VARIABLE .)
    LE_OP           reduce using rule 65 (exp -> VARIABLE .)
    GE_OP           reduce using rule 65 (exp -> VARIABLE .)
    NOTEQUALS       reduce using rule 65 (exp -> VARIABLE .)
    EQUALS_OP       reduce using rule 65 (exp -> VARIABLE .)
    OR_OP           reduce using rule 65 (exp -> VARIABLE .)
    AND_OP          reduce using rule 65 (exp -> VARIABLE .)
    MUL_ASSIGN      reduce using rule 65 (exp -> VARIABLE .)
    DIV_ASSIGN      reduce using rule 65 (exp -> VARIABLE .)
    MOD_ASSIGN      reduce using rule 65 (exp -> VARIABLE .)
    ADD_ASSIGN      reduce using rule 65 (exp -> VARIABLE .)
    SUB_ASSIGN      reduce using rule 65 (exp -> VARIABLE .)
    LEFT_ASSIGN     reduce using rule 65 (exp -> VARIABLE .)
    RIGHT_ASSIGN    reduce using rule 65 (exp -> VARIABLE .)
    AND_ASSIGN      reduce using rule 65 (exp -> VARIABLE .)
    XOR_ASSIGN      reduce using rule 65 (exp -> VARIABLE .)
    OR_ASSIGN       reduce using rule 65 (exp -> VARIABLE .)
    EQUALS          reduce using rule 65 (exp -> VARIABLE .)
    LBIG            shift and go to state 58
    LPAREN          shift and go to state 59
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    unary_operator                 shift and go to state 60

state 29

    (62) exp -> unary_expression .

    SEMI_COLON      reduce using rule 62 (exp -> unary_expression .)
    ADD             reduce using rule 62 (exp -> unary_expression .)
    MINUS           reduce using rule 62 (exp -> unary_expression .)
    MULT            reduce using rule 62 (exp -> unary_expression .)
    DIV             reduce using rule 62 (exp -> unary_expression .)
    MOD             reduce using rule 62 (exp -> unary_expression .)
    L_OP            reduce using rule 62 (exp -> unary_expression .)
    G_OP            reduce using rule 62 (exp -> unary_expression .)
    LE_OP           reduce using rule 62 (exp -> unary_expression .)
    GE_OP           reduce using rule 62 (exp -> unary_expression .)
    NOTEQUALS       reduce using rule 62 (exp -> unary_expression .)
    EQUALS_OP       reduce using rule 62 (exp -> unary_expression .)
    OR_OP           reduce using rule 62 (exp -> unary_expression .)
    AND_OP          reduce using rule 62 (exp -> unary_expression .)
    MUL_ASSIGN      reduce using rule 62 (exp -> unary_expression .)
    DIV_ASSIGN      reduce using rule 62 (exp -> unary_expression .)
    MOD_ASSIGN      reduce using rule 62 (exp -> unary_expression .)
    ADD_ASSIGN      reduce using rule 62 (exp -> unary_expression .)
    SUB_ASSIGN      reduce using rule 62 (exp -> unary_expression .)
    LEFT_ASSIGN     reduce using rule 62 (exp -> unary_expression .)
    RIGHT_ASSIGN    reduce using rule 62 (exp -> unary_expression .)
    AND_ASSIGN      reduce using rule 62 (exp -> unary_expression .)
    XOR_ASSIGN      reduce using rule 62 (exp -> unary_expression .)
    OR_ASSIGN       reduce using rule 62 (exp -> unary_expression .)
    EQUALS          reduce using rule 62 (exp -> unary_expression .)
    RPAREN          reduce using rule 62 (exp -> unary_expression .)
    COMMA           reduce using rule 62 (exp -> unary_expression .)
    RBIG            reduce using rule 62 (exp -> unary_expression .)
    RBRACE          reduce using rule 62 (exp -> unary_expression .)


state 30

    (73) unary_operator -> DECREMENT .

    VARIABLE        reduce using rule 73 (unary_operator -> DECREMENT .)
    SEMI_COLON      reduce using rule 73 (unary_operator -> DECREMENT .)
    ADD             reduce using rule 73 (unary_operator -> DECREMENT .)
    MINUS           reduce using rule 73 (unary_operator -> DECREMENT .)
    MULT            reduce using rule 73 (unary_operator -> DECREMENT .)
    DIV             reduce using rule 73 (unary_operator -> DECREMENT .)
    MOD             reduce using rule 73 (unary_operator -> DECREMENT .)
    L_OP            reduce using rule 73 (unary_operator -> DECREMENT .)
    G_OP            reduce using rule 73 (unary_operator -> DECREMENT .)
    LE_OP           reduce using rule 73 (unary_operator -> DECREMENT .)
    GE_OP           reduce using rule 73 (unary_operator -> DECREMENT .)
    NOTEQUALS       reduce using rule 73 (unary_operator -> DECREMENT .)
    EQUALS_OP       reduce using rule 73 (unary_operator -> DECREMENT .)
    OR_OP           reduce using rule 73 (unary_operator -> DECREMENT .)
    AND_OP          reduce using rule 73 (unary_operator -> DECREMENT .)
    MUL_ASSIGN      reduce using rule 73 (unary_operator -> DECREMENT .)
    DIV_ASSIGN      reduce using rule 73 (unary_operator -> DECREMENT .)
    MOD_ASSIGN      reduce using rule 73 (unary_operator -> DECREMENT .)
    ADD_ASSIGN      reduce using rule 73 (unary_operator -> DECREMENT .)
    SUB_ASSIGN      reduce using rule 73 (unary_operator -> DECREMENT .)
    LEFT_ASSIGN     reduce using rule 73 (unary_operator -> DECREMENT .)
    RIGHT_ASSIGN    reduce using rule 73 (unary_operator -> DECREMENT .)
    AND_ASSIGN      reduce using rule 73 (unary_operator -> DECREMENT .)
    XOR_ASSIGN      reduce using rule 73 (unary_operator -> DECREMENT .)
    OR_ASSIGN       reduce using rule 73 (unary_operator -> DECREMENT .)
    EQUALS          reduce using rule 73 (unary_operator -> DECREMENT .)
    RPAREN          reduce using rule 73 (unary_operator -> DECREMENT .)
    COMMA           reduce using rule 73 (unary_operator -> DECREMENT .)
    RBIG            reduce using rule 73 (unary_operator -> DECREMENT .)
    RBRACE          reduce using rule 73 (unary_operator -> DECREMENT .)


state 31

    (88) conditional_statement -> IF . LPAREN exp RPAREN statement
    (89) conditional_statement -> IF . LPAREN exp RPAREN lbrace statements rbrace
    (90) conditional_statement -> IF . LPAREN exp RPAREN statement ELSE statement
    (91) conditional_statement -> IF . LPAREN exp RPAREN lbrace statements rbrace ELSE statement
    (92) conditional_statement -> IF . LPAREN exp RPAREN statement ELSE lbrace statements rbrace
    (93) conditional_statement -> IF . LPAREN exp RPAREN lbrace statements rbrace ELSE lbrace statements rbrace

    LPAREN          shift and go to state 61


state 32

    (8) statement -> constant_statement .

    COMMENT         reduce using rule 8 (statement -> constant_statement .)
    LPAREN          reduce using rule 8 (statement -> constant_statement .)
    VARIABLE        reduce using rule 8 (statement -> constant_statement .)
    FOR             reduce using rule 8 (statement -> constant_statement .)
    WHILE           reduce using rule 8 (statement -> constant_statement .)
    DO              reduce using rule 8 (statement -> constant_statement .)
    BREAK           reduce using rule 8 (statement -> constant_statement .)
    CONTINUE        reduce using rule 8 (statement -> constant_statement .)
    RETURN          reduce using rule 8 (statement -> constant_statement .)
    IF              reduce using rule 8 (statement -> constant_statement .)
    INT             reduce using rule 8 (statement -> constant_statement .)
    FLOAT           reduce using rule 8 (statement -> constant_statement .)
    CHAR            reduce using rule 8 (statement -> constant_statement .)
    DOUBLE          reduce using rule 8 (statement -> constant_statement .)
    VOID            reduce using rule 8 (statement -> constant_statement .)
    SHORT           reduce using rule 8 (statement -> constant_statement .)
    LONG            reduce using rule 8 (statement -> constant_statement .)
    HEX_INT         reduce using rule 8 (statement -> constant_statement .)
    DOT_REAL        reduce using rule 8 (statement -> constant_statement .)
    EXP_REAL        reduce using rule 8 (statement -> constant_statement .)
    DEC_INT         reduce using rule 8 (statement -> constant_statement .)
    CHARACTER       reduce using rule 8 (statement -> constant_statement .)
    MAIN            reduce using rule 8 (statement -> constant_statement .)
    INCREMENT       reduce using rule 8 (statement -> constant_statement .)
    DECREMENT       reduce using rule 8 (statement -> constant_statement .)
    $end            reduce using rule 8 (statement -> constant_statement .)
    RBRACE          reduce using rule 8 (statement -> constant_statement .)
    ELSE            reduce using rule 8 (statement -> constant_statement .)


state 33

    (26) type -> INT .

    VARIABLE        reduce using rule 26 (type -> INT .)
    MAIN            reduce using rule 26 (type -> INT .)


state 34

    (29) type -> DOUBLE .

    VARIABLE        reduce using rule 29 (type -> DOUBLE .)
    MAIN            reduce using rule 29 (type -> DOUBLE .)


state 35

    (33) constant -> HEX_INT .

    RPAREN          reduce using rule 33 (constant -> HEX_INT .)
    ADD             reduce using rule 33 (constant -> HEX_INT .)
    MINUS           reduce using rule 33 (constant -> HEX_INT .)
    MULT            reduce using rule 33 (constant -> HEX_INT .)
    DIV             reduce using rule 33 (constant -> HEX_INT .)
    MOD             reduce using rule 33 (constant -> HEX_INT .)
    L_OP            reduce using rule 33 (constant -> HEX_INT .)
    G_OP            reduce using rule 33 (constant -> HEX_INT .)
    LE_OP           reduce using rule 33 (constant -> HEX_INT .)
    GE_OP           reduce using rule 33 (constant -> HEX_INT .)
    NOTEQUALS       reduce using rule 33 (constant -> HEX_INT .)
    EQUALS_OP       reduce using rule 33 (constant -> HEX_INT .)
    OR_OP           reduce using rule 33 (constant -> HEX_INT .)
    AND_OP          reduce using rule 33 (constant -> HEX_INT .)
    MUL_ASSIGN      reduce using rule 33 (constant -> HEX_INT .)
    DIV_ASSIGN      reduce using rule 33 (constant -> HEX_INT .)
    MOD_ASSIGN      reduce using rule 33 (constant -> HEX_INT .)
    ADD_ASSIGN      reduce using rule 33 (constant -> HEX_INT .)
    SUB_ASSIGN      reduce using rule 33 (constant -> HEX_INT .)
    LEFT_ASSIGN     reduce using rule 33 (constant -> HEX_INT .)
    RIGHT_ASSIGN    reduce using rule 33 (constant -> HEX_INT .)
    AND_ASSIGN      reduce using rule 33 (constant -> HEX_INT .)
    XOR_ASSIGN      reduce using rule 33 (constant -> HEX_INT .)
    OR_ASSIGN       reduce using rule 33 (constant -> HEX_INT .)
    EQUALS          reduce using rule 33 (constant -> HEX_INT .)
    SEMI_COLON      reduce using rule 33 (constant -> HEX_INT .)
    COMMA           reduce using rule 33 (constant -> HEX_INT .)
    RBIG            reduce using rule 33 (constant -> HEX_INT .)
    RBRACE          reduce using rule 33 (constant -> HEX_INT .)


state 36

    (94) function -> normal_function .

    RBRACE          reduce using rule 94 (function -> normal_function .)
    COMMENT         reduce using rule 94 (function -> normal_function .)
    LPAREN          reduce using rule 94 (function -> normal_function .)
    VARIABLE        reduce using rule 94 (function -> normal_function .)
    FOR             reduce using rule 94 (function -> normal_function .)
    WHILE           reduce using rule 94 (function -> normal_function .)
    DO              reduce using rule 94 (function -> normal_function .)
    BREAK           reduce using rule 94 (function -> normal_function .)
    CONTINUE        reduce using rule 94 (function -> normal_function .)
    RETURN          reduce using rule 94 (function -> normal_function .)
    IF              reduce using rule 94 (function -> normal_function .)
    INT             reduce using rule 94 (function -> normal_function .)
    FLOAT           reduce using rule 94 (function -> normal_function .)
    CHAR            reduce using rule 94 (function -> normal_function .)
    DOUBLE          reduce using rule 94 (function -> normal_function .)
    VOID            reduce using rule 94 (function -> normal_function .)
    SHORT           reduce using rule 94 (function -> normal_function .)
    LONG            reduce using rule 94 (function -> normal_function .)
    HEX_INT         reduce using rule 94 (function -> normal_function .)
    DOT_REAL        reduce using rule 94 (function -> normal_function .)
    EXP_REAL        reduce using rule 94 (function -> normal_function .)
    DEC_INT         reduce using rule 94 (function -> normal_function .)
    CHARACTER       reduce using rule 94 (function -> normal_function .)
    MAIN            reduce using rule 94 (function -> normal_function .)
    INCREMENT       reduce using rule 94 (function -> normal_function .)
    DECREMENT       reduce using rule 94 (function -> normal_function .)
    $end            reduce using rule 94 (function -> normal_function .)
    ELSE            reduce using rule 94 (function -> normal_function .)


state 37

    (27) type -> FLOAT .

    VARIABLE        reduce using rule 27 (type -> FLOAT .)
    MAIN            reduce using rule 27 (type -> FLOAT .)


state 38

    (11) constant_statement -> BREAK . SEMI_COLON

    SEMI_COLON      shift and go to state 62


state 39

    (12) constant_statement -> CONTINUE . SEMI_COLON

    SEMI_COLON      shift and go to state 63


state 40

    (5) statement -> exp . SEMI_COLON
    (38) exp -> exp . ADD exp
    (39) exp -> exp . MINUS exp
    (40) exp -> exp . MULT exp
    (41) exp -> exp . DIV exp
    (42) exp -> exp . MOD exp
    (43) exp -> exp . L_OP exp
    (44) exp -> exp . G_OP exp
    (45) exp -> exp . LE_OP exp
    (46) exp -> exp . GE_OP exp
    (47) exp -> exp . NOTEQUALS exp
    (48) exp -> exp . EQUALS_OP exp
    (49) exp -> exp . OR_OP exp
    (50) exp -> exp . AND_OP exp
    (51) exp -> exp . MUL_ASSIGN exp
    (52) exp -> exp . DIV_ASSIGN exp
    (53) exp -> exp . MOD_ASSIGN exp
    (54) exp -> exp . ADD_ASSIGN exp
    (55) exp -> exp . SUB_ASSIGN exp
    (56) exp -> exp . LEFT_ASSIGN exp
    (57) exp -> exp . RIGHT_ASSIGN exp
    (58) exp -> exp . AND_ASSIGN exp
    (59) exp -> exp . XOR_ASSIGN exp
    (60) exp -> exp . OR_ASSIGN exp
    (61) exp -> exp . EQUALS exp

    SEMI_COLON      shift and go to state 67
    ADD             shift and go to state 79
    MINUS           shift and go to state 69
    MULT            shift and go to state 70
    DIV             shift and go to state 68
    MOD             shift and go to state 88
    L_OP            shift and go to state 85
    G_OP            shift and go to state 73
    LE_OP           shift and go to state 71
    GE_OP           shift and go to state 80
    NOTEQUALS       shift and go to state 64
    EQUALS_OP       shift and go to state 65
    OR_OP           shift and go to state 74
    AND_OP          shift and go to state 78
    MUL_ASSIGN      shift and go to state 86
    DIV_ASSIGN      shift and go to state 66
    MOD_ASSIGN      shift and go to state 82
    ADD_ASSIGN      shift and go to state 76
    SUB_ASSIGN      shift and go to state 81
    LEFT_ASSIGN     shift and go to state 87
    RIGHT_ASSIGN    shift and go to state 72
    AND_ASSIGN      shift and go to state 75
    XOR_ASSIGN      shift and go to state 83
    OR_ASSIGN       shift and go to state 84
    EQUALS          shift and go to state 77


state 41

    (32) type -> LONG .

    VARIABLE        reduce using rule 32 (type -> LONG .)
    MAIN            reduce using rule 32 (type -> LONG .)


state 42

    (13) constant_statement -> RETURN SEMI_COLON .

    COMMENT         reduce using rule 13 (constant_statement -> RETURN SEMI_COLON .)
    LPAREN          reduce using rule 13 (constant_statement -> RETURN SEMI_COLON .)
    VARIABLE        reduce using rule 13 (constant_statement -> RETURN SEMI_COLON .)
    FOR             reduce using rule 13 (constant_statement -> RETURN SEMI_COLON .)
    WHILE           reduce using rule 13 (constant_statement -> RETURN SEMI_COLON .)
    DO              reduce using rule 13 (constant_statement -> RETURN SEMI_COLON .)
    BREAK           reduce using rule 13 (constant_statement -> RETURN SEMI_COLON .)
    CONTINUE        reduce using rule 13 (constant_statement -> RETURN SEMI_COLON .)
    RETURN          reduce using rule 13 (constant_statement -> RETURN SEMI_COLON .)
    IF              reduce using rule 13 (constant_statement -> RETURN SEMI_COLON .)
    INT             reduce using rule 13 (constant_statement -> RETURN SEMI_COLON .)
    FLOAT           reduce using rule 13 (constant_statement -> RETURN SEMI_COLON .)
    CHAR            reduce using rule 13 (constant_statement -> RETURN SEMI_COLON .)
    DOUBLE          reduce using rule 13 (constant_statement -> RETURN SEMI_COLON .)
    VOID            reduce using rule 13 (constant_statement -> RETURN SEMI_COLON .)
    SHORT           reduce using rule 13 (constant_statement -> RETURN SEMI_COLON .)
    LONG            reduce using rule 13 (constant_statement -> RETURN SEMI_COLON .)
    HEX_INT         reduce using rule 13 (constant_statement -> RETURN SEMI_COLON .)
    DOT_REAL        reduce using rule 13 (constant_statement -> RETURN SEMI_COLON .)
    EXP_REAL        reduce using rule 13 (constant_statement -> RETURN SEMI_COLON .)
    DEC_INT         reduce using rule 13 (constant_statement -> RETURN SEMI_COLON .)
    CHARACTER       reduce using rule 13 (constant_statement -> RETURN SEMI_COLON .)
    MAIN            reduce using rule 13 (constant_statement -> RETURN SEMI_COLON .)
    INCREMENT       reduce using rule 13 (constant_statement -> RETURN SEMI_COLON .)
    DECREMENT       reduce using rule 13 (constant_statement -> RETURN SEMI_COLON .)
    $end            reduce using rule 13 (constant_statement -> RETURN SEMI_COLON .)
    RBRACE          reduce using rule 13 (constant_statement -> RETURN SEMI_COLON .)
    ELSE            reduce using rule 13 (constant_statement -> RETURN SEMI_COLON .)


state 43

    (65) exp -> VARIABLE .
    (66) exp -> VARIABLE . LBIG exp RBIG
    (68) unary_expression -> VARIABLE . unary_operator
    (70) unary_expression -> VARIABLE . LBIG exp RBIG unary_operator
    (114) function_call -> VARIABLE . LPAREN arguments RPAREN
    (115) function_call -> VARIABLE . LPAREN RPAREN
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    RPAREN          reduce using rule 65 (exp -> VARIABLE .)
    ADD             reduce using rule 65 (exp -> VARIABLE .)
    MINUS           reduce using rule 65 (exp -> VARIABLE .)
    MULT            reduce using rule 65 (exp -> VARIABLE .)
    DIV             reduce using rule 65 (exp -> VARIABLE .)
    MOD             reduce using rule 65 (exp -> VARIABLE .)
    L_OP            reduce using rule 65 (exp -> VARIABLE .)
    G_OP            reduce using rule 65 (exp -> VARIABLE .)
    LE_OP           reduce using rule 65 (exp -> VARIABLE .)
    GE_OP           reduce using rule 65 (exp -> VARIABLE .)
    NOTEQUALS       reduce using rule 65 (exp -> VARIABLE .)
    EQUALS_OP       reduce using rule 65 (exp -> VARIABLE .)
    OR_OP           reduce using rule 65 (exp -> VARIABLE .)
    AND_OP          reduce using rule 65 (exp -> VARIABLE .)
    MUL_ASSIGN      reduce using rule 65 (exp -> VARIABLE .)
    DIV_ASSIGN      reduce using rule 65 (exp -> VARIABLE .)
    MOD_ASSIGN      reduce using rule 65 (exp -> VARIABLE .)
    ADD_ASSIGN      reduce using rule 65 (exp -> VARIABLE .)
    SUB_ASSIGN      reduce using rule 65 (exp -> VARIABLE .)
    LEFT_ASSIGN     reduce using rule 65 (exp -> VARIABLE .)
    RIGHT_ASSIGN    reduce using rule 65 (exp -> VARIABLE .)
    AND_ASSIGN      reduce using rule 65 (exp -> VARIABLE .)
    XOR_ASSIGN      reduce using rule 65 (exp -> VARIABLE .)
    OR_ASSIGN       reduce using rule 65 (exp -> VARIABLE .)
    EQUALS          reduce using rule 65 (exp -> VARIABLE .)
    SEMI_COLON      reduce using rule 65 (exp -> VARIABLE .)
    COMMA           reduce using rule 65 (exp -> VARIABLE .)
    RBIG            reduce using rule 65 (exp -> VARIABLE .)
    RBRACE          reduce using rule 65 (exp -> VARIABLE .)
    LBIG            shift and go to state 58
    LPAREN          shift and go to state 89
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    unary_operator                 shift and go to state 60

state 44

    (14) constant_statement -> RETURN exp . SEMI_COLON
    (38) exp -> exp . ADD exp
    (39) exp -> exp . MINUS exp
    (40) exp -> exp . MULT exp
    (41) exp -> exp . DIV exp
    (42) exp -> exp . MOD exp
    (43) exp -> exp . L_OP exp
    (44) exp -> exp . G_OP exp
    (45) exp -> exp . LE_OP exp
    (46) exp -> exp . GE_OP exp
    (47) exp -> exp . NOTEQUALS exp
    (48) exp -> exp . EQUALS_OP exp
    (49) exp -> exp . OR_OP exp
    (50) exp -> exp . AND_OP exp
    (51) exp -> exp . MUL_ASSIGN exp
    (52) exp -> exp . DIV_ASSIGN exp
    (53) exp -> exp . MOD_ASSIGN exp
    (54) exp -> exp . ADD_ASSIGN exp
    (55) exp -> exp . SUB_ASSIGN exp
    (56) exp -> exp . LEFT_ASSIGN exp
    (57) exp -> exp . RIGHT_ASSIGN exp
    (58) exp -> exp . AND_ASSIGN exp
    (59) exp -> exp . XOR_ASSIGN exp
    (60) exp -> exp . OR_ASSIGN exp
    (61) exp -> exp . EQUALS exp

    SEMI_COLON      shift and go to state 90
    ADD             shift and go to state 79
    MINUS           shift and go to state 69
    MULT            shift and go to state 70
    DIV             shift and go to state 68
    MOD             shift and go to state 88
    L_OP            shift and go to state 85
    G_OP            shift and go to state 73
    LE_OP           shift and go to state 71
    GE_OP           shift and go to state 80
    NOTEQUALS       shift and go to state 64
    EQUALS_OP       shift and go to state 65
    OR_OP           shift and go to state 74
    AND_OP          shift and go to state 78
    MUL_ASSIGN      shift and go to state 86
    DIV_ASSIGN      shift and go to state 66
    MOD_ASSIGN      shift and go to state 82
    ADD_ASSIGN      shift and go to state 76
    SUB_ASSIGN      shift and go to state 81
    LEFT_ASSIGN     shift and go to state 87
    RIGHT_ASSIGN    shift and go to state 72
    AND_ASSIGN      shift and go to state 75
    XOR_ASSIGN      shift and go to state 83
    OR_ASSIGN       shift and go to state 84
    EQUALS          shift and go to state 77


state 45

    (2) statements -> statements statement .

    RBRACE          reduce using rule 2 (statements -> statements statement .)
    COMMENT         reduce using rule 2 (statements -> statements statement .)
    LPAREN          reduce using rule 2 (statements -> statements statement .)
    VARIABLE        reduce using rule 2 (statements -> statements statement .)
    FOR             reduce using rule 2 (statements -> statements statement .)
    WHILE           reduce using rule 2 (statements -> statements statement .)
    DO              reduce using rule 2 (statements -> statements statement .)
    BREAK           reduce using rule 2 (statements -> statements statement .)
    CONTINUE        reduce using rule 2 (statements -> statements statement .)
    RETURN          reduce using rule 2 (statements -> statements statement .)
    IF              reduce using rule 2 (statements -> statements statement .)
    INT             reduce using rule 2 (statements -> statements statement .)
    FLOAT           reduce using rule 2 (statements -> statements statement .)
    CHAR            reduce using rule 2 (statements -> statements statement .)
    DOUBLE          reduce using rule 2 (statements -> statements statement .)
    VOID            reduce using rule 2 (statements -> statements statement .)
    SHORT           reduce using rule 2 (statements -> statements statement .)
    LONG            reduce using rule 2 (statements -> statements statement .)
    HEX_INT         reduce using rule 2 (statements -> statements statement .)
    DOT_REAL        reduce using rule 2 (statements -> statements statement .)
    EXP_REAL        reduce using rule 2 (statements -> statements statement .)
    DEC_INT         reduce using rule 2 (statements -> statements statement .)
    CHARACTER       reduce using rule 2 (statements -> statements statement .)
    MAIN            reduce using rule 2 (statements -> statements statement .)
    INCREMENT       reduce using rule 2 (statements -> statements statement .)
    DECREMENT       reduce using rule 2 (statements -> statements statement .)
    $end            reduce using rule 2 (statements -> statements statement .)


state 46

    (84) iterative_statement -> DO SEMI_COLON . WHILE LPAREN exp RPAREN SEMI_COLON

    WHILE           shift and go to state 91


state 47

    (82) iterative_statement -> DO statement . WHILE LPAREN exp RPAREN SEMI_COLON

    WHILE           shift and go to state 92


state 48

    (120) lbrace -> LBRACE .

    RBRACE          reduce using rule 120 (lbrace -> LBRACE .)
    COMMENT         reduce using rule 120 (lbrace -> LBRACE .)
    LPAREN          reduce using rule 120 (lbrace -> LBRACE .)
    VARIABLE        reduce using rule 120 (lbrace -> LBRACE .)
    FOR             reduce using rule 120 (lbrace -> LBRACE .)
    WHILE           reduce using rule 120 (lbrace -> LBRACE .)
    DO              reduce using rule 120 (lbrace -> LBRACE .)
    BREAK           reduce using rule 120 (lbrace -> LBRACE .)
    CONTINUE        reduce using rule 120 (lbrace -> LBRACE .)
    RETURN          reduce using rule 120 (lbrace -> LBRACE .)
    IF              reduce using rule 120 (lbrace -> LBRACE .)
    INT             reduce using rule 120 (lbrace -> LBRACE .)
    FLOAT           reduce using rule 120 (lbrace -> LBRACE .)
    CHAR            reduce using rule 120 (lbrace -> LBRACE .)
    DOUBLE          reduce using rule 120 (lbrace -> LBRACE .)
    VOID            reduce using rule 120 (lbrace -> LBRACE .)
    SHORT           reduce using rule 120 (lbrace -> LBRACE .)
    LONG            reduce using rule 120 (lbrace -> LBRACE .)
    HEX_INT         reduce using rule 120 (lbrace -> LBRACE .)
    DOT_REAL        reduce using rule 120 (lbrace -> LBRACE .)
    EXP_REAL        reduce using rule 120 (lbrace -> LBRACE .)
    DEC_INT         reduce using rule 120 (lbrace -> LBRACE .)
    CHARACTER       reduce using rule 120 (lbrace -> LBRACE .)
    MAIN            reduce using rule 120 (lbrace -> LBRACE .)
    INCREMENT       reduce using rule 120 (lbrace -> LBRACE .)
    DECREMENT       reduce using rule 120 (lbrace -> LBRACE .)


state 49

    (83) iterative_statement -> DO lbrace . statements rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (85) iterative_statement -> DO lbrace . rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (2) statements -> . statements statement
    (3) statements -> . statement
    (121) rbrace -> . RBRACE
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (9) statement -> . conditional_statement
    (10) statement -> . COMMENT
    (15) declaration -> . type enum_list SEMI_COLON
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (74) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (75) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace statements rbrace
    (76) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (77) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace rbrace
    (78) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (79) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (80) iterative_statement -> . WHILE LPAREN exp RPAREN lbrace statements rbrace
    (81) iterative_statement -> . WHILE LPAREN exp RPAREN lbrace rbrace
    (82) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (83) iterative_statement -> . DO lbrace statements rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (84) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (85) iterative_statement -> . DO lbrace rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (94) function -> . normal_function
    (95) function -> . main_function
    (11) constant_statement -> . BREAK SEMI_COLON
    (12) constant_statement -> . CONTINUE SEMI_COLON
    (13) constant_statement -> . RETURN SEMI_COLON
    (14) constant_statement -> . RETURN exp SEMI_COLON
    (88) conditional_statement -> . IF LPAREN exp RPAREN statement
    (89) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace
    (90) conditional_statement -> . IF LPAREN exp RPAREN statement ELSE statement
    (91) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace ELSE statement
    (92) conditional_statement -> . IF LPAREN exp RPAREN statement ELSE lbrace statements rbrace
    (93) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace ELSE lbrace statements rbrace
    (26) type -> . INT
    (27) type -> . FLOAT
    (28) type -> . CHAR
    (29) type -> . DOUBLE
    (30) type -> . VOID
    (31) type -> . SHORT
    (32) type -> . LONG
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (104) normal_function -> . type VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (105) normal_function -> . type VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (106) normal_function -> . VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (107) normal_function -> . VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (108) normal_function -> . type VARIABLE LPAREN RPAREN lbrace statements rbrace
    (109) normal_function -> . type VARIABLE LPAREN RPAREN lbrace rbrace
    (110) normal_function -> . VARIABLE LPAREN RPAREN lbrace statements rbrace
    (111) normal_function -> . VARIABLE LPAREN RPAREN lbrace rbrace
    (96) main_function -> . type MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (97) main_function -> . type MAIN LPAREN parameters RPAREN lbrace rbrace
    (98) main_function -> . MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (99) main_function -> . MAIN LPAREN parameters RPAREN lbrace rbrace
    (100) main_function -> . type MAIN LPAREN RPAREN lbrace statements rbrace
    (101) main_function -> . type MAIN LPAREN RPAREN lbrace rbrace
    (102) main_function -> . MAIN LPAREN RPAREN lbrace statements rbrace
    (103) main_function -> . MAIN LPAREN RPAREN lbrace rbrace
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    RBRACE          shift and go to state 95
    COMMENT         shift and go to state 13
    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 28
    FOR             shift and go to state 25
    WHILE           shift and go to state 9
    DO              shift and go to state 4
    BREAK           shift and go to state 38
    CONTINUE        shift and go to state 39
    RETURN          shift and go to state 1
    IF              shift and go to state 31
    INT             shift and go to state 33
    FLOAT           shift and go to state 37
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 34
    VOID            shift and go to state 5
    SHORT           shift and go to state 10
    LONG            shift and go to state 41
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    MAIN            shift and go to state 14
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    function                       shift and go to state 23
    statements                     shift and go to state 93
    rbrace                         shift and go to state 94
    unary_expression               shift and go to state 29
    type                           shift and go to state 21
    normal_function                shift and go to state 36
    function_call                  shift and go to state 7
    conditional_statement          shift and go to state 17
    main_function                  shift and go to state 2
    constant_statement             shift and go to state 32
    statement                      shift and go to state 19
    declaration                    shift and go to state 27
    exp                            shift and go to state 40
    constant                       shift and go to state 11
    iterative_statement            shift and go to state 12
    unary_operator                 shift and go to state 22

state 50

    (78) iterative_statement -> WHILE LPAREN . exp RPAREN statement
    (79) iterative_statement -> WHILE LPAREN . exp RPAREN SEMI_COLON
    (80) iterative_statement -> WHILE LPAREN . exp RPAREN lbrace statements rbrace
    (81) iterative_statement -> WHILE LPAREN . exp RPAREN lbrace rbrace
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 43
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    exp                            shift and go to state 96
    unary_expression               shift and go to state 29
    function_call                  shift and go to state 7
    constant                       shift and go to state 11
    unary_operator                 shift and go to state 22

state 51

    (98) main_function -> MAIN LPAREN . parameters RPAREN lbrace statements rbrace
    (99) main_function -> MAIN LPAREN . parameters RPAREN lbrace rbrace
    (102) main_function -> MAIN LPAREN . RPAREN lbrace statements rbrace
    (103) main_function -> MAIN LPAREN . RPAREN lbrace rbrace
    (112) parameters -> . type VARIABLE COMMA parameters
    (113) parameters -> . type VARIABLE
    (26) type -> . INT
    (27) type -> . FLOAT
    (28) type -> . CHAR
    (29) type -> . DOUBLE
    (30) type -> . VOID
    (31) type -> . SHORT
    (32) type -> . LONG

    RPAREN          shift and go to state 98
    INT             shift and go to state 33
    FLOAT           shift and go to state 37
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 34
    VOID            shift and go to state 5
    SHORT           shift and go to state 10
    LONG            shift and go to state 41

    type                           shift and go to state 99
    parameters                     shift and go to state 97

state 52

    (15) declaration -> type enum_list . SEMI_COLON

    SEMI_COLON      shift and go to state 100


state 53

    (104) normal_function -> type VARIABLE . LPAREN parameters RPAREN lbrace statements rbrace
    (105) normal_function -> type VARIABLE . LPAREN parameters RPAREN lbrace rbrace
    (108) normal_function -> type VARIABLE . LPAREN RPAREN lbrace statements rbrace
    (109) normal_function -> type VARIABLE . LPAREN RPAREN lbrace rbrace
    (16) enum_list -> VARIABLE . COMMA enum_list
    (17) enum_list -> VARIABLE . EQUALS exp COMMA enum_list
    (18) enum_list -> VARIABLE .
    (19) enum_list -> VARIABLE . EQUALS exp
    (20) enum_list -> VARIABLE . LBIG exp RBIG COMMA enum_list
    (21) enum_list -> VARIABLE . LBIG exp RBIG EQUALS LBRACE num_list RBRACE COMMA enum_list
    (22) enum_list -> VARIABLE . LBIG exp RBIG
    (23) enum_list -> VARIABLE . LBIG exp RBIG EQUALS LBRACE num_list RBRACE

    LPAREN          shift and go to state 104
    COMMA           shift and go to state 103
    EQUALS          shift and go to state 101
    SEMI_COLON      reduce using rule 18 (enum_list -> VARIABLE .)
    LBIG            shift and go to state 102


state 54

    (96) main_function -> type MAIN . LPAREN parameters RPAREN lbrace statements rbrace
    (97) main_function -> type MAIN . LPAREN parameters RPAREN lbrace rbrace
    (100) main_function -> type MAIN . LPAREN RPAREN lbrace statements rbrace
    (101) main_function -> type MAIN . LPAREN RPAREN lbrace rbrace

    LPAREN          shift and go to state 105


state 55

    (69) unary_expression -> unary_operator VARIABLE .
    (71) unary_expression -> unary_operator VARIABLE . LBIG exp RBIG

    COMMA           reduce using rule 69 (unary_expression -> unary_operator VARIABLE .)
    ADD             reduce using rule 69 (unary_expression -> unary_operator VARIABLE .)
    MINUS           reduce using rule 69 (unary_expression -> unary_operator VARIABLE .)
    MULT            reduce using rule 69 (unary_expression -> unary_operator VARIABLE .)
    DIV             reduce using rule 69 (unary_expression -> unary_operator VARIABLE .)
    MOD             reduce using rule 69 (unary_expression -> unary_operator VARIABLE .)
    L_OP            reduce using rule 69 (unary_expression -> unary_operator VARIABLE .)
    G_OP            reduce using rule 69 (unary_expression -> unary_operator VARIABLE .)
    LE_OP           reduce using rule 69 (unary_expression -> unary_operator VARIABLE .)
    GE_OP           reduce using rule 69 (unary_expression -> unary_operator VARIABLE .)
    NOTEQUALS       reduce using rule 69 (unary_expression -> unary_operator VARIABLE .)
    EQUALS_OP       reduce using rule 69 (unary_expression -> unary_operator VARIABLE .)
    OR_OP           reduce using rule 69 (unary_expression -> unary_operator VARIABLE .)
    AND_OP          reduce using rule 69 (unary_expression -> unary_operator VARIABLE .)
    MUL_ASSIGN      reduce using rule 69 (unary_expression -> unary_operator VARIABLE .)
    DIV_ASSIGN      reduce using rule 69 (unary_expression -> unary_operator VARIABLE .)
    MOD_ASSIGN      reduce using rule 69 (unary_expression -> unary_operator VARIABLE .)
    ADD_ASSIGN      reduce using rule 69 (unary_expression -> unary_operator VARIABLE .)
    SUB_ASSIGN      reduce using rule 69 (unary_expression -> unary_operator VARIABLE .)
    LEFT_ASSIGN     reduce using rule 69 (unary_expression -> unary_operator VARIABLE .)
    RIGHT_ASSIGN    reduce using rule 69 (unary_expression -> unary_operator VARIABLE .)
    AND_ASSIGN      reduce using rule 69 (unary_expression -> unary_operator VARIABLE .)
    XOR_ASSIGN      reduce using rule 69 (unary_expression -> unary_operator VARIABLE .)
    OR_ASSIGN       reduce using rule 69 (unary_expression -> unary_operator VARIABLE .)
    EQUALS          reduce using rule 69 (unary_expression -> unary_operator VARIABLE .)
    SEMI_COLON      reduce using rule 69 (unary_expression -> unary_operator VARIABLE .)
    RPAREN          reduce using rule 69 (unary_expression -> unary_operator VARIABLE .)
    RBIG            reduce using rule 69 (unary_expression -> unary_operator VARIABLE .)
    RBRACE          reduce using rule 69 (unary_expression -> unary_operator VARIABLE .)
    LBIG            shift and go to state 106


state 56

    (74) iterative_statement -> FOR LPAREN . iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (75) iterative_statement -> FOR LPAREN . iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace statements rbrace
    (76) iterative_statement -> FOR LPAREN . iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (77) iterative_statement -> FOR LPAREN . iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace rbrace
    (86) iterative_exp -> . exp COMMA iterative_exp
    (87) iterative_exp -> . exp
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 43
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    unary_expression               shift and go to state 29
    iterative_exp                  shift and go to state 107
    function_call                  shift and go to state 7
    exp                            shift and go to state 108
    constant                       shift and go to state 11
    unary_operator                 shift and go to state 22

state 57

    (63) exp -> LPAREN exp . RPAREN
    (38) exp -> exp . ADD exp
    (39) exp -> exp . MINUS exp
    (40) exp -> exp . MULT exp
    (41) exp -> exp . DIV exp
    (42) exp -> exp . MOD exp
    (43) exp -> exp . L_OP exp
    (44) exp -> exp . G_OP exp
    (45) exp -> exp . LE_OP exp
    (46) exp -> exp . GE_OP exp
    (47) exp -> exp . NOTEQUALS exp
    (48) exp -> exp . EQUALS_OP exp
    (49) exp -> exp . OR_OP exp
    (50) exp -> exp . AND_OP exp
    (51) exp -> exp . MUL_ASSIGN exp
    (52) exp -> exp . DIV_ASSIGN exp
    (53) exp -> exp . MOD_ASSIGN exp
    (54) exp -> exp . ADD_ASSIGN exp
    (55) exp -> exp . SUB_ASSIGN exp
    (56) exp -> exp . LEFT_ASSIGN exp
    (57) exp -> exp . RIGHT_ASSIGN exp
    (58) exp -> exp . AND_ASSIGN exp
    (59) exp -> exp . XOR_ASSIGN exp
    (60) exp -> exp . OR_ASSIGN exp
    (61) exp -> exp . EQUALS exp

    RPAREN          shift and go to state 109
    ADD             shift and go to state 79
    MINUS           shift and go to state 69
    MULT            shift and go to state 70
    DIV             shift and go to state 68
    MOD             shift and go to state 88
    L_OP            shift and go to state 85
    G_OP            shift and go to state 73
    LE_OP           shift and go to state 71
    GE_OP           shift and go to state 80
    NOTEQUALS       shift and go to state 64
    EQUALS_OP       shift and go to state 65
    OR_OP           shift and go to state 74
    AND_OP          shift and go to state 78
    MUL_ASSIGN      shift and go to state 86
    DIV_ASSIGN      shift and go to state 66
    MOD_ASSIGN      shift and go to state 82
    ADD_ASSIGN      shift and go to state 76
    SUB_ASSIGN      shift and go to state 81
    LEFT_ASSIGN     shift and go to state 87
    RIGHT_ASSIGN    shift and go to state 72
    AND_ASSIGN      shift and go to state 75
    XOR_ASSIGN      shift and go to state 83
    OR_ASSIGN       shift and go to state 84
    EQUALS          shift and go to state 77


state 58

    (66) exp -> VARIABLE LBIG . exp RBIG
    (70) unary_expression -> VARIABLE LBIG . exp RBIG unary_operator
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 43
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    constant                       shift and go to state 11
    unary_expression               shift and go to state 29
    function_call                  shift and go to state 7
    exp                            shift and go to state 110
    unary_operator                 shift and go to state 22

state 59

    (114) function_call -> VARIABLE LPAREN . arguments RPAREN
    (115) function_call -> VARIABLE LPAREN . RPAREN
    (106) normal_function -> VARIABLE LPAREN . parameters RPAREN lbrace statements rbrace
    (107) normal_function -> VARIABLE LPAREN . parameters RPAREN lbrace rbrace
    (110) normal_function -> VARIABLE LPAREN . RPAREN lbrace statements rbrace
    (111) normal_function -> VARIABLE LPAREN . RPAREN lbrace rbrace
    (116) arguments -> . arguments COMMA VARIABLE
    (117) arguments -> . arguments COMMA constant
    (118) arguments -> . VARIABLE
    (119) arguments -> . constant
    (112) parameters -> . type VARIABLE COMMA parameters
    (113) parameters -> . type VARIABLE
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (26) type -> . INT
    (27) type -> . FLOAT
    (28) type -> . CHAR
    (29) type -> . DOUBLE
    (30) type -> . VOID
    (31) type -> . SHORT
    (32) type -> . LONG

    RPAREN          shift and go to state 112
    VARIABLE        shift and go to state 115
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    INT             shift and go to state 33
    FLOAT           shift and go to state 37
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 34
    VOID            shift and go to state 5
    SHORT           shift and go to state 10
    LONG            shift and go to state 41

    constant                       shift and go to state 111
    parameters                     shift and go to state 113
    arguments                      shift and go to state 114
    type                           shift and go to state 99

state 60

    (68) unary_expression -> VARIABLE unary_operator .

    COMMA           reduce using rule 68 (unary_expression -> VARIABLE unary_operator .)
    ADD             reduce using rule 68 (unary_expression -> VARIABLE unary_operator .)
    MINUS           reduce using rule 68 (unary_expression -> VARIABLE unary_operator .)
    MULT            reduce using rule 68 (unary_expression -> VARIABLE unary_operator .)
    DIV             reduce using rule 68 (unary_expression -> VARIABLE unary_operator .)
    MOD             reduce using rule 68 (unary_expression -> VARIABLE unary_operator .)
    L_OP            reduce using rule 68 (unary_expression -> VARIABLE unary_operator .)
    G_OP            reduce using rule 68 (unary_expression -> VARIABLE unary_operator .)
    LE_OP           reduce using rule 68 (unary_expression -> VARIABLE unary_operator .)
    GE_OP           reduce using rule 68 (unary_expression -> VARIABLE unary_operator .)
    NOTEQUALS       reduce using rule 68 (unary_expression -> VARIABLE unary_operator .)
    EQUALS_OP       reduce using rule 68 (unary_expression -> VARIABLE unary_operator .)
    OR_OP           reduce using rule 68 (unary_expression -> VARIABLE unary_operator .)
    AND_OP          reduce using rule 68 (unary_expression -> VARIABLE unary_operator .)
    MUL_ASSIGN      reduce using rule 68 (unary_expression -> VARIABLE unary_operator .)
    DIV_ASSIGN      reduce using rule 68 (unary_expression -> VARIABLE unary_operator .)
    MOD_ASSIGN      reduce using rule 68 (unary_expression -> VARIABLE unary_operator .)
    ADD_ASSIGN      reduce using rule 68 (unary_expression -> VARIABLE unary_operator .)
    SUB_ASSIGN      reduce using rule 68 (unary_expression -> VARIABLE unary_operator .)
    LEFT_ASSIGN     reduce using rule 68 (unary_expression -> VARIABLE unary_operator .)
    RIGHT_ASSIGN    reduce using rule 68 (unary_expression -> VARIABLE unary_operator .)
    AND_ASSIGN      reduce using rule 68 (unary_expression -> VARIABLE unary_operator .)
    XOR_ASSIGN      reduce using rule 68 (unary_expression -> VARIABLE unary_operator .)
    OR_ASSIGN       reduce using rule 68 (unary_expression -> VARIABLE unary_operator .)
    EQUALS          reduce using rule 68 (unary_expression -> VARIABLE unary_operator .)
    SEMI_COLON      reduce using rule 68 (unary_expression -> VARIABLE unary_operator .)
    RPAREN          reduce using rule 68 (unary_expression -> VARIABLE unary_operator .)
    RBIG            reduce using rule 68 (unary_expression -> VARIABLE unary_operator .)
    RBRACE          reduce using rule 68 (unary_expression -> VARIABLE unary_operator .)


state 61

    (88) conditional_statement -> IF LPAREN . exp RPAREN statement
    (89) conditional_statement -> IF LPAREN . exp RPAREN lbrace statements rbrace
    (90) conditional_statement -> IF LPAREN . exp RPAREN statement ELSE statement
    (91) conditional_statement -> IF LPAREN . exp RPAREN lbrace statements rbrace ELSE statement
    (92) conditional_statement -> IF LPAREN . exp RPAREN statement ELSE lbrace statements rbrace
    (93) conditional_statement -> IF LPAREN . exp RPAREN lbrace statements rbrace ELSE lbrace statements rbrace
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 43
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    exp                            shift and go to state 116
    unary_expression               shift and go to state 29
    function_call                  shift and go to state 7
    constant                       shift and go to state 11
    unary_operator                 shift and go to state 22

state 62

    (11) constant_statement -> BREAK SEMI_COLON .

    COMMENT         reduce using rule 11 (constant_statement -> BREAK SEMI_COLON .)
    LPAREN          reduce using rule 11 (constant_statement -> BREAK SEMI_COLON .)
    VARIABLE        reduce using rule 11 (constant_statement -> BREAK SEMI_COLON .)
    FOR             reduce using rule 11 (constant_statement -> BREAK SEMI_COLON .)
    WHILE           reduce using rule 11 (constant_statement -> BREAK SEMI_COLON .)
    DO              reduce using rule 11 (constant_statement -> BREAK SEMI_COLON .)
    BREAK           reduce using rule 11 (constant_statement -> BREAK SEMI_COLON .)
    CONTINUE        reduce using rule 11 (constant_statement -> BREAK SEMI_COLON .)
    RETURN          reduce using rule 11 (constant_statement -> BREAK SEMI_COLON .)
    IF              reduce using rule 11 (constant_statement -> BREAK SEMI_COLON .)
    INT             reduce using rule 11 (constant_statement -> BREAK SEMI_COLON .)
    FLOAT           reduce using rule 11 (constant_statement -> BREAK SEMI_COLON .)
    CHAR            reduce using rule 11 (constant_statement -> BREAK SEMI_COLON .)
    DOUBLE          reduce using rule 11 (constant_statement -> BREAK SEMI_COLON .)
    VOID            reduce using rule 11 (constant_statement -> BREAK SEMI_COLON .)
    SHORT           reduce using rule 11 (constant_statement -> BREAK SEMI_COLON .)
    LONG            reduce using rule 11 (constant_statement -> BREAK SEMI_COLON .)
    HEX_INT         reduce using rule 11 (constant_statement -> BREAK SEMI_COLON .)
    DOT_REAL        reduce using rule 11 (constant_statement -> BREAK SEMI_COLON .)
    EXP_REAL        reduce using rule 11 (constant_statement -> BREAK SEMI_COLON .)
    DEC_INT         reduce using rule 11 (constant_statement -> BREAK SEMI_COLON .)
    CHARACTER       reduce using rule 11 (constant_statement -> BREAK SEMI_COLON .)
    MAIN            reduce using rule 11 (constant_statement -> BREAK SEMI_COLON .)
    INCREMENT       reduce using rule 11 (constant_statement -> BREAK SEMI_COLON .)
    DECREMENT       reduce using rule 11 (constant_statement -> BREAK SEMI_COLON .)
    $end            reduce using rule 11 (constant_statement -> BREAK SEMI_COLON .)
    RBRACE          reduce using rule 11 (constant_statement -> BREAK SEMI_COLON .)
    ELSE            reduce using rule 11 (constant_statement -> BREAK SEMI_COLON .)


state 63

    (12) constant_statement -> CONTINUE SEMI_COLON .

    COMMENT         reduce using rule 12 (constant_statement -> CONTINUE SEMI_COLON .)
    LPAREN          reduce using rule 12 (constant_statement -> CONTINUE SEMI_COLON .)
    VARIABLE        reduce using rule 12 (constant_statement -> CONTINUE SEMI_COLON .)
    FOR             reduce using rule 12 (constant_statement -> CONTINUE SEMI_COLON .)
    WHILE           reduce using rule 12 (constant_statement -> CONTINUE SEMI_COLON .)
    DO              reduce using rule 12 (constant_statement -> CONTINUE SEMI_COLON .)
    BREAK           reduce using rule 12 (constant_statement -> CONTINUE SEMI_COLON .)
    CONTINUE        reduce using rule 12 (constant_statement -> CONTINUE SEMI_COLON .)
    RETURN          reduce using rule 12 (constant_statement -> CONTINUE SEMI_COLON .)
    IF              reduce using rule 12 (constant_statement -> CONTINUE SEMI_COLON .)
    INT             reduce using rule 12 (constant_statement -> CONTINUE SEMI_COLON .)
    FLOAT           reduce using rule 12 (constant_statement -> CONTINUE SEMI_COLON .)
    CHAR            reduce using rule 12 (constant_statement -> CONTINUE SEMI_COLON .)
    DOUBLE          reduce using rule 12 (constant_statement -> CONTINUE SEMI_COLON .)
    VOID            reduce using rule 12 (constant_statement -> CONTINUE SEMI_COLON .)
    SHORT           reduce using rule 12 (constant_statement -> CONTINUE SEMI_COLON .)
    LONG            reduce using rule 12 (constant_statement -> CONTINUE SEMI_COLON .)
    HEX_INT         reduce using rule 12 (constant_statement -> CONTINUE SEMI_COLON .)
    DOT_REAL        reduce using rule 12 (constant_statement -> CONTINUE SEMI_COLON .)
    EXP_REAL        reduce using rule 12 (constant_statement -> CONTINUE SEMI_COLON .)
    DEC_INT         reduce using rule 12 (constant_statement -> CONTINUE SEMI_COLON .)
    CHARACTER       reduce using rule 12 (constant_statement -> CONTINUE SEMI_COLON .)
    MAIN            reduce using rule 12 (constant_statement -> CONTINUE SEMI_COLON .)
    INCREMENT       reduce using rule 12 (constant_statement -> CONTINUE SEMI_COLON .)
    DECREMENT       reduce using rule 12 (constant_statement -> CONTINUE SEMI_COLON .)
    $end            reduce using rule 12 (constant_statement -> CONTINUE SEMI_COLON .)
    RBRACE          reduce using rule 12 (constant_statement -> CONTINUE SEMI_COLON .)
    ELSE            reduce using rule 12 (constant_statement -> CONTINUE SEMI_COLON .)


state 64

    (47) exp -> exp NOTEQUALS . exp
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 43
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    constant                       shift and go to state 11
    unary_expression               shift and go to state 29
    function_call                  shift and go to state 7
    exp                            shift and go to state 117
    unary_operator                 shift and go to state 22

state 65

    (48) exp -> exp EQUALS_OP . exp
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 43
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    constant                       shift and go to state 11
    unary_expression               shift and go to state 29
    function_call                  shift and go to state 7
    exp                            shift and go to state 118
    unary_operator                 shift and go to state 22

state 66

    (52) exp -> exp DIV_ASSIGN . exp
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 43
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    constant                       shift and go to state 11
    unary_expression               shift and go to state 29
    function_call                  shift and go to state 7
    exp                            shift and go to state 119
    unary_operator                 shift and go to state 22

state 67

    (5) statement -> exp SEMI_COLON .

    COMMENT         reduce using rule 5 (statement -> exp SEMI_COLON .)
    LPAREN          reduce using rule 5 (statement -> exp SEMI_COLON .)
    VARIABLE        reduce using rule 5 (statement -> exp SEMI_COLON .)
    FOR             reduce using rule 5 (statement -> exp SEMI_COLON .)
    WHILE           reduce using rule 5 (statement -> exp SEMI_COLON .)
    DO              reduce using rule 5 (statement -> exp SEMI_COLON .)
    BREAK           reduce using rule 5 (statement -> exp SEMI_COLON .)
    CONTINUE        reduce using rule 5 (statement -> exp SEMI_COLON .)
    RETURN          reduce using rule 5 (statement -> exp SEMI_COLON .)
    IF              reduce using rule 5 (statement -> exp SEMI_COLON .)
    INT             reduce using rule 5 (statement -> exp SEMI_COLON .)
    FLOAT           reduce using rule 5 (statement -> exp SEMI_COLON .)
    CHAR            reduce using rule 5 (statement -> exp SEMI_COLON .)
    DOUBLE          reduce using rule 5 (statement -> exp SEMI_COLON .)
    VOID            reduce using rule 5 (statement -> exp SEMI_COLON .)
    SHORT           reduce using rule 5 (statement -> exp SEMI_COLON .)
    LONG            reduce using rule 5 (statement -> exp SEMI_COLON .)
    HEX_INT         reduce using rule 5 (statement -> exp SEMI_COLON .)
    DOT_REAL        reduce using rule 5 (statement -> exp SEMI_COLON .)
    EXP_REAL        reduce using rule 5 (statement -> exp SEMI_COLON .)
    DEC_INT         reduce using rule 5 (statement -> exp SEMI_COLON .)
    CHARACTER       reduce using rule 5 (statement -> exp SEMI_COLON .)
    MAIN            reduce using rule 5 (statement -> exp SEMI_COLON .)
    INCREMENT       reduce using rule 5 (statement -> exp SEMI_COLON .)
    DECREMENT       reduce using rule 5 (statement -> exp SEMI_COLON .)
    $end            reduce using rule 5 (statement -> exp SEMI_COLON .)
    RBRACE          reduce using rule 5 (statement -> exp SEMI_COLON .)
    ELSE            reduce using rule 5 (statement -> exp SEMI_COLON .)


state 68

    (41) exp -> exp DIV . exp
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 43
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    constant                       shift and go to state 11
    unary_expression               shift and go to state 29
    function_call                  shift and go to state 7
    exp                            shift and go to state 120
    unary_operator                 shift and go to state 22

state 69

    (39) exp -> exp MINUS . exp
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 43
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    constant                       shift and go to state 11
    unary_expression               shift and go to state 29
    function_call                  shift and go to state 7
    exp                            shift and go to state 121
    unary_operator                 shift and go to state 22

state 70

    (40) exp -> exp MULT . exp
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 43
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    constant                       shift and go to state 11
    unary_expression               shift and go to state 29
    function_call                  shift and go to state 7
    exp                            shift and go to state 122
    unary_operator                 shift and go to state 22

state 71

    (45) exp -> exp LE_OP . exp
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 43
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    constant                       shift and go to state 11
    unary_expression               shift and go to state 29
    function_call                  shift and go to state 7
    exp                            shift and go to state 123
    unary_operator                 shift and go to state 22

state 72

    (57) exp -> exp RIGHT_ASSIGN . exp
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 43
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    constant                       shift and go to state 11
    unary_expression               shift and go to state 29
    function_call                  shift and go to state 7
    exp                            shift and go to state 124
    unary_operator                 shift and go to state 22

state 73

    (44) exp -> exp G_OP . exp
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 43
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    constant                       shift and go to state 11
    unary_expression               shift and go to state 29
    function_call                  shift and go to state 7
    exp                            shift and go to state 125
    unary_operator                 shift and go to state 22

state 74

    (49) exp -> exp OR_OP . exp
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 43
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    constant                       shift and go to state 11
    unary_expression               shift and go to state 29
    function_call                  shift and go to state 7
    exp                            shift and go to state 126
    unary_operator                 shift and go to state 22

state 75

    (58) exp -> exp AND_ASSIGN . exp
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 43
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    constant                       shift and go to state 11
    unary_expression               shift and go to state 29
    function_call                  shift and go to state 7
    exp                            shift and go to state 127
    unary_operator                 shift and go to state 22

state 76

    (54) exp -> exp ADD_ASSIGN . exp
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 43
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    constant                       shift and go to state 11
    unary_expression               shift and go to state 29
    function_call                  shift and go to state 7
    exp                            shift and go to state 128
    unary_operator                 shift and go to state 22

state 77

    (61) exp -> exp EQUALS . exp
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 43
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    constant                       shift and go to state 11
    unary_expression               shift and go to state 29
    function_call                  shift and go to state 7
    exp                            shift and go to state 129
    unary_operator                 shift and go to state 22

state 78

    (50) exp -> exp AND_OP . exp
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 43
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    constant                       shift and go to state 11
    unary_expression               shift and go to state 29
    function_call                  shift and go to state 7
    exp                            shift and go to state 130
    unary_operator                 shift and go to state 22

state 79

    (38) exp -> exp ADD . exp
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 43
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    constant                       shift and go to state 11
    unary_expression               shift and go to state 29
    function_call                  shift and go to state 7
    exp                            shift and go to state 131
    unary_operator                 shift and go to state 22

state 80

    (46) exp -> exp GE_OP . exp
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 43
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    constant                       shift and go to state 11
    unary_expression               shift and go to state 29
    function_call                  shift and go to state 7
    exp                            shift and go to state 132
    unary_operator                 shift and go to state 22

state 81

    (55) exp -> exp SUB_ASSIGN . exp
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 43
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    constant                       shift and go to state 11
    unary_expression               shift and go to state 29
    function_call                  shift and go to state 7
    exp                            shift and go to state 133
    unary_operator                 shift and go to state 22

state 82

    (53) exp -> exp MOD_ASSIGN . exp
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 43
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    constant                       shift and go to state 11
    unary_expression               shift and go to state 29
    function_call                  shift and go to state 7
    exp                            shift and go to state 134
    unary_operator                 shift and go to state 22

state 83

    (59) exp -> exp XOR_ASSIGN . exp
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 43
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    constant                       shift and go to state 11
    unary_expression               shift and go to state 29
    function_call                  shift and go to state 7
    exp                            shift and go to state 135
    unary_operator                 shift and go to state 22

state 84

    (60) exp -> exp OR_ASSIGN . exp
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 43
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    constant                       shift and go to state 11
    unary_expression               shift and go to state 29
    function_call                  shift and go to state 7
    exp                            shift and go to state 136
    unary_operator                 shift and go to state 22

state 85

    (43) exp -> exp L_OP . exp
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 43
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    constant                       shift and go to state 11
    unary_expression               shift and go to state 29
    function_call                  shift and go to state 7
    exp                            shift and go to state 137
    unary_operator                 shift and go to state 22

state 86

    (51) exp -> exp MUL_ASSIGN . exp
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 43
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    constant                       shift and go to state 11
    unary_expression               shift and go to state 29
    function_call                  shift and go to state 7
    exp                            shift and go to state 138
    unary_operator                 shift and go to state 22

state 87

    (56) exp -> exp LEFT_ASSIGN . exp
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 43
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    constant                       shift and go to state 11
    unary_expression               shift and go to state 29
    function_call                  shift and go to state 7
    exp                            shift and go to state 139
    unary_operator                 shift and go to state 22

state 88

    (42) exp -> exp MOD . exp
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 43
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    constant                       shift and go to state 11
    unary_expression               shift and go to state 29
    function_call                  shift and go to state 7
    exp                            shift and go to state 140
    unary_operator                 shift and go to state 22

state 89

    (114) function_call -> VARIABLE LPAREN . arguments RPAREN
    (115) function_call -> VARIABLE LPAREN . RPAREN
    (116) arguments -> . arguments COMMA VARIABLE
    (117) arguments -> . arguments COMMA constant
    (118) arguments -> . VARIABLE
    (119) arguments -> . constant
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER

    RPAREN          shift and go to state 141
    VARIABLE        shift and go to state 115
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6

    constant                       shift and go to state 111
    arguments                      shift and go to state 114

state 90

    (14) constant_statement -> RETURN exp SEMI_COLON .

    COMMENT         reduce using rule 14 (constant_statement -> RETURN exp SEMI_COLON .)
    LPAREN          reduce using rule 14 (constant_statement -> RETURN exp SEMI_COLON .)
    VARIABLE        reduce using rule 14 (constant_statement -> RETURN exp SEMI_COLON .)
    FOR             reduce using rule 14 (constant_statement -> RETURN exp SEMI_COLON .)
    WHILE           reduce using rule 14 (constant_statement -> RETURN exp SEMI_COLON .)
    DO              reduce using rule 14 (constant_statement -> RETURN exp SEMI_COLON .)
    BREAK           reduce using rule 14 (constant_statement -> RETURN exp SEMI_COLON .)
    CONTINUE        reduce using rule 14 (constant_statement -> RETURN exp SEMI_COLON .)
    RETURN          reduce using rule 14 (constant_statement -> RETURN exp SEMI_COLON .)
    IF              reduce using rule 14 (constant_statement -> RETURN exp SEMI_COLON .)
    INT             reduce using rule 14 (constant_statement -> RETURN exp SEMI_COLON .)
    FLOAT           reduce using rule 14 (constant_statement -> RETURN exp SEMI_COLON .)
    CHAR            reduce using rule 14 (constant_statement -> RETURN exp SEMI_COLON .)
    DOUBLE          reduce using rule 14 (constant_statement -> RETURN exp SEMI_COLON .)
    VOID            reduce using rule 14 (constant_statement -> RETURN exp SEMI_COLON .)
    SHORT           reduce using rule 14 (constant_statement -> RETURN exp SEMI_COLON .)
    LONG            reduce using rule 14 (constant_statement -> RETURN exp SEMI_COLON .)
    HEX_INT         reduce using rule 14 (constant_statement -> RETURN exp SEMI_COLON .)
    DOT_REAL        reduce using rule 14 (constant_statement -> RETURN exp SEMI_COLON .)
    EXP_REAL        reduce using rule 14 (constant_statement -> RETURN exp SEMI_COLON .)
    DEC_INT         reduce using rule 14 (constant_statement -> RETURN exp SEMI_COLON .)
    CHARACTER       reduce using rule 14 (constant_statement -> RETURN exp SEMI_COLON .)
    MAIN            reduce using rule 14 (constant_statement -> RETURN exp SEMI_COLON .)
    INCREMENT       reduce using rule 14 (constant_statement -> RETURN exp SEMI_COLON .)
    DECREMENT       reduce using rule 14 (constant_statement -> RETURN exp SEMI_COLON .)
    $end            reduce using rule 14 (constant_statement -> RETURN exp SEMI_COLON .)
    RBRACE          reduce using rule 14 (constant_statement -> RETURN exp SEMI_COLON .)
    ELSE            reduce using rule 14 (constant_statement -> RETURN exp SEMI_COLON .)


state 91

    (84) iterative_statement -> DO SEMI_COLON WHILE . LPAREN exp RPAREN SEMI_COLON

    LPAREN          shift and go to state 142


state 92

    (82) iterative_statement -> DO statement WHILE . LPAREN exp RPAREN SEMI_COLON

    LPAREN          shift and go to state 143


state 93

    (83) iterative_statement -> DO lbrace statements . rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (2) statements -> statements . statement
    (121) rbrace -> . RBRACE
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (9) statement -> . conditional_statement
    (10) statement -> . COMMENT
    (15) declaration -> . type enum_list SEMI_COLON
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (74) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (75) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace statements rbrace
    (76) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (77) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace rbrace
    (78) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (79) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (80) iterative_statement -> . WHILE LPAREN exp RPAREN lbrace statements rbrace
    (81) iterative_statement -> . WHILE LPAREN exp RPAREN lbrace rbrace
    (82) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (83) iterative_statement -> . DO lbrace statements rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (84) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (85) iterative_statement -> . DO lbrace rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (94) function -> . normal_function
    (95) function -> . main_function
    (11) constant_statement -> . BREAK SEMI_COLON
    (12) constant_statement -> . CONTINUE SEMI_COLON
    (13) constant_statement -> . RETURN SEMI_COLON
    (14) constant_statement -> . RETURN exp SEMI_COLON
    (88) conditional_statement -> . IF LPAREN exp RPAREN statement
    (89) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace
    (90) conditional_statement -> . IF LPAREN exp RPAREN statement ELSE statement
    (91) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace ELSE statement
    (92) conditional_statement -> . IF LPAREN exp RPAREN statement ELSE lbrace statements rbrace
    (93) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace ELSE lbrace statements rbrace
    (26) type -> . INT
    (27) type -> . FLOAT
    (28) type -> . CHAR
    (29) type -> . DOUBLE
    (30) type -> . VOID
    (31) type -> . SHORT
    (32) type -> . LONG
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (104) normal_function -> . type VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (105) normal_function -> . type VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (106) normal_function -> . VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (107) normal_function -> . VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (108) normal_function -> . type VARIABLE LPAREN RPAREN lbrace statements rbrace
    (109) normal_function -> . type VARIABLE LPAREN RPAREN lbrace rbrace
    (110) normal_function -> . VARIABLE LPAREN RPAREN lbrace statements rbrace
    (111) normal_function -> . VARIABLE LPAREN RPAREN lbrace rbrace
    (96) main_function -> . type MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (97) main_function -> . type MAIN LPAREN parameters RPAREN lbrace rbrace
    (98) main_function -> . MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (99) main_function -> . MAIN LPAREN parameters RPAREN lbrace rbrace
    (100) main_function -> . type MAIN LPAREN RPAREN lbrace statements rbrace
    (101) main_function -> . type MAIN LPAREN RPAREN lbrace rbrace
    (102) main_function -> . MAIN LPAREN RPAREN lbrace statements rbrace
    (103) main_function -> . MAIN LPAREN RPAREN lbrace rbrace
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    RBRACE          shift and go to state 95
    COMMENT         shift and go to state 13
    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 28
    FOR             shift and go to state 25
    WHILE           shift and go to state 9
    DO              shift and go to state 4
    BREAK           shift and go to state 38
    CONTINUE        shift and go to state 39
    RETURN          shift and go to state 1
    IF              shift and go to state 31
    INT             shift and go to state 33
    FLOAT           shift and go to state 37
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 34
    VOID            shift and go to state 5
    SHORT           shift and go to state 10
    LONG            shift and go to state 41
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    MAIN            shift and go to state 14
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    function                       shift and go to state 23
    rbrace                         shift and go to state 144
    unary_expression               shift and go to state 29
    type                           shift and go to state 21
    normal_function                shift and go to state 36
    function_call                  shift and go to state 7
    conditional_statement          shift and go to state 17
    main_function                  shift and go to state 2
    constant_statement             shift and go to state 32
    statement                      shift and go to state 45
    declaration                    shift and go to state 27
    exp                            shift and go to state 40
    constant                       shift and go to state 11
    iterative_statement            shift and go to state 12
    unary_operator                 shift and go to state 22

state 94

    (85) iterative_statement -> DO lbrace rbrace . WHILE LPAREN exp RPAREN SEMI_COLON

    WHILE           shift and go to state 145


state 95

    (121) rbrace -> RBRACE .

    COMMENT         reduce using rule 121 (rbrace -> RBRACE .)
    LPAREN          reduce using rule 121 (rbrace -> RBRACE .)
    VARIABLE        reduce using rule 121 (rbrace -> RBRACE .)
    FOR             reduce using rule 121 (rbrace -> RBRACE .)
    WHILE           reduce using rule 121 (rbrace -> RBRACE .)
    DO              reduce using rule 121 (rbrace -> RBRACE .)
    BREAK           reduce using rule 121 (rbrace -> RBRACE .)
    CONTINUE        reduce using rule 121 (rbrace -> RBRACE .)
    RETURN          reduce using rule 121 (rbrace -> RBRACE .)
    IF              reduce using rule 121 (rbrace -> RBRACE .)
    INT             reduce using rule 121 (rbrace -> RBRACE .)
    FLOAT           reduce using rule 121 (rbrace -> RBRACE .)
    CHAR            reduce using rule 121 (rbrace -> RBRACE .)
    DOUBLE          reduce using rule 121 (rbrace -> RBRACE .)
    VOID            reduce using rule 121 (rbrace -> RBRACE .)
    SHORT           reduce using rule 121 (rbrace -> RBRACE .)
    LONG            reduce using rule 121 (rbrace -> RBRACE .)
    HEX_INT         reduce using rule 121 (rbrace -> RBRACE .)
    DOT_REAL        reduce using rule 121 (rbrace -> RBRACE .)
    EXP_REAL        reduce using rule 121 (rbrace -> RBRACE .)
    DEC_INT         reduce using rule 121 (rbrace -> RBRACE .)
    CHARACTER       reduce using rule 121 (rbrace -> RBRACE .)
    MAIN            reduce using rule 121 (rbrace -> RBRACE .)
    INCREMENT       reduce using rule 121 (rbrace -> RBRACE .)
    DECREMENT       reduce using rule 121 (rbrace -> RBRACE .)
    $end            reduce using rule 121 (rbrace -> RBRACE .)
    RBRACE          reduce using rule 121 (rbrace -> RBRACE .)
    ELSE            reduce using rule 121 (rbrace -> RBRACE .)


state 96

    (78) iterative_statement -> WHILE LPAREN exp . RPAREN statement
    (79) iterative_statement -> WHILE LPAREN exp . RPAREN SEMI_COLON
    (80) iterative_statement -> WHILE LPAREN exp . RPAREN lbrace statements rbrace
    (81) iterative_statement -> WHILE LPAREN exp . RPAREN lbrace rbrace
    (38) exp -> exp . ADD exp
    (39) exp -> exp . MINUS exp
    (40) exp -> exp . MULT exp
    (41) exp -> exp . DIV exp
    (42) exp -> exp . MOD exp
    (43) exp -> exp . L_OP exp
    (44) exp -> exp . G_OP exp
    (45) exp -> exp . LE_OP exp
    (46) exp -> exp . GE_OP exp
    (47) exp -> exp . NOTEQUALS exp
    (48) exp -> exp . EQUALS_OP exp
    (49) exp -> exp . OR_OP exp
    (50) exp -> exp . AND_OP exp
    (51) exp -> exp . MUL_ASSIGN exp
    (52) exp -> exp . DIV_ASSIGN exp
    (53) exp -> exp . MOD_ASSIGN exp
    (54) exp -> exp . ADD_ASSIGN exp
    (55) exp -> exp . SUB_ASSIGN exp
    (56) exp -> exp . LEFT_ASSIGN exp
    (57) exp -> exp . RIGHT_ASSIGN exp
    (58) exp -> exp . AND_ASSIGN exp
    (59) exp -> exp . XOR_ASSIGN exp
    (60) exp -> exp . OR_ASSIGN exp
    (61) exp -> exp . EQUALS exp

    RPAREN          shift and go to state 146
    ADD             shift and go to state 79
    MINUS           shift and go to state 69
    MULT            shift and go to state 70
    DIV             shift and go to state 68
    MOD             shift and go to state 88
    L_OP            shift and go to state 85
    G_OP            shift and go to state 73
    LE_OP           shift and go to state 71
    GE_OP           shift and go to state 80
    NOTEQUALS       shift and go to state 64
    EQUALS_OP       shift and go to state 65
    OR_OP           shift and go to state 74
    AND_OP          shift and go to state 78
    MUL_ASSIGN      shift and go to state 86
    DIV_ASSIGN      shift and go to state 66
    MOD_ASSIGN      shift and go to state 82
    ADD_ASSIGN      shift and go to state 76
    SUB_ASSIGN      shift and go to state 81
    LEFT_ASSIGN     shift and go to state 87
    RIGHT_ASSIGN    shift and go to state 72
    AND_ASSIGN      shift and go to state 75
    XOR_ASSIGN      shift and go to state 83
    OR_ASSIGN       shift and go to state 84
    EQUALS          shift and go to state 77


state 97

    (98) main_function -> MAIN LPAREN parameters . RPAREN lbrace statements rbrace
    (99) main_function -> MAIN LPAREN parameters . RPAREN lbrace rbrace

    RPAREN          shift and go to state 147


state 98

    (102) main_function -> MAIN LPAREN RPAREN . lbrace statements rbrace
    (103) main_function -> MAIN LPAREN RPAREN . lbrace rbrace
    (120) lbrace -> . LBRACE

    LBRACE          shift and go to state 48

    lbrace                         shift and go to state 148

state 99

    (112) parameters -> type . VARIABLE COMMA parameters
    (113) parameters -> type . VARIABLE

    VARIABLE        shift and go to state 149


state 100

    (15) declaration -> type enum_list SEMI_COLON .

    RBRACE          reduce using rule 15 (declaration -> type enum_list SEMI_COLON .)
    COMMENT         reduce using rule 15 (declaration -> type enum_list SEMI_COLON .)
    LPAREN          reduce using rule 15 (declaration -> type enum_list SEMI_COLON .)
    VARIABLE        reduce using rule 15 (declaration -> type enum_list SEMI_COLON .)
    FOR             reduce using rule 15 (declaration -> type enum_list SEMI_COLON .)
    WHILE           reduce using rule 15 (declaration -> type enum_list SEMI_COLON .)
    DO              reduce using rule 15 (declaration -> type enum_list SEMI_COLON .)
    BREAK           reduce using rule 15 (declaration -> type enum_list SEMI_COLON .)
    CONTINUE        reduce using rule 15 (declaration -> type enum_list SEMI_COLON .)
    RETURN          reduce using rule 15 (declaration -> type enum_list SEMI_COLON .)
    IF              reduce using rule 15 (declaration -> type enum_list SEMI_COLON .)
    INT             reduce using rule 15 (declaration -> type enum_list SEMI_COLON .)
    FLOAT           reduce using rule 15 (declaration -> type enum_list SEMI_COLON .)
    CHAR            reduce using rule 15 (declaration -> type enum_list SEMI_COLON .)
    DOUBLE          reduce using rule 15 (declaration -> type enum_list SEMI_COLON .)
    VOID            reduce using rule 15 (declaration -> type enum_list SEMI_COLON .)
    SHORT           reduce using rule 15 (declaration -> type enum_list SEMI_COLON .)
    LONG            reduce using rule 15 (declaration -> type enum_list SEMI_COLON .)
    HEX_INT         reduce using rule 15 (declaration -> type enum_list SEMI_COLON .)
    DOT_REAL        reduce using rule 15 (declaration -> type enum_list SEMI_COLON .)
    EXP_REAL        reduce using rule 15 (declaration -> type enum_list SEMI_COLON .)
    DEC_INT         reduce using rule 15 (declaration -> type enum_list SEMI_COLON .)
    CHARACTER       reduce using rule 15 (declaration -> type enum_list SEMI_COLON .)
    MAIN            reduce using rule 15 (declaration -> type enum_list SEMI_COLON .)
    INCREMENT       reduce using rule 15 (declaration -> type enum_list SEMI_COLON .)
    DECREMENT       reduce using rule 15 (declaration -> type enum_list SEMI_COLON .)
    $end            reduce using rule 15 (declaration -> type enum_list SEMI_COLON .)
    ELSE            reduce using rule 15 (declaration -> type enum_list SEMI_COLON .)


state 101

    (17) enum_list -> VARIABLE EQUALS . exp COMMA enum_list
    (19) enum_list -> VARIABLE EQUALS . exp
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 43
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    constant                       shift and go to state 11
    unary_expression               shift and go to state 29
    function_call                  shift and go to state 7
    exp                            shift and go to state 150
    unary_operator                 shift and go to state 22

state 102

    (20) enum_list -> VARIABLE LBIG . exp RBIG COMMA enum_list
    (21) enum_list -> VARIABLE LBIG . exp RBIG EQUALS LBRACE num_list RBRACE COMMA enum_list
    (22) enum_list -> VARIABLE LBIG . exp RBIG
    (23) enum_list -> VARIABLE LBIG . exp RBIG EQUALS LBRACE num_list RBRACE
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 43
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    constant                       shift and go to state 11
    unary_expression               shift and go to state 29
    function_call                  shift and go to state 7
    exp                            shift and go to state 151
    unary_operator                 shift and go to state 22

state 103

    (16) enum_list -> VARIABLE COMMA . enum_list
    (16) enum_list -> . VARIABLE COMMA enum_list
    (17) enum_list -> . VARIABLE EQUALS exp COMMA enum_list
    (18) enum_list -> . VARIABLE
    (19) enum_list -> . VARIABLE EQUALS exp
    (20) enum_list -> . VARIABLE LBIG exp RBIG COMMA enum_list
    (21) enum_list -> . VARIABLE LBIG exp RBIG EQUALS LBRACE num_list RBRACE COMMA enum_list
    (22) enum_list -> . VARIABLE LBIG exp RBIG
    (23) enum_list -> . VARIABLE LBIG exp RBIG EQUALS LBRACE num_list RBRACE

    VARIABLE        shift and go to state 153

    enum_list                      shift and go to state 152

state 104

    (104) normal_function -> type VARIABLE LPAREN . parameters RPAREN lbrace statements rbrace
    (105) normal_function -> type VARIABLE LPAREN . parameters RPAREN lbrace rbrace
    (108) normal_function -> type VARIABLE LPAREN . RPAREN lbrace statements rbrace
    (109) normal_function -> type VARIABLE LPAREN . RPAREN lbrace rbrace
    (112) parameters -> . type VARIABLE COMMA parameters
    (113) parameters -> . type VARIABLE
    (26) type -> . INT
    (27) type -> . FLOAT
    (28) type -> . CHAR
    (29) type -> . DOUBLE
    (30) type -> . VOID
    (31) type -> . SHORT
    (32) type -> . LONG

    RPAREN          shift and go to state 154
    INT             shift and go to state 33
    FLOAT           shift and go to state 37
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 34
    VOID            shift and go to state 5
    SHORT           shift and go to state 10
    LONG            shift and go to state 41

    type                           shift and go to state 99
    parameters                     shift and go to state 155

state 105

    (96) main_function -> type MAIN LPAREN . parameters RPAREN lbrace statements rbrace
    (97) main_function -> type MAIN LPAREN . parameters RPAREN lbrace rbrace
    (100) main_function -> type MAIN LPAREN . RPAREN lbrace statements rbrace
    (101) main_function -> type MAIN LPAREN . RPAREN lbrace rbrace
    (112) parameters -> . type VARIABLE COMMA parameters
    (113) parameters -> . type VARIABLE
    (26) type -> . INT
    (27) type -> . FLOAT
    (28) type -> . CHAR
    (29) type -> . DOUBLE
    (30) type -> . VOID
    (31) type -> . SHORT
    (32) type -> . LONG

    RPAREN          shift and go to state 156
    INT             shift and go to state 33
    FLOAT           shift and go to state 37
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 34
    VOID            shift and go to state 5
    SHORT           shift and go to state 10
    LONG            shift and go to state 41

    type                           shift and go to state 99
    parameters                     shift and go to state 157

state 106

    (71) unary_expression -> unary_operator VARIABLE LBIG . exp RBIG
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 43
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    constant                       shift and go to state 11
    unary_expression               shift and go to state 29
    function_call                  shift and go to state 7
    exp                            shift and go to state 158
    unary_operator                 shift and go to state 22

state 107

    (74) iterative_statement -> FOR LPAREN iterative_exp . SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (75) iterative_statement -> FOR LPAREN iterative_exp . SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace statements rbrace
    (76) iterative_statement -> FOR LPAREN iterative_exp . SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (77) iterative_statement -> FOR LPAREN iterative_exp . SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace rbrace

    SEMI_COLON      shift and go to state 159


state 108

    (86) iterative_exp -> exp . COMMA iterative_exp
    (87) iterative_exp -> exp .
    (38) exp -> exp . ADD exp
    (39) exp -> exp . MINUS exp
    (40) exp -> exp . MULT exp
    (41) exp -> exp . DIV exp
    (42) exp -> exp . MOD exp
    (43) exp -> exp . L_OP exp
    (44) exp -> exp . G_OP exp
    (45) exp -> exp . LE_OP exp
    (46) exp -> exp . GE_OP exp
    (47) exp -> exp . NOTEQUALS exp
    (48) exp -> exp . EQUALS_OP exp
    (49) exp -> exp . OR_OP exp
    (50) exp -> exp . AND_OP exp
    (51) exp -> exp . MUL_ASSIGN exp
    (52) exp -> exp . DIV_ASSIGN exp
    (53) exp -> exp . MOD_ASSIGN exp
    (54) exp -> exp . ADD_ASSIGN exp
    (55) exp -> exp . SUB_ASSIGN exp
    (56) exp -> exp . LEFT_ASSIGN exp
    (57) exp -> exp . RIGHT_ASSIGN exp
    (58) exp -> exp . AND_ASSIGN exp
    (59) exp -> exp . XOR_ASSIGN exp
    (60) exp -> exp . OR_ASSIGN exp
    (61) exp -> exp . EQUALS exp

    COMMA           shift and go to state 160
    SEMI_COLON      reduce using rule 87 (iterative_exp -> exp .)
    RPAREN          reduce using rule 87 (iterative_exp -> exp .)
    ADD             shift and go to state 79
    MINUS           shift and go to state 69
    MULT            shift and go to state 70
    DIV             shift and go to state 68
    MOD             shift and go to state 88
    L_OP            shift and go to state 85
    G_OP            shift and go to state 73
    LE_OP           shift and go to state 71
    GE_OP           shift and go to state 80
    NOTEQUALS       shift and go to state 64
    EQUALS_OP       shift and go to state 65
    OR_OP           shift and go to state 74
    AND_OP          shift and go to state 78
    MUL_ASSIGN      shift and go to state 86
    DIV_ASSIGN      shift and go to state 66
    MOD_ASSIGN      shift and go to state 82
    ADD_ASSIGN      shift and go to state 76
    SUB_ASSIGN      shift and go to state 81
    LEFT_ASSIGN     shift and go to state 87
    RIGHT_ASSIGN    shift and go to state 72
    AND_ASSIGN      shift and go to state 75
    XOR_ASSIGN      shift and go to state 83
    OR_ASSIGN       shift and go to state 84
    EQUALS          shift and go to state 77


state 109

    (63) exp -> LPAREN exp RPAREN .

    SEMI_COLON      reduce using rule 63 (exp -> LPAREN exp RPAREN .)
    ADD             reduce using rule 63 (exp -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 63 (exp -> LPAREN exp RPAREN .)
    MULT            reduce using rule 63 (exp -> LPAREN exp RPAREN .)
    DIV             reduce using rule 63 (exp -> LPAREN exp RPAREN .)
    MOD             reduce using rule 63 (exp -> LPAREN exp RPAREN .)
    L_OP            reduce using rule 63 (exp -> LPAREN exp RPAREN .)
    G_OP            reduce using rule 63 (exp -> LPAREN exp RPAREN .)
    LE_OP           reduce using rule 63 (exp -> LPAREN exp RPAREN .)
    GE_OP           reduce using rule 63 (exp -> LPAREN exp RPAREN .)
    NOTEQUALS       reduce using rule 63 (exp -> LPAREN exp RPAREN .)
    EQUALS_OP       reduce using rule 63 (exp -> LPAREN exp RPAREN .)
    OR_OP           reduce using rule 63 (exp -> LPAREN exp RPAREN .)
    AND_OP          reduce using rule 63 (exp -> LPAREN exp RPAREN .)
    MUL_ASSIGN      reduce using rule 63 (exp -> LPAREN exp RPAREN .)
    DIV_ASSIGN      reduce using rule 63 (exp -> LPAREN exp RPAREN .)
    MOD_ASSIGN      reduce using rule 63 (exp -> LPAREN exp RPAREN .)
    ADD_ASSIGN      reduce using rule 63 (exp -> LPAREN exp RPAREN .)
    SUB_ASSIGN      reduce using rule 63 (exp -> LPAREN exp RPAREN .)
    LEFT_ASSIGN     reduce using rule 63 (exp -> LPAREN exp RPAREN .)
    RIGHT_ASSIGN    reduce using rule 63 (exp -> LPAREN exp RPAREN .)
    AND_ASSIGN      reduce using rule 63 (exp -> LPAREN exp RPAREN .)
    XOR_ASSIGN      reduce using rule 63 (exp -> LPAREN exp RPAREN .)
    OR_ASSIGN       reduce using rule 63 (exp -> LPAREN exp RPAREN .)
    EQUALS          reduce using rule 63 (exp -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 63 (exp -> LPAREN exp RPAREN .)
    COMMA           reduce using rule 63 (exp -> LPAREN exp RPAREN .)
    RBIG            reduce using rule 63 (exp -> LPAREN exp RPAREN .)
    RBRACE          reduce using rule 63 (exp -> LPAREN exp RPAREN .)


state 110

    (66) exp -> VARIABLE LBIG exp . RBIG
    (70) unary_expression -> VARIABLE LBIG exp . RBIG unary_operator
    (38) exp -> exp . ADD exp
    (39) exp -> exp . MINUS exp
    (40) exp -> exp . MULT exp
    (41) exp -> exp . DIV exp
    (42) exp -> exp . MOD exp
    (43) exp -> exp . L_OP exp
    (44) exp -> exp . G_OP exp
    (45) exp -> exp . LE_OP exp
    (46) exp -> exp . GE_OP exp
    (47) exp -> exp . NOTEQUALS exp
    (48) exp -> exp . EQUALS_OP exp
    (49) exp -> exp . OR_OP exp
    (50) exp -> exp . AND_OP exp
    (51) exp -> exp . MUL_ASSIGN exp
    (52) exp -> exp . DIV_ASSIGN exp
    (53) exp -> exp . MOD_ASSIGN exp
    (54) exp -> exp . ADD_ASSIGN exp
    (55) exp -> exp . SUB_ASSIGN exp
    (56) exp -> exp . LEFT_ASSIGN exp
    (57) exp -> exp . RIGHT_ASSIGN exp
    (58) exp -> exp . AND_ASSIGN exp
    (59) exp -> exp . XOR_ASSIGN exp
    (60) exp -> exp . OR_ASSIGN exp
    (61) exp -> exp . EQUALS exp

    RBIG            shift and go to state 161
    ADD             shift and go to state 79
    MINUS           shift and go to state 69
    MULT            shift and go to state 70
    DIV             shift and go to state 68
    MOD             shift and go to state 88
    L_OP            shift and go to state 85
    G_OP            shift and go to state 73
    LE_OP           shift and go to state 71
    GE_OP           shift and go to state 80
    NOTEQUALS       shift and go to state 64
    EQUALS_OP       shift and go to state 65
    OR_OP           shift and go to state 74
    AND_OP          shift and go to state 78
    MUL_ASSIGN      shift and go to state 86
    DIV_ASSIGN      shift and go to state 66
    MOD_ASSIGN      shift and go to state 82
    ADD_ASSIGN      shift and go to state 76
    SUB_ASSIGN      shift and go to state 81
    LEFT_ASSIGN     shift and go to state 87
    RIGHT_ASSIGN    shift and go to state 72
    AND_ASSIGN      shift and go to state 75
    XOR_ASSIGN      shift and go to state 83
    OR_ASSIGN       shift and go to state 84
    EQUALS          shift and go to state 77


state 111

    (119) arguments -> constant .

    RPAREN          reduce using rule 119 (arguments -> constant .)
    COMMA           reduce using rule 119 (arguments -> constant .)


state 112

    (115) function_call -> VARIABLE LPAREN RPAREN .
    (110) normal_function -> VARIABLE LPAREN RPAREN . lbrace statements rbrace
    (111) normal_function -> VARIABLE LPAREN RPAREN . lbrace rbrace
    (120) lbrace -> . LBRACE

    SEMI_COLON      reduce using rule 115 (function_call -> VARIABLE LPAREN RPAREN .)
    ADD             reduce using rule 115 (function_call -> VARIABLE LPAREN RPAREN .)
    MINUS           reduce using rule 115 (function_call -> VARIABLE LPAREN RPAREN .)
    MULT            reduce using rule 115 (function_call -> VARIABLE LPAREN RPAREN .)
    DIV             reduce using rule 115 (function_call -> VARIABLE LPAREN RPAREN .)
    MOD             reduce using rule 115 (function_call -> VARIABLE LPAREN RPAREN .)
    L_OP            reduce using rule 115 (function_call -> VARIABLE LPAREN RPAREN .)
    G_OP            reduce using rule 115 (function_call -> VARIABLE LPAREN RPAREN .)
    LE_OP           reduce using rule 115 (function_call -> VARIABLE LPAREN RPAREN .)
    GE_OP           reduce using rule 115 (function_call -> VARIABLE LPAREN RPAREN .)
    NOTEQUALS       reduce using rule 115 (function_call -> VARIABLE LPAREN RPAREN .)
    EQUALS_OP       reduce using rule 115 (function_call -> VARIABLE LPAREN RPAREN .)
    OR_OP           reduce using rule 115 (function_call -> VARIABLE LPAREN RPAREN .)
    AND_OP          reduce using rule 115 (function_call -> VARIABLE LPAREN RPAREN .)
    MUL_ASSIGN      reduce using rule 115 (function_call -> VARIABLE LPAREN RPAREN .)
    DIV_ASSIGN      reduce using rule 115 (function_call -> VARIABLE LPAREN RPAREN .)
    MOD_ASSIGN      reduce using rule 115 (function_call -> VARIABLE LPAREN RPAREN .)
    ADD_ASSIGN      reduce using rule 115 (function_call -> VARIABLE LPAREN RPAREN .)
    SUB_ASSIGN      reduce using rule 115 (function_call -> VARIABLE LPAREN RPAREN .)
    LEFT_ASSIGN     reduce using rule 115 (function_call -> VARIABLE LPAREN RPAREN .)
    RIGHT_ASSIGN    reduce using rule 115 (function_call -> VARIABLE LPAREN RPAREN .)
    AND_ASSIGN      reduce using rule 115 (function_call -> VARIABLE LPAREN RPAREN .)
    XOR_ASSIGN      reduce using rule 115 (function_call -> VARIABLE LPAREN RPAREN .)
    OR_ASSIGN       reduce using rule 115 (function_call -> VARIABLE LPAREN RPAREN .)
    EQUALS          reduce using rule 115 (function_call -> VARIABLE LPAREN RPAREN .)
    LBRACE          shift and go to state 48

    lbrace                         shift and go to state 162

state 113

    (106) normal_function -> VARIABLE LPAREN parameters . RPAREN lbrace statements rbrace
    (107) normal_function -> VARIABLE LPAREN parameters . RPAREN lbrace rbrace

    RPAREN          shift and go to state 163


state 114

    (114) function_call -> VARIABLE LPAREN arguments . RPAREN
    (116) arguments -> arguments . COMMA VARIABLE
    (117) arguments -> arguments . COMMA constant

    RPAREN          shift and go to state 165
    COMMA           shift and go to state 164


state 115

    (118) arguments -> VARIABLE .

    RPAREN          reduce using rule 118 (arguments -> VARIABLE .)
    COMMA           reduce using rule 118 (arguments -> VARIABLE .)


state 116

    (88) conditional_statement -> IF LPAREN exp . RPAREN statement
    (89) conditional_statement -> IF LPAREN exp . RPAREN lbrace statements rbrace
    (90) conditional_statement -> IF LPAREN exp . RPAREN statement ELSE statement
    (91) conditional_statement -> IF LPAREN exp . RPAREN lbrace statements rbrace ELSE statement
    (92) conditional_statement -> IF LPAREN exp . RPAREN statement ELSE lbrace statements rbrace
    (93) conditional_statement -> IF LPAREN exp . RPAREN lbrace statements rbrace ELSE lbrace statements rbrace
    (38) exp -> exp . ADD exp
    (39) exp -> exp . MINUS exp
    (40) exp -> exp . MULT exp
    (41) exp -> exp . DIV exp
    (42) exp -> exp . MOD exp
    (43) exp -> exp . L_OP exp
    (44) exp -> exp . G_OP exp
    (45) exp -> exp . LE_OP exp
    (46) exp -> exp . GE_OP exp
    (47) exp -> exp . NOTEQUALS exp
    (48) exp -> exp . EQUALS_OP exp
    (49) exp -> exp . OR_OP exp
    (50) exp -> exp . AND_OP exp
    (51) exp -> exp . MUL_ASSIGN exp
    (52) exp -> exp . DIV_ASSIGN exp
    (53) exp -> exp . MOD_ASSIGN exp
    (54) exp -> exp . ADD_ASSIGN exp
    (55) exp -> exp . SUB_ASSIGN exp
    (56) exp -> exp . LEFT_ASSIGN exp
    (57) exp -> exp . RIGHT_ASSIGN exp
    (58) exp -> exp . AND_ASSIGN exp
    (59) exp -> exp . XOR_ASSIGN exp
    (60) exp -> exp . OR_ASSIGN exp
    (61) exp -> exp . EQUALS exp

    RPAREN          shift and go to state 166
    ADD             shift and go to state 79
    MINUS           shift and go to state 69
    MULT            shift and go to state 70
    DIV             shift and go to state 68
    MOD             shift and go to state 88
    L_OP            shift and go to state 85
    G_OP            shift and go to state 73
    LE_OP           shift and go to state 71
    GE_OP           shift and go to state 80
    NOTEQUALS       shift and go to state 64
    EQUALS_OP       shift and go to state 65
    OR_OP           shift and go to state 74
    AND_OP          shift and go to state 78
    MUL_ASSIGN      shift and go to state 86
    DIV_ASSIGN      shift and go to state 66
    MOD_ASSIGN      shift and go to state 82
    ADD_ASSIGN      shift and go to state 76
    SUB_ASSIGN      shift and go to state 81
    LEFT_ASSIGN     shift and go to state 87
    RIGHT_ASSIGN    shift and go to state 72
    AND_ASSIGN      shift and go to state 75
    XOR_ASSIGN      shift and go to state 83
    OR_ASSIGN       shift and go to state 84
    EQUALS          shift and go to state 77


state 117

    (47) exp -> exp NOTEQUALS exp .
    (38) exp -> exp . ADD exp
    (39) exp -> exp . MINUS exp
    (40) exp -> exp . MULT exp
    (41) exp -> exp . DIV exp
    (42) exp -> exp . MOD exp
    (43) exp -> exp . L_OP exp
    (44) exp -> exp . G_OP exp
    (45) exp -> exp . LE_OP exp
    (46) exp -> exp . GE_OP exp
    (47) exp -> exp . NOTEQUALS exp
    (48) exp -> exp . EQUALS_OP exp
    (49) exp -> exp . OR_OP exp
    (50) exp -> exp . AND_OP exp
    (51) exp -> exp . MUL_ASSIGN exp
    (52) exp -> exp . DIV_ASSIGN exp
    (53) exp -> exp . MOD_ASSIGN exp
    (54) exp -> exp . ADD_ASSIGN exp
    (55) exp -> exp . SUB_ASSIGN exp
    (56) exp -> exp . LEFT_ASSIGN exp
    (57) exp -> exp . RIGHT_ASSIGN exp
    (58) exp -> exp . AND_ASSIGN exp
    (59) exp -> exp . XOR_ASSIGN exp
    (60) exp -> exp . OR_ASSIGN exp
    (61) exp -> exp . EQUALS exp

    SEMI_COLON      reduce using rule 47 (exp -> exp NOTEQUALS exp .)
    ADD             reduce using rule 47 (exp -> exp NOTEQUALS exp .)
    MINUS           reduce using rule 47 (exp -> exp NOTEQUALS exp .)
    MULT            reduce using rule 47 (exp -> exp NOTEQUALS exp .)
    DIV             reduce using rule 47 (exp -> exp NOTEQUALS exp .)
    MOD             reduce using rule 47 (exp -> exp NOTEQUALS exp .)
    L_OP            reduce using rule 47 (exp -> exp NOTEQUALS exp .)
    G_OP            reduce using rule 47 (exp -> exp NOTEQUALS exp .)
    LE_OP           reduce using rule 47 (exp -> exp NOTEQUALS exp .)
    GE_OP           reduce using rule 47 (exp -> exp NOTEQUALS exp .)
    NOTEQUALS       reduce using rule 47 (exp -> exp NOTEQUALS exp .)
    EQUALS_OP       reduce using rule 47 (exp -> exp NOTEQUALS exp .)
    OR_OP           reduce using rule 47 (exp -> exp NOTEQUALS exp .)
    AND_OP          reduce using rule 47 (exp -> exp NOTEQUALS exp .)
    MUL_ASSIGN      reduce using rule 47 (exp -> exp NOTEQUALS exp .)
    DIV_ASSIGN      reduce using rule 47 (exp -> exp NOTEQUALS exp .)
    MOD_ASSIGN      reduce using rule 47 (exp -> exp NOTEQUALS exp .)
    ADD_ASSIGN      reduce using rule 47 (exp -> exp NOTEQUALS exp .)
    SUB_ASSIGN      reduce using rule 47 (exp -> exp NOTEQUALS exp .)
    LEFT_ASSIGN     reduce using rule 47 (exp -> exp NOTEQUALS exp .)
    RIGHT_ASSIGN    reduce using rule 47 (exp -> exp NOTEQUALS exp .)
    AND_ASSIGN      reduce using rule 47 (exp -> exp NOTEQUALS exp .)
    XOR_ASSIGN      reduce using rule 47 (exp -> exp NOTEQUALS exp .)
    OR_ASSIGN       reduce using rule 47 (exp -> exp NOTEQUALS exp .)
    EQUALS          reduce using rule 47 (exp -> exp NOTEQUALS exp .)
    RPAREN          reduce using rule 47 (exp -> exp NOTEQUALS exp .)
    COMMA           reduce using rule 47 (exp -> exp NOTEQUALS exp .)
    RBIG            reduce using rule 47 (exp -> exp NOTEQUALS exp .)
    RBRACE          reduce using rule 47 (exp -> exp NOTEQUALS exp .)

  ! ADD             [ shift and go to state 79 ]
  ! MINUS           [ shift and go to state 69 ]
  ! MULT            [ shift and go to state 70 ]
  ! DIV             [ shift and go to state 68 ]
  ! MOD             [ shift and go to state 88 ]
  ! L_OP            [ shift and go to state 85 ]
  ! G_OP            [ shift and go to state 73 ]
  ! LE_OP           [ shift and go to state 71 ]
  ! GE_OP           [ shift and go to state 80 ]
  ! NOTEQUALS       [ shift and go to state 64 ]
  ! EQUALS_OP       [ shift and go to state 65 ]
  ! OR_OP           [ shift and go to state 74 ]
  ! AND_OP          [ shift and go to state 78 ]
  ! MUL_ASSIGN      [ shift and go to state 86 ]
  ! DIV_ASSIGN      [ shift and go to state 66 ]
  ! MOD_ASSIGN      [ shift and go to state 82 ]
  ! ADD_ASSIGN      [ shift and go to state 76 ]
  ! SUB_ASSIGN      [ shift and go to state 81 ]
  ! LEFT_ASSIGN     [ shift and go to state 87 ]
  ! RIGHT_ASSIGN    [ shift and go to state 72 ]
  ! AND_ASSIGN      [ shift and go to state 75 ]
  ! XOR_ASSIGN      [ shift and go to state 83 ]
  ! OR_ASSIGN       [ shift and go to state 84 ]
  ! EQUALS          [ shift and go to state 77 ]


state 118

    (48) exp -> exp EQUALS_OP exp .
    (38) exp -> exp . ADD exp
    (39) exp -> exp . MINUS exp
    (40) exp -> exp . MULT exp
    (41) exp -> exp . DIV exp
    (42) exp -> exp . MOD exp
    (43) exp -> exp . L_OP exp
    (44) exp -> exp . G_OP exp
    (45) exp -> exp . LE_OP exp
    (46) exp -> exp . GE_OP exp
    (47) exp -> exp . NOTEQUALS exp
    (48) exp -> exp . EQUALS_OP exp
    (49) exp -> exp . OR_OP exp
    (50) exp -> exp . AND_OP exp
    (51) exp -> exp . MUL_ASSIGN exp
    (52) exp -> exp . DIV_ASSIGN exp
    (53) exp -> exp . MOD_ASSIGN exp
    (54) exp -> exp . ADD_ASSIGN exp
    (55) exp -> exp . SUB_ASSIGN exp
    (56) exp -> exp . LEFT_ASSIGN exp
    (57) exp -> exp . RIGHT_ASSIGN exp
    (58) exp -> exp . AND_ASSIGN exp
    (59) exp -> exp . XOR_ASSIGN exp
    (60) exp -> exp . OR_ASSIGN exp
    (61) exp -> exp . EQUALS exp

    SEMI_COLON      reduce using rule 48 (exp -> exp EQUALS_OP exp .)
    ADD             reduce using rule 48 (exp -> exp EQUALS_OP exp .)
    MINUS           reduce using rule 48 (exp -> exp EQUALS_OP exp .)
    MULT            reduce using rule 48 (exp -> exp EQUALS_OP exp .)
    DIV             reduce using rule 48 (exp -> exp EQUALS_OP exp .)
    MOD             reduce using rule 48 (exp -> exp EQUALS_OP exp .)
    L_OP            reduce using rule 48 (exp -> exp EQUALS_OP exp .)
    G_OP            reduce using rule 48 (exp -> exp EQUALS_OP exp .)
    LE_OP           reduce using rule 48 (exp -> exp EQUALS_OP exp .)
    GE_OP           reduce using rule 48 (exp -> exp EQUALS_OP exp .)
    NOTEQUALS       reduce using rule 48 (exp -> exp EQUALS_OP exp .)
    EQUALS_OP       reduce using rule 48 (exp -> exp EQUALS_OP exp .)
    OR_OP           reduce using rule 48 (exp -> exp EQUALS_OP exp .)
    AND_OP          reduce using rule 48 (exp -> exp EQUALS_OP exp .)
    MUL_ASSIGN      reduce using rule 48 (exp -> exp EQUALS_OP exp .)
    DIV_ASSIGN      reduce using rule 48 (exp -> exp EQUALS_OP exp .)
    MOD_ASSIGN      reduce using rule 48 (exp -> exp EQUALS_OP exp .)
    ADD_ASSIGN      reduce using rule 48 (exp -> exp EQUALS_OP exp .)
    SUB_ASSIGN      reduce using rule 48 (exp -> exp EQUALS_OP exp .)
    LEFT_ASSIGN     reduce using rule 48 (exp -> exp EQUALS_OP exp .)
    RIGHT_ASSIGN    reduce using rule 48 (exp -> exp EQUALS_OP exp .)
    AND_ASSIGN      reduce using rule 48 (exp -> exp EQUALS_OP exp .)
    XOR_ASSIGN      reduce using rule 48 (exp -> exp EQUALS_OP exp .)
    OR_ASSIGN       reduce using rule 48 (exp -> exp EQUALS_OP exp .)
    EQUALS          reduce using rule 48 (exp -> exp EQUALS_OP exp .)
    RPAREN          reduce using rule 48 (exp -> exp EQUALS_OP exp .)
    COMMA           reduce using rule 48 (exp -> exp EQUALS_OP exp .)
    RBIG            reduce using rule 48 (exp -> exp EQUALS_OP exp .)
    RBRACE          reduce using rule 48 (exp -> exp EQUALS_OP exp .)

  ! ADD             [ shift and go to state 79 ]
  ! MINUS           [ shift and go to state 69 ]
  ! MULT            [ shift and go to state 70 ]
  ! DIV             [ shift and go to state 68 ]
  ! MOD             [ shift and go to state 88 ]
  ! L_OP            [ shift and go to state 85 ]
  ! G_OP            [ shift and go to state 73 ]
  ! LE_OP           [ shift and go to state 71 ]
  ! GE_OP           [ shift and go to state 80 ]
  ! NOTEQUALS       [ shift and go to state 64 ]
  ! EQUALS_OP       [ shift and go to state 65 ]
  ! OR_OP           [ shift and go to state 74 ]
  ! AND_OP          [ shift and go to state 78 ]
  ! MUL_ASSIGN      [ shift and go to state 86 ]
  ! DIV_ASSIGN      [ shift and go to state 66 ]
  ! MOD_ASSIGN      [ shift and go to state 82 ]
  ! ADD_ASSIGN      [ shift and go to state 76 ]
  ! SUB_ASSIGN      [ shift and go to state 81 ]
  ! LEFT_ASSIGN     [ shift and go to state 87 ]
  ! RIGHT_ASSIGN    [ shift and go to state 72 ]
  ! AND_ASSIGN      [ shift and go to state 75 ]
  ! XOR_ASSIGN      [ shift and go to state 83 ]
  ! OR_ASSIGN       [ shift and go to state 84 ]
  ! EQUALS          [ shift and go to state 77 ]


state 119

    (52) exp -> exp DIV_ASSIGN exp .
    (38) exp -> exp . ADD exp
    (39) exp -> exp . MINUS exp
    (40) exp -> exp . MULT exp
    (41) exp -> exp . DIV exp
    (42) exp -> exp . MOD exp
    (43) exp -> exp . L_OP exp
    (44) exp -> exp . G_OP exp
    (45) exp -> exp . LE_OP exp
    (46) exp -> exp . GE_OP exp
    (47) exp -> exp . NOTEQUALS exp
    (48) exp -> exp . EQUALS_OP exp
    (49) exp -> exp . OR_OP exp
    (50) exp -> exp . AND_OP exp
    (51) exp -> exp . MUL_ASSIGN exp
    (52) exp -> exp . DIV_ASSIGN exp
    (53) exp -> exp . MOD_ASSIGN exp
    (54) exp -> exp . ADD_ASSIGN exp
    (55) exp -> exp . SUB_ASSIGN exp
    (56) exp -> exp . LEFT_ASSIGN exp
    (57) exp -> exp . RIGHT_ASSIGN exp
    (58) exp -> exp . AND_ASSIGN exp
    (59) exp -> exp . XOR_ASSIGN exp
    (60) exp -> exp . OR_ASSIGN exp
    (61) exp -> exp . EQUALS exp

    SEMI_COLON      reduce using rule 52 (exp -> exp DIV_ASSIGN exp .)
    RPAREN          reduce using rule 52 (exp -> exp DIV_ASSIGN exp .)
    COMMA           reduce using rule 52 (exp -> exp DIV_ASSIGN exp .)
    RBIG            reduce using rule 52 (exp -> exp DIV_ASSIGN exp .)
    RBRACE          reduce using rule 52 (exp -> exp DIV_ASSIGN exp .)
    ADD             shift and go to state 79
    MINUS           shift and go to state 69
    MULT            shift and go to state 70
    DIV             shift and go to state 68
    MOD             shift and go to state 88
    L_OP            shift and go to state 85
    G_OP            shift and go to state 73
    LE_OP           shift and go to state 71
    GE_OP           shift and go to state 80
    NOTEQUALS       shift and go to state 64
    EQUALS_OP       shift and go to state 65
    OR_OP           shift and go to state 74
    AND_OP          shift and go to state 78
    MUL_ASSIGN      shift and go to state 86
    DIV_ASSIGN      shift and go to state 66
    MOD_ASSIGN      shift and go to state 82
    ADD_ASSIGN      shift and go to state 76
    SUB_ASSIGN      shift and go to state 81
    LEFT_ASSIGN     shift and go to state 87
    RIGHT_ASSIGN    shift and go to state 72
    AND_ASSIGN      shift and go to state 75
    XOR_ASSIGN      shift and go to state 83
    OR_ASSIGN       shift and go to state 84
    EQUALS          shift and go to state 77

  ! ADD             [ reduce using rule 52 (exp -> exp DIV_ASSIGN exp .) ]
  ! MINUS           [ reduce using rule 52 (exp -> exp DIV_ASSIGN exp .) ]
  ! MULT            [ reduce using rule 52 (exp -> exp DIV_ASSIGN exp .) ]
  ! DIV             [ reduce using rule 52 (exp -> exp DIV_ASSIGN exp .) ]
  ! MOD             [ reduce using rule 52 (exp -> exp DIV_ASSIGN exp .) ]
  ! L_OP            [ reduce using rule 52 (exp -> exp DIV_ASSIGN exp .) ]
  ! G_OP            [ reduce using rule 52 (exp -> exp DIV_ASSIGN exp .) ]
  ! LE_OP           [ reduce using rule 52 (exp -> exp DIV_ASSIGN exp .) ]
  ! GE_OP           [ reduce using rule 52 (exp -> exp DIV_ASSIGN exp .) ]
  ! NOTEQUALS       [ reduce using rule 52 (exp -> exp DIV_ASSIGN exp .) ]
  ! EQUALS_OP       [ reduce using rule 52 (exp -> exp DIV_ASSIGN exp .) ]
  ! OR_OP           [ reduce using rule 52 (exp -> exp DIV_ASSIGN exp .) ]
  ! AND_OP          [ reduce using rule 52 (exp -> exp DIV_ASSIGN exp .) ]
  ! MUL_ASSIGN      [ reduce using rule 52 (exp -> exp DIV_ASSIGN exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 52 (exp -> exp DIV_ASSIGN exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 52 (exp -> exp DIV_ASSIGN exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 52 (exp -> exp DIV_ASSIGN exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 52 (exp -> exp DIV_ASSIGN exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 52 (exp -> exp DIV_ASSIGN exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 52 (exp -> exp DIV_ASSIGN exp .) ]
  ! AND_ASSIGN      [ reduce using rule 52 (exp -> exp DIV_ASSIGN exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 52 (exp -> exp DIV_ASSIGN exp .) ]
  ! OR_ASSIGN       [ reduce using rule 52 (exp -> exp DIV_ASSIGN exp .) ]
  ! EQUALS          [ reduce using rule 52 (exp -> exp DIV_ASSIGN exp .) ]


state 120

    (41) exp -> exp DIV exp .
    (38) exp -> exp . ADD exp
    (39) exp -> exp . MINUS exp
    (40) exp -> exp . MULT exp
    (41) exp -> exp . DIV exp
    (42) exp -> exp . MOD exp
    (43) exp -> exp . L_OP exp
    (44) exp -> exp . G_OP exp
    (45) exp -> exp . LE_OP exp
    (46) exp -> exp . GE_OP exp
    (47) exp -> exp . NOTEQUALS exp
    (48) exp -> exp . EQUALS_OP exp
    (49) exp -> exp . OR_OP exp
    (50) exp -> exp . AND_OP exp
    (51) exp -> exp . MUL_ASSIGN exp
    (52) exp -> exp . DIV_ASSIGN exp
    (53) exp -> exp . MOD_ASSIGN exp
    (54) exp -> exp . ADD_ASSIGN exp
    (55) exp -> exp . SUB_ASSIGN exp
    (56) exp -> exp . LEFT_ASSIGN exp
    (57) exp -> exp . RIGHT_ASSIGN exp
    (58) exp -> exp . AND_ASSIGN exp
    (59) exp -> exp . XOR_ASSIGN exp
    (60) exp -> exp . OR_ASSIGN exp
    (61) exp -> exp . EQUALS exp

    SEMI_COLON      reduce using rule 41 (exp -> exp DIV exp .)
    ADD             reduce using rule 41 (exp -> exp DIV exp .)
    MINUS           reduce using rule 41 (exp -> exp DIV exp .)
    MULT            reduce using rule 41 (exp -> exp DIV exp .)
    DIV             reduce using rule 41 (exp -> exp DIV exp .)
    MOD             reduce using rule 41 (exp -> exp DIV exp .)
    OR_OP           reduce using rule 41 (exp -> exp DIV exp .)
    AND_OP          reduce using rule 41 (exp -> exp DIV exp .)
    MUL_ASSIGN      reduce using rule 41 (exp -> exp DIV exp .)
    DIV_ASSIGN      reduce using rule 41 (exp -> exp DIV exp .)
    MOD_ASSIGN      reduce using rule 41 (exp -> exp DIV exp .)
    ADD_ASSIGN      reduce using rule 41 (exp -> exp DIV exp .)
    SUB_ASSIGN      reduce using rule 41 (exp -> exp DIV exp .)
    LEFT_ASSIGN     reduce using rule 41 (exp -> exp DIV exp .)
    RIGHT_ASSIGN    reduce using rule 41 (exp -> exp DIV exp .)
    AND_ASSIGN      reduce using rule 41 (exp -> exp DIV exp .)
    XOR_ASSIGN      reduce using rule 41 (exp -> exp DIV exp .)
    OR_ASSIGN       reduce using rule 41 (exp -> exp DIV exp .)
    EQUALS          reduce using rule 41 (exp -> exp DIV exp .)
    RPAREN          reduce using rule 41 (exp -> exp DIV exp .)
    COMMA           reduce using rule 41 (exp -> exp DIV exp .)
    RBIG            reduce using rule 41 (exp -> exp DIV exp .)
    RBRACE          reduce using rule 41 (exp -> exp DIV exp .)
    L_OP            shift and go to state 85
    G_OP            shift and go to state 73
    LE_OP           shift and go to state 71
    GE_OP           shift and go to state 80
    NOTEQUALS       shift and go to state 64
    EQUALS_OP       shift and go to state 65

  ! L_OP            [ reduce using rule 41 (exp -> exp DIV exp .) ]
  ! G_OP            [ reduce using rule 41 (exp -> exp DIV exp .) ]
  ! LE_OP           [ reduce using rule 41 (exp -> exp DIV exp .) ]
  ! GE_OP           [ reduce using rule 41 (exp -> exp DIV exp .) ]
  ! NOTEQUALS       [ reduce using rule 41 (exp -> exp DIV exp .) ]
  ! EQUALS_OP       [ reduce using rule 41 (exp -> exp DIV exp .) ]
  ! ADD             [ shift and go to state 79 ]
  ! MINUS           [ shift and go to state 69 ]
  ! MULT            [ shift and go to state 70 ]
  ! DIV             [ shift and go to state 68 ]
  ! MOD             [ shift and go to state 88 ]
  ! OR_OP           [ shift and go to state 74 ]
  ! AND_OP          [ shift and go to state 78 ]
  ! MUL_ASSIGN      [ shift and go to state 86 ]
  ! DIV_ASSIGN      [ shift and go to state 66 ]
  ! MOD_ASSIGN      [ shift and go to state 82 ]
  ! ADD_ASSIGN      [ shift and go to state 76 ]
  ! SUB_ASSIGN      [ shift and go to state 81 ]
  ! LEFT_ASSIGN     [ shift and go to state 87 ]
  ! RIGHT_ASSIGN    [ shift and go to state 72 ]
  ! AND_ASSIGN      [ shift and go to state 75 ]
  ! XOR_ASSIGN      [ shift and go to state 83 ]
  ! OR_ASSIGN       [ shift and go to state 84 ]
  ! EQUALS          [ shift and go to state 77 ]


state 121

    (39) exp -> exp MINUS exp .
    (38) exp -> exp . ADD exp
    (39) exp -> exp . MINUS exp
    (40) exp -> exp . MULT exp
    (41) exp -> exp . DIV exp
    (42) exp -> exp . MOD exp
    (43) exp -> exp . L_OP exp
    (44) exp -> exp . G_OP exp
    (45) exp -> exp . LE_OP exp
    (46) exp -> exp . GE_OP exp
    (47) exp -> exp . NOTEQUALS exp
    (48) exp -> exp . EQUALS_OP exp
    (49) exp -> exp . OR_OP exp
    (50) exp -> exp . AND_OP exp
    (51) exp -> exp . MUL_ASSIGN exp
    (52) exp -> exp . DIV_ASSIGN exp
    (53) exp -> exp . MOD_ASSIGN exp
    (54) exp -> exp . ADD_ASSIGN exp
    (55) exp -> exp . SUB_ASSIGN exp
    (56) exp -> exp . LEFT_ASSIGN exp
    (57) exp -> exp . RIGHT_ASSIGN exp
    (58) exp -> exp . AND_ASSIGN exp
    (59) exp -> exp . XOR_ASSIGN exp
    (60) exp -> exp . OR_ASSIGN exp
    (61) exp -> exp . EQUALS exp

    SEMI_COLON      reduce using rule 39 (exp -> exp MINUS exp .)
    ADD             reduce using rule 39 (exp -> exp MINUS exp .)
    MINUS           reduce using rule 39 (exp -> exp MINUS exp .)
    OR_OP           reduce using rule 39 (exp -> exp MINUS exp .)
    AND_OP          reduce using rule 39 (exp -> exp MINUS exp .)
    MUL_ASSIGN      reduce using rule 39 (exp -> exp MINUS exp .)
    DIV_ASSIGN      reduce using rule 39 (exp -> exp MINUS exp .)
    MOD_ASSIGN      reduce using rule 39 (exp -> exp MINUS exp .)
    ADD_ASSIGN      reduce using rule 39 (exp -> exp MINUS exp .)
    SUB_ASSIGN      reduce using rule 39 (exp -> exp MINUS exp .)
    LEFT_ASSIGN     reduce using rule 39 (exp -> exp MINUS exp .)
    RIGHT_ASSIGN    reduce using rule 39 (exp -> exp MINUS exp .)
    AND_ASSIGN      reduce using rule 39 (exp -> exp MINUS exp .)
    XOR_ASSIGN      reduce using rule 39 (exp -> exp MINUS exp .)
    OR_ASSIGN       reduce using rule 39 (exp -> exp MINUS exp .)
    EQUALS          reduce using rule 39 (exp -> exp MINUS exp .)
    RPAREN          reduce using rule 39 (exp -> exp MINUS exp .)
    COMMA           reduce using rule 39 (exp -> exp MINUS exp .)
    RBIG            reduce using rule 39 (exp -> exp MINUS exp .)
    RBRACE          reduce using rule 39 (exp -> exp MINUS exp .)
    MULT            shift and go to state 70
    DIV             shift and go to state 68
    MOD             shift and go to state 88
    L_OP            shift and go to state 85
    G_OP            shift and go to state 73
    LE_OP           shift and go to state 71
    GE_OP           shift and go to state 80
    NOTEQUALS       shift and go to state 64
    EQUALS_OP       shift and go to state 65

  ! MULT            [ reduce using rule 39 (exp -> exp MINUS exp .) ]
  ! DIV             [ reduce using rule 39 (exp -> exp MINUS exp .) ]
  ! MOD             [ reduce using rule 39 (exp -> exp MINUS exp .) ]
  ! L_OP            [ reduce using rule 39 (exp -> exp MINUS exp .) ]
  ! G_OP            [ reduce using rule 39 (exp -> exp MINUS exp .) ]
  ! LE_OP           [ reduce using rule 39 (exp -> exp MINUS exp .) ]
  ! GE_OP           [ reduce using rule 39 (exp -> exp MINUS exp .) ]
  ! NOTEQUALS       [ reduce using rule 39 (exp -> exp MINUS exp .) ]
  ! EQUALS_OP       [ reduce using rule 39 (exp -> exp MINUS exp .) ]
  ! ADD             [ shift and go to state 79 ]
  ! MINUS           [ shift and go to state 69 ]
  ! OR_OP           [ shift and go to state 74 ]
  ! AND_OP          [ shift and go to state 78 ]
  ! MUL_ASSIGN      [ shift and go to state 86 ]
  ! DIV_ASSIGN      [ shift and go to state 66 ]
  ! MOD_ASSIGN      [ shift and go to state 82 ]
  ! ADD_ASSIGN      [ shift and go to state 76 ]
  ! SUB_ASSIGN      [ shift and go to state 81 ]
  ! LEFT_ASSIGN     [ shift and go to state 87 ]
  ! RIGHT_ASSIGN    [ shift and go to state 72 ]
  ! AND_ASSIGN      [ shift and go to state 75 ]
  ! XOR_ASSIGN      [ shift and go to state 83 ]
  ! OR_ASSIGN       [ shift and go to state 84 ]
  ! EQUALS          [ shift and go to state 77 ]


state 122

    (40) exp -> exp MULT exp .
    (38) exp -> exp . ADD exp
    (39) exp -> exp . MINUS exp
    (40) exp -> exp . MULT exp
    (41) exp -> exp . DIV exp
    (42) exp -> exp . MOD exp
    (43) exp -> exp . L_OP exp
    (44) exp -> exp . G_OP exp
    (45) exp -> exp . LE_OP exp
    (46) exp -> exp . GE_OP exp
    (47) exp -> exp . NOTEQUALS exp
    (48) exp -> exp . EQUALS_OP exp
    (49) exp -> exp . OR_OP exp
    (50) exp -> exp . AND_OP exp
    (51) exp -> exp . MUL_ASSIGN exp
    (52) exp -> exp . DIV_ASSIGN exp
    (53) exp -> exp . MOD_ASSIGN exp
    (54) exp -> exp . ADD_ASSIGN exp
    (55) exp -> exp . SUB_ASSIGN exp
    (56) exp -> exp . LEFT_ASSIGN exp
    (57) exp -> exp . RIGHT_ASSIGN exp
    (58) exp -> exp . AND_ASSIGN exp
    (59) exp -> exp . XOR_ASSIGN exp
    (60) exp -> exp . OR_ASSIGN exp
    (61) exp -> exp . EQUALS exp

    SEMI_COLON      reduce using rule 40 (exp -> exp MULT exp .)
    ADD             reduce using rule 40 (exp -> exp MULT exp .)
    MINUS           reduce using rule 40 (exp -> exp MULT exp .)
    MULT            reduce using rule 40 (exp -> exp MULT exp .)
    DIV             reduce using rule 40 (exp -> exp MULT exp .)
    MOD             reduce using rule 40 (exp -> exp MULT exp .)
    OR_OP           reduce using rule 40 (exp -> exp MULT exp .)
    AND_OP          reduce using rule 40 (exp -> exp MULT exp .)
    MUL_ASSIGN      reduce using rule 40 (exp -> exp MULT exp .)
    DIV_ASSIGN      reduce using rule 40 (exp -> exp MULT exp .)
    MOD_ASSIGN      reduce using rule 40 (exp -> exp MULT exp .)
    ADD_ASSIGN      reduce using rule 40 (exp -> exp MULT exp .)
    SUB_ASSIGN      reduce using rule 40 (exp -> exp MULT exp .)
    LEFT_ASSIGN     reduce using rule 40 (exp -> exp MULT exp .)
    RIGHT_ASSIGN    reduce using rule 40 (exp -> exp MULT exp .)
    AND_ASSIGN      reduce using rule 40 (exp -> exp MULT exp .)
    XOR_ASSIGN      reduce using rule 40 (exp -> exp MULT exp .)
    OR_ASSIGN       reduce using rule 40 (exp -> exp MULT exp .)
    EQUALS          reduce using rule 40 (exp -> exp MULT exp .)
    RPAREN          reduce using rule 40 (exp -> exp MULT exp .)
    COMMA           reduce using rule 40 (exp -> exp MULT exp .)
    RBIG            reduce using rule 40 (exp -> exp MULT exp .)
    RBRACE          reduce using rule 40 (exp -> exp MULT exp .)
    L_OP            shift and go to state 85
    G_OP            shift and go to state 73
    LE_OP           shift and go to state 71
    GE_OP           shift and go to state 80
    NOTEQUALS       shift and go to state 64
    EQUALS_OP       shift and go to state 65

  ! L_OP            [ reduce using rule 40 (exp -> exp MULT exp .) ]
  ! G_OP            [ reduce using rule 40 (exp -> exp MULT exp .) ]
  ! LE_OP           [ reduce using rule 40 (exp -> exp MULT exp .) ]
  ! GE_OP           [ reduce using rule 40 (exp -> exp MULT exp .) ]
  ! NOTEQUALS       [ reduce using rule 40 (exp -> exp MULT exp .) ]
  ! EQUALS_OP       [ reduce using rule 40 (exp -> exp MULT exp .) ]
  ! ADD             [ shift and go to state 79 ]
  ! MINUS           [ shift and go to state 69 ]
  ! MULT            [ shift and go to state 70 ]
  ! DIV             [ shift and go to state 68 ]
  ! MOD             [ shift and go to state 88 ]
  ! OR_OP           [ shift and go to state 74 ]
  ! AND_OP          [ shift and go to state 78 ]
  ! MUL_ASSIGN      [ shift and go to state 86 ]
  ! DIV_ASSIGN      [ shift and go to state 66 ]
  ! MOD_ASSIGN      [ shift and go to state 82 ]
  ! ADD_ASSIGN      [ shift and go to state 76 ]
  ! SUB_ASSIGN      [ shift and go to state 81 ]
  ! LEFT_ASSIGN     [ shift and go to state 87 ]
  ! RIGHT_ASSIGN    [ shift and go to state 72 ]
  ! AND_ASSIGN      [ shift and go to state 75 ]
  ! XOR_ASSIGN      [ shift and go to state 83 ]
  ! OR_ASSIGN       [ shift and go to state 84 ]
  ! EQUALS          [ shift and go to state 77 ]


state 123

    (45) exp -> exp LE_OP exp .
    (38) exp -> exp . ADD exp
    (39) exp -> exp . MINUS exp
    (40) exp -> exp . MULT exp
    (41) exp -> exp . DIV exp
    (42) exp -> exp . MOD exp
    (43) exp -> exp . L_OP exp
    (44) exp -> exp . G_OP exp
    (45) exp -> exp . LE_OP exp
    (46) exp -> exp . GE_OP exp
    (47) exp -> exp . NOTEQUALS exp
    (48) exp -> exp . EQUALS_OP exp
    (49) exp -> exp . OR_OP exp
    (50) exp -> exp . AND_OP exp
    (51) exp -> exp . MUL_ASSIGN exp
    (52) exp -> exp . DIV_ASSIGN exp
    (53) exp -> exp . MOD_ASSIGN exp
    (54) exp -> exp . ADD_ASSIGN exp
    (55) exp -> exp . SUB_ASSIGN exp
    (56) exp -> exp . LEFT_ASSIGN exp
    (57) exp -> exp . RIGHT_ASSIGN exp
    (58) exp -> exp . AND_ASSIGN exp
    (59) exp -> exp . XOR_ASSIGN exp
    (60) exp -> exp . OR_ASSIGN exp
    (61) exp -> exp . EQUALS exp

    SEMI_COLON      reduce using rule 45 (exp -> exp LE_OP exp .)
    ADD             reduce using rule 45 (exp -> exp LE_OP exp .)
    MINUS           reduce using rule 45 (exp -> exp LE_OP exp .)
    MULT            reduce using rule 45 (exp -> exp LE_OP exp .)
    DIV             reduce using rule 45 (exp -> exp LE_OP exp .)
    MOD             reduce using rule 45 (exp -> exp LE_OP exp .)
    L_OP            reduce using rule 45 (exp -> exp LE_OP exp .)
    G_OP            reduce using rule 45 (exp -> exp LE_OP exp .)
    LE_OP           reduce using rule 45 (exp -> exp LE_OP exp .)
    GE_OP           reduce using rule 45 (exp -> exp LE_OP exp .)
    OR_OP           reduce using rule 45 (exp -> exp LE_OP exp .)
    AND_OP          reduce using rule 45 (exp -> exp LE_OP exp .)
    MUL_ASSIGN      reduce using rule 45 (exp -> exp LE_OP exp .)
    DIV_ASSIGN      reduce using rule 45 (exp -> exp LE_OP exp .)
    MOD_ASSIGN      reduce using rule 45 (exp -> exp LE_OP exp .)
    ADD_ASSIGN      reduce using rule 45 (exp -> exp LE_OP exp .)
    SUB_ASSIGN      reduce using rule 45 (exp -> exp LE_OP exp .)
    LEFT_ASSIGN     reduce using rule 45 (exp -> exp LE_OP exp .)
    RIGHT_ASSIGN    reduce using rule 45 (exp -> exp LE_OP exp .)
    AND_ASSIGN      reduce using rule 45 (exp -> exp LE_OP exp .)
    XOR_ASSIGN      reduce using rule 45 (exp -> exp LE_OP exp .)
    OR_ASSIGN       reduce using rule 45 (exp -> exp LE_OP exp .)
    EQUALS          reduce using rule 45 (exp -> exp LE_OP exp .)
    RPAREN          reduce using rule 45 (exp -> exp LE_OP exp .)
    COMMA           reduce using rule 45 (exp -> exp LE_OP exp .)
    RBIG            reduce using rule 45 (exp -> exp LE_OP exp .)
    RBRACE          reduce using rule 45 (exp -> exp LE_OP exp .)
    NOTEQUALS       shift and go to state 64
    EQUALS_OP       shift and go to state 65

  ! NOTEQUALS       [ reduce using rule 45 (exp -> exp LE_OP exp .) ]
  ! EQUALS_OP       [ reduce using rule 45 (exp -> exp LE_OP exp .) ]
  ! ADD             [ shift and go to state 79 ]
  ! MINUS           [ shift and go to state 69 ]
  ! MULT            [ shift and go to state 70 ]
  ! DIV             [ shift and go to state 68 ]
  ! MOD             [ shift and go to state 88 ]
  ! L_OP            [ shift and go to state 85 ]
  ! G_OP            [ shift and go to state 73 ]
  ! LE_OP           [ shift and go to state 71 ]
  ! GE_OP           [ shift and go to state 80 ]
  ! OR_OP           [ shift and go to state 74 ]
  ! AND_OP          [ shift and go to state 78 ]
  ! MUL_ASSIGN      [ shift and go to state 86 ]
  ! DIV_ASSIGN      [ shift and go to state 66 ]
  ! MOD_ASSIGN      [ shift and go to state 82 ]
  ! ADD_ASSIGN      [ shift and go to state 76 ]
  ! SUB_ASSIGN      [ shift and go to state 81 ]
  ! LEFT_ASSIGN     [ shift and go to state 87 ]
  ! RIGHT_ASSIGN    [ shift and go to state 72 ]
  ! AND_ASSIGN      [ shift and go to state 75 ]
  ! XOR_ASSIGN      [ shift and go to state 83 ]
  ! OR_ASSIGN       [ shift and go to state 84 ]
  ! EQUALS          [ shift and go to state 77 ]


state 124

    (57) exp -> exp RIGHT_ASSIGN exp .
    (38) exp -> exp . ADD exp
    (39) exp -> exp . MINUS exp
    (40) exp -> exp . MULT exp
    (41) exp -> exp . DIV exp
    (42) exp -> exp . MOD exp
    (43) exp -> exp . L_OP exp
    (44) exp -> exp . G_OP exp
    (45) exp -> exp . LE_OP exp
    (46) exp -> exp . GE_OP exp
    (47) exp -> exp . NOTEQUALS exp
    (48) exp -> exp . EQUALS_OP exp
    (49) exp -> exp . OR_OP exp
    (50) exp -> exp . AND_OP exp
    (51) exp -> exp . MUL_ASSIGN exp
    (52) exp -> exp . DIV_ASSIGN exp
    (53) exp -> exp . MOD_ASSIGN exp
    (54) exp -> exp . ADD_ASSIGN exp
    (55) exp -> exp . SUB_ASSIGN exp
    (56) exp -> exp . LEFT_ASSIGN exp
    (57) exp -> exp . RIGHT_ASSIGN exp
    (58) exp -> exp . AND_ASSIGN exp
    (59) exp -> exp . XOR_ASSIGN exp
    (60) exp -> exp . OR_ASSIGN exp
    (61) exp -> exp . EQUALS exp

    SEMI_COLON      reduce using rule 57 (exp -> exp RIGHT_ASSIGN exp .)
    RPAREN          reduce using rule 57 (exp -> exp RIGHT_ASSIGN exp .)
    COMMA           reduce using rule 57 (exp -> exp RIGHT_ASSIGN exp .)
    RBIG            reduce using rule 57 (exp -> exp RIGHT_ASSIGN exp .)
    RBRACE          reduce using rule 57 (exp -> exp RIGHT_ASSIGN exp .)
    ADD             shift and go to state 79
    MINUS           shift and go to state 69
    MULT            shift and go to state 70
    DIV             shift and go to state 68
    MOD             shift and go to state 88
    L_OP            shift and go to state 85
    G_OP            shift and go to state 73
    LE_OP           shift and go to state 71
    GE_OP           shift and go to state 80
    NOTEQUALS       shift and go to state 64
    EQUALS_OP       shift and go to state 65
    OR_OP           shift and go to state 74
    AND_OP          shift and go to state 78
    MUL_ASSIGN      shift and go to state 86
    DIV_ASSIGN      shift and go to state 66
    MOD_ASSIGN      shift and go to state 82
    ADD_ASSIGN      shift and go to state 76
    SUB_ASSIGN      shift and go to state 81
    LEFT_ASSIGN     shift and go to state 87
    RIGHT_ASSIGN    shift and go to state 72
    AND_ASSIGN      shift and go to state 75
    XOR_ASSIGN      shift and go to state 83
    OR_ASSIGN       shift and go to state 84
    EQUALS          shift and go to state 77

  ! ADD             [ reduce using rule 57 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! MINUS           [ reduce using rule 57 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! MULT            [ reduce using rule 57 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! DIV             [ reduce using rule 57 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! MOD             [ reduce using rule 57 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! L_OP            [ reduce using rule 57 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! G_OP            [ reduce using rule 57 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! LE_OP           [ reduce using rule 57 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! GE_OP           [ reduce using rule 57 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! NOTEQUALS       [ reduce using rule 57 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! EQUALS_OP       [ reduce using rule 57 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! OR_OP           [ reduce using rule 57 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! AND_OP          [ reduce using rule 57 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! MUL_ASSIGN      [ reduce using rule 57 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 57 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 57 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 57 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 57 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 57 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 57 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! AND_ASSIGN      [ reduce using rule 57 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 57 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! OR_ASSIGN       [ reduce using rule 57 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! EQUALS          [ reduce using rule 57 (exp -> exp RIGHT_ASSIGN exp .) ]


state 125

    (44) exp -> exp G_OP exp .
    (38) exp -> exp . ADD exp
    (39) exp -> exp . MINUS exp
    (40) exp -> exp . MULT exp
    (41) exp -> exp . DIV exp
    (42) exp -> exp . MOD exp
    (43) exp -> exp . L_OP exp
    (44) exp -> exp . G_OP exp
    (45) exp -> exp . LE_OP exp
    (46) exp -> exp . GE_OP exp
    (47) exp -> exp . NOTEQUALS exp
    (48) exp -> exp . EQUALS_OP exp
    (49) exp -> exp . OR_OP exp
    (50) exp -> exp . AND_OP exp
    (51) exp -> exp . MUL_ASSIGN exp
    (52) exp -> exp . DIV_ASSIGN exp
    (53) exp -> exp . MOD_ASSIGN exp
    (54) exp -> exp . ADD_ASSIGN exp
    (55) exp -> exp . SUB_ASSIGN exp
    (56) exp -> exp . LEFT_ASSIGN exp
    (57) exp -> exp . RIGHT_ASSIGN exp
    (58) exp -> exp . AND_ASSIGN exp
    (59) exp -> exp . XOR_ASSIGN exp
    (60) exp -> exp . OR_ASSIGN exp
    (61) exp -> exp . EQUALS exp

    SEMI_COLON      reduce using rule 44 (exp -> exp G_OP exp .)
    ADD             reduce using rule 44 (exp -> exp G_OP exp .)
    MINUS           reduce using rule 44 (exp -> exp G_OP exp .)
    MULT            reduce using rule 44 (exp -> exp G_OP exp .)
    DIV             reduce using rule 44 (exp -> exp G_OP exp .)
    MOD             reduce using rule 44 (exp -> exp G_OP exp .)
    L_OP            reduce using rule 44 (exp -> exp G_OP exp .)
    G_OP            reduce using rule 44 (exp -> exp G_OP exp .)
    LE_OP           reduce using rule 44 (exp -> exp G_OP exp .)
    GE_OP           reduce using rule 44 (exp -> exp G_OP exp .)
    OR_OP           reduce using rule 44 (exp -> exp G_OP exp .)
    AND_OP          reduce using rule 44 (exp -> exp G_OP exp .)
    MUL_ASSIGN      reduce using rule 44 (exp -> exp G_OP exp .)
    DIV_ASSIGN      reduce using rule 44 (exp -> exp G_OP exp .)
    MOD_ASSIGN      reduce using rule 44 (exp -> exp G_OP exp .)
    ADD_ASSIGN      reduce using rule 44 (exp -> exp G_OP exp .)
    SUB_ASSIGN      reduce using rule 44 (exp -> exp G_OP exp .)
    LEFT_ASSIGN     reduce using rule 44 (exp -> exp G_OP exp .)
    RIGHT_ASSIGN    reduce using rule 44 (exp -> exp G_OP exp .)
    AND_ASSIGN      reduce using rule 44 (exp -> exp G_OP exp .)
    XOR_ASSIGN      reduce using rule 44 (exp -> exp G_OP exp .)
    OR_ASSIGN       reduce using rule 44 (exp -> exp G_OP exp .)
    EQUALS          reduce using rule 44 (exp -> exp G_OP exp .)
    RPAREN          reduce using rule 44 (exp -> exp G_OP exp .)
    COMMA           reduce using rule 44 (exp -> exp G_OP exp .)
    RBIG            reduce using rule 44 (exp -> exp G_OP exp .)
    RBRACE          reduce using rule 44 (exp -> exp G_OP exp .)
    NOTEQUALS       shift and go to state 64
    EQUALS_OP       shift and go to state 65

  ! NOTEQUALS       [ reduce using rule 44 (exp -> exp G_OP exp .) ]
  ! EQUALS_OP       [ reduce using rule 44 (exp -> exp G_OP exp .) ]
  ! ADD             [ shift and go to state 79 ]
  ! MINUS           [ shift and go to state 69 ]
  ! MULT            [ shift and go to state 70 ]
  ! DIV             [ shift and go to state 68 ]
  ! MOD             [ shift and go to state 88 ]
  ! L_OP            [ shift and go to state 85 ]
  ! G_OP            [ shift and go to state 73 ]
  ! LE_OP           [ shift and go to state 71 ]
  ! GE_OP           [ shift and go to state 80 ]
  ! OR_OP           [ shift and go to state 74 ]
  ! AND_OP          [ shift and go to state 78 ]
  ! MUL_ASSIGN      [ shift and go to state 86 ]
  ! DIV_ASSIGN      [ shift and go to state 66 ]
  ! MOD_ASSIGN      [ shift and go to state 82 ]
  ! ADD_ASSIGN      [ shift and go to state 76 ]
  ! SUB_ASSIGN      [ shift and go to state 81 ]
  ! LEFT_ASSIGN     [ shift and go to state 87 ]
  ! RIGHT_ASSIGN    [ shift and go to state 72 ]
  ! AND_ASSIGN      [ shift and go to state 75 ]
  ! XOR_ASSIGN      [ shift and go to state 83 ]
  ! OR_ASSIGN       [ shift and go to state 84 ]
  ! EQUALS          [ shift and go to state 77 ]


state 126

    (49) exp -> exp OR_OP exp .
    (38) exp -> exp . ADD exp
    (39) exp -> exp . MINUS exp
    (40) exp -> exp . MULT exp
    (41) exp -> exp . DIV exp
    (42) exp -> exp . MOD exp
    (43) exp -> exp . L_OP exp
    (44) exp -> exp . G_OP exp
    (45) exp -> exp . LE_OP exp
    (46) exp -> exp . GE_OP exp
    (47) exp -> exp . NOTEQUALS exp
    (48) exp -> exp . EQUALS_OP exp
    (49) exp -> exp . OR_OP exp
    (50) exp -> exp . AND_OP exp
    (51) exp -> exp . MUL_ASSIGN exp
    (52) exp -> exp . DIV_ASSIGN exp
    (53) exp -> exp . MOD_ASSIGN exp
    (54) exp -> exp . ADD_ASSIGN exp
    (55) exp -> exp . SUB_ASSIGN exp
    (56) exp -> exp . LEFT_ASSIGN exp
    (57) exp -> exp . RIGHT_ASSIGN exp
    (58) exp -> exp . AND_ASSIGN exp
    (59) exp -> exp . XOR_ASSIGN exp
    (60) exp -> exp . OR_ASSIGN exp
    (61) exp -> exp . EQUALS exp

    SEMI_COLON      reduce using rule 49 (exp -> exp OR_OP exp .)
    OR_OP           reduce using rule 49 (exp -> exp OR_OP exp .)
    AND_OP          reduce using rule 49 (exp -> exp OR_OP exp .)
    MUL_ASSIGN      reduce using rule 49 (exp -> exp OR_OP exp .)
    DIV_ASSIGN      reduce using rule 49 (exp -> exp OR_OP exp .)
    MOD_ASSIGN      reduce using rule 49 (exp -> exp OR_OP exp .)
    ADD_ASSIGN      reduce using rule 49 (exp -> exp OR_OP exp .)
    SUB_ASSIGN      reduce using rule 49 (exp -> exp OR_OP exp .)
    LEFT_ASSIGN     reduce using rule 49 (exp -> exp OR_OP exp .)
    RIGHT_ASSIGN    reduce using rule 49 (exp -> exp OR_OP exp .)
    AND_ASSIGN      reduce using rule 49 (exp -> exp OR_OP exp .)
    XOR_ASSIGN      reduce using rule 49 (exp -> exp OR_OP exp .)
    OR_ASSIGN       reduce using rule 49 (exp -> exp OR_OP exp .)
    EQUALS          reduce using rule 49 (exp -> exp OR_OP exp .)
    RPAREN          reduce using rule 49 (exp -> exp OR_OP exp .)
    COMMA           reduce using rule 49 (exp -> exp OR_OP exp .)
    RBIG            reduce using rule 49 (exp -> exp OR_OP exp .)
    RBRACE          reduce using rule 49 (exp -> exp OR_OP exp .)
    ADD             shift and go to state 79
    MINUS           shift and go to state 69
    MULT            shift and go to state 70
    DIV             shift and go to state 68
    MOD             shift and go to state 88
    L_OP            shift and go to state 85
    G_OP            shift and go to state 73
    LE_OP           shift and go to state 71
    GE_OP           shift and go to state 80
    NOTEQUALS       shift and go to state 64
    EQUALS_OP       shift and go to state 65

  ! ADD             [ reduce using rule 49 (exp -> exp OR_OP exp .) ]
  ! MINUS           [ reduce using rule 49 (exp -> exp OR_OP exp .) ]
  ! MULT            [ reduce using rule 49 (exp -> exp OR_OP exp .) ]
  ! DIV             [ reduce using rule 49 (exp -> exp OR_OP exp .) ]
  ! MOD             [ reduce using rule 49 (exp -> exp OR_OP exp .) ]
  ! L_OP            [ reduce using rule 49 (exp -> exp OR_OP exp .) ]
  ! G_OP            [ reduce using rule 49 (exp -> exp OR_OP exp .) ]
  ! LE_OP           [ reduce using rule 49 (exp -> exp OR_OP exp .) ]
  ! GE_OP           [ reduce using rule 49 (exp -> exp OR_OP exp .) ]
  ! NOTEQUALS       [ reduce using rule 49 (exp -> exp OR_OP exp .) ]
  ! EQUALS_OP       [ reduce using rule 49 (exp -> exp OR_OP exp .) ]
  ! OR_OP           [ shift and go to state 74 ]
  ! AND_OP          [ shift and go to state 78 ]
  ! MUL_ASSIGN      [ shift and go to state 86 ]
  ! DIV_ASSIGN      [ shift and go to state 66 ]
  ! MOD_ASSIGN      [ shift and go to state 82 ]
  ! ADD_ASSIGN      [ shift and go to state 76 ]
  ! SUB_ASSIGN      [ shift and go to state 81 ]
  ! LEFT_ASSIGN     [ shift and go to state 87 ]
  ! RIGHT_ASSIGN    [ shift and go to state 72 ]
  ! AND_ASSIGN      [ shift and go to state 75 ]
  ! XOR_ASSIGN      [ shift and go to state 83 ]
  ! OR_ASSIGN       [ shift and go to state 84 ]
  ! EQUALS          [ shift and go to state 77 ]


state 127

    (58) exp -> exp AND_ASSIGN exp .
    (38) exp -> exp . ADD exp
    (39) exp -> exp . MINUS exp
    (40) exp -> exp . MULT exp
    (41) exp -> exp . DIV exp
    (42) exp -> exp . MOD exp
    (43) exp -> exp . L_OP exp
    (44) exp -> exp . G_OP exp
    (45) exp -> exp . LE_OP exp
    (46) exp -> exp . GE_OP exp
    (47) exp -> exp . NOTEQUALS exp
    (48) exp -> exp . EQUALS_OP exp
    (49) exp -> exp . OR_OP exp
    (50) exp -> exp . AND_OP exp
    (51) exp -> exp . MUL_ASSIGN exp
    (52) exp -> exp . DIV_ASSIGN exp
    (53) exp -> exp . MOD_ASSIGN exp
    (54) exp -> exp . ADD_ASSIGN exp
    (55) exp -> exp . SUB_ASSIGN exp
    (56) exp -> exp . LEFT_ASSIGN exp
    (57) exp -> exp . RIGHT_ASSIGN exp
    (58) exp -> exp . AND_ASSIGN exp
    (59) exp -> exp . XOR_ASSIGN exp
    (60) exp -> exp . OR_ASSIGN exp
    (61) exp -> exp . EQUALS exp

    SEMI_COLON      reduce using rule 58 (exp -> exp AND_ASSIGN exp .)
    RPAREN          reduce using rule 58 (exp -> exp AND_ASSIGN exp .)
    COMMA           reduce using rule 58 (exp -> exp AND_ASSIGN exp .)
    RBIG            reduce using rule 58 (exp -> exp AND_ASSIGN exp .)
    RBRACE          reduce using rule 58 (exp -> exp AND_ASSIGN exp .)
    ADD             shift and go to state 79
    MINUS           shift and go to state 69
    MULT            shift and go to state 70
    DIV             shift and go to state 68
    MOD             shift and go to state 88
    L_OP            shift and go to state 85
    G_OP            shift and go to state 73
    LE_OP           shift and go to state 71
    GE_OP           shift and go to state 80
    NOTEQUALS       shift and go to state 64
    EQUALS_OP       shift and go to state 65
    OR_OP           shift and go to state 74
    AND_OP          shift and go to state 78
    MUL_ASSIGN      shift and go to state 86
    DIV_ASSIGN      shift and go to state 66
    MOD_ASSIGN      shift and go to state 82
    ADD_ASSIGN      shift and go to state 76
    SUB_ASSIGN      shift and go to state 81
    LEFT_ASSIGN     shift and go to state 87
    RIGHT_ASSIGN    shift and go to state 72
    AND_ASSIGN      shift and go to state 75
    XOR_ASSIGN      shift and go to state 83
    OR_ASSIGN       shift and go to state 84
    EQUALS          shift and go to state 77

  ! ADD             [ reduce using rule 58 (exp -> exp AND_ASSIGN exp .) ]
  ! MINUS           [ reduce using rule 58 (exp -> exp AND_ASSIGN exp .) ]
  ! MULT            [ reduce using rule 58 (exp -> exp AND_ASSIGN exp .) ]
  ! DIV             [ reduce using rule 58 (exp -> exp AND_ASSIGN exp .) ]
  ! MOD             [ reduce using rule 58 (exp -> exp AND_ASSIGN exp .) ]
  ! L_OP            [ reduce using rule 58 (exp -> exp AND_ASSIGN exp .) ]
  ! G_OP            [ reduce using rule 58 (exp -> exp AND_ASSIGN exp .) ]
  ! LE_OP           [ reduce using rule 58 (exp -> exp AND_ASSIGN exp .) ]
  ! GE_OP           [ reduce using rule 58 (exp -> exp AND_ASSIGN exp .) ]
  ! NOTEQUALS       [ reduce using rule 58 (exp -> exp AND_ASSIGN exp .) ]
  ! EQUALS_OP       [ reduce using rule 58 (exp -> exp AND_ASSIGN exp .) ]
  ! OR_OP           [ reduce using rule 58 (exp -> exp AND_ASSIGN exp .) ]
  ! AND_OP          [ reduce using rule 58 (exp -> exp AND_ASSIGN exp .) ]
  ! MUL_ASSIGN      [ reduce using rule 58 (exp -> exp AND_ASSIGN exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 58 (exp -> exp AND_ASSIGN exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 58 (exp -> exp AND_ASSIGN exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 58 (exp -> exp AND_ASSIGN exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 58 (exp -> exp AND_ASSIGN exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 58 (exp -> exp AND_ASSIGN exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 58 (exp -> exp AND_ASSIGN exp .) ]
  ! AND_ASSIGN      [ reduce using rule 58 (exp -> exp AND_ASSIGN exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 58 (exp -> exp AND_ASSIGN exp .) ]
  ! OR_ASSIGN       [ reduce using rule 58 (exp -> exp AND_ASSIGN exp .) ]
  ! EQUALS          [ reduce using rule 58 (exp -> exp AND_ASSIGN exp .) ]


state 128

    (54) exp -> exp ADD_ASSIGN exp .
    (38) exp -> exp . ADD exp
    (39) exp -> exp . MINUS exp
    (40) exp -> exp . MULT exp
    (41) exp -> exp . DIV exp
    (42) exp -> exp . MOD exp
    (43) exp -> exp . L_OP exp
    (44) exp -> exp . G_OP exp
    (45) exp -> exp . LE_OP exp
    (46) exp -> exp . GE_OP exp
    (47) exp -> exp . NOTEQUALS exp
    (48) exp -> exp . EQUALS_OP exp
    (49) exp -> exp . OR_OP exp
    (50) exp -> exp . AND_OP exp
    (51) exp -> exp . MUL_ASSIGN exp
    (52) exp -> exp . DIV_ASSIGN exp
    (53) exp -> exp . MOD_ASSIGN exp
    (54) exp -> exp . ADD_ASSIGN exp
    (55) exp -> exp . SUB_ASSIGN exp
    (56) exp -> exp . LEFT_ASSIGN exp
    (57) exp -> exp . RIGHT_ASSIGN exp
    (58) exp -> exp . AND_ASSIGN exp
    (59) exp -> exp . XOR_ASSIGN exp
    (60) exp -> exp . OR_ASSIGN exp
    (61) exp -> exp . EQUALS exp

    SEMI_COLON      reduce using rule 54 (exp -> exp ADD_ASSIGN exp .)
    RPAREN          reduce using rule 54 (exp -> exp ADD_ASSIGN exp .)
    COMMA           reduce using rule 54 (exp -> exp ADD_ASSIGN exp .)
    RBIG            reduce using rule 54 (exp -> exp ADD_ASSIGN exp .)
    RBRACE          reduce using rule 54 (exp -> exp ADD_ASSIGN exp .)
    ADD             shift and go to state 79
    MINUS           shift and go to state 69
    MULT            shift and go to state 70
    DIV             shift and go to state 68
    MOD             shift and go to state 88
    L_OP            shift and go to state 85
    G_OP            shift and go to state 73
    LE_OP           shift and go to state 71
    GE_OP           shift and go to state 80
    NOTEQUALS       shift and go to state 64
    EQUALS_OP       shift and go to state 65
    OR_OP           shift and go to state 74
    AND_OP          shift and go to state 78
    MUL_ASSIGN      shift and go to state 86
    DIV_ASSIGN      shift and go to state 66
    MOD_ASSIGN      shift and go to state 82
    ADD_ASSIGN      shift and go to state 76
    SUB_ASSIGN      shift and go to state 81
    LEFT_ASSIGN     shift and go to state 87
    RIGHT_ASSIGN    shift and go to state 72
    AND_ASSIGN      shift and go to state 75
    XOR_ASSIGN      shift and go to state 83
    OR_ASSIGN       shift and go to state 84
    EQUALS          shift and go to state 77

  ! ADD             [ reduce using rule 54 (exp -> exp ADD_ASSIGN exp .) ]
  ! MINUS           [ reduce using rule 54 (exp -> exp ADD_ASSIGN exp .) ]
  ! MULT            [ reduce using rule 54 (exp -> exp ADD_ASSIGN exp .) ]
  ! DIV             [ reduce using rule 54 (exp -> exp ADD_ASSIGN exp .) ]
  ! MOD             [ reduce using rule 54 (exp -> exp ADD_ASSIGN exp .) ]
  ! L_OP            [ reduce using rule 54 (exp -> exp ADD_ASSIGN exp .) ]
  ! G_OP            [ reduce using rule 54 (exp -> exp ADD_ASSIGN exp .) ]
  ! LE_OP           [ reduce using rule 54 (exp -> exp ADD_ASSIGN exp .) ]
  ! GE_OP           [ reduce using rule 54 (exp -> exp ADD_ASSIGN exp .) ]
  ! NOTEQUALS       [ reduce using rule 54 (exp -> exp ADD_ASSIGN exp .) ]
  ! EQUALS_OP       [ reduce using rule 54 (exp -> exp ADD_ASSIGN exp .) ]
  ! OR_OP           [ reduce using rule 54 (exp -> exp ADD_ASSIGN exp .) ]
  ! AND_OP          [ reduce using rule 54 (exp -> exp ADD_ASSIGN exp .) ]
  ! MUL_ASSIGN      [ reduce using rule 54 (exp -> exp ADD_ASSIGN exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 54 (exp -> exp ADD_ASSIGN exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 54 (exp -> exp ADD_ASSIGN exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 54 (exp -> exp ADD_ASSIGN exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 54 (exp -> exp ADD_ASSIGN exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 54 (exp -> exp ADD_ASSIGN exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 54 (exp -> exp ADD_ASSIGN exp .) ]
  ! AND_ASSIGN      [ reduce using rule 54 (exp -> exp ADD_ASSIGN exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 54 (exp -> exp ADD_ASSIGN exp .) ]
  ! OR_ASSIGN       [ reduce using rule 54 (exp -> exp ADD_ASSIGN exp .) ]
  ! EQUALS          [ reduce using rule 54 (exp -> exp ADD_ASSIGN exp .) ]


state 129

    (61) exp -> exp EQUALS exp .
    (38) exp -> exp . ADD exp
    (39) exp -> exp . MINUS exp
    (40) exp -> exp . MULT exp
    (41) exp -> exp . DIV exp
    (42) exp -> exp . MOD exp
    (43) exp -> exp . L_OP exp
    (44) exp -> exp . G_OP exp
    (45) exp -> exp . LE_OP exp
    (46) exp -> exp . GE_OP exp
    (47) exp -> exp . NOTEQUALS exp
    (48) exp -> exp . EQUALS_OP exp
    (49) exp -> exp . OR_OP exp
    (50) exp -> exp . AND_OP exp
    (51) exp -> exp . MUL_ASSIGN exp
    (52) exp -> exp . DIV_ASSIGN exp
    (53) exp -> exp . MOD_ASSIGN exp
    (54) exp -> exp . ADD_ASSIGN exp
    (55) exp -> exp . SUB_ASSIGN exp
    (56) exp -> exp . LEFT_ASSIGN exp
    (57) exp -> exp . RIGHT_ASSIGN exp
    (58) exp -> exp . AND_ASSIGN exp
    (59) exp -> exp . XOR_ASSIGN exp
    (60) exp -> exp . OR_ASSIGN exp
    (61) exp -> exp . EQUALS exp

    SEMI_COLON      reduce using rule 61 (exp -> exp EQUALS exp .)
    RPAREN          reduce using rule 61 (exp -> exp EQUALS exp .)
    COMMA           reduce using rule 61 (exp -> exp EQUALS exp .)
    RBIG            reduce using rule 61 (exp -> exp EQUALS exp .)
    RBRACE          reduce using rule 61 (exp -> exp EQUALS exp .)
    ADD             shift and go to state 79
    MINUS           shift and go to state 69
    MULT            shift and go to state 70
    DIV             shift and go to state 68
    MOD             shift and go to state 88
    L_OP            shift and go to state 85
    G_OP            shift and go to state 73
    LE_OP           shift and go to state 71
    GE_OP           shift and go to state 80
    NOTEQUALS       shift and go to state 64
    EQUALS_OP       shift and go to state 65
    OR_OP           shift and go to state 74
    AND_OP          shift and go to state 78
    MUL_ASSIGN      shift and go to state 86
    DIV_ASSIGN      shift and go to state 66
    MOD_ASSIGN      shift and go to state 82
    ADD_ASSIGN      shift and go to state 76
    SUB_ASSIGN      shift and go to state 81
    LEFT_ASSIGN     shift and go to state 87
    RIGHT_ASSIGN    shift and go to state 72
    AND_ASSIGN      shift and go to state 75
    XOR_ASSIGN      shift and go to state 83
    OR_ASSIGN       shift and go to state 84
    EQUALS          shift and go to state 77

  ! ADD             [ reduce using rule 61 (exp -> exp EQUALS exp .) ]
  ! MINUS           [ reduce using rule 61 (exp -> exp EQUALS exp .) ]
  ! MULT            [ reduce using rule 61 (exp -> exp EQUALS exp .) ]
  ! DIV             [ reduce using rule 61 (exp -> exp EQUALS exp .) ]
  ! MOD             [ reduce using rule 61 (exp -> exp EQUALS exp .) ]
  ! L_OP            [ reduce using rule 61 (exp -> exp EQUALS exp .) ]
  ! G_OP            [ reduce using rule 61 (exp -> exp EQUALS exp .) ]
  ! LE_OP           [ reduce using rule 61 (exp -> exp EQUALS exp .) ]
  ! GE_OP           [ reduce using rule 61 (exp -> exp EQUALS exp .) ]
  ! NOTEQUALS       [ reduce using rule 61 (exp -> exp EQUALS exp .) ]
  ! EQUALS_OP       [ reduce using rule 61 (exp -> exp EQUALS exp .) ]
  ! OR_OP           [ reduce using rule 61 (exp -> exp EQUALS exp .) ]
  ! AND_OP          [ reduce using rule 61 (exp -> exp EQUALS exp .) ]
  ! MUL_ASSIGN      [ reduce using rule 61 (exp -> exp EQUALS exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 61 (exp -> exp EQUALS exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 61 (exp -> exp EQUALS exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 61 (exp -> exp EQUALS exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 61 (exp -> exp EQUALS exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 61 (exp -> exp EQUALS exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 61 (exp -> exp EQUALS exp .) ]
  ! AND_ASSIGN      [ reduce using rule 61 (exp -> exp EQUALS exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 61 (exp -> exp EQUALS exp .) ]
  ! OR_ASSIGN       [ reduce using rule 61 (exp -> exp EQUALS exp .) ]
  ! EQUALS          [ reduce using rule 61 (exp -> exp EQUALS exp .) ]


state 130

    (50) exp -> exp AND_OP exp .
    (38) exp -> exp . ADD exp
    (39) exp -> exp . MINUS exp
    (40) exp -> exp . MULT exp
    (41) exp -> exp . DIV exp
    (42) exp -> exp . MOD exp
    (43) exp -> exp . L_OP exp
    (44) exp -> exp . G_OP exp
    (45) exp -> exp . LE_OP exp
    (46) exp -> exp . GE_OP exp
    (47) exp -> exp . NOTEQUALS exp
    (48) exp -> exp . EQUALS_OP exp
    (49) exp -> exp . OR_OP exp
    (50) exp -> exp . AND_OP exp
    (51) exp -> exp . MUL_ASSIGN exp
    (52) exp -> exp . DIV_ASSIGN exp
    (53) exp -> exp . MOD_ASSIGN exp
    (54) exp -> exp . ADD_ASSIGN exp
    (55) exp -> exp . SUB_ASSIGN exp
    (56) exp -> exp . LEFT_ASSIGN exp
    (57) exp -> exp . RIGHT_ASSIGN exp
    (58) exp -> exp . AND_ASSIGN exp
    (59) exp -> exp . XOR_ASSIGN exp
    (60) exp -> exp . OR_ASSIGN exp
    (61) exp -> exp . EQUALS exp

    SEMI_COLON      reduce using rule 50 (exp -> exp AND_OP exp .)
    OR_OP           reduce using rule 50 (exp -> exp AND_OP exp .)
    AND_OP          reduce using rule 50 (exp -> exp AND_OP exp .)
    MUL_ASSIGN      reduce using rule 50 (exp -> exp AND_OP exp .)
    DIV_ASSIGN      reduce using rule 50 (exp -> exp AND_OP exp .)
    MOD_ASSIGN      reduce using rule 50 (exp -> exp AND_OP exp .)
    ADD_ASSIGN      reduce using rule 50 (exp -> exp AND_OP exp .)
    SUB_ASSIGN      reduce using rule 50 (exp -> exp AND_OP exp .)
    LEFT_ASSIGN     reduce using rule 50 (exp -> exp AND_OP exp .)
    RIGHT_ASSIGN    reduce using rule 50 (exp -> exp AND_OP exp .)
    AND_ASSIGN      reduce using rule 50 (exp -> exp AND_OP exp .)
    XOR_ASSIGN      reduce using rule 50 (exp -> exp AND_OP exp .)
    OR_ASSIGN       reduce using rule 50 (exp -> exp AND_OP exp .)
    EQUALS          reduce using rule 50 (exp -> exp AND_OP exp .)
    RPAREN          reduce using rule 50 (exp -> exp AND_OP exp .)
    COMMA           reduce using rule 50 (exp -> exp AND_OP exp .)
    RBIG            reduce using rule 50 (exp -> exp AND_OP exp .)
    RBRACE          reduce using rule 50 (exp -> exp AND_OP exp .)
    ADD             shift and go to state 79
    MINUS           shift and go to state 69
    MULT            shift and go to state 70
    DIV             shift and go to state 68
    MOD             shift and go to state 88
    L_OP            shift and go to state 85
    G_OP            shift and go to state 73
    LE_OP           shift and go to state 71
    GE_OP           shift and go to state 80
    NOTEQUALS       shift and go to state 64
    EQUALS_OP       shift and go to state 65

  ! ADD             [ reduce using rule 50 (exp -> exp AND_OP exp .) ]
  ! MINUS           [ reduce using rule 50 (exp -> exp AND_OP exp .) ]
  ! MULT            [ reduce using rule 50 (exp -> exp AND_OP exp .) ]
  ! DIV             [ reduce using rule 50 (exp -> exp AND_OP exp .) ]
  ! MOD             [ reduce using rule 50 (exp -> exp AND_OP exp .) ]
  ! L_OP            [ reduce using rule 50 (exp -> exp AND_OP exp .) ]
  ! G_OP            [ reduce using rule 50 (exp -> exp AND_OP exp .) ]
  ! LE_OP           [ reduce using rule 50 (exp -> exp AND_OP exp .) ]
  ! GE_OP           [ reduce using rule 50 (exp -> exp AND_OP exp .) ]
  ! NOTEQUALS       [ reduce using rule 50 (exp -> exp AND_OP exp .) ]
  ! EQUALS_OP       [ reduce using rule 50 (exp -> exp AND_OP exp .) ]
  ! OR_OP           [ shift and go to state 74 ]
  ! AND_OP          [ shift and go to state 78 ]
  ! MUL_ASSIGN      [ shift and go to state 86 ]
  ! DIV_ASSIGN      [ shift and go to state 66 ]
  ! MOD_ASSIGN      [ shift and go to state 82 ]
  ! ADD_ASSIGN      [ shift and go to state 76 ]
  ! SUB_ASSIGN      [ shift and go to state 81 ]
  ! LEFT_ASSIGN     [ shift and go to state 87 ]
  ! RIGHT_ASSIGN    [ shift and go to state 72 ]
  ! AND_ASSIGN      [ shift and go to state 75 ]
  ! XOR_ASSIGN      [ shift and go to state 83 ]
  ! OR_ASSIGN       [ shift and go to state 84 ]
  ! EQUALS          [ shift and go to state 77 ]


state 131

    (38) exp -> exp ADD exp .
    (38) exp -> exp . ADD exp
    (39) exp -> exp . MINUS exp
    (40) exp -> exp . MULT exp
    (41) exp -> exp . DIV exp
    (42) exp -> exp . MOD exp
    (43) exp -> exp . L_OP exp
    (44) exp -> exp . G_OP exp
    (45) exp -> exp . LE_OP exp
    (46) exp -> exp . GE_OP exp
    (47) exp -> exp . NOTEQUALS exp
    (48) exp -> exp . EQUALS_OP exp
    (49) exp -> exp . OR_OP exp
    (50) exp -> exp . AND_OP exp
    (51) exp -> exp . MUL_ASSIGN exp
    (52) exp -> exp . DIV_ASSIGN exp
    (53) exp -> exp . MOD_ASSIGN exp
    (54) exp -> exp . ADD_ASSIGN exp
    (55) exp -> exp . SUB_ASSIGN exp
    (56) exp -> exp . LEFT_ASSIGN exp
    (57) exp -> exp . RIGHT_ASSIGN exp
    (58) exp -> exp . AND_ASSIGN exp
    (59) exp -> exp . XOR_ASSIGN exp
    (60) exp -> exp . OR_ASSIGN exp
    (61) exp -> exp . EQUALS exp

    SEMI_COLON      reduce using rule 38 (exp -> exp ADD exp .)
    ADD             reduce using rule 38 (exp -> exp ADD exp .)
    MINUS           reduce using rule 38 (exp -> exp ADD exp .)
    OR_OP           reduce using rule 38 (exp -> exp ADD exp .)
    AND_OP          reduce using rule 38 (exp -> exp ADD exp .)
    MUL_ASSIGN      reduce using rule 38 (exp -> exp ADD exp .)
    DIV_ASSIGN      reduce using rule 38 (exp -> exp ADD exp .)
    MOD_ASSIGN      reduce using rule 38 (exp -> exp ADD exp .)
    ADD_ASSIGN      reduce using rule 38 (exp -> exp ADD exp .)
    SUB_ASSIGN      reduce using rule 38 (exp -> exp ADD exp .)
    LEFT_ASSIGN     reduce using rule 38 (exp -> exp ADD exp .)
    RIGHT_ASSIGN    reduce using rule 38 (exp -> exp ADD exp .)
    AND_ASSIGN      reduce using rule 38 (exp -> exp ADD exp .)
    XOR_ASSIGN      reduce using rule 38 (exp -> exp ADD exp .)
    OR_ASSIGN       reduce using rule 38 (exp -> exp ADD exp .)
    EQUALS          reduce using rule 38 (exp -> exp ADD exp .)
    RPAREN          reduce using rule 38 (exp -> exp ADD exp .)
    COMMA           reduce using rule 38 (exp -> exp ADD exp .)
    RBIG            reduce using rule 38 (exp -> exp ADD exp .)
    RBRACE          reduce using rule 38 (exp -> exp ADD exp .)
    MULT            shift and go to state 70
    DIV             shift and go to state 68
    MOD             shift and go to state 88
    L_OP            shift and go to state 85
    G_OP            shift and go to state 73
    LE_OP           shift and go to state 71
    GE_OP           shift and go to state 80
    NOTEQUALS       shift and go to state 64
    EQUALS_OP       shift and go to state 65

  ! MULT            [ reduce using rule 38 (exp -> exp ADD exp .) ]
  ! DIV             [ reduce using rule 38 (exp -> exp ADD exp .) ]
  ! MOD             [ reduce using rule 38 (exp -> exp ADD exp .) ]
  ! L_OP            [ reduce using rule 38 (exp -> exp ADD exp .) ]
  ! G_OP            [ reduce using rule 38 (exp -> exp ADD exp .) ]
  ! LE_OP           [ reduce using rule 38 (exp -> exp ADD exp .) ]
  ! GE_OP           [ reduce using rule 38 (exp -> exp ADD exp .) ]
  ! NOTEQUALS       [ reduce using rule 38 (exp -> exp ADD exp .) ]
  ! EQUALS_OP       [ reduce using rule 38 (exp -> exp ADD exp .) ]
  ! ADD             [ shift and go to state 79 ]
  ! MINUS           [ shift and go to state 69 ]
  ! OR_OP           [ shift and go to state 74 ]
  ! AND_OP          [ shift and go to state 78 ]
  ! MUL_ASSIGN      [ shift and go to state 86 ]
  ! DIV_ASSIGN      [ shift and go to state 66 ]
  ! MOD_ASSIGN      [ shift and go to state 82 ]
  ! ADD_ASSIGN      [ shift and go to state 76 ]
  ! SUB_ASSIGN      [ shift and go to state 81 ]
  ! LEFT_ASSIGN     [ shift and go to state 87 ]
  ! RIGHT_ASSIGN    [ shift and go to state 72 ]
  ! AND_ASSIGN      [ shift and go to state 75 ]
  ! XOR_ASSIGN      [ shift and go to state 83 ]
  ! OR_ASSIGN       [ shift and go to state 84 ]
  ! EQUALS          [ shift and go to state 77 ]


state 132

    (46) exp -> exp GE_OP exp .
    (38) exp -> exp . ADD exp
    (39) exp -> exp . MINUS exp
    (40) exp -> exp . MULT exp
    (41) exp -> exp . DIV exp
    (42) exp -> exp . MOD exp
    (43) exp -> exp . L_OP exp
    (44) exp -> exp . G_OP exp
    (45) exp -> exp . LE_OP exp
    (46) exp -> exp . GE_OP exp
    (47) exp -> exp . NOTEQUALS exp
    (48) exp -> exp . EQUALS_OP exp
    (49) exp -> exp . OR_OP exp
    (50) exp -> exp . AND_OP exp
    (51) exp -> exp . MUL_ASSIGN exp
    (52) exp -> exp . DIV_ASSIGN exp
    (53) exp -> exp . MOD_ASSIGN exp
    (54) exp -> exp . ADD_ASSIGN exp
    (55) exp -> exp . SUB_ASSIGN exp
    (56) exp -> exp . LEFT_ASSIGN exp
    (57) exp -> exp . RIGHT_ASSIGN exp
    (58) exp -> exp . AND_ASSIGN exp
    (59) exp -> exp . XOR_ASSIGN exp
    (60) exp -> exp . OR_ASSIGN exp
    (61) exp -> exp . EQUALS exp

    SEMI_COLON      reduce using rule 46 (exp -> exp GE_OP exp .)
    ADD             reduce using rule 46 (exp -> exp GE_OP exp .)
    MINUS           reduce using rule 46 (exp -> exp GE_OP exp .)
    MULT            reduce using rule 46 (exp -> exp GE_OP exp .)
    DIV             reduce using rule 46 (exp -> exp GE_OP exp .)
    MOD             reduce using rule 46 (exp -> exp GE_OP exp .)
    L_OP            reduce using rule 46 (exp -> exp GE_OP exp .)
    G_OP            reduce using rule 46 (exp -> exp GE_OP exp .)
    LE_OP           reduce using rule 46 (exp -> exp GE_OP exp .)
    GE_OP           reduce using rule 46 (exp -> exp GE_OP exp .)
    OR_OP           reduce using rule 46 (exp -> exp GE_OP exp .)
    AND_OP          reduce using rule 46 (exp -> exp GE_OP exp .)
    MUL_ASSIGN      reduce using rule 46 (exp -> exp GE_OP exp .)
    DIV_ASSIGN      reduce using rule 46 (exp -> exp GE_OP exp .)
    MOD_ASSIGN      reduce using rule 46 (exp -> exp GE_OP exp .)
    ADD_ASSIGN      reduce using rule 46 (exp -> exp GE_OP exp .)
    SUB_ASSIGN      reduce using rule 46 (exp -> exp GE_OP exp .)
    LEFT_ASSIGN     reduce using rule 46 (exp -> exp GE_OP exp .)
    RIGHT_ASSIGN    reduce using rule 46 (exp -> exp GE_OP exp .)
    AND_ASSIGN      reduce using rule 46 (exp -> exp GE_OP exp .)
    XOR_ASSIGN      reduce using rule 46 (exp -> exp GE_OP exp .)
    OR_ASSIGN       reduce using rule 46 (exp -> exp GE_OP exp .)
    EQUALS          reduce using rule 46 (exp -> exp GE_OP exp .)
    RPAREN          reduce using rule 46 (exp -> exp GE_OP exp .)
    COMMA           reduce using rule 46 (exp -> exp GE_OP exp .)
    RBIG            reduce using rule 46 (exp -> exp GE_OP exp .)
    RBRACE          reduce using rule 46 (exp -> exp GE_OP exp .)
    NOTEQUALS       shift and go to state 64
    EQUALS_OP       shift and go to state 65

  ! NOTEQUALS       [ reduce using rule 46 (exp -> exp GE_OP exp .) ]
  ! EQUALS_OP       [ reduce using rule 46 (exp -> exp GE_OP exp .) ]
  ! ADD             [ shift and go to state 79 ]
  ! MINUS           [ shift and go to state 69 ]
  ! MULT            [ shift and go to state 70 ]
  ! DIV             [ shift and go to state 68 ]
  ! MOD             [ shift and go to state 88 ]
  ! L_OP            [ shift and go to state 85 ]
  ! G_OP            [ shift and go to state 73 ]
  ! LE_OP           [ shift and go to state 71 ]
  ! GE_OP           [ shift and go to state 80 ]
  ! OR_OP           [ shift and go to state 74 ]
  ! AND_OP          [ shift and go to state 78 ]
  ! MUL_ASSIGN      [ shift and go to state 86 ]
  ! DIV_ASSIGN      [ shift and go to state 66 ]
  ! MOD_ASSIGN      [ shift and go to state 82 ]
  ! ADD_ASSIGN      [ shift and go to state 76 ]
  ! SUB_ASSIGN      [ shift and go to state 81 ]
  ! LEFT_ASSIGN     [ shift and go to state 87 ]
  ! RIGHT_ASSIGN    [ shift and go to state 72 ]
  ! AND_ASSIGN      [ shift and go to state 75 ]
  ! XOR_ASSIGN      [ shift and go to state 83 ]
  ! OR_ASSIGN       [ shift and go to state 84 ]
  ! EQUALS          [ shift and go to state 77 ]


state 133

    (55) exp -> exp SUB_ASSIGN exp .
    (38) exp -> exp . ADD exp
    (39) exp -> exp . MINUS exp
    (40) exp -> exp . MULT exp
    (41) exp -> exp . DIV exp
    (42) exp -> exp . MOD exp
    (43) exp -> exp . L_OP exp
    (44) exp -> exp . G_OP exp
    (45) exp -> exp . LE_OP exp
    (46) exp -> exp . GE_OP exp
    (47) exp -> exp . NOTEQUALS exp
    (48) exp -> exp . EQUALS_OP exp
    (49) exp -> exp . OR_OP exp
    (50) exp -> exp . AND_OP exp
    (51) exp -> exp . MUL_ASSIGN exp
    (52) exp -> exp . DIV_ASSIGN exp
    (53) exp -> exp . MOD_ASSIGN exp
    (54) exp -> exp . ADD_ASSIGN exp
    (55) exp -> exp . SUB_ASSIGN exp
    (56) exp -> exp . LEFT_ASSIGN exp
    (57) exp -> exp . RIGHT_ASSIGN exp
    (58) exp -> exp . AND_ASSIGN exp
    (59) exp -> exp . XOR_ASSIGN exp
    (60) exp -> exp . OR_ASSIGN exp
    (61) exp -> exp . EQUALS exp

    SEMI_COLON      reduce using rule 55 (exp -> exp SUB_ASSIGN exp .)
    RPAREN          reduce using rule 55 (exp -> exp SUB_ASSIGN exp .)
    COMMA           reduce using rule 55 (exp -> exp SUB_ASSIGN exp .)
    RBIG            reduce using rule 55 (exp -> exp SUB_ASSIGN exp .)
    RBRACE          reduce using rule 55 (exp -> exp SUB_ASSIGN exp .)
    ADD             shift and go to state 79
    MINUS           shift and go to state 69
    MULT            shift and go to state 70
    DIV             shift and go to state 68
    MOD             shift and go to state 88
    L_OP            shift and go to state 85
    G_OP            shift and go to state 73
    LE_OP           shift and go to state 71
    GE_OP           shift and go to state 80
    NOTEQUALS       shift and go to state 64
    EQUALS_OP       shift and go to state 65
    OR_OP           shift and go to state 74
    AND_OP          shift and go to state 78
    MUL_ASSIGN      shift and go to state 86
    DIV_ASSIGN      shift and go to state 66
    MOD_ASSIGN      shift and go to state 82
    ADD_ASSIGN      shift and go to state 76
    SUB_ASSIGN      shift and go to state 81
    LEFT_ASSIGN     shift and go to state 87
    RIGHT_ASSIGN    shift and go to state 72
    AND_ASSIGN      shift and go to state 75
    XOR_ASSIGN      shift and go to state 83
    OR_ASSIGN       shift and go to state 84
    EQUALS          shift and go to state 77

  ! ADD             [ reduce using rule 55 (exp -> exp SUB_ASSIGN exp .) ]
  ! MINUS           [ reduce using rule 55 (exp -> exp SUB_ASSIGN exp .) ]
  ! MULT            [ reduce using rule 55 (exp -> exp SUB_ASSIGN exp .) ]
  ! DIV             [ reduce using rule 55 (exp -> exp SUB_ASSIGN exp .) ]
  ! MOD             [ reduce using rule 55 (exp -> exp SUB_ASSIGN exp .) ]
  ! L_OP            [ reduce using rule 55 (exp -> exp SUB_ASSIGN exp .) ]
  ! G_OP            [ reduce using rule 55 (exp -> exp SUB_ASSIGN exp .) ]
  ! LE_OP           [ reduce using rule 55 (exp -> exp SUB_ASSIGN exp .) ]
  ! GE_OP           [ reduce using rule 55 (exp -> exp SUB_ASSIGN exp .) ]
  ! NOTEQUALS       [ reduce using rule 55 (exp -> exp SUB_ASSIGN exp .) ]
  ! EQUALS_OP       [ reduce using rule 55 (exp -> exp SUB_ASSIGN exp .) ]
  ! OR_OP           [ reduce using rule 55 (exp -> exp SUB_ASSIGN exp .) ]
  ! AND_OP          [ reduce using rule 55 (exp -> exp SUB_ASSIGN exp .) ]
  ! MUL_ASSIGN      [ reduce using rule 55 (exp -> exp SUB_ASSIGN exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 55 (exp -> exp SUB_ASSIGN exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 55 (exp -> exp SUB_ASSIGN exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 55 (exp -> exp SUB_ASSIGN exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 55 (exp -> exp SUB_ASSIGN exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 55 (exp -> exp SUB_ASSIGN exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 55 (exp -> exp SUB_ASSIGN exp .) ]
  ! AND_ASSIGN      [ reduce using rule 55 (exp -> exp SUB_ASSIGN exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 55 (exp -> exp SUB_ASSIGN exp .) ]
  ! OR_ASSIGN       [ reduce using rule 55 (exp -> exp SUB_ASSIGN exp .) ]
  ! EQUALS          [ reduce using rule 55 (exp -> exp SUB_ASSIGN exp .) ]


state 134

    (53) exp -> exp MOD_ASSIGN exp .
    (38) exp -> exp . ADD exp
    (39) exp -> exp . MINUS exp
    (40) exp -> exp . MULT exp
    (41) exp -> exp . DIV exp
    (42) exp -> exp . MOD exp
    (43) exp -> exp . L_OP exp
    (44) exp -> exp . G_OP exp
    (45) exp -> exp . LE_OP exp
    (46) exp -> exp . GE_OP exp
    (47) exp -> exp . NOTEQUALS exp
    (48) exp -> exp . EQUALS_OP exp
    (49) exp -> exp . OR_OP exp
    (50) exp -> exp . AND_OP exp
    (51) exp -> exp . MUL_ASSIGN exp
    (52) exp -> exp . DIV_ASSIGN exp
    (53) exp -> exp . MOD_ASSIGN exp
    (54) exp -> exp . ADD_ASSIGN exp
    (55) exp -> exp . SUB_ASSIGN exp
    (56) exp -> exp . LEFT_ASSIGN exp
    (57) exp -> exp . RIGHT_ASSIGN exp
    (58) exp -> exp . AND_ASSIGN exp
    (59) exp -> exp . XOR_ASSIGN exp
    (60) exp -> exp . OR_ASSIGN exp
    (61) exp -> exp . EQUALS exp

    SEMI_COLON      reduce using rule 53 (exp -> exp MOD_ASSIGN exp .)
    RPAREN          reduce using rule 53 (exp -> exp MOD_ASSIGN exp .)
    COMMA           reduce using rule 53 (exp -> exp MOD_ASSIGN exp .)
    RBIG            reduce using rule 53 (exp -> exp MOD_ASSIGN exp .)
    RBRACE          reduce using rule 53 (exp -> exp MOD_ASSIGN exp .)
    ADD             shift and go to state 79
    MINUS           shift and go to state 69
    MULT            shift and go to state 70
    DIV             shift and go to state 68
    MOD             shift and go to state 88
    L_OP            shift and go to state 85
    G_OP            shift and go to state 73
    LE_OP           shift and go to state 71
    GE_OP           shift and go to state 80
    NOTEQUALS       shift and go to state 64
    EQUALS_OP       shift and go to state 65
    OR_OP           shift and go to state 74
    AND_OP          shift and go to state 78
    MUL_ASSIGN      shift and go to state 86
    DIV_ASSIGN      shift and go to state 66
    MOD_ASSIGN      shift and go to state 82
    ADD_ASSIGN      shift and go to state 76
    SUB_ASSIGN      shift and go to state 81
    LEFT_ASSIGN     shift and go to state 87
    RIGHT_ASSIGN    shift and go to state 72
    AND_ASSIGN      shift and go to state 75
    XOR_ASSIGN      shift and go to state 83
    OR_ASSIGN       shift and go to state 84
    EQUALS          shift and go to state 77

  ! ADD             [ reduce using rule 53 (exp -> exp MOD_ASSIGN exp .) ]
  ! MINUS           [ reduce using rule 53 (exp -> exp MOD_ASSIGN exp .) ]
  ! MULT            [ reduce using rule 53 (exp -> exp MOD_ASSIGN exp .) ]
  ! DIV             [ reduce using rule 53 (exp -> exp MOD_ASSIGN exp .) ]
  ! MOD             [ reduce using rule 53 (exp -> exp MOD_ASSIGN exp .) ]
  ! L_OP            [ reduce using rule 53 (exp -> exp MOD_ASSIGN exp .) ]
  ! G_OP            [ reduce using rule 53 (exp -> exp MOD_ASSIGN exp .) ]
  ! LE_OP           [ reduce using rule 53 (exp -> exp MOD_ASSIGN exp .) ]
  ! GE_OP           [ reduce using rule 53 (exp -> exp MOD_ASSIGN exp .) ]
  ! NOTEQUALS       [ reduce using rule 53 (exp -> exp MOD_ASSIGN exp .) ]
  ! EQUALS_OP       [ reduce using rule 53 (exp -> exp MOD_ASSIGN exp .) ]
  ! OR_OP           [ reduce using rule 53 (exp -> exp MOD_ASSIGN exp .) ]
  ! AND_OP          [ reduce using rule 53 (exp -> exp MOD_ASSIGN exp .) ]
  ! MUL_ASSIGN      [ reduce using rule 53 (exp -> exp MOD_ASSIGN exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 53 (exp -> exp MOD_ASSIGN exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 53 (exp -> exp MOD_ASSIGN exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 53 (exp -> exp MOD_ASSIGN exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 53 (exp -> exp MOD_ASSIGN exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 53 (exp -> exp MOD_ASSIGN exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 53 (exp -> exp MOD_ASSIGN exp .) ]
  ! AND_ASSIGN      [ reduce using rule 53 (exp -> exp MOD_ASSIGN exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 53 (exp -> exp MOD_ASSIGN exp .) ]
  ! OR_ASSIGN       [ reduce using rule 53 (exp -> exp MOD_ASSIGN exp .) ]
  ! EQUALS          [ reduce using rule 53 (exp -> exp MOD_ASSIGN exp .) ]


state 135

    (59) exp -> exp XOR_ASSIGN exp .
    (38) exp -> exp . ADD exp
    (39) exp -> exp . MINUS exp
    (40) exp -> exp . MULT exp
    (41) exp -> exp . DIV exp
    (42) exp -> exp . MOD exp
    (43) exp -> exp . L_OP exp
    (44) exp -> exp . G_OP exp
    (45) exp -> exp . LE_OP exp
    (46) exp -> exp . GE_OP exp
    (47) exp -> exp . NOTEQUALS exp
    (48) exp -> exp . EQUALS_OP exp
    (49) exp -> exp . OR_OP exp
    (50) exp -> exp . AND_OP exp
    (51) exp -> exp . MUL_ASSIGN exp
    (52) exp -> exp . DIV_ASSIGN exp
    (53) exp -> exp . MOD_ASSIGN exp
    (54) exp -> exp . ADD_ASSIGN exp
    (55) exp -> exp . SUB_ASSIGN exp
    (56) exp -> exp . LEFT_ASSIGN exp
    (57) exp -> exp . RIGHT_ASSIGN exp
    (58) exp -> exp . AND_ASSIGN exp
    (59) exp -> exp . XOR_ASSIGN exp
    (60) exp -> exp . OR_ASSIGN exp
    (61) exp -> exp . EQUALS exp

    SEMI_COLON      reduce using rule 59 (exp -> exp XOR_ASSIGN exp .)
    RPAREN          reduce using rule 59 (exp -> exp XOR_ASSIGN exp .)
    COMMA           reduce using rule 59 (exp -> exp XOR_ASSIGN exp .)
    RBIG            reduce using rule 59 (exp -> exp XOR_ASSIGN exp .)
    RBRACE          reduce using rule 59 (exp -> exp XOR_ASSIGN exp .)
    ADD             shift and go to state 79
    MINUS           shift and go to state 69
    MULT            shift and go to state 70
    DIV             shift and go to state 68
    MOD             shift and go to state 88
    L_OP            shift and go to state 85
    G_OP            shift and go to state 73
    LE_OP           shift and go to state 71
    GE_OP           shift and go to state 80
    NOTEQUALS       shift and go to state 64
    EQUALS_OP       shift and go to state 65
    OR_OP           shift and go to state 74
    AND_OP          shift and go to state 78
    MUL_ASSIGN      shift and go to state 86
    DIV_ASSIGN      shift and go to state 66
    MOD_ASSIGN      shift and go to state 82
    ADD_ASSIGN      shift and go to state 76
    SUB_ASSIGN      shift and go to state 81
    LEFT_ASSIGN     shift and go to state 87
    RIGHT_ASSIGN    shift and go to state 72
    AND_ASSIGN      shift and go to state 75
    XOR_ASSIGN      shift and go to state 83
    OR_ASSIGN       shift and go to state 84
    EQUALS          shift and go to state 77

  ! ADD             [ reduce using rule 59 (exp -> exp XOR_ASSIGN exp .) ]
  ! MINUS           [ reduce using rule 59 (exp -> exp XOR_ASSIGN exp .) ]
  ! MULT            [ reduce using rule 59 (exp -> exp XOR_ASSIGN exp .) ]
  ! DIV             [ reduce using rule 59 (exp -> exp XOR_ASSIGN exp .) ]
  ! MOD             [ reduce using rule 59 (exp -> exp XOR_ASSIGN exp .) ]
  ! L_OP            [ reduce using rule 59 (exp -> exp XOR_ASSIGN exp .) ]
  ! G_OP            [ reduce using rule 59 (exp -> exp XOR_ASSIGN exp .) ]
  ! LE_OP           [ reduce using rule 59 (exp -> exp XOR_ASSIGN exp .) ]
  ! GE_OP           [ reduce using rule 59 (exp -> exp XOR_ASSIGN exp .) ]
  ! NOTEQUALS       [ reduce using rule 59 (exp -> exp XOR_ASSIGN exp .) ]
  ! EQUALS_OP       [ reduce using rule 59 (exp -> exp XOR_ASSIGN exp .) ]
  ! OR_OP           [ reduce using rule 59 (exp -> exp XOR_ASSIGN exp .) ]
  ! AND_OP          [ reduce using rule 59 (exp -> exp XOR_ASSIGN exp .) ]
  ! MUL_ASSIGN      [ reduce using rule 59 (exp -> exp XOR_ASSIGN exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 59 (exp -> exp XOR_ASSIGN exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 59 (exp -> exp XOR_ASSIGN exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 59 (exp -> exp XOR_ASSIGN exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 59 (exp -> exp XOR_ASSIGN exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 59 (exp -> exp XOR_ASSIGN exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 59 (exp -> exp XOR_ASSIGN exp .) ]
  ! AND_ASSIGN      [ reduce using rule 59 (exp -> exp XOR_ASSIGN exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 59 (exp -> exp XOR_ASSIGN exp .) ]
  ! OR_ASSIGN       [ reduce using rule 59 (exp -> exp XOR_ASSIGN exp .) ]
  ! EQUALS          [ reduce using rule 59 (exp -> exp XOR_ASSIGN exp .) ]


state 136

    (60) exp -> exp OR_ASSIGN exp .
    (38) exp -> exp . ADD exp
    (39) exp -> exp . MINUS exp
    (40) exp -> exp . MULT exp
    (41) exp -> exp . DIV exp
    (42) exp -> exp . MOD exp
    (43) exp -> exp . L_OP exp
    (44) exp -> exp . G_OP exp
    (45) exp -> exp . LE_OP exp
    (46) exp -> exp . GE_OP exp
    (47) exp -> exp . NOTEQUALS exp
    (48) exp -> exp . EQUALS_OP exp
    (49) exp -> exp . OR_OP exp
    (50) exp -> exp . AND_OP exp
    (51) exp -> exp . MUL_ASSIGN exp
    (52) exp -> exp . DIV_ASSIGN exp
    (53) exp -> exp . MOD_ASSIGN exp
    (54) exp -> exp . ADD_ASSIGN exp
    (55) exp -> exp . SUB_ASSIGN exp
    (56) exp -> exp . LEFT_ASSIGN exp
    (57) exp -> exp . RIGHT_ASSIGN exp
    (58) exp -> exp . AND_ASSIGN exp
    (59) exp -> exp . XOR_ASSIGN exp
    (60) exp -> exp . OR_ASSIGN exp
    (61) exp -> exp . EQUALS exp

    SEMI_COLON      reduce using rule 60 (exp -> exp OR_ASSIGN exp .)
    RPAREN          reduce using rule 60 (exp -> exp OR_ASSIGN exp .)
    COMMA           reduce using rule 60 (exp -> exp OR_ASSIGN exp .)
    RBIG            reduce using rule 60 (exp -> exp OR_ASSIGN exp .)
    RBRACE          reduce using rule 60 (exp -> exp OR_ASSIGN exp .)
    ADD             shift and go to state 79
    MINUS           shift and go to state 69
    MULT            shift and go to state 70
    DIV             shift and go to state 68
    MOD             shift and go to state 88
    L_OP            shift and go to state 85
    G_OP            shift and go to state 73
    LE_OP           shift and go to state 71
    GE_OP           shift and go to state 80
    NOTEQUALS       shift and go to state 64
    EQUALS_OP       shift and go to state 65
    OR_OP           shift and go to state 74
    AND_OP          shift and go to state 78
    MUL_ASSIGN      shift and go to state 86
    DIV_ASSIGN      shift and go to state 66
    MOD_ASSIGN      shift and go to state 82
    ADD_ASSIGN      shift and go to state 76
    SUB_ASSIGN      shift and go to state 81
    LEFT_ASSIGN     shift and go to state 87
    RIGHT_ASSIGN    shift and go to state 72
    AND_ASSIGN      shift and go to state 75
    XOR_ASSIGN      shift and go to state 83
    OR_ASSIGN       shift and go to state 84
    EQUALS          shift and go to state 77

  ! ADD             [ reduce using rule 60 (exp -> exp OR_ASSIGN exp .) ]
  ! MINUS           [ reduce using rule 60 (exp -> exp OR_ASSIGN exp .) ]
  ! MULT            [ reduce using rule 60 (exp -> exp OR_ASSIGN exp .) ]
  ! DIV             [ reduce using rule 60 (exp -> exp OR_ASSIGN exp .) ]
  ! MOD             [ reduce using rule 60 (exp -> exp OR_ASSIGN exp .) ]
  ! L_OP            [ reduce using rule 60 (exp -> exp OR_ASSIGN exp .) ]
  ! G_OP            [ reduce using rule 60 (exp -> exp OR_ASSIGN exp .) ]
  ! LE_OP           [ reduce using rule 60 (exp -> exp OR_ASSIGN exp .) ]
  ! GE_OP           [ reduce using rule 60 (exp -> exp OR_ASSIGN exp .) ]
  ! NOTEQUALS       [ reduce using rule 60 (exp -> exp OR_ASSIGN exp .) ]
  ! EQUALS_OP       [ reduce using rule 60 (exp -> exp OR_ASSIGN exp .) ]
  ! OR_OP           [ reduce using rule 60 (exp -> exp OR_ASSIGN exp .) ]
  ! AND_OP          [ reduce using rule 60 (exp -> exp OR_ASSIGN exp .) ]
  ! MUL_ASSIGN      [ reduce using rule 60 (exp -> exp OR_ASSIGN exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 60 (exp -> exp OR_ASSIGN exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 60 (exp -> exp OR_ASSIGN exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 60 (exp -> exp OR_ASSIGN exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 60 (exp -> exp OR_ASSIGN exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 60 (exp -> exp OR_ASSIGN exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 60 (exp -> exp OR_ASSIGN exp .) ]
  ! AND_ASSIGN      [ reduce using rule 60 (exp -> exp OR_ASSIGN exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 60 (exp -> exp OR_ASSIGN exp .) ]
  ! OR_ASSIGN       [ reduce using rule 60 (exp -> exp OR_ASSIGN exp .) ]
  ! EQUALS          [ reduce using rule 60 (exp -> exp OR_ASSIGN exp .) ]


state 137

    (43) exp -> exp L_OP exp .
    (38) exp -> exp . ADD exp
    (39) exp -> exp . MINUS exp
    (40) exp -> exp . MULT exp
    (41) exp -> exp . DIV exp
    (42) exp -> exp . MOD exp
    (43) exp -> exp . L_OP exp
    (44) exp -> exp . G_OP exp
    (45) exp -> exp . LE_OP exp
    (46) exp -> exp . GE_OP exp
    (47) exp -> exp . NOTEQUALS exp
    (48) exp -> exp . EQUALS_OP exp
    (49) exp -> exp . OR_OP exp
    (50) exp -> exp . AND_OP exp
    (51) exp -> exp . MUL_ASSIGN exp
    (52) exp -> exp . DIV_ASSIGN exp
    (53) exp -> exp . MOD_ASSIGN exp
    (54) exp -> exp . ADD_ASSIGN exp
    (55) exp -> exp . SUB_ASSIGN exp
    (56) exp -> exp . LEFT_ASSIGN exp
    (57) exp -> exp . RIGHT_ASSIGN exp
    (58) exp -> exp . AND_ASSIGN exp
    (59) exp -> exp . XOR_ASSIGN exp
    (60) exp -> exp . OR_ASSIGN exp
    (61) exp -> exp . EQUALS exp

    SEMI_COLON      reduce using rule 43 (exp -> exp L_OP exp .)
    ADD             reduce using rule 43 (exp -> exp L_OP exp .)
    MINUS           reduce using rule 43 (exp -> exp L_OP exp .)
    MULT            reduce using rule 43 (exp -> exp L_OP exp .)
    DIV             reduce using rule 43 (exp -> exp L_OP exp .)
    MOD             reduce using rule 43 (exp -> exp L_OP exp .)
    L_OP            reduce using rule 43 (exp -> exp L_OP exp .)
    G_OP            reduce using rule 43 (exp -> exp L_OP exp .)
    LE_OP           reduce using rule 43 (exp -> exp L_OP exp .)
    GE_OP           reduce using rule 43 (exp -> exp L_OP exp .)
    OR_OP           reduce using rule 43 (exp -> exp L_OP exp .)
    AND_OP          reduce using rule 43 (exp -> exp L_OP exp .)
    MUL_ASSIGN      reduce using rule 43 (exp -> exp L_OP exp .)
    DIV_ASSIGN      reduce using rule 43 (exp -> exp L_OP exp .)
    MOD_ASSIGN      reduce using rule 43 (exp -> exp L_OP exp .)
    ADD_ASSIGN      reduce using rule 43 (exp -> exp L_OP exp .)
    SUB_ASSIGN      reduce using rule 43 (exp -> exp L_OP exp .)
    LEFT_ASSIGN     reduce using rule 43 (exp -> exp L_OP exp .)
    RIGHT_ASSIGN    reduce using rule 43 (exp -> exp L_OP exp .)
    AND_ASSIGN      reduce using rule 43 (exp -> exp L_OP exp .)
    XOR_ASSIGN      reduce using rule 43 (exp -> exp L_OP exp .)
    OR_ASSIGN       reduce using rule 43 (exp -> exp L_OP exp .)
    EQUALS          reduce using rule 43 (exp -> exp L_OP exp .)
    RPAREN          reduce using rule 43 (exp -> exp L_OP exp .)
    COMMA           reduce using rule 43 (exp -> exp L_OP exp .)
    RBIG            reduce using rule 43 (exp -> exp L_OP exp .)
    RBRACE          reduce using rule 43 (exp -> exp L_OP exp .)
    NOTEQUALS       shift and go to state 64
    EQUALS_OP       shift and go to state 65

  ! NOTEQUALS       [ reduce using rule 43 (exp -> exp L_OP exp .) ]
  ! EQUALS_OP       [ reduce using rule 43 (exp -> exp L_OP exp .) ]
  ! ADD             [ shift and go to state 79 ]
  ! MINUS           [ shift and go to state 69 ]
  ! MULT            [ shift and go to state 70 ]
  ! DIV             [ shift and go to state 68 ]
  ! MOD             [ shift and go to state 88 ]
  ! L_OP            [ shift and go to state 85 ]
  ! G_OP            [ shift and go to state 73 ]
  ! LE_OP           [ shift and go to state 71 ]
  ! GE_OP           [ shift and go to state 80 ]
  ! OR_OP           [ shift and go to state 74 ]
  ! AND_OP          [ shift and go to state 78 ]
  ! MUL_ASSIGN      [ shift and go to state 86 ]
  ! DIV_ASSIGN      [ shift and go to state 66 ]
  ! MOD_ASSIGN      [ shift and go to state 82 ]
  ! ADD_ASSIGN      [ shift and go to state 76 ]
  ! SUB_ASSIGN      [ shift and go to state 81 ]
  ! LEFT_ASSIGN     [ shift and go to state 87 ]
  ! RIGHT_ASSIGN    [ shift and go to state 72 ]
  ! AND_ASSIGN      [ shift and go to state 75 ]
  ! XOR_ASSIGN      [ shift and go to state 83 ]
  ! OR_ASSIGN       [ shift and go to state 84 ]
  ! EQUALS          [ shift and go to state 77 ]


state 138

    (51) exp -> exp MUL_ASSIGN exp .
    (38) exp -> exp . ADD exp
    (39) exp -> exp . MINUS exp
    (40) exp -> exp . MULT exp
    (41) exp -> exp . DIV exp
    (42) exp -> exp . MOD exp
    (43) exp -> exp . L_OP exp
    (44) exp -> exp . G_OP exp
    (45) exp -> exp . LE_OP exp
    (46) exp -> exp . GE_OP exp
    (47) exp -> exp . NOTEQUALS exp
    (48) exp -> exp . EQUALS_OP exp
    (49) exp -> exp . OR_OP exp
    (50) exp -> exp . AND_OP exp
    (51) exp -> exp . MUL_ASSIGN exp
    (52) exp -> exp . DIV_ASSIGN exp
    (53) exp -> exp . MOD_ASSIGN exp
    (54) exp -> exp . ADD_ASSIGN exp
    (55) exp -> exp . SUB_ASSIGN exp
    (56) exp -> exp . LEFT_ASSIGN exp
    (57) exp -> exp . RIGHT_ASSIGN exp
    (58) exp -> exp . AND_ASSIGN exp
    (59) exp -> exp . XOR_ASSIGN exp
    (60) exp -> exp . OR_ASSIGN exp
    (61) exp -> exp . EQUALS exp

    SEMI_COLON      reduce using rule 51 (exp -> exp MUL_ASSIGN exp .)
    RPAREN          reduce using rule 51 (exp -> exp MUL_ASSIGN exp .)
    COMMA           reduce using rule 51 (exp -> exp MUL_ASSIGN exp .)
    RBIG            reduce using rule 51 (exp -> exp MUL_ASSIGN exp .)
    RBRACE          reduce using rule 51 (exp -> exp MUL_ASSIGN exp .)
    ADD             shift and go to state 79
    MINUS           shift and go to state 69
    MULT            shift and go to state 70
    DIV             shift and go to state 68
    MOD             shift and go to state 88
    L_OP            shift and go to state 85
    G_OP            shift and go to state 73
    LE_OP           shift and go to state 71
    GE_OP           shift and go to state 80
    NOTEQUALS       shift and go to state 64
    EQUALS_OP       shift and go to state 65
    OR_OP           shift and go to state 74
    AND_OP          shift and go to state 78
    MUL_ASSIGN      shift and go to state 86
    DIV_ASSIGN      shift and go to state 66
    MOD_ASSIGN      shift and go to state 82
    ADD_ASSIGN      shift and go to state 76
    SUB_ASSIGN      shift and go to state 81
    LEFT_ASSIGN     shift and go to state 87
    RIGHT_ASSIGN    shift and go to state 72
    AND_ASSIGN      shift and go to state 75
    XOR_ASSIGN      shift and go to state 83
    OR_ASSIGN       shift and go to state 84
    EQUALS          shift and go to state 77

  ! ADD             [ reduce using rule 51 (exp -> exp MUL_ASSIGN exp .) ]
  ! MINUS           [ reduce using rule 51 (exp -> exp MUL_ASSIGN exp .) ]
  ! MULT            [ reduce using rule 51 (exp -> exp MUL_ASSIGN exp .) ]
  ! DIV             [ reduce using rule 51 (exp -> exp MUL_ASSIGN exp .) ]
  ! MOD             [ reduce using rule 51 (exp -> exp MUL_ASSIGN exp .) ]
  ! L_OP            [ reduce using rule 51 (exp -> exp MUL_ASSIGN exp .) ]
  ! G_OP            [ reduce using rule 51 (exp -> exp MUL_ASSIGN exp .) ]
  ! LE_OP           [ reduce using rule 51 (exp -> exp MUL_ASSIGN exp .) ]
  ! GE_OP           [ reduce using rule 51 (exp -> exp MUL_ASSIGN exp .) ]
  ! NOTEQUALS       [ reduce using rule 51 (exp -> exp MUL_ASSIGN exp .) ]
  ! EQUALS_OP       [ reduce using rule 51 (exp -> exp MUL_ASSIGN exp .) ]
  ! OR_OP           [ reduce using rule 51 (exp -> exp MUL_ASSIGN exp .) ]
  ! AND_OP          [ reduce using rule 51 (exp -> exp MUL_ASSIGN exp .) ]
  ! MUL_ASSIGN      [ reduce using rule 51 (exp -> exp MUL_ASSIGN exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 51 (exp -> exp MUL_ASSIGN exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 51 (exp -> exp MUL_ASSIGN exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 51 (exp -> exp MUL_ASSIGN exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 51 (exp -> exp MUL_ASSIGN exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 51 (exp -> exp MUL_ASSIGN exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 51 (exp -> exp MUL_ASSIGN exp .) ]
  ! AND_ASSIGN      [ reduce using rule 51 (exp -> exp MUL_ASSIGN exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 51 (exp -> exp MUL_ASSIGN exp .) ]
  ! OR_ASSIGN       [ reduce using rule 51 (exp -> exp MUL_ASSIGN exp .) ]
  ! EQUALS          [ reduce using rule 51 (exp -> exp MUL_ASSIGN exp .) ]


state 139

    (56) exp -> exp LEFT_ASSIGN exp .
    (38) exp -> exp . ADD exp
    (39) exp -> exp . MINUS exp
    (40) exp -> exp . MULT exp
    (41) exp -> exp . DIV exp
    (42) exp -> exp . MOD exp
    (43) exp -> exp . L_OP exp
    (44) exp -> exp . G_OP exp
    (45) exp -> exp . LE_OP exp
    (46) exp -> exp . GE_OP exp
    (47) exp -> exp . NOTEQUALS exp
    (48) exp -> exp . EQUALS_OP exp
    (49) exp -> exp . OR_OP exp
    (50) exp -> exp . AND_OP exp
    (51) exp -> exp . MUL_ASSIGN exp
    (52) exp -> exp . DIV_ASSIGN exp
    (53) exp -> exp . MOD_ASSIGN exp
    (54) exp -> exp . ADD_ASSIGN exp
    (55) exp -> exp . SUB_ASSIGN exp
    (56) exp -> exp . LEFT_ASSIGN exp
    (57) exp -> exp . RIGHT_ASSIGN exp
    (58) exp -> exp . AND_ASSIGN exp
    (59) exp -> exp . XOR_ASSIGN exp
    (60) exp -> exp . OR_ASSIGN exp
    (61) exp -> exp . EQUALS exp

    SEMI_COLON      reduce using rule 56 (exp -> exp LEFT_ASSIGN exp .)
    RPAREN          reduce using rule 56 (exp -> exp LEFT_ASSIGN exp .)
    COMMA           reduce using rule 56 (exp -> exp LEFT_ASSIGN exp .)
    RBIG            reduce using rule 56 (exp -> exp LEFT_ASSIGN exp .)
    RBRACE          reduce using rule 56 (exp -> exp LEFT_ASSIGN exp .)
    ADD             shift and go to state 79
    MINUS           shift and go to state 69
    MULT            shift and go to state 70
    DIV             shift and go to state 68
    MOD             shift and go to state 88
    L_OP            shift and go to state 85
    G_OP            shift and go to state 73
    LE_OP           shift and go to state 71
    GE_OP           shift and go to state 80
    NOTEQUALS       shift and go to state 64
    EQUALS_OP       shift and go to state 65
    OR_OP           shift and go to state 74
    AND_OP          shift and go to state 78
    MUL_ASSIGN      shift and go to state 86
    DIV_ASSIGN      shift and go to state 66
    MOD_ASSIGN      shift and go to state 82
    ADD_ASSIGN      shift and go to state 76
    SUB_ASSIGN      shift and go to state 81
    LEFT_ASSIGN     shift and go to state 87
    RIGHT_ASSIGN    shift and go to state 72
    AND_ASSIGN      shift and go to state 75
    XOR_ASSIGN      shift and go to state 83
    OR_ASSIGN       shift and go to state 84
    EQUALS          shift and go to state 77

  ! ADD             [ reduce using rule 56 (exp -> exp LEFT_ASSIGN exp .) ]
  ! MINUS           [ reduce using rule 56 (exp -> exp LEFT_ASSIGN exp .) ]
  ! MULT            [ reduce using rule 56 (exp -> exp LEFT_ASSIGN exp .) ]
  ! DIV             [ reduce using rule 56 (exp -> exp LEFT_ASSIGN exp .) ]
  ! MOD             [ reduce using rule 56 (exp -> exp LEFT_ASSIGN exp .) ]
  ! L_OP            [ reduce using rule 56 (exp -> exp LEFT_ASSIGN exp .) ]
  ! G_OP            [ reduce using rule 56 (exp -> exp LEFT_ASSIGN exp .) ]
  ! LE_OP           [ reduce using rule 56 (exp -> exp LEFT_ASSIGN exp .) ]
  ! GE_OP           [ reduce using rule 56 (exp -> exp LEFT_ASSIGN exp .) ]
  ! NOTEQUALS       [ reduce using rule 56 (exp -> exp LEFT_ASSIGN exp .) ]
  ! EQUALS_OP       [ reduce using rule 56 (exp -> exp LEFT_ASSIGN exp .) ]
  ! OR_OP           [ reduce using rule 56 (exp -> exp LEFT_ASSIGN exp .) ]
  ! AND_OP          [ reduce using rule 56 (exp -> exp LEFT_ASSIGN exp .) ]
  ! MUL_ASSIGN      [ reduce using rule 56 (exp -> exp LEFT_ASSIGN exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 56 (exp -> exp LEFT_ASSIGN exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 56 (exp -> exp LEFT_ASSIGN exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 56 (exp -> exp LEFT_ASSIGN exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 56 (exp -> exp LEFT_ASSIGN exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 56 (exp -> exp LEFT_ASSIGN exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 56 (exp -> exp LEFT_ASSIGN exp .) ]
  ! AND_ASSIGN      [ reduce using rule 56 (exp -> exp LEFT_ASSIGN exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 56 (exp -> exp LEFT_ASSIGN exp .) ]
  ! OR_ASSIGN       [ reduce using rule 56 (exp -> exp LEFT_ASSIGN exp .) ]
  ! EQUALS          [ reduce using rule 56 (exp -> exp LEFT_ASSIGN exp .) ]


state 140

    (42) exp -> exp MOD exp .
    (38) exp -> exp . ADD exp
    (39) exp -> exp . MINUS exp
    (40) exp -> exp . MULT exp
    (41) exp -> exp . DIV exp
    (42) exp -> exp . MOD exp
    (43) exp -> exp . L_OP exp
    (44) exp -> exp . G_OP exp
    (45) exp -> exp . LE_OP exp
    (46) exp -> exp . GE_OP exp
    (47) exp -> exp . NOTEQUALS exp
    (48) exp -> exp . EQUALS_OP exp
    (49) exp -> exp . OR_OP exp
    (50) exp -> exp . AND_OP exp
    (51) exp -> exp . MUL_ASSIGN exp
    (52) exp -> exp . DIV_ASSIGN exp
    (53) exp -> exp . MOD_ASSIGN exp
    (54) exp -> exp . ADD_ASSIGN exp
    (55) exp -> exp . SUB_ASSIGN exp
    (56) exp -> exp . LEFT_ASSIGN exp
    (57) exp -> exp . RIGHT_ASSIGN exp
    (58) exp -> exp . AND_ASSIGN exp
    (59) exp -> exp . XOR_ASSIGN exp
    (60) exp -> exp . OR_ASSIGN exp
    (61) exp -> exp . EQUALS exp

    SEMI_COLON      reduce using rule 42 (exp -> exp MOD exp .)
    ADD             reduce using rule 42 (exp -> exp MOD exp .)
    MINUS           reduce using rule 42 (exp -> exp MOD exp .)
    MULT            reduce using rule 42 (exp -> exp MOD exp .)
    DIV             reduce using rule 42 (exp -> exp MOD exp .)
    MOD             reduce using rule 42 (exp -> exp MOD exp .)
    OR_OP           reduce using rule 42 (exp -> exp MOD exp .)
    AND_OP          reduce using rule 42 (exp -> exp MOD exp .)
    MUL_ASSIGN      reduce using rule 42 (exp -> exp MOD exp .)
    DIV_ASSIGN      reduce using rule 42 (exp -> exp MOD exp .)
    MOD_ASSIGN      reduce using rule 42 (exp -> exp MOD exp .)
    ADD_ASSIGN      reduce using rule 42 (exp -> exp MOD exp .)
    SUB_ASSIGN      reduce using rule 42 (exp -> exp MOD exp .)
    LEFT_ASSIGN     reduce using rule 42 (exp -> exp MOD exp .)
    RIGHT_ASSIGN    reduce using rule 42 (exp -> exp MOD exp .)
    AND_ASSIGN      reduce using rule 42 (exp -> exp MOD exp .)
    XOR_ASSIGN      reduce using rule 42 (exp -> exp MOD exp .)
    OR_ASSIGN       reduce using rule 42 (exp -> exp MOD exp .)
    EQUALS          reduce using rule 42 (exp -> exp MOD exp .)
    RPAREN          reduce using rule 42 (exp -> exp MOD exp .)
    COMMA           reduce using rule 42 (exp -> exp MOD exp .)
    RBIG            reduce using rule 42 (exp -> exp MOD exp .)
    RBRACE          reduce using rule 42 (exp -> exp MOD exp .)
    L_OP            shift and go to state 85
    G_OP            shift and go to state 73
    LE_OP           shift and go to state 71
    GE_OP           shift and go to state 80
    NOTEQUALS       shift and go to state 64
    EQUALS_OP       shift and go to state 65

  ! L_OP            [ reduce using rule 42 (exp -> exp MOD exp .) ]
  ! G_OP            [ reduce using rule 42 (exp -> exp MOD exp .) ]
  ! LE_OP           [ reduce using rule 42 (exp -> exp MOD exp .) ]
  ! GE_OP           [ reduce using rule 42 (exp -> exp MOD exp .) ]
  ! NOTEQUALS       [ reduce using rule 42 (exp -> exp MOD exp .) ]
  ! EQUALS_OP       [ reduce using rule 42 (exp -> exp MOD exp .) ]
  ! ADD             [ shift and go to state 79 ]
  ! MINUS           [ shift and go to state 69 ]
  ! MULT            [ shift and go to state 70 ]
  ! DIV             [ shift and go to state 68 ]
  ! MOD             [ shift and go to state 88 ]
  ! OR_OP           [ shift and go to state 74 ]
  ! AND_OP          [ shift and go to state 78 ]
  ! MUL_ASSIGN      [ shift and go to state 86 ]
  ! DIV_ASSIGN      [ shift and go to state 66 ]
  ! MOD_ASSIGN      [ shift and go to state 82 ]
  ! ADD_ASSIGN      [ shift and go to state 76 ]
  ! SUB_ASSIGN      [ shift and go to state 81 ]
  ! LEFT_ASSIGN     [ shift and go to state 87 ]
  ! RIGHT_ASSIGN    [ shift and go to state 72 ]
  ! AND_ASSIGN      [ shift and go to state 75 ]
  ! XOR_ASSIGN      [ shift and go to state 83 ]
  ! OR_ASSIGN       [ shift and go to state 84 ]
  ! EQUALS          [ shift and go to state 77 ]


state 141

    (115) function_call -> VARIABLE LPAREN RPAREN .

    ADD             reduce using rule 115 (function_call -> VARIABLE LPAREN RPAREN .)
    MINUS           reduce using rule 115 (function_call -> VARIABLE LPAREN RPAREN .)
    MULT            reduce using rule 115 (function_call -> VARIABLE LPAREN RPAREN .)
    DIV             reduce using rule 115 (function_call -> VARIABLE LPAREN RPAREN .)
    MOD             reduce using rule 115 (function_call -> VARIABLE LPAREN RPAREN .)
    L_OP            reduce using rule 115 (function_call -> VARIABLE LPAREN RPAREN .)
    G_OP            reduce using rule 115 (function_call -> VARIABLE LPAREN RPAREN .)
    LE_OP           reduce using rule 115 (function_call -> VARIABLE LPAREN RPAREN .)
    GE_OP           reduce using rule 115 (function_call -> VARIABLE LPAREN RPAREN .)
    NOTEQUALS       reduce using rule 115 (function_call -> VARIABLE LPAREN RPAREN .)
    EQUALS_OP       reduce using rule 115 (function_call -> VARIABLE LPAREN RPAREN .)
    OR_OP           reduce using rule 115 (function_call -> VARIABLE LPAREN RPAREN .)
    AND_OP          reduce using rule 115 (function_call -> VARIABLE LPAREN RPAREN .)
    MUL_ASSIGN      reduce using rule 115 (function_call -> VARIABLE LPAREN RPAREN .)
    DIV_ASSIGN      reduce using rule 115 (function_call -> VARIABLE LPAREN RPAREN .)
    MOD_ASSIGN      reduce using rule 115 (function_call -> VARIABLE LPAREN RPAREN .)
    ADD_ASSIGN      reduce using rule 115 (function_call -> VARIABLE LPAREN RPAREN .)
    SUB_ASSIGN      reduce using rule 115 (function_call -> VARIABLE LPAREN RPAREN .)
    LEFT_ASSIGN     reduce using rule 115 (function_call -> VARIABLE LPAREN RPAREN .)
    RIGHT_ASSIGN    reduce using rule 115 (function_call -> VARIABLE LPAREN RPAREN .)
    AND_ASSIGN      reduce using rule 115 (function_call -> VARIABLE LPAREN RPAREN .)
    XOR_ASSIGN      reduce using rule 115 (function_call -> VARIABLE LPAREN RPAREN .)
    OR_ASSIGN       reduce using rule 115 (function_call -> VARIABLE LPAREN RPAREN .)
    EQUALS          reduce using rule 115 (function_call -> VARIABLE LPAREN RPAREN .)
    SEMI_COLON      reduce using rule 115 (function_call -> VARIABLE LPAREN RPAREN .)
    RPAREN          reduce using rule 115 (function_call -> VARIABLE LPAREN RPAREN .)
    COMMA           reduce using rule 115 (function_call -> VARIABLE LPAREN RPAREN .)
    RBIG            reduce using rule 115 (function_call -> VARIABLE LPAREN RPAREN .)
    RBRACE          reduce using rule 115 (function_call -> VARIABLE LPAREN RPAREN .)


state 142

    (84) iterative_statement -> DO SEMI_COLON WHILE LPAREN . exp RPAREN SEMI_COLON
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 43
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    constant                       shift and go to state 11
    unary_expression               shift and go to state 29
    function_call                  shift and go to state 7
    exp                            shift and go to state 167
    unary_operator                 shift and go to state 22

state 143

    (82) iterative_statement -> DO statement WHILE LPAREN . exp RPAREN SEMI_COLON
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 43
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    constant                       shift and go to state 11
    unary_expression               shift and go to state 29
    function_call                  shift and go to state 7
    exp                            shift and go to state 168
    unary_operator                 shift and go to state 22

state 144

    (83) iterative_statement -> DO lbrace statements rbrace . WHILE LPAREN exp RPAREN SEMI_COLON

    WHILE           shift and go to state 169


state 145

    (85) iterative_statement -> DO lbrace rbrace WHILE . LPAREN exp RPAREN SEMI_COLON

    LPAREN          shift and go to state 170


state 146

    (78) iterative_statement -> WHILE LPAREN exp RPAREN . statement
    (79) iterative_statement -> WHILE LPAREN exp RPAREN . SEMI_COLON
    (80) iterative_statement -> WHILE LPAREN exp RPAREN . lbrace statements rbrace
    (81) iterative_statement -> WHILE LPAREN exp RPAREN . lbrace rbrace
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (9) statement -> . conditional_statement
    (10) statement -> . COMMENT
    (120) lbrace -> . LBRACE
    (15) declaration -> . type enum_list SEMI_COLON
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (74) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (75) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace statements rbrace
    (76) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (77) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace rbrace
    (78) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (79) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (80) iterative_statement -> . WHILE LPAREN exp RPAREN lbrace statements rbrace
    (81) iterative_statement -> . WHILE LPAREN exp RPAREN lbrace rbrace
    (82) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (83) iterative_statement -> . DO lbrace statements rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (84) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (85) iterative_statement -> . DO lbrace rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (94) function -> . normal_function
    (95) function -> . main_function
    (11) constant_statement -> . BREAK SEMI_COLON
    (12) constant_statement -> . CONTINUE SEMI_COLON
    (13) constant_statement -> . RETURN SEMI_COLON
    (14) constant_statement -> . RETURN exp SEMI_COLON
    (88) conditional_statement -> . IF LPAREN exp RPAREN statement
    (89) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace
    (90) conditional_statement -> . IF LPAREN exp RPAREN statement ELSE statement
    (91) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace ELSE statement
    (92) conditional_statement -> . IF LPAREN exp RPAREN statement ELSE lbrace statements rbrace
    (93) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace ELSE lbrace statements rbrace
    (26) type -> . INT
    (27) type -> . FLOAT
    (28) type -> . CHAR
    (29) type -> . DOUBLE
    (30) type -> . VOID
    (31) type -> . SHORT
    (32) type -> . LONG
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (104) normal_function -> . type VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (105) normal_function -> . type VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (106) normal_function -> . VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (107) normal_function -> . VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (108) normal_function -> . type VARIABLE LPAREN RPAREN lbrace statements rbrace
    (109) normal_function -> . type VARIABLE LPAREN RPAREN lbrace rbrace
    (110) normal_function -> . VARIABLE LPAREN RPAREN lbrace statements rbrace
    (111) normal_function -> . VARIABLE LPAREN RPAREN lbrace rbrace
    (96) main_function -> . type MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (97) main_function -> . type MAIN LPAREN parameters RPAREN lbrace rbrace
    (98) main_function -> . MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (99) main_function -> . MAIN LPAREN parameters RPAREN lbrace rbrace
    (100) main_function -> . type MAIN LPAREN RPAREN lbrace statements rbrace
    (101) main_function -> . type MAIN LPAREN RPAREN lbrace rbrace
    (102) main_function -> . MAIN LPAREN RPAREN lbrace statements rbrace
    (103) main_function -> . MAIN LPAREN RPAREN lbrace rbrace
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    SEMI_COLON      shift and go to state 171
    COMMENT         shift and go to state 13
    LBRACE          shift and go to state 48
    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 28
    FOR             shift and go to state 25
    WHILE           shift and go to state 9
    DO              shift and go to state 4
    BREAK           shift and go to state 38
    CONTINUE        shift and go to state 39
    RETURN          shift and go to state 1
    IF              shift and go to state 31
    INT             shift and go to state 33
    FLOAT           shift and go to state 37
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 34
    VOID            shift and go to state 5
    SHORT           shift and go to state 10
    LONG            shift and go to state 41
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    MAIN            shift and go to state 14
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    function                       shift and go to state 23
    lbrace                         shift and go to state 173
    exp                            shift and go to state 40
    unary_expression               shift and go to state 29
    type                           shift and go to state 21
    normal_function                shift and go to state 36
    function_call                  shift and go to state 7
    conditional_statement          shift and go to state 17
    main_function                  shift and go to state 2
    statement                      shift and go to state 172
    declaration                    shift and go to state 27
    constant_statement             shift and go to state 32
    constant                       shift and go to state 11
    iterative_statement            shift and go to state 12
    unary_operator                 shift and go to state 22

state 147

    (98) main_function -> MAIN LPAREN parameters RPAREN . lbrace statements rbrace
    (99) main_function -> MAIN LPAREN parameters RPAREN . lbrace rbrace
    (120) lbrace -> . LBRACE

    LBRACE          shift and go to state 48

    lbrace                         shift and go to state 174

state 148

    (102) main_function -> MAIN LPAREN RPAREN lbrace . statements rbrace
    (103) main_function -> MAIN LPAREN RPAREN lbrace . rbrace
    (2) statements -> . statements statement
    (3) statements -> . statement
    (121) rbrace -> . RBRACE
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (9) statement -> . conditional_statement
    (10) statement -> . COMMENT
    (15) declaration -> . type enum_list SEMI_COLON
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (74) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (75) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace statements rbrace
    (76) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (77) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace rbrace
    (78) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (79) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (80) iterative_statement -> . WHILE LPAREN exp RPAREN lbrace statements rbrace
    (81) iterative_statement -> . WHILE LPAREN exp RPAREN lbrace rbrace
    (82) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (83) iterative_statement -> . DO lbrace statements rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (84) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (85) iterative_statement -> . DO lbrace rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (94) function -> . normal_function
    (95) function -> . main_function
    (11) constant_statement -> . BREAK SEMI_COLON
    (12) constant_statement -> . CONTINUE SEMI_COLON
    (13) constant_statement -> . RETURN SEMI_COLON
    (14) constant_statement -> . RETURN exp SEMI_COLON
    (88) conditional_statement -> . IF LPAREN exp RPAREN statement
    (89) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace
    (90) conditional_statement -> . IF LPAREN exp RPAREN statement ELSE statement
    (91) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace ELSE statement
    (92) conditional_statement -> . IF LPAREN exp RPAREN statement ELSE lbrace statements rbrace
    (93) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace ELSE lbrace statements rbrace
    (26) type -> . INT
    (27) type -> . FLOAT
    (28) type -> . CHAR
    (29) type -> . DOUBLE
    (30) type -> . VOID
    (31) type -> . SHORT
    (32) type -> . LONG
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (104) normal_function -> . type VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (105) normal_function -> . type VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (106) normal_function -> . VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (107) normal_function -> . VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (108) normal_function -> . type VARIABLE LPAREN RPAREN lbrace statements rbrace
    (109) normal_function -> . type VARIABLE LPAREN RPAREN lbrace rbrace
    (110) normal_function -> . VARIABLE LPAREN RPAREN lbrace statements rbrace
    (111) normal_function -> . VARIABLE LPAREN RPAREN lbrace rbrace
    (96) main_function -> . type MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (97) main_function -> . type MAIN LPAREN parameters RPAREN lbrace rbrace
    (98) main_function -> . MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (99) main_function -> . MAIN LPAREN parameters RPAREN lbrace rbrace
    (100) main_function -> . type MAIN LPAREN RPAREN lbrace statements rbrace
    (101) main_function -> . type MAIN LPAREN RPAREN lbrace rbrace
    (102) main_function -> . MAIN LPAREN RPAREN lbrace statements rbrace
    (103) main_function -> . MAIN LPAREN RPAREN lbrace rbrace
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    RBRACE          shift and go to state 95
    COMMENT         shift and go to state 13
    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 28
    FOR             shift and go to state 25
    WHILE           shift and go to state 9
    DO              shift and go to state 4
    BREAK           shift and go to state 38
    CONTINUE        shift and go to state 39
    RETURN          shift and go to state 1
    IF              shift and go to state 31
    INT             shift and go to state 33
    FLOAT           shift and go to state 37
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 34
    VOID            shift and go to state 5
    SHORT           shift and go to state 10
    LONG            shift and go to state 41
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    MAIN            shift and go to state 14
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    function                       shift and go to state 23
    statements                     shift and go to state 175
    rbrace                         shift and go to state 176
    unary_expression               shift and go to state 29
    type                           shift and go to state 21
    normal_function                shift and go to state 36
    main_function                  shift and go to state 2
    function_call                  shift and go to state 7
    conditional_statement          shift and go to state 17
    statement                      shift and go to state 19
    exp                            shift and go to state 40
    declaration                    shift and go to state 27
    constant_statement             shift and go to state 32
    constant                       shift and go to state 11
    iterative_statement            shift and go to state 12
    unary_operator                 shift and go to state 22

state 149

    (112) parameters -> type VARIABLE . COMMA parameters
    (113) parameters -> type VARIABLE .

    COMMA           shift and go to state 177
    RPAREN          reduce using rule 113 (parameters -> type VARIABLE .)


state 150

    (17) enum_list -> VARIABLE EQUALS exp . COMMA enum_list
    (19) enum_list -> VARIABLE EQUALS exp .
    (38) exp -> exp . ADD exp
    (39) exp -> exp . MINUS exp
    (40) exp -> exp . MULT exp
    (41) exp -> exp . DIV exp
    (42) exp -> exp . MOD exp
    (43) exp -> exp . L_OP exp
    (44) exp -> exp . G_OP exp
    (45) exp -> exp . LE_OP exp
    (46) exp -> exp . GE_OP exp
    (47) exp -> exp . NOTEQUALS exp
    (48) exp -> exp . EQUALS_OP exp
    (49) exp -> exp . OR_OP exp
    (50) exp -> exp . AND_OP exp
    (51) exp -> exp . MUL_ASSIGN exp
    (52) exp -> exp . DIV_ASSIGN exp
    (53) exp -> exp . MOD_ASSIGN exp
    (54) exp -> exp . ADD_ASSIGN exp
    (55) exp -> exp . SUB_ASSIGN exp
    (56) exp -> exp . LEFT_ASSIGN exp
    (57) exp -> exp . RIGHT_ASSIGN exp
    (58) exp -> exp . AND_ASSIGN exp
    (59) exp -> exp . XOR_ASSIGN exp
    (60) exp -> exp . OR_ASSIGN exp
    (61) exp -> exp . EQUALS exp

    COMMA           shift and go to state 178
    SEMI_COLON      reduce using rule 19 (enum_list -> VARIABLE EQUALS exp .)
    ADD             shift and go to state 79
    MINUS           shift and go to state 69
    MULT            shift and go to state 70
    DIV             shift and go to state 68
    MOD             shift and go to state 88
    L_OP            shift and go to state 85
    G_OP            shift and go to state 73
    LE_OP           shift and go to state 71
    GE_OP           shift and go to state 80
    NOTEQUALS       shift and go to state 64
    EQUALS_OP       shift and go to state 65
    OR_OP           shift and go to state 74
    AND_OP          shift and go to state 78
    MUL_ASSIGN      shift and go to state 86
    DIV_ASSIGN      shift and go to state 66
    MOD_ASSIGN      shift and go to state 82
    ADD_ASSIGN      shift and go to state 76
    SUB_ASSIGN      shift and go to state 81
    LEFT_ASSIGN     shift and go to state 87
    RIGHT_ASSIGN    shift and go to state 72
    AND_ASSIGN      shift and go to state 75
    XOR_ASSIGN      shift and go to state 83
    OR_ASSIGN       shift and go to state 84
    EQUALS          shift and go to state 77


state 151

    (20) enum_list -> VARIABLE LBIG exp . RBIG COMMA enum_list
    (21) enum_list -> VARIABLE LBIG exp . RBIG EQUALS LBRACE num_list RBRACE COMMA enum_list
    (22) enum_list -> VARIABLE LBIG exp . RBIG
    (23) enum_list -> VARIABLE LBIG exp . RBIG EQUALS LBRACE num_list RBRACE
    (38) exp -> exp . ADD exp
    (39) exp -> exp . MINUS exp
    (40) exp -> exp . MULT exp
    (41) exp -> exp . DIV exp
    (42) exp -> exp . MOD exp
    (43) exp -> exp . L_OP exp
    (44) exp -> exp . G_OP exp
    (45) exp -> exp . LE_OP exp
    (46) exp -> exp . GE_OP exp
    (47) exp -> exp . NOTEQUALS exp
    (48) exp -> exp . EQUALS_OP exp
    (49) exp -> exp . OR_OP exp
    (50) exp -> exp . AND_OP exp
    (51) exp -> exp . MUL_ASSIGN exp
    (52) exp -> exp . DIV_ASSIGN exp
    (53) exp -> exp . MOD_ASSIGN exp
    (54) exp -> exp . ADD_ASSIGN exp
    (55) exp -> exp . SUB_ASSIGN exp
    (56) exp -> exp . LEFT_ASSIGN exp
    (57) exp -> exp . RIGHT_ASSIGN exp
    (58) exp -> exp . AND_ASSIGN exp
    (59) exp -> exp . XOR_ASSIGN exp
    (60) exp -> exp . OR_ASSIGN exp
    (61) exp -> exp . EQUALS exp

    RBIG            shift and go to state 179
    ADD             shift and go to state 79
    MINUS           shift and go to state 69
    MULT            shift and go to state 70
    DIV             shift and go to state 68
    MOD             shift and go to state 88
    L_OP            shift and go to state 85
    G_OP            shift and go to state 73
    LE_OP           shift and go to state 71
    GE_OP           shift and go to state 80
    NOTEQUALS       shift and go to state 64
    EQUALS_OP       shift and go to state 65
    OR_OP           shift and go to state 74
    AND_OP          shift and go to state 78
    MUL_ASSIGN      shift and go to state 86
    DIV_ASSIGN      shift and go to state 66
    MOD_ASSIGN      shift and go to state 82
    ADD_ASSIGN      shift and go to state 76
    SUB_ASSIGN      shift and go to state 81
    LEFT_ASSIGN     shift and go to state 87
    RIGHT_ASSIGN    shift and go to state 72
    AND_ASSIGN      shift and go to state 75
    XOR_ASSIGN      shift and go to state 83
    OR_ASSIGN       shift and go to state 84
    EQUALS          shift and go to state 77


state 152

    (16) enum_list -> VARIABLE COMMA enum_list .

    SEMI_COLON      reduce using rule 16 (enum_list -> VARIABLE COMMA enum_list .)


state 153

    (16) enum_list -> VARIABLE . COMMA enum_list
    (17) enum_list -> VARIABLE . EQUALS exp COMMA enum_list
    (18) enum_list -> VARIABLE .
    (19) enum_list -> VARIABLE . EQUALS exp
    (20) enum_list -> VARIABLE . LBIG exp RBIG COMMA enum_list
    (21) enum_list -> VARIABLE . LBIG exp RBIG EQUALS LBRACE num_list RBRACE COMMA enum_list
    (22) enum_list -> VARIABLE . LBIG exp RBIG
    (23) enum_list -> VARIABLE . LBIG exp RBIG EQUALS LBRACE num_list RBRACE

    COMMA           shift and go to state 103
    EQUALS          shift and go to state 101
    SEMI_COLON      reduce using rule 18 (enum_list -> VARIABLE .)
    LBIG            shift and go to state 102


state 154

    (108) normal_function -> type VARIABLE LPAREN RPAREN . lbrace statements rbrace
    (109) normal_function -> type VARIABLE LPAREN RPAREN . lbrace rbrace
    (120) lbrace -> . LBRACE

    LBRACE          shift and go to state 48

    lbrace                         shift and go to state 180

state 155

    (104) normal_function -> type VARIABLE LPAREN parameters . RPAREN lbrace statements rbrace
    (105) normal_function -> type VARIABLE LPAREN parameters . RPAREN lbrace rbrace

    RPAREN          shift and go to state 181


state 156

    (100) main_function -> type MAIN LPAREN RPAREN . lbrace statements rbrace
    (101) main_function -> type MAIN LPAREN RPAREN . lbrace rbrace
    (120) lbrace -> . LBRACE

    LBRACE          shift and go to state 48

    lbrace                         shift and go to state 182

state 157

    (96) main_function -> type MAIN LPAREN parameters . RPAREN lbrace statements rbrace
    (97) main_function -> type MAIN LPAREN parameters . RPAREN lbrace rbrace

    RPAREN          shift and go to state 183


state 158

    (71) unary_expression -> unary_operator VARIABLE LBIG exp . RBIG
    (38) exp -> exp . ADD exp
    (39) exp -> exp . MINUS exp
    (40) exp -> exp . MULT exp
    (41) exp -> exp . DIV exp
    (42) exp -> exp . MOD exp
    (43) exp -> exp . L_OP exp
    (44) exp -> exp . G_OP exp
    (45) exp -> exp . LE_OP exp
    (46) exp -> exp . GE_OP exp
    (47) exp -> exp . NOTEQUALS exp
    (48) exp -> exp . EQUALS_OP exp
    (49) exp -> exp . OR_OP exp
    (50) exp -> exp . AND_OP exp
    (51) exp -> exp . MUL_ASSIGN exp
    (52) exp -> exp . DIV_ASSIGN exp
    (53) exp -> exp . MOD_ASSIGN exp
    (54) exp -> exp . ADD_ASSIGN exp
    (55) exp -> exp . SUB_ASSIGN exp
    (56) exp -> exp . LEFT_ASSIGN exp
    (57) exp -> exp . RIGHT_ASSIGN exp
    (58) exp -> exp . AND_ASSIGN exp
    (59) exp -> exp . XOR_ASSIGN exp
    (60) exp -> exp . OR_ASSIGN exp
    (61) exp -> exp . EQUALS exp

    RBIG            shift and go to state 184
    ADD             shift and go to state 79
    MINUS           shift and go to state 69
    MULT            shift and go to state 70
    DIV             shift and go to state 68
    MOD             shift and go to state 88
    L_OP            shift and go to state 85
    G_OP            shift and go to state 73
    LE_OP           shift and go to state 71
    GE_OP           shift and go to state 80
    NOTEQUALS       shift and go to state 64
    EQUALS_OP       shift and go to state 65
    OR_OP           shift and go to state 74
    AND_OP          shift and go to state 78
    MUL_ASSIGN      shift and go to state 86
    DIV_ASSIGN      shift and go to state 66
    MOD_ASSIGN      shift and go to state 82
    ADD_ASSIGN      shift and go to state 76
    SUB_ASSIGN      shift and go to state 81
    LEFT_ASSIGN     shift and go to state 87
    RIGHT_ASSIGN    shift and go to state 72
    AND_ASSIGN      shift and go to state 75
    XOR_ASSIGN      shift and go to state 83
    OR_ASSIGN       shift and go to state 84
    EQUALS          shift and go to state 77


state 159

    (74) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON . iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (75) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON . iterative_exp SEMI_COLON iterative_exp RPAREN lbrace statements rbrace
    (76) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON . iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (77) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON . iterative_exp SEMI_COLON iterative_exp RPAREN lbrace rbrace
    (86) iterative_exp -> . exp COMMA iterative_exp
    (87) iterative_exp -> . exp
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 43
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    unary_expression               shift and go to state 29
    iterative_exp                  shift and go to state 185
    function_call                  shift and go to state 7
    exp                            shift and go to state 108
    constant                       shift and go to state 11
    unary_operator                 shift and go to state 22

state 160

    (86) iterative_exp -> exp COMMA . iterative_exp
    (86) iterative_exp -> . exp COMMA iterative_exp
    (87) iterative_exp -> . exp
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 43
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    constant                       shift and go to state 11
    unary_expression               shift and go to state 29
    iterative_exp                  shift and go to state 186
    function_call                  shift and go to state 7
    exp                            shift and go to state 108
    unary_operator                 shift and go to state 22

state 161

    (66) exp -> VARIABLE LBIG exp RBIG .
    (70) unary_expression -> VARIABLE LBIG exp RBIG . unary_operator
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    SEMI_COLON      reduce using rule 66 (exp -> VARIABLE LBIG exp RBIG .)
    ADD             reduce using rule 66 (exp -> VARIABLE LBIG exp RBIG .)
    MINUS           reduce using rule 66 (exp -> VARIABLE LBIG exp RBIG .)
    MULT            reduce using rule 66 (exp -> VARIABLE LBIG exp RBIG .)
    DIV             reduce using rule 66 (exp -> VARIABLE LBIG exp RBIG .)
    MOD             reduce using rule 66 (exp -> VARIABLE LBIG exp RBIG .)
    L_OP            reduce using rule 66 (exp -> VARIABLE LBIG exp RBIG .)
    G_OP            reduce using rule 66 (exp -> VARIABLE LBIG exp RBIG .)
    LE_OP           reduce using rule 66 (exp -> VARIABLE LBIG exp RBIG .)
    GE_OP           reduce using rule 66 (exp -> VARIABLE LBIG exp RBIG .)
    NOTEQUALS       reduce using rule 66 (exp -> VARIABLE LBIG exp RBIG .)
    EQUALS_OP       reduce using rule 66 (exp -> VARIABLE LBIG exp RBIG .)
    OR_OP           reduce using rule 66 (exp -> VARIABLE LBIG exp RBIG .)
    AND_OP          reduce using rule 66 (exp -> VARIABLE LBIG exp RBIG .)
    MUL_ASSIGN      reduce using rule 66 (exp -> VARIABLE LBIG exp RBIG .)
    DIV_ASSIGN      reduce using rule 66 (exp -> VARIABLE LBIG exp RBIG .)
    MOD_ASSIGN      reduce using rule 66 (exp -> VARIABLE LBIG exp RBIG .)
    ADD_ASSIGN      reduce using rule 66 (exp -> VARIABLE LBIG exp RBIG .)
    SUB_ASSIGN      reduce using rule 66 (exp -> VARIABLE LBIG exp RBIG .)
    LEFT_ASSIGN     reduce using rule 66 (exp -> VARIABLE LBIG exp RBIG .)
    RIGHT_ASSIGN    reduce using rule 66 (exp -> VARIABLE LBIG exp RBIG .)
    AND_ASSIGN      reduce using rule 66 (exp -> VARIABLE LBIG exp RBIG .)
    XOR_ASSIGN      reduce using rule 66 (exp -> VARIABLE LBIG exp RBIG .)
    OR_ASSIGN       reduce using rule 66 (exp -> VARIABLE LBIG exp RBIG .)
    EQUALS          reduce using rule 66 (exp -> VARIABLE LBIG exp RBIG .)
    RPAREN          reduce using rule 66 (exp -> VARIABLE LBIG exp RBIG .)
    COMMA           reduce using rule 66 (exp -> VARIABLE LBIG exp RBIG .)
    RBIG            reduce using rule 66 (exp -> VARIABLE LBIG exp RBIG .)
    RBRACE          reduce using rule 66 (exp -> VARIABLE LBIG exp RBIG .)
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    unary_operator                 shift and go to state 187

state 162

    (110) normal_function -> VARIABLE LPAREN RPAREN lbrace . statements rbrace
    (111) normal_function -> VARIABLE LPAREN RPAREN lbrace . rbrace
    (2) statements -> . statements statement
    (3) statements -> . statement
    (121) rbrace -> . RBRACE
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (9) statement -> . conditional_statement
    (10) statement -> . COMMENT
    (15) declaration -> . type enum_list SEMI_COLON
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (74) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (75) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace statements rbrace
    (76) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (77) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace rbrace
    (78) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (79) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (80) iterative_statement -> . WHILE LPAREN exp RPAREN lbrace statements rbrace
    (81) iterative_statement -> . WHILE LPAREN exp RPAREN lbrace rbrace
    (82) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (83) iterative_statement -> . DO lbrace statements rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (84) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (85) iterative_statement -> . DO lbrace rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (94) function -> . normal_function
    (95) function -> . main_function
    (11) constant_statement -> . BREAK SEMI_COLON
    (12) constant_statement -> . CONTINUE SEMI_COLON
    (13) constant_statement -> . RETURN SEMI_COLON
    (14) constant_statement -> . RETURN exp SEMI_COLON
    (88) conditional_statement -> . IF LPAREN exp RPAREN statement
    (89) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace
    (90) conditional_statement -> . IF LPAREN exp RPAREN statement ELSE statement
    (91) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace ELSE statement
    (92) conditional_statement -> . IF LPAREN exp RPAREN statement ELSE lbrace statements rbrace
    (93) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace ELSE lbrace statements rbrace
    (26) type -> . INT
    (27) type -> . FLOAT
    (28) type -> . CHAR
    (29) type -> . DOUBLE
    (30) type -> . VOID
    (31) type -> . SHORT
    (32) type -> . LONG
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (104) normal_function -> . type VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (105) normal_function -> . type VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (106) normal_function -> . VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (107) normal_function -> . VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (108) normal_function -> . type VARIABLE LPAREN RPAREN lbrace statements rbrace
    (109) normal_function -> . type VARIABLE LPAREN RPAREN lbrace rbrace
    (110) normal_function -> . VARIABLE LPAREN RPAREN lbrace statements rbrace
    (111) normal_function -> . VARIABLE LPAREN RPAREN lbrace rbrace
    (96) main_function -> . type MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (97) main_function -> . type MAIN LPAREN parameters RPAREN lbrace rbrace
    (98) main_function -> . MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (99) main_function -> . MAIN LPAREN parameters RPAREN lbrace rbrace
    (100) main_function -> . type MAIN LPAREN RPAREN lbrace statements rbrace
    (101) main_function -> . type MAIN LPAREN RPAREN lbrace rbrace
    (102) main_function -> . MAIN LPAREN RPAREN lbrace statements rbrace
    (103) main_function -> . MAIN LPAREN RPAREN lbrace rbrace
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    RBRACE          shift and go to state 95
    COMMENT         shift and go to state 13
    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 28
    FOR             shift and go to state 25
    WHILE           shift and go to state 9
    DO              shift and go to state 4
    BREAK           shift and go to state 38
    CONTINUE        shift and go to state 39
    RETURN          shift and go to state 1
    IF              shift and go to state 31
    INT             shift and go to state 33
    FLOAT           shift and go to state 37
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 34
    VOID            shift and go to state 5
    SHORT           shift and go to state 10
    LONG            shift and go to state 41
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    MAIN            shift and go to state 14
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    function                       shift and go to state 23
    statements                     shift and go to state 188
    rbrace                         shift and go to state 189
    unary_expression               shift and go to state 29
    type                           shift and go to state 21
    normal_function                shift and go to state 36
    main_function                  shift and go to state 2
    function_call                  shift and go to state 7
    conditional_statement          shift and go to state 17
    statement                      shift and go to state 19
    exp                            shift and go to state 40
    declaration                    shift and go to state 27
    constant_statement             shift and go to state 32
    constant                       shift and go to state 11
    iterative_statement            shift and go to state 12
    unary_operator                 shift and go to state 22

state 163

    (106) normal_function -> VARIABLE LPAREN parameters RPAREN . lbrace statements rbrace
    (107) normal_function -> VARIABLE LPAREN parameters RPAREN . lbrace rbrace
    (120) lbrace -> . LBRACE

    LBRACE          shift and go to state 48

    lbrace                         shift and go to state 190

state 164

    (116) arguments -> arguments COMMA . VARIABLE
    (117) arguments -> arguments COMMA . constant
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER

    VARIABLE        shift and go to state 192
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6

    constant                       shift and go to state 191

state 165

    (114) function_call -> VARIABLE LPAREN arguments RPAREN .

    SEMI_COLON      reduce using rule 114 (function_call -> VARIABLE LPAREN arguments RPAREN .)
    ADD             reduce using rule 114 (function_call -> VARIABLE LPAREN arguments RPAREN .)
    MINUS           reduce using rule 114 (function_call -> VARIABLE LPAREN arguments RPAREN .)
    MULT            reduce using rule 114 (function_call -> VARIABLE LPAREN arguments RPAREN .)
    DIV             reduce using rule 114 (function_call -> VARIABLE LPAREN arguments RPAREN .)
    MOD             reduce using rule 114 (function_call -> VARIABLE LPAREN arguments RPAREN .)
    L_OP            reduce using rule 114 (function_call -> VARIABLE LPAREN arguments RPAREN .)
    G_OP            reduce using rule 114 (function_call -> VARIABLE LPAREN arguments RPAREN .)
    LE_OP           reduce using rule 114 (function_call -> VARIABLE LPAREN arguments RPAREN .)
    GE_OP           reduce using rule 114 (function_call -> VARIABLE LPAREN arguments RPAREN .)
    NOTEQUALS       reduce using rule 114 (function_call -> VARIABLE LPAREN arguments RPAREN .)
    EQUALS_OP       reduce using rule 114 (function_call -> VARIABLE LPAREN arguments RPAREN .)
    OR_OP           reduce using rule 114 (function_call -> VARIABLE LPAREN arguments RPAREN .)
    AND_OP          reduce using rule 114 (function_call -> VARIABLE LPAREN arguments RPAREN .)
    MUL_ASSIGN      reduce using rule 114 (function_call -> VARIABLE LPAREN arguments RPAREN .)
    DIV_ASSIGN      reduce using rule 114 (function_call -> VARIABLE LPAREN arguments RPAREN .)
    MOD_ASSIGN      reduce using rule 114 (function_call -> VARIABLE LPAREN arguments RPAREN .)
    ADD_ASSIGN      reduce using rule 114 (function_call -> VARIABLE LPAREN arguments RPAREN .)
    SUB_ASSIGN      reduce using rule 114 (function_call -> VARIABLE LPAREN arguments RPAREN .)
    LEFT_ASSIGN     reduce using rule 114 (function_call -> VARIABLE LPAREN arguments RPAREN .)
    RIGHT_ASSIGN    reduce using rule 114 (function_call -> VARIABLE LPAREN arguments RPAREN .)
    AND_ASSIGN      reduce using rule 114 (function_call -> VARIABLE LPAREN arguments RPAREN .)
    XOR_ASSIGN      reduce using rule 114 (function_call -> VARIABLE LPAREN arguments RPAREN .)
    OR_ASSIGN       reduce using rule 114 (function_call -> VARIABLE LPAREN arguments RPAREN .)
    EQUALS          reduce using rule 114 (function_call -> VARIABLE LPAREN arguments RPAREN .)
    RPAREN          reduce using rule 114 (function_call -> VARIABLE LPAREN arguments RPAREN .)
    COMMA           reduce using rule 114 (function_call -> VARIABLE LPAREN arguments RPAREN .)
    RBIG            reduce using rule 114 (function_call -> VARIABLE LPAREN arguments RPAREN .)
    RBRACE          reduce using rule 114 (function_call -> VARIABLE LPAREN arguments RPAREN .)


state 166

    (88) conditional_statement -> IF LPAREN exp RPAREN . statement
    (89) conditional_statement -> IF LPAREN exp RPAREN . lbrace statements rbrace
    (90) conditional_statement -> IF LPAREN exp RPAREN . statement ELSE statement
    (91) conditional_statement -> IF LPAREN exp RPAREN . lbrace statements rbrace ELSE statement
    (92) conditional_statement -> IF LPAREN exp RPAREN . statement ELSE lbrace statements rbrace
    (93) conditional_statement -> IF LPAREN exp RPAREN . lbrace statements rbrace ELSE lbrace statements rbrace
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (9) statement -> . conditional_statement
    (10) statement -> . COMMENT
    (120) lbrace -> . LBRACE
    (15) declaration -> . type enum_list SEMI_COLON
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (74) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (75) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace statements rbrace
    (76) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (77) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace rbrace
    (78) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (79) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (80) iterative_statement -> . WHILE LPAREN exp RPAREN lbrace statements rbrace
    (81) iterative_statement -> . WHILE LPAREN exp RPAREN lbrace rbrace
    (82) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (83) iterative_statement -> . DO lbrace statements rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (84) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (85) iterative_statement -> . DO lbrace rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (94) function -> . normal_function
    (95) function -> . main_function
    (11) constant_statement -> . BREAK SEMI_COLON
    (12) constant_statement -> . CONTINUE SEMI_COLON
    (13) constant_statement -> . RETURN SEMI_COLON
    (14) constant_statement -> . RETURN exp SEMI_COLON
    (88) conditional_statement -> . IF LPAREN exp RPAREN statement
    (89) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace
    (90) conditional_statement -> . IF LPAREN exp RPAREN statement ELSE statement
    (91) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace ELSE statement
    (92) conditional_statement -> . IF LPAREN exp RPAREN statement ELSE lbrace statements rbrace
    (93) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace ELSE lbrace statements rbrace
    (26) type -> . INT
    (27) type -> . FLOAT
    (28) type -> . CHAR
    (29) type -> . DOUBLE
    (30) type -> . VOID
    (31) type -> . SHORT
    (32) type -> . LONG
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (104) normal_function -> . type VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (105) normal_function -> . type VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (106) normal_function -> . VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (107) normal_function -> . VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (108) normal_function -> . type VARIABLE LPAREN RPAREN lbrace statements rbrace
    (109) normal_function -> . type VARIABLE LPAREN RPAREN lbrace rbrace
    (110) normal_function -> . VARIABLE LPAREN RPAREN lbrace statements rbrace
    (111) normal_function -> . VARIABLE LPAREN RPAREN lbrace rbrace
    (96) main_function -> . type MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (97) main_function -> . type MAIN LPAREN parameters RPAREN lbrace rbrace
    (98) main_function -> . MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (99) main_function -> . MAIN LPAREN parameters RPAREN lbrace rbrace
    (100) main_function -> . type MAIN LPAREN RPAREN lbrace statements rbrace
    (101) main_function -> . type MAIN LPAREN RPAREN lbrace rbrace
    (102) main_function -> . MAIN LPAREN RPAREN lbrace statements rbrace
    (103) main_function -> . MAIN LPAREN RPAREN lbrace rbrace
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    COMMENT         shift and go to state 13
    LBRACE          shift and go to state 48
    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 28
    FOR             shift and go to state 25
    WHILE           shift and go to state 9
    DO              shift and go to state 4
    BREAK           shift and go to state 38
    CONTINUE        shift and go to state 39
    RETURN          shift and go to state 1
    IF              shift and go to state 31
    INT             shift and go to state 33
    FLOAT           shift and go to state 37
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 34
    VOID            shift and go to state 5
    SHORT           shift and go to state 10
    LONG            shift and go to state 41
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    MAIN            shift and go to state 14
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    function                       shift and go to state 23
    lbrace                         shift and go to state 194
    exp                            shift and go to state 40
    unary_expression               shift and go to state 29
    type                           shift and go to state 21
    normal_function                shift and go to state 36
    function_call                  shift and go to state 7
    conditional_statement          shift and go to state 17
    main_function                  shift and go to state 2
    statement                      shift and go to state 193
    declaration                    shift and go to state 27
    constant_statement             shift and go to state 32
    constant                       shift and go to state 11
    iterative_statement            shift and go to state 12
    unary_operator                 shift and go to state 22

state 167

    (84) iterative_statement -> DO SEMI_COLON WHILE LPAREN exp . RPAREN SEMI_COLON
    (38) exp -> exp . ADD exp
    (39) exp -> exp . MINUS exp
    (40) exp -> exp . MULT exp
    (41) exp -> exp . DIV exp
    (42) exp -> exp . MOD exp
    (43) exp -> exp . L_OP exp
    (44) exp -> exp . G_OP exp
    (45) exp -> exp . LE_OP exp
    (46) exp -> exp . GE_OP exp
    (47) exp -> exp . NOTEQUALS exp
    (48) exp -> exp . EQUALS_OP exp
    (49) exp -> exp . OR_OP exp
    (50) exp -> exp . AND_OP exp
    (51) exp -> exp . MUL_ASSIGN exp
    (52) exp -> exp . DIV_ASSIGN exp
    (53) exp -> exp . MOD_ASSIGN exp
    (54) exp -> exp . ADD_ASSIGN exp
    (55) exp -> exp . SUB_ASSIGN exp
    (56) exp -> exp . LEFT_ASSIGN exp
    (57) exp -> exp . RIGHT_ASSIGN exp
    (58) exp -> exp . AND_ASSIGN exp
    (59) exp -> exp . XOR_ASSIGN exp
    (60) exp -> exp . OR_ASSIGN exp
    (61) exp -> exp . EQUALS exp

    RPAREN          shift and go to state 195
    ADD             shift and go to state 79
    MINUS           shift and go to state 69
    MULT            shift and go to state 70
    DIV             shift and go to state 68
    MOD             shift and go to state 88
    L_OP            shift and go to state 85
    G_OP            shift and go to state 73
    LE_OP           shift and go to state 71
    GE_OP           shift and go to state 80
    NOTEQUALS       shift and go to state 64
    EQUALS_OP       shift and go to state 65
    OR_OP           shift and go to state 74
    AND_OP          shift and go to state 78
    MUL_ASSIGN      shift and go to state 86
    DIV_ASSIGN      shift and go to state 66
    MOD_ASSIGN      shift and go to state 82
    ADD_ASSIGN      shift and go to state 76
    SUB_ASSIGN      shift and go to state 81
    LEFT_ASSIGN     shift and go to state 87
    RIGHT_ASSIGN    shift and go to state 72
    AND_ASSIGN      shift and go to state 75
    XOR_ASSIGN      shift and go to state 83
    OR_ASSIGN       shift and go to state 84
    EQUALS          shift and go to state 77


state 168

    (82) iterative_statement -> DO statement WHILE LPAREN exp . RPAREN SEMI_COLON
    (38) exp -> exp . ADD exp
    (39) exp -> exp . MINUS exp
    (40) exp -> exp . MULT exp
    (41) exp -> exp . DIV exp
    (42) exp -> exp . MOD exp
    (43) exp -> exp . L_OP exp
    (44) exp -> exp . G_OP exp
    (45) exp -> exp . LE_OP exp
    (46) exp -> exp . GE_OP exp
    (47) exp -> exp . NOTEQUALS exp
    (48) exp -> exp . EQUALS_OP exp
    (49) exp -> exp . OR_OP exp
    (50) exp -> exp . AND_OP exp
    (51) exp -> exp . MUL_ASSIGN exp
    (52) exp -> exp . DIV_ASSIGN exp
    (53) exp -> exp . MOD_ASSIGN exp
    (54) exp -> exp . ADD_ASSIGN exp
    (55) exp -> exp . SUB_ASSIGN exp
    (56) exp -> exp . LEFT_ASSIGN exp
    (57) exp -> exp . RIGHT_ASSIGN exp
    (58) exp -> exp . AND_ASSIGN exp
    (59) exp -> exp . XOR_ASSIGN exp
    (60) exp -> exp . OR_ASSIGN exp
    (61) exp -> exp . EQUALS exp

    RPAREN          shift and go to state 196
    ADD             shift and go to state 79
    MINUS           shift and go to state 69
    MULT            shift and go to state 70
    DIV             shift and go to state 68
    MOD             shift and go to state 88
    L_OP            shift and go to state 85
    G_OP            shift and go to state 73
    LE_OP           shift and go to state 71
    GE_OP           shift and go to state 80
    NOTEQUALS       shift and go to state 64
    EQUALS_OP       shift and go to state 65
    OR_OP           shift and go to state 74
    AND_OP          shift and go to state 78
    MUL_ASSIGN      shift and go to state 86
    DIV_ASSIGN      shift and go to state 66
    MOD_ASSIGN      shift and go to state 82
    ADD_ASSIGN      shift and go to state 76
    SUB_ASSIGN      shift and go to state 81
    LEFT_ASSIGN     shift and go to state 87
    RIGHT_ASSIGN    shift and go to state 72
    AND_ASSIGN      shift and go to state 75
    XOR_ASSIGN      shift and go to state 83
    OR_ASSIGN       shift and go to state 84
    EQUALS          shift and go to state 77


state 169

    (83) iterative_statement -> DO lbrace statements rbrace WHILE . LPAREN exp RPAREN SEMI_COLON

    LPAREN          shift and go to state 197


state 170

    (85) iterative_statement -> DO lbrace rbrace WHILE LPAREN . exp RPAREN SEMI_COLON
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 43
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    constant                       shift and go to state 11
    unary_expression               shift and go to state 29
    function_call                  shift and go to state 7
    exp                            shift and go to state 198
    unary_operator                 shift and go to state 22

state 171

    (79) iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .

    RBRACE          reduce using rule 79 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    COMMENT         reduce using rule 79 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    LPAREN          reduce using rule 79 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    VARIABLE        reduce using rule 79 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    FOR             reduce using rule 79 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    WHILE           reduce using rule 79 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    DO              reduce using rule 79 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    BREAK           reduce using rule 79 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    CONTINUE        reduce using rule 79 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    RETURN          reduce using rule 79 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    IF              reduce using rule 79 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    INT             reduce using rule 79 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    FLOAT           reduce using rule 79 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    CHAR            reduce using rule 79 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    DOUBLE          reduce using rule 79 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    VOID            reduce using rule 79 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    SHORT           reduce using rule 79 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    LONG            reduce using rule 79 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    HEX_INT         reduce using rule 79 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    DOT_REAL        reduce using rule 79 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    EXP_REAL        reduce using rule 79 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    DEC_INT         reduce using rule 79 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    CHARACTER       reduce using rule 79 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    MAIN            reduce using rule 79 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    INCREMENT       reduce using rule 79 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    DECREMENT       reduce using rule 79 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    $end            reduce using rule 79 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    ELSE            reduce using rule 79 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)


state 172

    (78) iterative_statement -> WHILE LPAREN exp RPAREN statement .

    RBRACE          reduce using rule 78 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    COMMENT         reduce using rule 78 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    LPAREN          reduce using rule 78 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    VARIABLE        reduce using rule 78 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    FOR             reduce using rule 78 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    WHILE           reduce using rule 78 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    DO              reduce using rule 78 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    BREAK           reduce using rule 78 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    CONTINUE        reduce using rule 78 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    RETURN          reduce using rule 78 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    IF              reduce using rule 78 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    INT             reduce using rule 78 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    FLOAT           reduce using rule 78 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    CHAR            reduce using rule 78 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    DOUBLE          reduce using rule 78 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    VOID            reduce using rule 78 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    SHORT           reduce using rule 78 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    LONG            reduce using rule 78 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    HEX_INT         reduce using rule 78 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    DOT_REAL        reduce using rule 78 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    EXP_REAL        reduce using rule 78 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    DEC_INT         reduce using rule 78 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    CHARACTER       reduce using rule 78 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    MAIN            reduce using rule 78 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    INCREMENT       reduce using rule 78 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    DECREMENT       reduce using rule 78 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    $end            reduce using rule 78 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    ELSE            reduce using rule 78 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)


state 173

    (80) iterative_statement -> WHILE LPAREN exp RPAREN lbrace . statements rbrace
    (81) iterative_statement -> WHILE LPAREN exp RPAREN lbrace . rbrace
    (2) statements -> . statements statement
    (3) statements -> . statement
    (121) rbrace -> . RBRACE
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (9) statement -> . conditional_statement
    (10) statement -> . COMMENT
    (15) declaration -> . type enum_list SEMI_COLON
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (74) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (75) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace statements rbrace
    (76) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (77) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace rbrace
    (78) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (79) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (80) iterative_statement -> . WHILE LPAREN exp RPAREN lbrace statements rbrace
    (81) iterative_statement -> . WHILE LPAREN exp RPAREN lbrace rbrace
    (82) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (83) iterative_statement -> . DO lbrace statements rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (84) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (85) iterative_statement -> . DO lbrace rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (94) function -> . normal_function
    (95) function -> . main_function
    (11) constant_statement -> . BREAK SEMI_COLON
    (12) constant_statement -> . CONTINUE SEMI_COLON
    (13) constant_statement -> . RETURN SEMI_COLON
    (14) constant_statement -> . RETURN exp SEMI_COLON
    (88) conditional_statement -> . IF LPAREN exp RPAREN statement
    (89) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace
    (90) conditional_statement -> . IF LPAREN exp RPAREN statement ELSE statement
    (91) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace ELSE statement
    (92) conditional_statement -> . IF LPAREN exp RPAREN statement ELSE lbrace statements rbrace
    (93) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace ELSE lbrace statements rbrace
    (26) type -> . INT
    (27) type -> . FLOAT
    (28) type -> . CHAR
    (29) type -> . DOUBLE
    (30) type -> . VOID
    (31) type -> . SHORT
    (32) type -> . LONG
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (104) normal_function -> . type VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (105) normal_function -> . type VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (106) normal_function -> . VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (107) normal_function -> . VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (108) normal_function -> . type VARIABLE LPAREN RPAREN lbrace statements rbrace
    (109) normal_function -> . type VARIABLE LPAREN RPAREN lbrace rbrace
    (110) normal_function -> . VARIABLE LPAREN RPAREN lbrace statements rbrace
    (111) normal_function -> . VARIABLE LPAREN RPAREN lbrace rbrace
    (96) main_function -> . type MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (97) main_function -> . type MAIN LPAREN parameters RPAREN lbrace rbrace
    (98) main_function -> . MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (99) main_function -> . MAIN LPAREN parameters RPAREN lbrace rbrace
    (100) main_function -> . type MAIN LPAREN RPAREN lbrace statements rbrace
    (101) main_function -> . type MAIN LPAREN RPAREN lbrace rbrace
    (102) main_function -> . MAIN LPAREN RPAREN lbrace statements rbrace
    (103) main_function -> . MAIN LPAREN RPAREN lbrace rbrace
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    RBRACE          shift and go to state 95
    COMMENT         shift and go to state 13
    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 28
    FOR             shift and go to state 25
    WHILE           shift and go to state 9
    DO              shift and go to state 4
    BREAK           shift and go to state 38
    CONTINUE        shift and go to state 39
    RETURN          shift and go to state 1
    IF              shift and go to state 31
    INT             shift and go to state 33
    FLOAT           shift and go to state 37
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 34
    VOID            shift and go to state 5
    SHORT           shift and go to state 10
    LONG            shift and go to state 41
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    MAIN            shift and go to state 14
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    function                       shift and go to state 23
    statements                     shift and go to state 199
    rbrace                         shift and go to state 200
    unary_expression               shift and go to state 29
    type                           shift and go to state 21
    normal_function                shift and go to state 36
    function_call                  shift and go to state 7
    conditional_statement          shift and go to state 17
    main_function                  shift and go to state 2
    constant_statement             shift and go to state 32
    statement                      shift and go to state 19
    declaration                    shift and go to state 27
    exp                            shift and go to state 40
    constant                       shift and go to state 11
    iterative_statement            shift and go to state 12
    unary_operator                 shift and go to state 22

state 174

    (98) main_function -> MAIN LPAREN parameters RPAREN lbrace . statements rbrace
    (99) main_function -> MAIN LPAREN parameters RPAREN lbrace . rbrace
    (2) statements -> . statements statement
    (3) statements -> . statement
    (121) rbrace -> . RBRACE
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (9) statement -> . conditional_statement
    (10) statement -> . COMMENT
    (15) declaration -> . type enum_list SEMI_COLON
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (74) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (75) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace statements rbrace
    (76) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (77) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace rbrace
    (78) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (79) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (80) iterative_statement -> . WHILE LPAREN exp RPAREN lbrace statements rbrace
    (81) iterative_statement -> . WHILE LPAREN exp RPAREN lbrace rbrace
    (82) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (83) iterative_statement -> . DO lbrace statements rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (84) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (85) iterative_statement -> . DO lbrace rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (94) function -> . normal_function
    (95) function -> . main_function
    (11) constant_statement -> . BREAK SEMI_COLON
    (12) constant_statement -> . CONTINUE SEMI_COLON
    (13) constant_statement -> . RETURN SEMI_COLON
    (14) constant_statement -> . RETURN exp SEMI_COLON
    (88) conditional_statement -> . IF LPAREN exp RPAREN statement
    (89) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace
    (90) conditional_statement -> . IF LPAREN exp RPAREN statement ELSE statement
    (91) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace ELSE statement
    (92) conditional_statement -> . IF LPAREN exp RPAREN statement ELSE lbrace statements rbrace
    (93) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace ELSE lbrace statements rbrace
    (26) type -> . INT
    (27) type -> . FLOAT
    (28) type -> . CHAR
    (29) type -> . DOUBLE
    (30) type -> . VOID
    (31) type -> . SHORT
    (32) type -> . LONG
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (104) normal_function -> . type VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (105) normal_function -> . type VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (106) normal_function -> . VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (107) normal_function -> . VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (108) normal_function -> . type VARIABLE LPAREN RPAREN lbrace statements rbrace
    (109) normal_function -> . type VARIABLE LPAREN RPAREN lbrace rbrace
    (110) normal_function -> . VARIABLE LPAREN RPAREN lbrace statements rbrace
    (111) normal_function -> . VARIABLE LPAREN RPAREN lbrace rbrace
    (96) main_function -> . type MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (97) main_function -> . type MAIN LPAREN parameters RPAREN lbrace rbrace
    (98) main_function -> . MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (99) main_function -> . MAIN LPAREN parameters RPAREN lbrace rbrace
    (100) main_function -> . type MAIN LPAREN RPAREN lbrace statements rbrace
    (101) main_function -> . type MAIN LPAREN RPAREN lbrace rbrace
    (102) main_function -> . MAIN LPAREN RPAREN lbrace statements rbrace
    (103) main_function -> . MAIN LPAREN RPAREN lbrace rbrace
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    RBRACE          shift and go to state 95
    COMMENT         shift and go to state 13
    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 28
    FOR             shift and go to state 25
    WHILE           shift and go to state 9
    DO              shift and go to state 4
    BREAK           shift and go to state 38
    CONTINUE        shift and go to state 39
    RETURN          shift and go to state 1
    IF              shift and go to state 31
    INT             shift and go to state 33
    FLOAT           shift and go to state 37
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 34
    VOID            shift and go to state 5
    SHORT           shift and go to state 10
    LONG            shift and go to state 41
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    MAIN            shift and go to state 14
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    function                       shift and go to state 23
    statements                     shift and go to state 201
    rbrace                         shift and go to state 202
    type                           shift and go to state 21
    normal_function                shift and go to state 36
    unary_expression               shift and go to state 29
    conditional_statement          shift and go to state 17
    main_function                  shift and go to state 2
    constant_statement             shift and go to state 32
    statement                      shift and go to state 19
    declaration                    shift and go to state 27
    exp                            shift and go to state 40
    constant                       shift and go to state 11
    iterative_statement            shift and go to state 12
    unary_operator                 shift and go to state 22
    function_call                  shift and go to state 7

state 175

    (102) main_function -> MAIN LPAREN RPAREN lbrace statements . rbrace
    (2) statements -> statements . statement
    (121) rbrace -> . RBRACE
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (9) statement -> . conditional_statement
    (10) statement -> . COMMENT
    (15) declaration -> . type enum_list SEMI_COLON
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (74) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (75) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace statements rbrace
    (76) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (77) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace rbrace
    (78) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (79) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (80) iterative_statement -> . WHILE LPAREN exp RPAREN lbrace statements rbrace
    (81) iterative_statement -> . WHILE LPAREN exp RPAREN lbrace rbrace
    (82) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (83) iterative_statement -> . DO lbrace statements rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (84) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (85) iterative_statement -> . DO lbrace rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (94) function -> . normal_function
    (95) function -> . main_function
    (11) constant_statement -> . BREAK SEMI_COLON
    (12) constant_statement -> . CONTINUE SEMI_COLON
    (13) constant_statement -> . RETURN SEMI_COLON
    (14) constant_statement -> . RETURN exp SEMI_COLON
    (88) conditional_statement -> . IF LPAREN exp RPAREN statement
    (89) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace
    (90) conditional_statement -> . IF LPAREN exp RPAREN statement ELSE statement
    (91) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace ELSE statement
    (92) conditional_statement -> . IF LPAREN exp RPAREN statement ELSE lbrace statements rbrace
    (93) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace ELSE lbrace statements rbrace
    (26) type -> . INT
    (27) type -> . FLOAT
    (28) type -> . CHAR
    (29) type -> . DOUBLE
    (30) type -> . VOID
    (31) type -> . SHORT
    (32) type -> . LONG
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (104) normal_function -> . type VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (105) normal_function -> . type VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (106) normal_function -> . VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (107) normal_function -> . VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (108) normal_function -> . type VARIABLE LPAREN RPAREN lbrace statements rbrace
    (109) normal_function -> . type VARIABLE LPAREN RPAREN lbrace rbrace
    (110) normal_function -> . VARIABLE LPAREN RPAREN lbrace statements rbrace
    (111) normal_function -> . VARIABLE LPAREN RPAREN lbrace rbrace
    (96) main_function -> . type MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (97) main_function -> . type MAIN LPAREN parameters RPAREN lbrace rbrace
    (98) main_function -> . MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (99) main_function -> . MAIN LPAREN parameters RPAREN lbrace rbrace
    (100) main_function -> . type MAIN LPAREN RPAREN lbrace statements rbrace
    (101) main_function -> . type MAIN LPAREN RPAREN lbrace rbrace
    (102) main_function -> . MAIN LPAREN RPAREN lbrace statements rbrace
    (103) main_function -> . MAIN LPAREN RPAREN lbrace rbrace
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    RBRACE          shift and go to state 95
    COMMENT         shift and go to state 13
    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 28
    FOR             shift and go to state 25
    WHILE           shift and go to state 9
    DO              shift and go to state 4
    BREAK           shift and go to state 38
    CONTINUE        shift and go to state 39
    RETURN          shift and go to state 1
    IF              shift and go to state 31
    INT             shift and go to state 33
    FLOAT           shift and go to state 37
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 34
    VOID            shift and go to state 5
    SHORT           shift and go to state 10
    LONG            shift and go to state 41
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    MAIN            shift and go to state 14
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    function                       shift and go to state 23
    rbrace                         shift and go to state 203
    unary_expression               shift and go to state 29
    type                           shift and go to state 21
    normal_function                shift and go to state 36
    main_function                  shift and go to state 2
    function_call                  shift and go to state 7
    conditional_statement          shift and go to state 17
    statement                      shift and go to state 45
    exp                            shift and go to state 40
    declaration                    shift and go to state 27
    constant_statement             shift and go to state 32
    constant                       shift and go to state 11
    iterative_statement            shift and go to state 12
    unary_operator                 shift and go to state 22

state 176

    (103) main_function -> MAIN LPAREN RPAREN lbrace rbrace .

    RBRACE          reduce using rule 103 (main_function -> MAIN LPAREN RPAREN lbrace rbrace .)
    COMMENT         reduce using rule 103 (main_function -> MAIN LPAREN RPAREN lbrace rbrace .)
    LPAREN          reduce using rule 103 (main_function -> MAIN LPAREN RPAREN lbrace rbrace .)
    VARIABLE        reduce using rule 103 (main_function -> MAIN LPAREN RPAREN lbrace rbrace .)
    FOR             reduce using rule 103 (main_function -> MAIN LPAREN RPAREN lbrace rbrace .)
    WHILE           reduce using rule 103 (main_function -> MAIN LPAREN RPAREN lbrace rbrace .)
    DO              reduce using rule 103 (main_function -> MAIN LPAREN RPAREN lbrace rbrace .)
    BREAK           reduce using rule 103 (main_function -> MAIN LPAREN RPAREN lbrace rbrace .)
    CONTINUE        reduce using rule 103 (main_function -> MAIN LPAREN RPAREN lbrace rbrace .)
    RETURN          reduce using rule 103 (main_function -> MAIN LPAREN RPAREN lbrace rbrace .)
    IF              reduce using rule 103 (main_function -> MAIN LPAREN RPAREN lbrace rbrace .)
    INT             reduce using rule 103 (main_function -> MAIN LPAREN RPAREN lbrace rbrace .)
    FLOAT           reduce using rule 103 (main_function -> MAIN LPAREN RPAREN lbrace rbrace .)
    CHAR            reduce using rule 103 (main_function -> MAIN LPAREN RPAREN lbrace rbrace .)
    DOUBLE          reduce using rule 103 (main_function -> MAIN LPAREN RPAREN lbrace rbrace .)
    VOID            reduce using rule 103 (main_function -> MAIN LPAREN RPAREN lbrace rbrace .)
    SHORT           reduce using rule 103 (main_function -> MAIN LPAREN RPAREN lbrace rbrace .)
    LONG            reduce using rule 103 (main_function -> MAIN LPAREN RPAREN lbrace rbrace .)
    HEX_INT         reduce using rule 103 (main_function -> MAIN LPAREN RPAREN lbrace rbrace .)
    DOT_REAL        reduce using rule 103 (main_function -> MAIN LPAREN RPAREN lbrace rbrace .)
    EXP_REAL        reduce using rule 103 (main_function -> MAIN LPAREN RPAREN lbrace rbrace .)
    DEC_INT         reduce using rule 103 (main_function -> MAIN LPAREN RPAREN lbrace rbrace .)
    CHARACTER       reduce using rule 103 (main_function -> MAIN LPAREN RPAREN lbrace rbrace .)
    MAIN            reduce using rule 103 (main_function -> MAIN LPAREN RPAREN lbrace rbrace .)
    INCREMENT       reduce using rule 103 (main_function -> MAIN LPAREN RPAREN lbrace rbrace .)
    DECREMENT       reduce using rule 103 (main_function -> MAIN LPAREN RPAREN lbrace rbrace .)
    $end            reduce using rule 103 (main_function -> MAIN LPAREN RPAREN lbrace rbrace .)
    ELSE            reduce using rule 103 (main_function -> MAIN LPAREN RPAREN lbrace rbrace .)


state 177

    (112) parameters -> type VARIABLE COMMA . parameters
    (112) parameters -> . type VARIABLE COMMA parameters
    (113) parameters -> . type VARIABLE
    (26) type -> . INT
    (27) type -> . FLOAT
    (28) type -> . CHAR
    (29) type -> . DOUBLE
    (30) type -> . VOID
    (31) type -> . SHORT
    (32) type -> . LONG

    INT             shift and go to state 33
    FLOAT           shift and go to state 37
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 34
    VOID            shift and go to state 5
    SHORT           shift and go to state 10
    LONG            shift and go to state 41

    type                           shift and go to state 99
    parameters                     shift and go to state 204

state 178

    (17) enum_list -> VARIABLE EQUALS exp COMMA . enum_list
    (16) enum_list -> . VARIABLE COMMA enum_list
    (17) enum_list -> . VARIABLE EQUALS exp COMMA enum_list
    (18) enum_list -> . VARIABLE
    (19) enum_list -> . VARIABLE EQUALS exp
    (20) enum_list -> . VARIABLE LBIG exp RBIG COMMA enum_list
    (21) enum_list -> . VARIABLE LBIG exp RBIG EQUALS LBRACE num_list RBRACE COMMA enum_list
    (22) enum_list -> . VARIABLE LBIG exp RBIG
    (23) enum_list -> . VARIABLE LBIG exp RBIG EQUALS LBRACE num_list RBRACE

    VARIABLE        shift and go to state 153

    enum_list                      shift and go to state 205

state 179

    (20) enum_list -> VARIABLE LBIG exp RBIG . COMMA enum_list
    (21) enum_list -> VARIABLE LBIG exp RBIG . EQUALS LBRACE num_list RBRACE COMMA enum_list
    (22) enum_list -> VARIABLE LBIG exp RBIG .
    (23) enum_list -> VARIABLE LBIG exp RBIG . EQUALS LBRACE num_list RBRACE

    COMMA           shift and go to state 207
    EQUALS          shift and go to state 206
    SEMI_COLON      reduce using rule 22 (enum_list -> VARIABLE LBIG exp RBIG .)


state 180

    (108) normal_function -> type VARIABLE LPAREN RPAREN lbrace . statements rbrace
    (109) normal_function -> type VARIABLE LPAREN RPAREN lbrace . rbrace
    (2) statements -> . statements statement
    (3) statements -> . statement
    (121) rbrace -> . RBRACE
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (9) statement -> . conditional_statement
    (10) statement -> . COMMENT
    (15) declaration -> . type enum_list SEMI_COLON
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (74) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (75) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace statements rbrace
    (76) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (77) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace rbrace
    (78) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (79) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (80) iterative_statement -> . WHILE LPAREN exp RPAREN lbrace statements rbrace
    (81) iterative_statement -> . WHILE LPAREN exp RPAREN lbrace rbrace
    (82) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (83) iterative_statement -> . DO lbrace statements rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (84) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (85) iterative_statement -> . DO lbrace rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (94) function -> . normal_function
    (95) function -> . main_function
    (11) constant_statement -> . BREAK SEMI_COLON
    (12) constant_statement -> . CONTINUE SEMI_COLON
    (13) constant_statement -> . RETURN SEMI_COLON
    (14) constant_statement -> . RETURN exp SEMI_COLON
    (88) conditional_statement -> . IF LPAREN exp RPAREN statement
    (89) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace
    (90) conditional_statement -> . IF LPAREN exp RPAREN statement ELSE statement
    (91) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace ELSE statement
    (92) conditional_statement -> . IF LPAREN exp RPAREN statement ELSE lbrace statements rbrace
    (93) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace ELSE lbrace statements rbrace
    (26) type -> . INT
    (27) type -> . FLOAT
    (28) type -> . CHAR
    (29) type -> . DOUBLE
    (30) type -> . VOID
    (31) type -> . SHORT
    (32) type -> . LONG
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (104) normal_function -> . type VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (105) normal_function -> . type VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (106) normal_function -> . VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (107) normal_function -> . VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (108) normal_function -> . type VARIABLE LPAREN RPAREN lbrace statements rbrace
    (109) normal_function -> . type VARIABLE LPAREN RPAREN lbrace rbrace
    (110) normal_function -> . VARIABLE LPAREN RPAREN lbrace statements rbrace
    (111) normal_function -> . VARIABLE LPAREN RPAREN lbrace rbrace
    (96) main_function -> . type MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (97) main_function -> . type MAIN LPAREN parameters RPAREN lbrace rbrace
    (98) main_function -> . MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (99) main_function -> . MAIN LPAREN parameters RPAREN lbrace rbrace
    (100) main_function -> . type MAIN LPAREN RPAREN lbrace statements rbrace
    (101) main_function -> . type MAIN LPAREN RPAREN lbrace rbrace
    (102) main_function -> . MAIN LPAREN RPAREN lbrace statements rbrace
    (103) main_function -> . MAIN LPAREN RPAREN lbrace rbrace
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    RBRACE          shift and go to state 95
    COMMENT         shift and go to state 13
    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 28
    FOR             shift and go to state 25
    WHILE           shift and go to state 9
    DO              shift and go to state 4
    BREAK           shift and go to state 38
    CONTINUE        shift and go to state 39
    RETURN          shift and go to state 1
    IF              shift and go to state 31
    INT             shift and go to state 33
    FLOAT           shift and go to state 37
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 34
    VOID            shift and go to state 5
    SHORT           shift and go to state 10
    LONG            shift and go to state 41
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    MAIN            shift and go to state 14
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    function                       shift and go to state 23
    statements                     shift and go to state 208
    rbrace                         shift and go to state 209
    unary_expression               shift and go to state 29
    iterative_statement            shift and go to state 12
    normal_function                shift and go to state 36
    function_call                  shift and go to state 7
    conditional_statement          shift and go to state 17
    main_function                  shift and go to state 2
    constant_statement             shift and go to state 32
    statement                      shift and go to state 19
    declaration                    shift and go to state 27
    exp                            shift and go to state 40
    constant                       shift and go to state 11
    type                           shift and go to state 21
    unary_operator                 shift and go to state 22

state 181

    (104) normal_function -> type VARIABLE LPAREN parameters RPAREN . lbrace statements rbrace
    (105) normal_function -> type VARIABLE LPAREN parameters RPAREN . lbrace rbrace
    (120) lbrace -> . LBRACE

    LBRACE          shift and go to state 48

    lbrace                         shift and go to state 210

state 182

    (100) main_function -> type MAIN LPAREN RPAREN lbrace . statements rbrace
    (101) main_function -> type MAIN LPAREN RPAREN lbrace . rbrace
    (2) statements -> . statements statement
    (3) statements -> . statement
    (121) rbrace -> . RBRACE
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (9) statement -> . conditional_statement
    (10) statement -> . COMMENT
    (15) declaration -> . type enum_list SEMI_COLON
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (74) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (75) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace statements rbrace
    (76) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (77) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace rbrace
    (78) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (79) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (80) iterative_statement -> . WHILE LPAREN exp RPAREN lbrace statements rbrace
    (81) iterative_statement -> . WHILE LPAREN exp RPAREN lbrace rbrace
    (82) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (83) iterative_statement -> . DO lbrace statements rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (84) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (85) iterative_statement -> . DO lbrace rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (94) function -> . normal_function
    (95) function -> . main_function
    (11) constant_statement -> . BREAK SEMI_COLON
    (12) constant_statement -> . CONTINUE SEMI_COLON
    (13) constant_statement -> . RETURN SEMI_COLON
    (14) constant_statement -> . RETURN exp SEMI_COLON
    (88) conditional_statement -> . IF LPAREN exp RPAREN statement
    (89) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace
    (90) conditional_statement -> . IF LPAREN exp RPAREN statement ELSE statement
    (91) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace ELSE statement
    (92) conditional_statement -> . IF LPAREN exp RPAREN statement ELSE lbrace statements rbrace
    (93) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace ELSE lbrace statements rbrace
    (26) type -> . INT
    (27) type -> . FLOAT
    (28) type -> . CHAR
    (29) type -> . DOUBLE
    (30) type -> . VOID
    (31) type -> . SHORT
    (32) type -> . LONG
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (104) normal_function -> . type VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (105) normal_function -> . type VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (106) normal_function -> . VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (107) normal_function -> . VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (108) normal_function -> . type VARIABLE LPAREN RPAREN lbrace statements rbrace
    (109) normal_function -> . type VARIABLE LPAREN RPAREN lbrace rbrace
    (110) normal_function -> . VARIABLE LPAREN RPAREN lbrace statements rbrace
    (111) normal_function -> . VARIABLE LPAREN RPAREN lbrace rbrace
    (96) main_function -> . type MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (97) main_function -> . type MAIN LPAREN parameters RPAREN lbrace rbrace
    (98) main_function -> . MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (99) main_function -> . MAIN LPAREN parameters RPAREN lbrace rbrace
    (100) main_function -> . type MAIN LPAREN RPAREN lbrace statements rbrace
    (101) main_function -> . type MAIN LPAREN RPAREN lbrace rbrace
    (102) main_function -> . MAIN LPAREN RPAREN lbrace statements rbrace
    (103) main_function -> . MAIN LPAREN RPAREN lbrace rbrace
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    RBRACE          shift and go to state 95
    COMMENT         shift and go to state 13
    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 28
    FOR             shift and go to state 25
    WHILE           shift and go to state 9
    DO              shift and go to state 4
    BREAK           shift and go to state 38
    CONTINUE        shift and go to state 39
    RETURN          shift and go to state 1
    IF              shift and go to state 31
    INT             shift and go to state 33
    FLOAT           shift and go to state 37
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 34
    VOID            shift and go to state 5
    SHORT           shift and go to state 10
    LONG            shift and go to state 41
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    MAIN            shift and go to state 14
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    function                       shift and go to state 23
    statements                     shift and go to state 211
    rbrace                         shift and go to state 212
    unary_expression               shift and go to state 29
    iterative_statement            shift and go to state 12
    normal_function                shift and go to state 36
    function_call                  shift and go to state 7
    conditional_statement          shift and go to state 17
    main_function                  shift and go to state 2
    constant_statement             shift and go to state 32
    statement                      shift and go to state 19
    declaration                    shift and go to state 27
    exp                            shift and go to state 40
    constant                       shift and go to state 11
    type                           shift and go to state 21
    unary_operator                 shift and go to state 22

state 183

    (96) main_function -> type MAIN LPAREN parameters RPAREN . lbrace statements rbrace
    (97) main_function -> type MAIN LPAREN parameters RPAREN . lbrace rbrace
    (120) lbrace -> . LBRACE

    LBRACE          shift and go to state 48

    lbrace                         shift and go to state 213

state 184

    (71) unary_expression -> unary_operator VARIABLE LBIG exp RBIG .

    COMMA           reduce using rule 71 (unary_expression -> unary_operator VARIABLE LBIG exp RBIG .)
    ADD             reduce using rule 71 (unary_expression -> unary_operator VARIABLE LBIG exp RBIG .)
    MINUS           reduce using rule 71 (unary_expression -> unary_operator VARIABLE LBIG exp RBIG .)
    MULT            reduce using rule 71 (unary_expression -> unary_operator VARIABLE LBIG exp RBIG .)
    DIV             reduce using rule 71 (unary_expression -> unary_operator VARIABLE LBIG exp RBIG .)
    MOD             reduce using rule 71 (unary_expression -> unary_operator VARIABLE LBIG exp RBIG .)
    L_OP            reduce using rule 71 (unary_expression -> unary_operator VARIABLE LBIG exp RBIG .)
    G_OP            reduce using rule 71 (unary_expression -> unary_operator VARIABLE LBIG exp RBIG .)
    LE_OP           reduce using rule 71 (unary_expression -> unary_operator VARIABLE LBIG exp RBIG .)
    GE_OP           reduce using rule 71 (unary_expression -> unary_operator VARIABLE LBIG exp RBIG .)
    NOTEQUALS       reduce using rule 71 (unary_expression -> unary_operator VARIABLE LBIG exp RBIG .)
    EQUALS_OP       reduce using rule 71 (unary_expression -> unary_operator VARIABLE LBIG exp RBIG .)
    OR_OP           reduce using rule 71 (unary_expression -> unary_operator VARIABLE LBIG exp RBIG .)
    AND_OP          reduce using rule 71 (unary_expression -> unary_operator VARIABLE LBIG exp RBIG .)
    MUL_ASSIGN      reduce using rule 71 (unary_expression -> unary_operator VARIABLE LBIG exp RBIG .)
    DIV_ASSIGN      reduce using rule 71 (unary_expression -> unary_operator VARIABLE LBIG exp RBIG .)
    MOD_ASSIGN      reduce using rule 71 (unary_expression -> unary_operator VARIABLE LBIG exp RBIG .)
    ADD_ASSIGN      reduce using rule 71 (unary_expression -> unary_operator VARIABLE LBIG exp RBIG .)
    SUB_ASSIGN      reduce using rule 71 (unary_expression -> unary_operator VARIABLE LBIG exp RBIG .)
    LEFT_ASSIGN     reduce using rule 71 (unary_expression -> unary_operator VARIABLE LBIG exp RBIG .)
    RIGHT_ASSIGN    reduce using rule 71 (unary_expression -> unary_operator VARIABLE LBIG exp RBIG .)
    AND_ASSIGN      reduce using rule 71 (unary_expression -> unary_operator VARIABLE LBIG exp RBIG .)
    XOR_ASSIGN      reduce using rule 71 (unary_expression -> unary_operator VARIABLE LBIG exp RBIG .)
    OR_ASSIGN       reduce using rule 71 (unary_expression -> unary_operator VARIABLE LBIG exp RBIG .)
    EQUALS          reduce using rule 71 (unary_expression -> unary_operator VARIABLE LBIG exp RBIG .)
    SEMI_COLON      reduce using rule 71 (unary_expression -> unary_operator VARIABLE LBIG exp RBIG .)
    RPAREN          reduce using rule 71 (unary_expression -> unary_operator VARIABLE LBIG exp RBIG .)
    RBIG            reduce using rule 71 (unary_expression -> unary_operator VARIABLE LBIG exp RBIG .)
    RBRACE          reduce using rule 71 (unary_expression -> unary_operator VARIABLE LBIG exp RBIG .)


state 185

    (74) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp . SEMI_COLON iterative_exp RPAREN statement
    (75) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp . SEMI_COLON iterative_exp RPAREN lbrace statements rbrace
    (76) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp . SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (77) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp . SEMI_COLON iterative_exp RPAREN lbrace rbrace

    SEMI_COLON      shift and go to state 214


state 186

    (86) iterative_exp -> exp COMMA iterative_exp .

    SEMI_COLON      reduce using rule 86 (iterative_exp -> exp COMMA iterative_exp .)
    RPAREN          reduce using rule 86 (iterative_exp -> exp COMMA iterative_exp .)


state 187

    (70) unary_expression -> VARIABLE LBIG exp RBIG unary_operator .

    COMMA           reduce using rule 70 (unary_expression -> VARIABLE LBIG exp RBIG unary_operator .)
    ADD             reduce using rule 70 (unary_expression -> VARIABLE LBIG exp RBIG unary_operator .)
    MINUS           reduce using rule 70 (unary_expression -> VARIABLE LBIG exp RBIG unary_operator .)
    MULT            reduce using rule 70 (unary_expression -> VARIABLE LBIG exp RBIG unary_operator .)
    DIV             reduce using rule 70 (unary_expression -> VARIABLE LBIG exp RBIG unary_operator .)
    MOD             reduce using rule 70 (unary_expression -> VARIABLE LBIG exp RBIG unary_operator .)
    L_OP            reduce using rule 70 (unary_expression -> VARIABLE LBIG exp RBIG unary_operator .)
    G_OP            reduce using rule 70 (unary_expression -> VARIABLE LBIG exp RBIG unary_operator .)
    LE_OP           reduce using rule 70 (unary_expression -> VARIABLE LBIG exp RBIG unary_operator .)
    GE_OP           reduce using rule 70 (unary_expression -> VARIABLE LBIG exp RBIG unary_operator .)
    NOTEQUALS       reduce using rule 70 (unary_expression -> VARIABLE LBIG exp RBIG unary_operator .)
    EQUALS_OP       reduce using rule 70 (unary_expression -> VARIABLE LBIG exp RBIG unary_operator .)
    OR_OP           reduce using rule 70 (unary_expression -> VARIABLE LBIG exp RBIG unary_operator .)
    AND_OP          reduce using rule 70 (unary_expression -> VARIABLE LBIG exp RBIG unary_operator .)
    MUL_ASSIGN      reduce using rule 70 (unary_expression -> VARIABLE LBIG exp RBIG unary_operator .)
    DIV_ASSIGN      reduce using rule 70 (unary_expression -> VARIABLE LBIG exp RBIG unary_operator .)
    MOD_ASSIGN      reduce using rule 70 (unary_expression -> VARIABLE LBIG exp RBIG unary_operator .)
    ADD_ASSIGN      reduce using rule 70 (unary_expression -> VARIABLE LBIG exp RBIG unary_operator .)
    SUB_ASSIGN      reduce using rule 70 (unary_expression -> VARIABLE LBIG exp RBIG unary_operator .)
    LEFT_ASSIGN     reduce using rule 70 (unary_expression -> VARIABLE LBIG exp RBIG unary_operator .)
    RIGHT_ASSIGN    reduce using rule 70 (unary_expression -> VARIABLE LBIG exp RBIG unary_operator .)
    AND_ASSIGN      reduce using rule 70 (unary_expression -> VARIABLE LBIG exp RBIG unary_operator .)
    XOR_ASSIGN      reduce using rule 70 (unary_expression -> VARIABLE LBIG exp RBIG unary_operator .)
    OR_ASSIGN       reduce using rule 70 (unary_expression -> VARIABLE LBIG exp RBIG unary_operator .)
    EQUALS          reduce using rule 70 (unary_expression -> VARIABLE LBIG exp RBIG unary_operator .)
    SEMI_COLON      reduce using rule 70 (unary_expression -> VARIABLE LBIG exp RBIG unary_operator .)
    RPAREN          reduce using rule 70 (unary_expression -> VARIABLE LBIG exp RBIG unary_operator .)
    RBIG            reduce using rule 70 (unary_expression -> VARIABLE LBIG exp RBIG unary_operator .)
    RBRACE          reduce using rule 70 (unary_expression -> VARIABLE LBIG exp RBIG unary_operator .)


state 188

    (110) normal_function -> VARIABLE LPAREN RPAREN lbrace statements . rbrace
    (2) statements -> statements . statement
    (121) rbrace -> . RBRACE
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (9) statement -> . conditional_statement
    (10) statement -> . COMMENT
    (15) declaration -> . type enum_list SEMI_COLON
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (74) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (75) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace statements rbrace
    (76) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (77) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace rbrace
    (78) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (79) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (80) iterative_statement -> . WHILE LPAREN exp RPAREN lbrace statements rbrace
    (81) iterative_statement -> . WHILE LPAREN exp RPAREN lbrace rbrace
    (82) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (83) iterative_statement -> . DO lbrace statements rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (84) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (85) iterative_statement -> . DO lbrace rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (94) function -> . normal_function
    (95) function -> . main_function
    (11) constant_statement -> . BREAK SEMI_COLON
    (12) constant_statement -> . CONTINUE SEMI_COLON
    (13) constant_statement -> . RETURN SEMI_COLON
    (14) constant_statement -> . RETURN exp SEMI_COLON
    (88) conditional_statement -> . IF LPAREN exp RPAREN statement
    (89) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace
    (90) conditional_statement -> . IF LPAREN exp RPAREN statement ELSE statement
    (91) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace ELSE statement
    (92) conditional_statement -> . IF LPAREN exp RPAREN statement ELSE lbrace statements rbrace
    (93) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace ELSE lbrace statements rbrace
    (26) type -> . INT
    (27) type -> . FLOAT
    (28) type -> . CHAR
    (29) type -> . DOUBLE
    (30) type -> . VOID
    (31) type -> . SHORT
    (32) type -> . LONG
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (104) normal_function -> . type VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (105) normal_function -> . type VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (106) normal_function -> . VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (107) normal_function -> . VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (108) normal_function -> . type VARIABLE LPAREN RPAREN lbrace statements rbrace
    (109) normal_function -> . type VARIABLE LPAREN RPAREN lbrace rbrace
    (110) normal_function -> . VARIABLE LPAREN RPAREN lbrace statements rbrace
    (111) normal_function -> . VARIABLE LPAREN RPAREN lbrace rbrace
    (96) main_function -> . type MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (97) main_function -> . type MAIN LPAREN parameters RPAREN lbrace rbrace
    (98) main_function -> . MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (99) main_function -> . MAIN LPAREN parameters RPAREN lbrace rbrace
    (100) main_function -> . type MAIN LPAREN RPAREN lbrace statements rbrace
    (101) main_function -> . type MAIN LPAREN RPAREN lbrace rbrace
    (102) main_function -> . MAIN LPAREN RPAREN lbrace statements rbrace
    (103) main_function -> . MAIN LPAREN RPAREN lbrace rbrace
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    RBRACE          shift and go to state 95
    COMMENT         shift and go to state 13
    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 28
    FOR             shift and go to state 25
    WHILE           shift and go to state 9
    DO              shift and go to state 4
    BREAK           shift and go to state 38
    CONTINUE        shift and go to state 39
    RETURN          shift and go to state 1
    IF              shift and go to state 31
    INT             shift and go to state 33
    FLOAT           shift and go to state 37
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 34
    VOID            shift and go to state 5
    SHORT           shift and go to state 10
    LONG            shift and go to state 41
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    MAIN            shift and go to state 14
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    function                       shift and go to state 23
    rbrace                         shift and go to state 215
    unary_expression               shift and go to state 29
    type                           shift and go to state 21
    normal_function                shift and go to state 36
    main_function                  shift and go to state 2
    function_call                  shift and go to state 7
    conditional_statement          shift and go to state 17
    statement                      shift and go to state 45
    exp                            shift and go to state 40
    declaration                    shift and go to state 27
    constant_statement             shift and go to state 32
    constant                       shift and go to state 11
    iterative_statement            shift and go to state 12
    unary_operator                 shift and go to state 22

state 189

    (111) normal_function -> VARIABLE LPAREN RPAREN lbrace rbrace .

    RBRACE          reduce using rule 111 (normal_function -> VARIABLE LPAREN RPAREN lbrace rbrace .)
    COMMENT         reduce using rule 111 (normal_function -> VARIABLE LPAREN RPAREN lbrace rbrace .)
    LPAREN          reduce using rule 111 (normal_function -> VARIABLE LPAREN RPAREN lbrace rbrace .)
    VARIABLE        reduce using rule 111 (normal_function -> VARIABLE LPAREN RPAREN lbrace rbrace .)
    FOR             reduce using rule 111 (normal_function -> VARIABLE LPAREN RPAREN lbrace rbrace .)
    WHILE           reduce using rule 111 (normal_function -> VARIABLE LPAREN RPAREN lbrace rbrace .)
    DO              reduce using rule 111 (normal_function -> VARIABLE LPAREN RPAREN lbrace rbrace .)
    BREAK           reduce using rule 111 (normal_function -> VARIABLE LPAREN RPAREN lbrace rbrace .)
    CONTINUE        reduce using rule 111 (normal_function -> VARIABLE LPAREN RPAREN lbrace rbrace .)
    RETURN          reduce using rule 111 (normal_function -> VARIABLE LPAREN RPAREN lbrace rbrace .)
    IF              reduce using rule 111 (normal_function -> VARIABLE LPAREN RPAREN lbrace rbrace .)
    INT             reduce using rule 111 (normal_function -> VARIABLE LPAREN RPAREN lbrace rbrace .)
    FLOAT           reduce using rule 111 (normal_function -> VARIABLE LPAREN RPAREN lbrace rbrace .)
    CHAR            reduce using rule 111 (normal_function -> VARIABLE LPAREN RPAREN lbrace rbrace .)
    DOUBLE          reduce using rule 111 (normal_function -> VARIABLE LPAREN RPAREN lbrace rbrace .)
    VOID            reduce using rule 111 (normal_function -> VARIABLE LPAREN RPAREN lbrace rbrace .)
    SHORT           reduce using rule 111 (normal_function -> VARIABLE LPAREN RPAREN lbrace rbrace .)
    LONG            reduce using rule 111 (normal_function -> VARIABLE LPAREN RPAREN lbrace rbrace .)
    HEX_INT         reduce using rule 111 (normal_function -> VARIABLE LPAREN RPAREN lbrace rbrace .)
    DOT_REAL        reduce using rule 111 (normal_function -> VARIABLE LPAREN RPAREN lbrace rbrace .)
    EXP_REAL        reduce using rule 111 (normal_function -> VARIABLE LPAREN RPAREN lbrace rbrace .)
    DEC_INT         reduce using rule 111 (normal_function -> VARIABLE LPAREN RPAREN lbrace rbrace .)
    CHARACTER       reduce using rule 111 (normal_function -> VARIABLE LPAREN RPAREN lbrace rbrace .)
    MAIN            reduce using rule 111 (normal_function -> VARIABLE LPAREN RPAREN lbrace rbrace .)
    INCREMENT       reduce using rule 111 (normal_function -> VARIABLE LPAREN RPAREN lbrace rbrace .)
    DECREMENT       reduce using rule 111 (normal_function -> VARIABLE LPAREN RPAREN lbrace rbrace .)
    $end            reduce using rule 111 (normal_function -> VARIABLE LPAREN RPAREN lbrace rbrace .)
    ELSE            reduce using rule 111 (normal_function -> VARIABLE LPAREN RPAREN lbrace rbrace .)


state 190

    (106) normal_function -> VARIABLE LPAREN parameters RPAREN lbrace . statements rbrace
    (107) normal_function -> VARIABLE LPAREN parameters RPAREN lbrace . rbrace
    (2) statements -> . statements statement
    (3) statements -> . statement
    (121) rbrace -> . RBRACE
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (9) statement -> . conditional_statement
    (10) statement -> . COMMENT
    (15) declaration -> . type enum_list SEMI_COLON
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (74) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (75) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace statements rbrace
    (76) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (77) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace rbrace
    (78) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (79) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (80) iterative_statement -> . WHILE LPAREN exp RPAREN lbrace statements rbrace
    (81) iterative_statement -> . WHILE LPAREN exp RPAREN lbrace rbrace
    (82) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (83) iterative_statement -> . DO lbrace statements rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (84) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (85) iterative_statement -> . DO lbrace rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (94) function -> . normal_function
    (95) function -> . main_function
    (11) constant_statement -> . BREAK SEMI_COLON
    (12) constant_statement -> . CONTINUE SEMI_COLON
    (13) constant_statement -> . RETURN SEMI_COLON
    (14) constant_statement -> . RETURN exp SEMI_COLON
    (88) conditional_statement -> . IF LPAREN exp RPAREN statement
    (89) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace
    (90) conditional_statement -> . IF LPAREN exp RPAREN statement ELSE statement
    (91) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace ELSE statement
    (92) conditional_statement -> . IF LPAREN exp RPAREN statement ELSE lbrace statements rbrace
    (93) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace ELSE lbrace statements rbrace
    (26) type -> . INT
    (27) type -> . FLOAT
    (28) type -> . CHAR
    (29) type -> . DOUBLE
    (30) type -> . VOID
    (31) type -> . SHORT
    (32) type -> . LONG
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (104) normal_function -> . type VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (105) normal_function -> . type VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (106) normal_function -> . VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (107) normal_function -> . VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (108) normal_function -> . type VARIABLE LPAREN RPAREN lbrace statements rbrace
    (109) normal_function -> . type VARIABLE LPAREN RPAREN lbrace rbrace
    (110) normal_function -> . VARIABLE LPAREN RPAREN lbrace statements rbrace
    (111) normal_function -> . VARIABLE LPAREN RPAREN lbrace rbrace
    (96) main_function -> . type MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (97) main_function -> . type MAIN LPAREN parameters RPAREN lbrace rbrace
    (98) main_function -> . MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (99) main_function -> . MAIN LPAREN parameters RPAREN lbrace rbrace
    (100) main_function -> . type MAIN LPAREN RPAREN lbrace statements rbrace
    (101) main_function -> . type MAIN LPAREN RPAREN lbrace rbrace
    (102) main_function -> . MAIN LPAREN RPAREN lbrace statements rbrace
    (103) main_function -> . MAIN LPAREN RPAREN lbrace rbrace
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    RBRACE          shift and go to state 95
    COMMENT         shift and go to state 13
    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 28
    FOR             shift and go to state 25
    WHILE           shift and go to state 9
    DO              shift and go to state 4
    BREAK           shift and go to state 38
    CONTINUE        shift and go to state 39
    RETURN          shift and go to state 1
    IF              shift and go to state 31
    INT             shift and go to state 33
    FLOAT           shift and go to state 37
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 34
    VOID            shift and go to state 5
    SHORT           shift and go to state 10
    LONG            shift and go to state 41
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    MAIN            shift and go to state 14
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    function                       shift and go to state 23
    statements                     shift and go to state 216
    rbrace                         shift and go to state 217
    type                           shift and go to state 21
    normal_function                shift and go to state 36
    unary_expression               shift and go to state 29
    conditional_statement          shift and go to state 17
    main_function                  shift and go to state 2
    constant_statement             shift and go to state 32
    statement                      shift and go to state 19
    declaration                    shift and go to state 27
    exp                            shift and go to state 40
    constant                       shift and go to state 11
    iterative_statement            shift and go to state 12
    unary_operator                 shift and go to state 22
    function_call                  shift and go to state 7

state 191

    (117) arguments -> arguments COMMA constant .

    RPAREN          reduce using rule 117 (arguments -> arguments COMMA constant .)
    COMMA           reduce using rule 117 (arguments -> arguments COMMA constant .)


state 192

    (116) arguments -> arguments COMMA VARIABLE .

    RPAREN          reduce using rule 116 (arguments -> arguments COMMA VARIABLE .)
    COMMA           reduce using rule 116 (arguments -> arguments COMMA VARIABLE .)


state 193

    (88) conditional_statement -> IF LPAREN exp RPAREN statement .
    (90) conditional_statement -> IF LPAREN exp RPAREN statement . ELSE statement
    (92) conditional_statement -> IF LPAREN exp RPAREN statement . ELSE lbrace statements rbrace

    RBRACE          reduce using rule 88 (conditional_statement -> IF LPAREN exp RPAREN statement .)
    COMMENT         reduce using rule 88 (conditional_statement -> IF LPAREN exp RPAREN statement .)
    LPAREN          reduce using rule 88 (conditional_statement -> IF LPAREN exp RPAREN statement .)
    VARIABLE        reduce using rule 88 (conditional_statement -> IF LPAREN exp RPAREN statement .)
    FOR             reduce using rule 88 (conditional_statement -> IF LPAREN exp RPAREN statement .)
    WHILE           reduce using rule 88 (conditional_statement -> IF LPAREN exp RPAREN statement .)
    DO              reduce using rule 88 (conditional_statement -> IF LPAREN exp RPAREN statement .)
    BREAK           reduce using rule 88 (conditional_statement -> IF LPAREN exp RPAREN statement .)
    CONTINUE        reduce using rule 88 (conditional_statement -> IF LPAREN exp RPAREN statement .)
    RETURN          reduce using rule 88 (conditional_statement -> IF LPAREN exp RPAREN statement .)
    IF              reduce using rule 88 (conditional_statement -> IF LPAREN exp RPAREN statement .)
    INT             reduce using rule 88 (conditional_statement -> IF LPAREN exp RPAREN statement .)
    FLOAT           reduce using rule 88 (conditional_statement -> IF LPAREN exp RPAREN statement .)
    CHAR            reduce using rule 88 (conditional_statement -> IF LPAREN exp RPAREN statement .)
    DOUBLE          reduce using rule 88 (conditional_statement -> IF LPAREN exp RPAREN statement .)
    VOID            reduce using rule 88 (conditional_statement -> IF LPAREN exp RPAREN statement .)
    SHORT           reduce using rule 88 (conditional_statement -> IF LPAREN exp RPAREN statement .)
    LONG            reduce using rule 88 (conditional_statement -> IF LPAREN exp RPAREN statement .)
    HEX_INT         reduce using rule 88 (conditional_statement -> IF LPAREN exp RPAREN statement .)
    DOT_REAL        reduce using rule 88 (conditional_statement -> IF LPAREN exp RPAREN statement .)
    EXP_REAL        reduce using rule 88 (conditional_statement -> IF LPAREN exp RPAREN statement .)
    DEC_INT         reduce using rule 88 (conditional_statement -> IF LPAREN exp RPAREN statement .)
    CHARACTER       reduce using rule 88 (conditional_statement -> IF LPAREN exp RPAREN statement .)
    MAIN            reduce using rule 88 (conditional_statement -> IF LPAREN exp RPAREN statement .)
    INCREMENT       reduce using rule 88 (conditional_statement -> IF LPAREN exp RPAREN statement .)
    DECREMENT       reduce using rule 88 (conditional_statement -> IF LPAREN exp RPAREN statement .)
    $end            reduce using rule 88 (conditional_statement -> IF LPAREN exp RPAREN statement .)
    ELSE            shift and go to state 218

  ! ELSE            [ reduce using rule 88 (conditional_statement -> IF LPAREN exp RPAREN statement .) ]


state 194

    (89) conditional_statement -> IF LPAREN exp RPAREN lbrace . statements rbrace
    (91) conditional_statement -> IF LPAREN exp RPAREN lbrace . statements rbrace ELSE statement
    (93) conditional_statement -> IF LPAREN exp RPAREN lbrace . statements rbrace ELSE lbrace statements rbrace
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (9) statement -> . conditional_statement
    (10) statement -> . COMMENT
    (15) declaration -> . type enum_list SEMI_COLON
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (74) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (75) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace statements rbrace
    (76) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (77) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace rbrace
    (78) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (79) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (80) iterative_statement -> . WHILE LPAREN exp RPAREN lbrace statements rbrace
    (81) iterative_statement -> . WHILE LPAREN exp RPAREN lbrace rbrace
    (82) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (83) iterative_statement -> . DO lbrace statements rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (84) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (85) iterative_statement -> . DO lbrace rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (94) function -> . normal_function
    (95) function -> . main_function
    (11) constant_statement -> . BREAK SEMI_COLON
    (12) constant_statement -> . CONTINUE SEMI_COLON
    (13) constant_statement -> . RETURN SEMI_COLON
    (14) constant_statement -> . RETURN exp SEMI_COLON
    (88) conditional_statement -> . IF LPAREN exp RPAREN statement
    (89) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace
    (90) conditional_statement -> . IF LPAREN exp RPAREN statement ELSE statement
    (91) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace ELSE statement
    (92) conditional_statement -> . IF LPAREN exp RPAREN statement ELSE lbrace statements rbrace
    (93) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace ELSE lbrace statements rbrace
    (26) type -> . INT
    (27) type -> . FLOAT
    (28) type -> . CHAR
    (29) type -> . DOUBLE
    (30) type -> . VOID
    (31) type -> . SHORT
    (32) type -> . LONG
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (104) normal_function -> . type VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (105) normal_function -> . type VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (106) normal_function -> . VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (107) normal_function -> . VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (108) normal_function -> . type VARIABLE LPAREN RPAREN lbrace statements rbrace
    (109) normal_function -> . type VARIABLE LPAREN RPAREN lbrace rbrace
    (110) normal_function -> . VARIABLE LPAREN RPAREN lbrace statements rbrace
    (111) normal_function -> . VARIABLE LPAREN RPAREN lbrace rbrace
    (96) main_function -> . type MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (97) main_function -> . type MAIN LPAREN parameters RPAREN lbrace rbrace
    (98) main_function -> . MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (99) main_function -> . MAIN LPAREN parameters RPAREN lbrace rbrace
    (100) main_function -> . type MAIN LPAREN RPAREN lbrace statements rbrace
    (101) main_function -> . type MAIN LPAREN RPAREN lbrace rbrace
    (102) main_function -> . MAIN LPAREN RPAREN lbrace statements rbrace
    (103) main_function -> . MAIN LPAREN RPAREN lbrace rbrace
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    COMMENT         shift and go to state 13
    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 28
    FOR             shift and go to state 25
    WHILE           shift and go to state 9
    DO              shift and go to state 4
    BREAK           shift and go to state 38
    CONTINUE        shift and go to state 39
    RETURN          shift and go to state 1
    IF              shift and go to state 31
    INT             shift and go to state 33
    FLOAT           shift and go to state 37
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 34
    VOID            shift and go to state 5
    SHORT           shift and go to state 10
    LONG            shift and go to state 41
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    MAIN            shift and go to state 14
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    function                       shift and go to state 23
    statements                     shift and go to state 219
    unary_expression               shift and go to state 29
    type                           shift and go to state 21
    normal_function                shift and go to state 36
    function_call                  shift and go to state 7
    conditional_statement          shift and go to state 17
    main_function                  shift and go to state 2
    constant_statement             shift and go to state 32
    statement                      shift and go to state 19
    declaration                    shift and go to state 27
    exp                            shift and go to state 40
    constant                       shift and go to state 11
    iterative_statement            shift and go to state 12
    unary_operator                 shift and go to state 22

state 195

    (84) iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN . SEMI_COLON

    SEMI_COLON      shift and go to state 220


state 196

    (82) iterative_statement -> DO statement WHILE LPAREN exp RPAREN . SEMI_COLON

    SEMI_COLON      shift and go to state 221


state 197

    (83) iterative_statement -> DO lbrace statements rbrace WHILE LPAREN . exp RPAREN SEMI_COLON
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 43
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    constant                       shift and go to state 11
    unary_expression               shift and go to state 29
    function_call                  shift and go to state 7
    exp                            shift and go to state 222
    unary_operator                 shift and go to state 22

state 198

    (85) iterative_statement -> DO lbrace rbrace WHILE LPAREN exp . RPAREN SEMI_COLON
    (38) exp -> exp . ADD exp
    (39) exp -> exp . MINUS exp
    (40) exp -> exp . MULT exp
    (41) exp -> exp . DIV exp
    (42) exp -> exp . MOD exp
    (43) exp -> exp . L_OP exp
    (44) exp -> exp . G_OP exp
    (45) exp -> exp . LE_OP exp
    (46) exp -> exp . GE_OP exp
    (47) exp -> exp . NOTEQUALS exp
    (48) exp -> exp . EQUALS_OP exp
    (49) exp -> exp . OR_OP exp
    (50) exp -> exp . AND_OP exp
    (51) exp -> exp . MUL_ASSIGN exp
    (52) exp -> exp . DIV_ASSIGN exp
    (53) exp -> exp . MOD_ASSIGN exp
    (54) exp -> exp . ADD_ASSIGN exp
    (55) exp -> exp . SUB_ASSIGN exp
    (56) exp -> exp . LEFT_ASSIGN exp
    (57) exp -> exp . RIGHT_ASSIGN exp
    (58) exp -> exp . AND_ASSIGN exp
    (59) exp -> exp . XOR_ASSIGN exp
    (60) exp -> exp . OR_ASSIGN exp
    (61) exp -> exp . EQUALS exp

    RPAREN          shift and go to state 223
    ADD             shift and go to state 79
    MINUS           shift and go to state 69
    MULT            shift and go to state 70
    DIV             shift and go to state 68
    MOD             shift and go to state 88
    L_OP            shift and go to state 85
    G_OP            shift and go to state 73
    LE_OP           shift and go to state 71
    GE_OP           shift and go to state 80
    NOTEQUALS       shift and go to state 64
    EQUALS_OP       shift and go to state 65
    OR_OP           shift and go to state 74
    AND_OP          shift and go to state 78
    MUL_ASSIGN      shift and go to state 86
    DIV_ASSIGN      shift and go to state 66
    MOD_ASSIGN      shift and go to state 82
    ADD_ASSIGN      shift and go to state 76
    SUB_ASSIGN      shift and go to state 81
    LEFT_ASSIGN     shift and go to state 87
    RIGHT_ASSIGN    shift and go to state 72
    AND_ASSIGN      shift and go to state 75
    XOR_ASSIGN      shift and go to state 83
    OR_ASSIGN       shift and go to state 84
    EQUALS          shift and go to state 77


state 199

    (80) iterative_statement -> WHILE LPAREN exp RPAREN lbrace statements . rbrace
    (2) statements -> statements . statement
    (121) rbrace -> . RBRACE
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (9) statement -> . conditional_statement
    (10) statement -> . COMMENT
    (15) declaration -> . type enum_list SEMI_COLON
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (74) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (75) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace statements rbrace
    (76) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (77) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace rbrace
    (78) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (79) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (80) iterative_statement -> . WHILE LPAREN exp RPAREN lbrace statements rbrace
    (81) iterative_statement -> . WHILE LPAREN exp RPAREN lbrace rbrace
    (82) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (83) iterative_statement -> . DO lbrace statements rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (84) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (85) iterative_statement -> . DO lbrace rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (94) function -> . normal_function
    (95) function -> . main_function
    (11) constant_statement -> . BREAK SEMI_COLON
    (12) constant_statement -> . CONTINUE SEMI_COLON
    (13) constant_statement -> . RETURN SEMI_COLON
    (14) constant_statement -> . RETURN exp SEMI_COLON
    (88) conditional_statement -> . IF LPAREN exp RPAREN statement
    (89) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace
    (90) conditional_statement -> . IF LPAREN exp RPAREN statement ELSE statement
    (91) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace ELSE statement
    (92) conditional_statement -> . IF LPAREN exp RPAREN statement ELSE lbrace statements rbrace
    (93) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace ELSE lbrace statements rbrace
    (26) type -> . INT
    (27) type -> . FLOAT
    (28) type -> . CHAR
    (29) type -> . DOUBLE
    (30) type -> . VOID
    (31) type -> . SHORT
    (32) type -> . LONG
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (104) normal_function -> . type VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (105) normal_function -> . type VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (106) normal_function -> . VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (107) normal_function -> . VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (108) normal_function -> . type VARIABLE LPAREN RPAREN lbrace statements rbrace
    (109) normal_function -> . type VARIABLE LPAREN RPAREN lbrace rbrace
    (110) normal_function -> . VARIABLE LPAREN RPAREN lbrace statements rbrace
    (111) normal_function -> . VARIABLE LPAREN RPAREN lbrace rbrace
    (96) main_function -> . type MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (97) main_function -> . type MAIN LPAREN parameters RPAREN lbrace rbrace
    (98) main_function -> . MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (99) main_function -> . MAIN LPAREN parameters RPAREN lbrace rbrace
    (100) main_function -> . type MAIN LPAREN RPAREN lbrace statements rbrace
    (101) main_function -> . type MAIN LPAREN RPAREN lbrace rbrace
    (102) main_function -> . MAIN LPAREN RPAREN lbrace statements rbrace
    (103) main_function -> . MAIN LPAREN RPAREN lbrace rbrace
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    RBRACE          shift and go to state 95
    COMMENT         shift and go to state 13
    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 28
    FOR             shift and go to state 25
    WHILE           shift and go to state 9
    DO              shift and go to state 4
    BREAK           shift and go to state 38
    CONTINUE        shift and go to state 39
    RETURN          shift and go to state 1
    IF              shift and go to state 31
    INT             shift and go to state 33
    FLOAT           shift and go to state 37
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 34
    VOID            shift and go to state 5
    SHORT           shift and go to state 10
    LONG            shift and go to state 41
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    MAIN            shift and go to state 14
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    function                       shift and go to state 23
    rbrace                         shift and go to state 224
    unary_expression               shift and go to state 29
    type                           shift and go to state 21
    normal_function                shift and go to state 36
    function_call                  shift and go to state 7
    conditional_statement          shift and go to state 17
    main_function                  shift and go to state 2
    constant_statement             shift and go to state 32
    statement                      shift and go to state 45
    declaration                    shift and go to state 27
    exp                            shift and go to state 40
    constant                       shift and go to state 11
    iterative_statement            shift and go to state 12
    unary_operator                 shift and go to state 22

state 200

    (81) iterative_statement -> WHILE LPAREN exp RPAREN lbrace rbrace .

    RBRACE          reduce using rule 81 (iterative_statement -> WHILE LPAREN exp RPAREN lbrace rbrace .)
    COMMENT         reduce using rule 81 (iterative_statement -> WHILE LPAREN exp RPAREN lbrace rbrace .)
    LPAREN          reduce using rule 81 (iterative_statement -> WHILE LPAREN exp RPAREN lbrace rbrace .)
    VARIABLE        reduce using rule 81 (iterative_statement -> WHILE LPAREN exp RPAREN lbrace rbrace .)
    FOR             reduce using rule 81 (iterative_statement -> WHILE LPAREN exp RPAREN lbrace rbrace .)
    WHILE           reduce using rule 81 (iterative_statement -> WHILE LPAREN exp RPAREN lbrace rbrace .)
    DO              reduce using rule 81 (iterative_statement -> WHILE LPAREN exp RPAREN lbrace rbrace .)
    BREAK           reduce using rule 81 (iterative_statement -> WHILE LPAREN exp RPAREN lbrace rbrace .)
    CONTINUE        reduce using rule 81 (iterative_statement -> WHILE LPAREN exp RPAREN lbrace rbrace .)
    RETURN          reduce using rule 81 (iterative_statement -> WHILE LPAREN exp RPAREN lbrace rbrace .)
    IF              reduce using rule 81 (iterative_statement -> WHILE LPAREN exp RPAREN lbrace rbrace .)
    INT             reduce using rule 81 (iterative_statement -> WHILE LPAREN exp RPAREN lbrace rbrace .)
    FLOAT           reduce using rule 81 (iterative_statement -> WHILE LPAREN exp RPAREN lbrace rbrace .)
    CHAR            reduce using rule 81 (iterative_statement -> WHILE LPAREN exp RPAREN lbrace rbrace .)
    DOUBLE          reduce using rule 81 (iterative_statement -> WHILE LPAREN exp RPAREN lbrace rbrace .)
    VOID            reduce using rule 81 (iterative_statement -> WHILE LPAREN exp RPAREN lbrace rbrace .)
    SHORT           reduce using rule 81 (iterative_statement -> WHILE LPAREN exp RPAREN lbrace rbrace .)
    LONG            reduce using rule 81 (iterative_statement -> WHILE LPAREN exp RPAREN lbrace rbrace .)
    HEX_INT         reduce using rule 81 (iterative_statement -> WHILE LPAREN exp RPAREN lbrace rbrace .)
    DOT_REAL        reduce using rule 81 (iterative_statement -> WHILE LPAREN exp RPAREN lbrace rbrace .)
    EXP_REAL        reduce using rule 81 (iterative_statement -> WHILE LPAREN exp RPAREN lbrace rbrace .)
    DEC_INT         reduce using rule 81 (iterative_statement -> WHILE LPAREN exp RPAREN lbrace rbrace .)
    CHARACTER       reduce using rule 81 (iterative_statement -> WHILE LPAREN exp RPAREN lbrace rbrace .)
    MAIN            reduce using rule 81 (iterative_statement -> WHILE LPAREN exp RPAREN lbrace rbrace .)
    INCREMENT       reduce using rule 81 (iterative_statement -> WHILE LPAREN exp RPAREN lbrace rbrace .)
    DECREMENT       reduce using rule 81 (iterative_statement -> WHILE LPAREN exp RPAREN lbrace rbrace .)
    $end            reduce using rule 81 (iterative_statement -> WHILE LPAREN exp RPAREN lbrace rbrace .)
    ELSE            reduce using rule 81 (iterative_statement -> WHILE LPAREN exp RPAREN lbrace rbrace .)


state 201

    (98) main_function -> MAIN LPAREN parameters RPAREN lbrace statements . rbrace
    (2) statements -> statements . statement
    (121) rbrace -> . RBRACE
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (9) statement -> . conditional_statement
    (10) statement -> . COMMENT
    (15) declaration -> . type enum_list SEMI_COLON
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (74) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (75) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace statements rbrace
    (76) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (77) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace rbrace
    (78) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (79) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (80) iterative_statement -> . WHILE LPAREN exp RPAREN lbrace statements rbrace
    (81) iterative_statement -> . WHILE LPAREN exp RPAREN lbrace rbrace
    (82) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (83) iterative_statement -> . DO lbrace statements rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (84) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (85) iterative_statement -> . DO lbrace rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (94) function -> . normal_function
    (95) function -> . main_function
    (11) constant_statement -> . BREAK SEMI_COLON
    (12) constant_statement -> . CONTINUE SEMI_COLON
    (13) constant_statement -> . RETURN SEMI_COLON
    (14) constant_statement -> . RETURN exp SEMI_COLON
    (88) conditional_statement -> . IF LPAREN exp RPAREN statement
    (89) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace
    (90) conditional_statement -> . IF LPAREN exp RPAREN statement ELSE statement
    (91) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace ELSE statement
    (92) conditional_statement -> . IF LPAREN exp RPAREN statement ELSE lbrace statements rbrace
    (93) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace ELSE lbrace statements rbrace
    (26) type -> . INT
    (27) type -> . FLOAT
    (28) type -> . CHAR
    (29) type -> . DOUBLE
    (30) type -> . VOID
    (31) type -> . SHORT
    (32) type -> . LONG
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (104) normal_function -> . type VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (105) normal_function -> . type VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (106) normal_function -> . VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (107) normal_function -> . VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (108) normal_function -> . type VARIABLE LPAREN RPAREN lbrace statements rbrace
    (109) normal_function -> . type VARIABLE LPAREN RPAREN lbrace rbrace
    (110) normal_function -> . VARIABLE LPAREN RPAREN lbrace statements rbrace
    (111) normal_function -> . VARIABLE LPAREN RPAREN lbrace rbrace
    (96) main_function -> . type MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (97) main_function -> . type MAIN LPAREN parameters RPAREN lbrace rbrace
    (98) main_function -> . MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (99) main_function -> . MAIN LPAREN parameters RPAREN lbrace rbrace
    (100) main_function -> . type MAIN LPAREN RPAREN lbrace statements rbrace
    (101) main_function -> . type MAIN LPAREN RPAREN lbrace rbrace
    (102) main_function -> . MAIN LPAREN RPAREN lbrace statements rbrace
    (103) main_function -> . MAIN LPAREN RPAREN lbrace rbrace
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    RBRACE          shift and go to state 95
    COMMENT         shift and go to state 13
    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 28
    FOR             shift and go to state 25
    WHILE           shift and go to state 9
    DO              shift and go to state 4
    BREAK           shift and go to state 38
    CONTINUE        shift and go to state 39
    RETURN          shift and go to state 1
    IF              shift and go to state 31
    INT             shift and go to state 33
    FLOAT           shift and go to state 37
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 34
    VOID            shift and go to state 5
    SHORT           shift and go to state 10
    LONG            shift and go to state 41
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    MAIN            shift and go to state 14
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    function                       shift and go to state 23
    rbrace                         shift and go to state 225
    type                           shift and go to state 21
    normal_function                shift and go to state 36
    unary_expression               shift and go to state 29
    conditional_statement          shift and go to state 17
    main_function                  shift and go to state 2
    constant_statement             shift and go to state 32
    statement                      shift and go to state 45
    declaration                    shift and go to state 27
    exp                            shift and go to state 40
    constant                       shift and go to state 11
    iterative_statement            shift and go to state 12
    unary_operator                 shift and go to state 22
    function_call                  shift and go to state 7

state 202

    (99) main_function -> MAIN LPAREN parameters RPAREN lbrace rbrace .

    RBRACE          reduce using rule 99 (main_function -> MAIN LPAREN parameters RPAREN lbrace rbrace .)
    COMMENT         reduce using rule 99 (main_function -> MAIN LPAREN parameters RPAREN lbrace rbrace .)
    LPAREN          reduce using rule 99 (main_function -> MAIN LPAREN parameters RPAREN lbrace rbrace .)
    VARIABLE        reduce using rule 99 (main_function -> MAIN LPAREN parameters RPAREN lbrace rbrace .)
    FOR             reduce using rule 99 (main_function -> MAIN LPAREN parameters RPAREN lbrace rbrace .)
    WHILE           reduce using rule 99 (main_function -> MAIN LPAREN parameters RPAREN lbrace rbrace .)
    DO              reduce using rule 99 (main_function -> MAIN LPAREN parameters RPAREN lbrace rbrace .)
    BREAK           reduce using rule 99 (main_function -> MAIN LPAREN parameters RPAREN lbrace rbrace .)
    CONTINUE        reduce using rule 99 (main_function -> MAIN LPAREN parameters RPAREN lbrace rbrace .)
    RETURN          reduce using rule 99 (main_function -> MAIN LPAREN parameters RPAREN lbrace rbrace .)
    IF              reduce using rule 99 (main_function -> MAIN LPAREN parameters RPAREN lbrace rbrace .)
    INT             reduce using rule 99 (main_function -> MAIN LPAREN parameters RPAREN lbrace rbrace .)
    FLOAT           reduce using rule 99 (main_function -> MAIN LPAREN parameters RPAREN lbrace rbrace .)
    CHAR            reduce using rule 99 (main_function -> MAIN LPAREN parameters RPAREN lbrace rbrace .)
    DOUBLE          reduce using rule 99 (main_function -> MAIN LPAREN parameters RPAREN lbrace rbrace .)
    VOID            reduce using rule 99 (main_function -> MAIN LPAREN parameters RPAREN lbrace rbrace .)
    SHORT           reduce using rule 99 (main_function -> MAIN LPAREN parameters RPAREN lbrace rbrace .)
    LONG            reduce using rule 99 (main_function -> MAIN LPAREN parameters RPAREN lbrace rbrace .)
    HEX_INT         reduce using rule 99 (main_function -> MAIN LPAREN parameters RPAREN lbrace rbrace .)
    DOT_REAL        reduce using rule 99 (main_function -> MAIN LPAREN parameters RPAREN lbrace rbrace .)
    EXP_REAL        reduce using rule 99 (main_function -> MAIN LPAREN parameters RPAREN lbrace rbrace .)
    DEC_INT         reduce using rule 99 (main_function -> MAIN LPAREN parameters RPAREN lbrace rbrace .)
    CHARACTER       reduce using rule 99 (main_function -> MAIN LPAREN parameters RPAREN lbrace rbrace .)
    MAIN            reduce using rule 99 (main_function -> MAIN LPAREN parameters RPAREN lbrace rbrace .)
    INCREMENT       reduce using rule 99 (main_function -> MAIN LPAREN parameters RPAREN lbrace rbrace .)
    DECREMENT       reduce using rule 99 (main_function -> MAIN LPAREN parameters RPAREN lbrace rbrace .)
    $end            reduce using rule 99 (main_function -> MAIN LPAREN parameters RPAREN lbrace rbrace .)
    ELSE            reduce using rule 99 (main_function -> MAIN LPAREN parameters RPAREN lbrace rbrace .)


state 203

    (102) main_function -> MAIN LPAREN RPAREN lbrace statements rbrace .

    RBRACE          reduce using rule 102 (main_function -> MAIN LPAREN RPAREN lbrace statements rbrace .)
    COMMENT         reduce using rule 102 (main_function -> MAIN LPAREN RPAREN lbrace statements rbrace .)
    LPAREN          reduce using rule 102 (main_function -> MAIN LPAREN RPAREN lbrace statements rbrace .)
    VARIABLE        reduce using rule 102 (main_function -> MAIN LPAREN RPAREN lbrace statements rbrace .)
    FOR             reduce using rule 102 (main_function -> MAIN LPAREN RPAREN lbrace statements rbrace .)
    WHILE           reduce using rule 102 (main_function -> MAIN LPAREN RPAREN lbrace statements rbrace .)
    DO              reduce using rule 102 (main_function -> MAIN LPAREN RPAREN lbrace statements rbrace .)
    BREAK           reduce using rule 102 (main_function -> MAIN LPAREN RPAREN lbrace statements rbrace .)
    CONTINUE        reduce using rule 102 (main_function -> MAIN LPAREN RPAREN lbrace statements rbrace .)
    RETURN          reduce using rule 102 (main_function -> MAIN LPAREN RPAREN lbrace statements rbrace .)
    IF              reduce using rule 102 (main_function -> MAIN LPAREN RPAREN lbrace statements rbrace .)
    INT             reduce using rule 102 (main_function -> MAIN LPAREN RPAREN lbrace statements rbrace .)
    FLOAT           reduce using rule 102 (main_function -> MAIN LPAREN RPAREN lbrace statements rbrace .)
    CHAR            reduce using rule 102 (main_function -> MAIN LPAREN RPAREN lbrace statements rbrace .)
    DOUBLE          reduce using rule 102 (main_function -> MAIN LPAREN RPAREN lbrace statements rbrace .)
    VOID            reduce using rule 102 (main_function -> MAIN LPAREN RPAREN lbrace statements rbrace .)
    SHORT           reduce using rule 102 (main_function -> MAIN LPAREN RPAREN lbrace statements rbrace .)
    LONG            reduce using rule 102 (main_function -> MAIN LPAREN RPAREN lbrace statements rbrace .)
    HEX_INT         reduce using rule 102 (main_function -> MAIN LPAREN RPAREN lbrace statements rbrace .)
    DOT_REAL        reduce using rule 102 (main_function -> MAIN LPAREN RPAREN lbrace statements rbrace .)
    EXP_REAL        reduce using rule 102 (main_function -> MAIN LPAREN RPAREN lbrace statements rbrace .)
    DEC_INT         reduce using rule 102 (main_function -> MAIN LPAREN RPAREN lbrace statements rbrace .)
    CHARACTER       reduce using rule 102 (main_function -> MAIN LPAREN RPAREN lbrace statements rbrace .)
    MAIN            reduce using rule 102 (main_function -> MAIN LPAREN RPAREN lbrace statements rbrace .)
    INCREMENT       reduce using rule 102 (main_function -> MAIN LPAREN RPAREN lbrace statements rbrace .)
    DECREMENT       reduce using rule 102 (main_function -> MAIN LPAREN RPAREN lbrace statements rbrace .)
    $end            reduce using rule 102 (main_function -> MAIN LPAREN RPAREN lbrace statements rbrace .)
    ELSE            reduce using rule 102 (main_function -> MAIN LPAREN RPAREN lbrace statements rbrace .)


state 204

    (112) parameters -> type VARIABLE COMMA parameters .

    RPAREN          reduce using rule 112 (parameters -> type VARIABLE COMMA parameters .)


state 205

    (17) enum_list -> VARIABLE EQUALS exp COMMA enum_list .

    SEMI_COLON      reduce using rule 17 (enum_list -> VARIABLE EQUALS exp COMMA enum_list .)


state 206

    (21) enum_list -> VARIABLE LBIG exp RBIG EQUALS . LBRACE num_list RBRACE COMMA enum_list
    (23) enum_list -> VARIABLE LBIG exp RBIG EQUALS . LBRACE num_list RBRACE

    LBRACE          shift and go to state 226


state 207

    (20) enum_list -> VARIABLE LBIG exp RBIG COMMA . enum_list
    (16) enum_list -> . VARIABLE COMMA enum_list
    (17) enum_list -> . VARIABLE EQUALS exp COMMA enum_list
    (18) enum_list -> . VARIABLE
    (19) enum_list -> . VARIABLE EQUALS exp
    (20) enum_list -> . VARIABLE LBIG exp RBIG COMMA enum_list
    (21) enum_list -> . VARIABLE LBIG exp RBIG EQUALS LBRACE num_list RBRACE COMMA enum_list
    (22) enum_list -> . VARIABLE LBIG exp RBIG
    (23) enum_list -> . VARIABLE LBIG exp RBIG EQUALS LBRACE num_list RBRACE

    VARIABLE        shift and go to state 153

    enum_list                      shift and go to state 227

state 208

    (108) normal_function -> type VARIABLE LPAREN RPAREN lbrace statements . rbrace
    (2) statements -> statements . statement
    (121) rbrace -> . RBRACE
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (9) statement -> . conditional_statement
    (10) statement -> . COMMENT
    (15) declaration -> . type enum_list SEMI_COLON
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (74) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (75) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace statements rbrace
    (76) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (77) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace rbrace
    (78) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (79) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (80) iterative_statement -> . WHILE LPAREN exp RPAREN lbrace statements rbrace
    (81) iterative_statement -> . WHILE LPAREN exp RPAREN lbrace rbrace
    (82) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (83) iterative_statement -> . DO lbrace statements rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (84) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (85) iterative_statement -> . DO lbrace rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (94) function -> . normal_function
    (95) function -> . main_function
    (11) constant_statement -> . BREAK SEMI_COLON
    (12) constant_statement -> . CONTINUE SEMI_COLON
    (13) constant_statement -> . RETURN SEMI_COLON
    (14) constant_statement -> . RETURN exp SEMI_COLON
    (88) conditional_statement -> . IF LPAREN exp RPAREN statement
    (89) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace
    (90) conditional_statement -> . IF LPAREN exp RPAREN statement ELSE statement
    (91) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace ELSE statement
    (92) conditional_statement -> . IF LPAREN exp RPAREN statement ELSE lbrace statements rbrace
    (93) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace ELSE lbrace statements rbrace
    (26) type -> . INT
    (27) type -> . FLOAT
    (28) type -> . CHAR
    (29) type -> . DOUBLE
    (30) type -> . VOID
    (31) type -> . SHORT
    (32) type -> . LONG
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (104) normal_function -> . type VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (105) normal_function -> . type VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (106) normal_function -> . VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (107) normal_function -> . VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (108) normal_function -> . type VARIABLE LPAREN RPAREN lbrace statements rbrace
    (109) normal_function -> . type VARIABLE LPAREN RPAREN lbrace rbrace
    (110) normal_function -> . VARIABLE LPAREN RPAREN lbrace statements rbrace
    (111) normal_function -> . VARIABLE LPAREN RPAREN lbrace rbrace
    (96) main_function -> . type MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (97) main_function -> . type MAIN LPAREN parameters RPAREN lbrace rbrace
    (98) main_function -> . MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (99) main_function -> . MAIN LPAREN parameters RPAREN lbrace rbrace
    (100) main_function -> . type MAIN LPAREN RPAREN lbrace statements rbrace
    (101) main_function -> . type MAIN LPAREN RPAREN lbrace rbrace
    (102) main_function -> . MAIN LPAREN RPAREN lbrace statements rbrace
    (103) main_function -> . MAIN LPAREN RPAREN lbrace rbrace
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    RBRACE          shift and go to state 95
    COMMENT         shift and go to state 13
    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 28
    FOR             shift and go to state 25
    WHILE           shift and go to state 9
    DO              shift and go to state 4
    BREAK           shift and go to state 38
    CONTINUE        shift and go to state 39
    RETURN          shift and go to state 1
    IF              shift and go to state 31
    INT             shift and go to state 33
    FLOAT           shift and go to state 37
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 34
    VOID            shift and go to state 5
    SHORT           shift and go to state 10
    LONG            shift and go to state 41
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    MAIN            shift and go to state 14
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    function                       shift and go to state 23
    rbrace                         shift and go to state 228
    unary_expression               shift and go to state 29
    iterative_statement            shift and go to state 12
    normal_function                shift and go to state 36
    function_call                  shift and go to state 7
    conditional_statement          shift and go to state 17
    main_function                  shift and go to state 2
    constant_statement             shift and go to state 32
    statement                      shift and go to state 45
    declaration                    shift and go to state 27
    exp                            shift and go to state 40
    constant                       shift and go to state 11
    type                           shift and go to state 21
    unary_operator                 shift and go to state 22

state 209

    (109) normal_function -> type VARIABLE LPAREN RPAREN lbrace rbrace .

    RBRACE          reduce using rule 109 (normal_function -> type VARIABLE LPAREN RPAREN lbrace rbrace .)
    COMMENT         reduce using rule 109 (normal_function -> type VARIABLE LPAREN RPAREN lbrace rbrace .)
    LPAREN          reduce using rule 109 (normal_function -> type VARIABLE LPAREN RPAREN lbrace rbrace .)
    VARIABLE        reduce using rule 109 (normal_function -> type VARIABLE LPAREN RPAREN lbrace rbrace .)
    FOR             reduce using rule 109 (normal_function -> type VARIABLE LPAREN RPAREN lbrace rbrace .)
    WHILE           reduce using rule 109 (normal_function -> type VARIABLE LPAREN RPAREN lbrace rbrace .)
    DO              reduce using rule 109 (normal_function -> type VARIABLE LPAREN RPAREN lbrace rbrace .)
    BREAK           reduce using rule 109 (normal_function -> type VARIABLE LPAREN RPAREN lbrace rbrace .)
    CONTINUE        reduce using rule 109 (normal_function -> type VARIABLE LPAREN RPAREN lbrace rbrace .)
    RETURN          reduce using rule 109 (normal_function -> type VARIABLE LPAREN RPAREN lbrace rbrace .)
    IF              reduce using rule 109 (normal_function -> type VARIABLE LPAREN RPAREN lbrace rbrace .)
    INT             reduce using rule 109 (normal_function -> type VARIABLE LPAREN RPAREN lbrace rbrace .)
    FLOAT           reduce using rule 109 (normal_function -> type VARIABLE LPAREN RPAREN lbrace rbrace .)
    CHAR            reduce using rule 109 (normal_function -> type VARIABLE LPAREN RPAREN lbrace rbrace .)
    DOUBLE          reduce using rule 109 (normal_function -> type VARIABLE LPAREN RPAREN lbrace rbrace .)
    VOID            reduce using rule 109 (normal_function -> type VARIABLE LPAREN RPAREN lbrace rbrace .)
    SHORT           reduce using rule 109 (normal_function -> type VARIABLE LPAREN RPAREN lbrace rbrace .)
    LONG            reduce using rule 109 (normal_function -> type VARIABLE LPAREN RPAREN lbrace rbrace .)
    HEX_INT         reduce using rule 109 (normal_function -> type VARIABLE LPAREN RPAREN lbrace rbrace .)
    DOT_REAL        reduce using rule 109 (normal_function -> type VARIABLE LPAREN RPAREN lbrace rbrace .)
    EXP_REAL        reduce using rule 109 (normal_function -> type VARIABLE LPAREN RPAREN lbrace rbrace .)
    DEC_INT         reduce using rule 109 (normal_function -> type VARIABLE LPAREN RPAREN lbrace rbrace .)
    CHARACTER       reduce using rule 109 (normal_function -> type VARIABLE LPAREN RPAREN lbrace rbrace .)
    MAIN            reduce using rule 109 (normal_function -> type VARIABLE LPAREN RPAREN lbrace rbrace .)
    INCREMENT       reduce using rule 109 (normal_function -> type VARIABLE LPAREN RPAREN lbrace rbrace .)
    DECREMENT       reduce using rule 109 (normal_function -> type VARIABLE LPAREN RPAREN lbrace rbrace .)
    $end            reduce using rule 109 (normal_function -> type VARIABLE LPAREN RPAREN lbrace rbrace .)
    ELSE            reduce using rule 109 (normal_function -> type VARIABLE LPAREN RPAREN lbrace rbrace .)


state 210

    (104) normal_function -> type VARIABLE LPAREN parameters RPAREN lbrace . statements rbrace
    (105) normal_function -> type VARIABLE LPAREN parameters RPAREN lbrace . rbrace
    (2) statements -> . statements statement
    (3) statements -> . statement
    (121) rbrace -> . RBRACE
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (9) statement -> . conditional_statement
    (10) statement -> . COMMENT
    (15) declaration -> . type enum_list SEMI_COLON
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (74) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (75) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace statements rbrace
    (76) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (77) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace rbrace
    (78) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (79) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (80) iterative_statement -> . WHILE LPAREN exp RPAREN lbrace statements rbrace
    (81) iterative_statement -> . WHILE LPAREN exp RPAREN lbrace rbrace
    (82) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (83) iterative_statement -> . DO lbrace statements rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (84) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (85) iterative_statement -> . DO lbrace rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (94) function -> . normal_function
    (95) function -> . main_function
    (11) constant_statement -> . BREAK SEMI_COLON
    (12) constant_statement -> . CONTINUE SEMI_COLON
    (13) constant_statement -> . RETURN SEMI_COLON
    (14) constant_statement -> . RETURN exp SEMI_COLON
    (88) conditional_statement -> . IF LPAREN exp RPAREN statement
    (89) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace
    (90) conditional_statement -> . IF LPAREN exp RPAREN statement ELSE statement
    (91) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace ELSE statement
    (92) conditional_statement -> . IF LPAREN exp RPAREN statement ELSE lbrace statements rbrace
    (93) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace ELSE lbrace statements rbrace
    (26) type -> . INT
    (27) type -> . FLOAT
    (28) type -> . CHAR
    (29) type -> . DOUBLE
    (30) type -> . VOID
    (31) type -> . SHORT
    (32) type -> . LONG
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (104) normal_function -> . type VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (105) normal_function -> . type VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (106) normal_function -> . VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (107) normal_function -> . VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (108) normal_function -> . type VARIABLE LPAREN RPAREN lbrace statements rbrace
    (109) normal_function -> . type VARIABLE LPAREN RPAREN lbrace rbrace
    (110) normal_function -> . VARIABLE LPAREN RPAREN lbrace statements rbrace
    (111) normal_function -> . VARIABLE LPAREN RPAREN lbrace rbrace
    (96) main_function -> . type MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (97) main_function -> . type MAIN LPAREN parameters RPAREN lbrace rbrace
    (98) main_function -> . MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (99) main_function -> . MAIN LPAREN parameters RPAREN lbrace rbrace
    (100) main_function -> . type MAIN LPAREN RPAREN lbrace statements rbrace
    (101) main_function -> . type MAIN LPAREN RPAREN lbrace rbrace
    (102) main_function -> . MAIN LPAREN RPAREN lbrace statements rbrace
    (103) main_function -> . MAIN LPAREN RPAREN lbrace rbrace
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    RBRACE          shift and go to state 95
    COMMENT         shift and go to state 13
    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 28
    FOR             shift and go to state 25
    WHILE           shift and go to state 9
    DO              shift and go to state 4
    BREAK           shift and go to state 38
    CONTINUE        shift and go to state 39
    RETURN          shift and go to state 1
    IF              shift and go to state 31
    INT             shift and go to state 33
    FLOAT           shift and go to state 37
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 34
    VOID            shift and go to state 5
    SHORT           shift and go to state 10
    LONG            shift and go to state 41
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    MAIN            shift and go to state 14
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    function                       shift and go to state 23
    statements                     shift and go to state 229
    rbrace                         shift and go to state 230
    iterative_statement            shift and go to state 12
    normal_function                shift and go to state 36
    unary_expression               shift and go to state 29
    conditional_statement          shift and go to state 17
    main_function                  shift and go to state 2
    constant_statement             shift and go to state 32
    statement                      shift and go to state 19
    declaration                    shift and go to state 27
    exp                            shift and go to state 40
    constant                       shift and go to state 11
    type                           shift and go to state 21
    unary_operator                 shift and go to state 22
    function_call                  shift and go to state 7

state 211

    (100) main_function -> type MAIN LPAREN RPAREN lbrace statements . rbrace
    (2) statements -> statements . statement
    (121) rbrace -> . RBRACE
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (9) statement -> . conditional_statement
    (10) statement -> . COMMENT
    (15) declaration -> . type enum_list SEMI_COLON
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (74) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (75) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace statements rbrace
    (76) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (77) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace rbrace
    (78) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (79) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (80) iterative_statement -> . WHILE LPAREN exp RPAREN lbrace statements rbrace
    (81) iterative_statement -> . WHILE LPAREN exp RPAREN lbrace rbrace
    (82) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (83) iterative_statement -> . DO lbrace statements rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (84) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (85) iterative_statement -> . DO lbrace rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (94) function -> . normal_function
    (95) function -> . main_function
    (11) constant_statement -> . BREAK SEMI_COLON
    (12) constant_statement -> . CONTINUE SEMI_COLON
    (13) constant_statement -> . RETURN SEMI_COLON
    (14) constant_statement -> . RETURN exp SEMI_COLON
    (88) conditional_statement -> . IF LPAREN exp RPAREN statement
    (89) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace
    (90) conditional_statement -> . IF LPAREN exp RPAREN statement ELSE statement
    (91) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace ELSE statement
    (92) conditional_statement -> . IF LPAREN exp RPAREN statement ELSE lbrace statements rbrace
    (93) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace ELSE lbrace statements rbrace
    (26) type -> . INT
    (27) type -> . FLOAT
    (28) type -> . CHAR
    (29) type -> . DOUBLE
    (30) type -> . VOID
    (31) type -> . SHORT
    (32) type -> . LONG
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (104) normal_function -> . type VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (105) normal_function -> . type VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (106) normal_function -> . VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (107) normal_function -> . VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (108) normal_function -> . type VARIABLE LPAREN RPAREN lbrace statements rbrace
    (109) normal_function -> . type VARIABLE LPAREN RPAREN lbrace rbrace
    (110) normal_function -> . VARIABLE LPAREN RPAREN lbrace statements rbrace
    (111) normal_function -> . VARIABLE LPAREN RPAREN lbrace rbrace
    (96) main_function -> . type MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (97) main_function -> . type MAIN LPAREN parameters RPAREN lbrace rbrace
    (98) main_function -> . MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (99) main_function -> . MAIN LPAREN parameters RPAREN lbrace rbrace
    (100) main_function -> . type MAIN LPAREN RPAREN lbrace statements rbrace
    (101) main_function -> . type MAIN LPAREN RPAREN lbrace rbrace
    (102) main_function -> . MAIN LPAREN RPAREN lbrace statements rbrace
    (103) main_function -> . MAIN LPAREN RPAREN lbrace rbrace
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    RBRACE          shift and go to state 95
    COMMENT         shift and go to state 13
    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 28
    FOR             shift and go to state 25
    WHILE           shift and go to state 9
    DO              shift and go to state 4
    BREAK           shift and go to state 38
    CONTINUE        shift and go to state 39
    RETURN          shift and go to state 1
    IF              shift and go to state 31
    INT             shift and go to state 33
    FLOAT           shift and go to state 37
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 34
    VOID            shift and go to state 5
    SHORT           shift and go to state 10
    LONG            shift and go to state 41
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    MAIN            shift and go to state 14
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    function                       shift and go to state 23
    rbrace                         shift and go to state 231
    unary_expression               shift and go to state 29
    iterative_statement            shift and go to state 12
    normal_function                shift and go to state 36
    function_call                  shift and go to state 7
    conditional_statement          shift and go to state 17
    main_function                  shift and go to state 2
    constant_statement             shift and go to state 32
    statement                      shift and go to state 45
    declaration                    shift and go to state 27
    exp                            shift and go to state 40
    constant                       shift and go to state 11
    type                           shift and go to state 21
    unary_operator                 shift and go to state 22

state 212

    (101) main_function -> type MAIN LPAREN RPAREN lbrace rbrace .

    RBRACE          reduce using rule 101 (main_function -> type MAIN LPAREN RPAREN lbrace rbrace .)
    COMMENT         reduce using rule 101 (main_function -> type MAIN LPAREN RPAREN lbrace rbrace .)
    LPAREN          reduce using rule 101 (main_function -> type MAIN LPAREN RPAREN lbrace rbrace .)
    VARIABLE        reduce using rule 101 (main_function -> type MAIN LPAREN RPAREN lbrace rbrace .)
    FOR             reduce using rule 101 (main_function -> type MAIN LPAREN RPAREN lbrace rbrace .)
    WHILE           reduce using rule 101 (main_function -> type MAIN LPAREN RPAREN lbrace rbrace .)
    DO              reduce using rule 101 (main_function -> type MAIN LPAREN RPAREN lbrace rbrace .)
    BREAK           reduce using rule 101 (main_function -> type MAIN LPAREN RPAREN lbrace rbrace .)
    CONTINUE        reduce using rule 101 (main_function -> type MAIN LPAREN RPAREN lbrace rbrace .)
    RETURN          reduce using rule 101 (main_function -> type MAIN LPAREN RPAREN lbrace rbrace .)
    IF              reduce using rule 101 (main_function -> type MAIN LPAREN RPAREN lbrace rbrace .)
    INT             reduce using rule 101 (main_function -> type MAIN LPAREN RPAREN lbrace rbrace .)
    FLOAT           reduce using rule 101 (main_function -> type MAIN LPAREN RPAREN lbrace rbrace .)
    CHAR            reduce using rule 101 (main_function -> type MAIN LPAREN RPAREN lbrace rbrace .)
    DOUBLE          reduce using rule 101 (main_function -> type MAIN LPAREN RPAREN lbrace rbrace .)
    VOID            reduce using rule 101 (main_function -> type MAIN LPAREN RPAREN lbrace rbrace .)
    SHORT           reduce using rule 101 (main_function -> type MAIN LPAREN RPAREN lbrace rbrace .)
    LONG            reduce using rule 101 (main_function -> type MAIN LPAREN RPAREN lbrace rbrace .)
    HEX_INT         reduce using rule 101 (main_function -> type MAIN LPAREN RPAREN lbrace rbrace .)
    DOT_REAL        reduce using rule 101 (main_function -> type MAIN LPAREN RPAREN lbrace rbrace .)
    EXP_REAL        reduce using rule 101 (main_function -> type MAIN LPAREN RPAREN lbrace rbrace .)
    DEC_INT         reduce using rule 101 (main_function -> type MAIN LPAREN RPAREN lbrace rbrace .)
    CHARACTER       reduce using rule 101 (main_function -> type MAIN LPAREN RPAREN lbrace rbrace .)
    MAIN            reduce using rule 101 (main_function -> type MAIN LPAREN RPAREN lbrace rbrace .)
    INCREMENT       reduce using rule 101 (main_function -> type MAIN LPAREN RPAREN lbrace rbrace .)
    DECREMENT       reduce using rule 101 (main_function -> type MAIN LPAREN RPAREN lbrace rbrace .)
    $end            reduce using rule 101 (main_function -> type MAIN LPAREN RPAREN lbrace rbrace .)
    ELSE            reduce using rule 101 (main_function -> type MAIN LPAREN RPAREN lbrace rbrace .)


state 213

    (96) main_function -> type MAIN LPAREN parameters RPAREN lbrace . statements rbrace
    (97) main_function -> type MAIN LPAREN parameters RPAREN lbrace . rbrace
    (2) statements -> . statements statement
    (3) statements -> . statement
    (121) rbrace -> . RBRACE
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (9) statement -> . conditional_statement
    (10) statement -> . COMMENT
    (15) declaration -> . type enum_list SEMI_COLON
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (74) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (75) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace statements rbrace
    (76) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (77) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace rbrace
    (78) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (79) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (80) iterative_statement -> . WHILE LPAREN exp RPAREN lbrace statements rbrace
    (81) iterative_statement -> . WHILE LPAREN exp RPAREN lbrace rbrace
    (82) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (83) iterative_statement -> . DO lbrace statements rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (84) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (85) iterative_statement -> . DO lbrace rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (94) function -> . normal_function
    (95) function -> . main_function
    (11) constant_statement -> . BREAK SEMI_COLON
    (12) constant_statement -> . CONTINUE SEMI_COLON
    (13) constant_statement -> . RETURN SEMI_COLON
    (14) constant_statement -> . RETURN exp SEMI_COLON
    (88) conditional_statement -> . IF LPAREN exp RPAREN statement
    (89) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace
    (90) conditional_statement -> . IF LPAREN exp RPAREN statement ELSE statement
    (91) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace ELSE statement
    (92) conditional_statement -> . IF LPAREN exp RPAREN statement ELSE lbrace statements rbrace
    (93) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace ELSE lbrace statements rbrace
    (26) type -> . INT
    (27) type -> . FLOAT
    (28) type -> . CHAR
    (29) type -> . DOUBLE
    (30) type -> . VOID
    (31) type -> . SHORT
    (32) type -> . LONG
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (104) normal_function -> . type VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (105) normal_function -> . type VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (106) normal_function -> . VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (107) normal_function -> . VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (108) normal_function -> . type VARIABLE LPAREN RPAREN lbrace statements rbrace
    (109) normal_function -> . type VARIABLE LPAREN RPAREN lbrace rbrace
    (110) normal_function -> . VARIABLE LPAREN RPAREN lbrace statements rbrace
    (111) normal_function -> . VARIABLE LPAREN RPAREN lbrace rbrace
    (96) main_function -> . type MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (97) main_function -> . type MAIN LPAREN parameters RPAREN lbrace rbrace
    (98) main_function -> . MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (99) main_function -> . MAIN LPAREN parameters RPAREN lbrace rbrace
    (100) main_function -> . type MAIN LPAREN RPAREN lbrace statements rbrace
    (101) main_function -> . type MAIN LPAREN RPAREN lbrace rbrace
    (102) main_function -> . MAIN LPAREN RPAREN lbrace statements rbrace
    (103) main_function -> . MAIN LPAREN RPAREN lbrace rbrace
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    RBRACE          shift and go to state 95
    COMMENT         shift and go to state 13
    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 28
    FOR             shift and go to state 25
    WHILE           shift and go to state 9
    DO              shift and go to state 4
    BREAK           shift and go to state 38
    CONTINUE        shift and go to state 39
    RETURN          shift and go to state 1
    IF              shift and go to state 31
    INT             shift and go to state 33
    FLOAT           shift and go to state 37
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 34
    VOID            shift and go to state 5
    SHORT           shift and go to state 10
    LONG            shift and go to state 41
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    MAIN            shift and go to state 14
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    function                       shift and go to state 23
    statements                     shift and go to state 232
    rbrace                         shift and go to state 233
    iterative_statement            shift and go to state 12
    normal_function                shift and go to state 36
    unary_expression               shift and go to state 29
    conditional_statement          shift and go to state 17
    main_function                  shift and go to state 2
    constant_statement             shift and go to state 32
    statement                      shift and go to state 19
    declaration                    shift and go to state 27
    exp                            shift and go to state 40
    constant                       shift and go to state 11
    type                           shift and go to state 21
    unary_operator                 shift and go to state 22
    function_call                  shift and go to state 7

state 214

    (74) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON . iterative_exp RPAREN statement
    (75) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON . iterative_exp RPAREN lbrace statements rbrace
    (76) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON . iterative_exp RPAREN SEMI_COLON
    (77) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON . iterative_exp RPAREN lbrace rbrace
    (86) iterative_exp -> . exp COMMA iterative_exp
    (87) iterative_exp -> . exp
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 43
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    unary_expression               shift and go to state 29
    iterative_exp                  shift and go to state 234
    function_call                  shift and go to state 7
    exp                            shift and go to state 108
    constant                       shift and go to state 11
    unary_operator                 shift and go to state 22

state 215

    (110) normal_function -> VARIABLE LPAREN RPAREN lbrace statements rbrace .

    RBRACE          reduce using rule 110 (normal_function -> VARIABLE LPAREN RPAREN lbrace statements rbrace .)
    COMMENT         reduce using rule 110 (normal_function -> VARIABLE LPAREN RPAREN lbrace statements rbrace .)
    LPAREN          reduce using rule 110 (normal_function -> VARIABLE LPAREN RPAREN lbrace statements rbrace .)
    VARIABLE        reduce using rule 110 (normal_function -> VARIABLE LPAREN RPAREN lbrace statements rbrace .)
    FOR             reduce using rule 110 (normal_function -> VARIABLE LPAREN RPAREN lbrace statements rbrace .)
    WHILE           reduce using rule 110 (normal_function -> VARIABLE LPAREN RPAREN lbrace statements rbrace .)
    DO              reduce using rule 110 (normal_function -> VARIABLE LPAREN RPAREN lbrace statements rbrace .)
    BREAK           reduce using rule 110 (normal_function -> VARIABLE LPAREN RPAREN lbrace statements rbrace .)
    CONTINUE        reduce using rule 110 (normal_function -> VARIABLE LPAREN RPAREN lbrace statements rbrace .)
    RETURN          reduce using rule 110 (normal_function -> VARIABLE LPAREN RPAREN lbrace statements rbrace .)
    IF              reduce using rule 110 (normal_function -> VARIABLE LPAREN RPAREN lbrace statements rbrace .)
    INT             reduce using rule 110 (normal_function -> VARIABLE LPAREN RPAREN lbrace statements rbrace .)
    FLOAT           reduce using rule 110 (normal_function -> VARIABLE LPAREN RPAREN lbrace statements rbrace .)
    CHAR            reduce using rule 110 (normal_function -> VARIABLE LPAREN RPAREN lbrace statements rbrace .)
    DOUBLE          reduce using rule 110 (normal_function -> VARIABLE LPAREN RPAREN lbrace statements rbrace .)
    VOID            reduce using rule 110 (normal_function -> VARIABLE LPAREN RPAREN lbrace statements rbrace .)
    SHORT           reduce using rule 110 (normal_function -> VARIABLE LPAREN RPAREN lbrace statements rbrace .)
    LONG            reduce using rule 110 (normal_function -> VARIABLE LPAREN RPAREN lbrace statements rbrace .)
    HEX_INT         reduce using rule 110 (normal_function -> VARIABLE LPAREN RPAREN lbrace statements rbrace .)
    DOT_REAL        reduce using rule 110 (normal_function -> VARIABLE LPAREN RPAREN lbrace statements rbrace .)
    EXP_REAL        reduce using rule 110 (normal_function -> VARIABLE LPAREN RPAREN lbrace statements rbrace .)
    DEC_INT         reduce using rule 110 (normal_function -> VARIABLE LPAREN RPAREN lbrace statements rbrace .)
    CHARACTER       reduce using rule 110 (normal_function -> VARIABLE LPAREN RPAREN lbrace statements rbrace .)
    MAIN            reduce using rule 110 (normal_function -> VARIABLE LPAREN RPAREN lbrace statements rbrace .)
    INCREMENT       reduce using rule 110 (normal_function -> VARIABLE LPAREN RPAREN lbrace statements rbrace .)
    DECREMENT       reduce using rule 110 (normal_function -> VARIABLE LPAREN RPAREN lbrace statements rbrace .)
    $end            reduce using rule 110 (normal_function -> VARIABLE LPAREN RPAREN lbrace statements rbrace .)
    ELSE            reduce using rule 110 (normal_function -> VARIABLE LPAREN RPAREN lbrace statements rbrace .)


state 216

    (106) normal_function -> VARIABLE LPAREN parameters RPAREN lbrace statements . rbrace
    (2) statements -> statements . statement
    (121) rbrace -> . RBRACE
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (9) statement -> . conditional_statement
    (10) statement -> . COMMENT
    (15) declaration -> . type enum_list SEMI_COLON
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (74) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (75) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace statements rbrace
    (76) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (77) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace rbrace
    (78) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (79) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (80) iterative_statement -> . WHILE LPAREN exp RPAREN lbrace statements rbrace
    (81) iterative_statement -> . WHILE LPAREN exp RPAREN lbrace rbrace
    (82) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (83) iterative_statement -> . DO lbrace statements rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (84) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (85) iterative_statement -> . DO lbrace rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (94) function -> . normal_function
    (95) function -> . main_function
    (11) constant_statement -> . BREAK SEMI_COLON
    (12) constant_statement -> . CONTINUE SEMI_COLON
    (13) constant_statement -> . RETURN SEMI_COLON
    (14) constant_statement -> . RETURN exp SEMI_COLON
    (88) conditional_statement -> . IF LPAREN exp RPAREN statement
    (89) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace
    (90) conditional_statement -> . IF LPAREN exp RPAREN statement ELSE statement
    (91) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace ELSE statement
    (92) conditional_statement -> . IF LPAREN exp RPAREN statement ELSE lbrace statements rbrace
    (93) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace ELSE lbrace statements rbrace
    (26) type -> . INT
    (27) type -> . FLOAT
    (28) type -> . CHAR
    (29) type -> . DOUBLE
    (30) type -> . VOID
    (31) type -> . SHORT
    (32) type -> . LONG
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (104) normal_function -> . type VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (105) normal_function -> . type VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (106) normal_function -> . VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (107) normal_function -> . VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (108) normal_function -> . type VARIABLE LPAREN RPAREN lbrace statements rbrace
    (109) normal_function -> . type VARIABLE LPAREN RPAREN lbrace rbrace
    (110) normal_function -> . VARIABLE LPAREN RPAREN lbrace statements rbrace
    (111) normal_function -> . VARIABLE LPAREN RPAREN lbrace rbrace
    (96) main_function -> . type MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (97) main_function -> . type MAIN LPAREN parameters RPAREN lbrace rbrace
    (98) main_function -> . MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (99) main_function -> . MAIN LPAREN parameters RPAREN lbrace rbrace
    (100) main_function -> . type MAIN LPAREN RPAREN lbrace statements rbrace
    (101) main_function -> . type MAIN LPAREN RPAREN lbrace rbrace
    (102) main_function -> . MAIN LPAREN RPAREN lbrace statements rbrace
    (103) main_function -> . MAIN LPAREN RPAREN lbrace rbrace
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    RBRACE          shift and go to state 95
    COMMENT         shift and go to state 13
    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 28
    FOR             shift and go to state 25
    WHILE           shift and go to state 9
    DO              shift and go to state 4
    BREAK           shift and go to state 38
    CONTINUE        shift and go to state 39
    RETURN          shift and go to state 1
    IF              shift and go to state 31
    INT             shift and go to state 33
    FLOAT           shift and go to state 37
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 34
    VOID            shift and go to state 5
    SHORT           shift and go to state 10
    LONG            shift and go to state 41
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    MAIN            shift and go to state 14
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    function                       shift and go to state 23
    rbrace                         shift and go to state 235
    type                           shift and go to state 21
    normal_function                shift and go to state 36
    unary_expression               shift and go to state 29
    conditional_statement          shift and go to state 17
    main_function                  shift and go to state 2
    constant_statement             shift and go to state 32
    statement                      shift and go to state 45
    declaration                    shift and go to state 27
    exp                            shift and go to state 40
    constant                       shift and go to state 11
    iterative_statement            shift and go to state 12
    unary_operator                 shift and go to state 22
    function_call                  shift and go to state 7

state 217

    (107) normal_function -> VARIABLE LPAREN parameters RPAREN lbrace rbrace .

    RBRACE          reduce using rule 107 (normal_function -> VARIABLE LPAREN parameters RPAREN lbrace rbrace .)
    COMMENT         reduce using rule 107 (normal_function -> VARIABLE LPAREN parameters RPAREN lbrace rbrace .)
    LPAREN          reduce using rule 107 (normal_function -> VARIABLE LPAREN parameters RPAREN lbrace rbrace .)
    VARIABLE        reduce using rule 107 (normal_function -> VARIABLE LPAREN parameters RPAREN lbrace rbrace .)
    FOR             reduce using rule 107 (normal_function -> VARIABLE LPAREN parameters RPAREN lbrace rbrace .)
    WHILE           reduce using rule 107 (normal_function -> VARIABLE LPAREN parameters RPAREN lbrace rbrace .)
    DO              reduce using rule 107 (normal_function -> VARIABLE LPAREN parameters RPAREN lbrace rbrace .)
    BREAK           reduce using rule 107 (normal_function -> VARIABLE LPAREN parameters RPAREN lbrace rbrace .)
    CONTINUE        reduce using rule 107 (normal_function -> VARIABLE LPAREN parameters RPAREN lbrace rbrace .)
    RETURN          reduce using rule 107 (normal_function -> VARIABLE LPAREN parameters RPAREN lbrace rbrace .)
    IF              reduce using rule 107 (normal_function -> VARIABLE LPAREN parameters RPAREN lbrace rbrace .)
    INT             reduce using rule 107 (normal_function -> VARIABLE LPAREN parameters RPAREN lbrace rbrace .)
    FLOAT           reduce using rule 107 (normal_function -> VARIABLE LPAREN parameters RPAREN lbrace rbrace .)
    CHAR            reduce using rule 107 (normal_function -> VARIABLE LPAREN parameters RPAREN lbrace rbrace .)
    DOUBLE          reduce using rule 107 (normal_function -> VARIABLE LPAREN parameters RPAREN lbrace rbrace .)
    VOID            reduce using rule 107 (normal_function -> VARIABLE LPAREN parameters RPAREN lbrace rbrace .)
    SHORT           reduce using rule 107 (normal_function -> VARIABLE LPAREN parameters RPAREN lbrace rbrace .)
    LONG            reduce using rule 107 (normal_function -> VARIABLE LPAREN parameters RPAREN lbrace rbrace .)
    HEX_INT         reduce using rule 107 (normal_function -> VARIABLE LPAREN parameters RPAREN lbrace rbrace .)
    DOT_REAL        reduce using rule 107 (normal_function -> VARIABLE LPAREN parameters RPAREN lbrace rbrace .)
    EXP_REAL        reduce using rule 107 (normal_function -> VARIABLE LPAREN parameters RPAREN lbrace rbrace .)
    DEC_INT         reduce using rule 107 (normal_function -> VARIABLE LPAREN parameters RPAREN lbrace rbrace .)
    CHARACTER       reduce using rule 107 (normal_function -> VARIABLE LPAREN parameters RPAREN lbrace rbrace .)
    MAIN            reduce using rule 107 (normal_function -> VARIABLE LPAREN parameters RPAREN lbrace rbrace .)
    INCREMENT       reduce using rule 107 (normal_function -> VARIABLE LPAREN parameters RPAREN lbrace rbrace .)
    DECREMENT       reduce using rule 107 (normal_function -> VARIABLE LPAREN parameters RPAREN lbrace rbrace .)
    $end            reduce using rule 107 (normal_function -> VARIABLE LPAREN parameters RPAREN lbrace rbrace .)
    ELSE            reduce using rule 107 (normal_function -> VARIABLE LPAREN parameters RPAREN lbrace rbrace .)


state 218

    (90) conditional_statement -> IF LPAREN exp RPAREN statement ELSE . statement
    (92) conditional_statement -> IF LPAREN exp RPAREN statement ELSE . lbrace statements rbrace
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (9) statement -> . conditional_statement
    (10) statement -> . COMMENT
    (120) lbrace -> . LBRACE
    (15) declaration -> . type enum_list SEMI_COLON
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (74) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (75) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace statements rbrace
    (76) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (77) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace rbrace
    (78) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (79) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (80) iterative_statement -> . WHILE LPAREN exp RPAREN lbrace statements rbrace
    (81) iterative_statement -> . WHILE LPAREN exp RPAREN lbrace rbrace
    (82) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (83) iterative_statement -> . DO lbrace statements rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (84) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (85) iterative_statement -> . DO lbrace rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (94) function -> . normal_function
    (95) function -> . main_function
    (11) constant_statement -> . BREAK SEMI_COLON
    (12) constant_statement -> . CONTINUE SEMI_COLON
    (13) constant_statement -> . RETURN SEMI_COLON
    (14) constant_statement -> . RETURN exp SEMI_COLON
    (88) conditional_statement -> . IF LPAREN exp RPAREN statement
    (89) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace
    (90) conditional_statement -> . IF LPAREN exp RPAREN statement ELSE statement
    (91) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace ELSE statement
    (92) conditional_statement -> . IF LPAREN exp RPAREN statement ELSE lbrace statements rbrace
    (93) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace ELSE lbrace statements rbrace
    (26) type -> . INT
    (27) type -> . FLOAT
    (28) type -> . CHAR
    (29) type -> . DOUBLE
    (30) type -> . VOID
    (31) type -> . SHORT
    (32) type -> . LONG
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (104) normal_function -> . type VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (105) normal_function -> . type VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (106) normal_function -> . VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (107) normal_function -> . VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (108) normal_function -> . type VARIABLE LPAREN RPAREN lbrace statements rbrace
    (109) normal_function -> . type VARIABLE LPAREN RPAREN lbrace rbrace
    (110) normal_function -> . VARIABLE LPAREN RPAREN lbrace statements rbrace
    (111) normal_function -> . VARIABLE LPAREN RPAREN lbrace rbrace
    (96) main_function -> . type MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (97) main_function -> . type MAIN LPAREN parameters RPAREN lbrace rbrace
    (98) main_function -> . MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (99) main_function -> . MAIN LPAREN parameters RPAREN lbrace rbrace
    (100) main_function -> . type MAIN LPAREN RPAREN lbrace statements rbrace
    (101) main_function -> . type MAIN LPAREN RPAREN lbrace rbrace
    (102) main_function -> . MAIN LPAREN RPAREN lbrace statements rbrace
    (103) main_function -> . MAIN LPAREN RPAREN lbrace rbrace
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    COMMENT         shift and go to state 13
    LBRACE          shift and go to state 48
    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 28
    FOR             shift and go to state 25
    WHILE           shift and go to state 9
    DO              shift and go to state 4
    BREAK           shift and go to state 38
    CONTINUE        shift and go to state 39
    RETURN          shift and go to state 1
    IF              shift and go to state 31
    INT             shift and go to state 33
    FLOAT           shift and go to state 37
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 34
    VOID            shift and go to state 5
    SHORT           shift and go to state 10
    LONG            shift and go to state 41
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    MAIN            shift and go to state 14
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    function                       shift and go to state 23
    lbrace                         shift and go to state 237
    exp                            shift and go to state 40
    unary_expression               shift and go to state 29
    type                           shift and go to state 21
    normal_function                shift and go to state 36
    function_call                  shift and go to state 7
    conditional_statement          shift and go to state 17
    main_function                  shift and go to state 2
    statement                      shift and go to state 236
    declaration                    shift and go to state 27
    constant_statement             shift and go to state 32
    constant                       shift and go to state 11
    iterative_statement            shift and go to state 12
    unary_operator                 shift and go to state 22

state 219

    (89) conditional_statement -> IF LPAREN exp RPAREN lbrace statements . rbrace
    (91) conditional_statement -> IF LPAREN exp RPAREN lbrace statements . rbrace ELSE statement
    (93) conditional_statement -> IF LPAREN exp RPAREN lbrace statements . rbrace ELSE lbrace statements rbrace
    (2) statements -> statements . statement
    (121) rbrace -> . RBRACE
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (9) statement -> . conditional_statement
    (10) statement -> . COMMENT
    (15) declaration -> . type enum_list SEMI_COLON
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (74) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (75) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace statements rbrace
    (76) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (77) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace rbrace
    (78) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (79) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (80) iterative_statement -> . WHILE LPAREN exp RPAREN lbrace statements rbrace
    (81) iterative_statement -> . WHILE LPAREN exp RPAREN lbrace rbrace
    (82) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (83) iterative_statement -> . DO lbrace statements rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (84) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (85) iterative_statement -> . DO lbrace rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (94) function -> . normal_function
    (95) function -> . main_function
    (11) constant_statement -> . BREAK SEMI_COLON
    (12) constant_statement -> . CONTINUE SEMI_COLON
    (13) constant_statement -> . RETURN SEMI_COLON
    (14) constant_statement -> . RETURN exp SEMI_COLON
    (88) conditional_statement -> . IF LPAREN exp RPAREN statement
    (89) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace
    (90) conditional_statement -> . IF LPAREN exp RPAREN statement ELSE statement
    (91) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace ELSE statement
    (92) conditional_statement -> . IF LPAREN exp RPAREN statement ELSE lbrace statements rbrace
    (93) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace ELSE lbrace statements rbrace
    (26) type -> . INT
    (27) type -> . FLOAT
    (28) type -> . CHAR
    (29) type -> . DOUBLE
    (30) type -> . VOID
    (31) type -> . SHORT
    (32) type -> . LONG
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (104) normal_function -> . type VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (105) normal_function -> . type VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (106) normal_function -> . VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (107) normal_function -> . VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (108) normal_function -> . type VARIABLE LPAREN RPAREN lbrace statements rbrace
    (109) normal_function -> . type VARIABLE LPAREN RPAREN lbrace rbrace
    (110) normal_function -> . VARIABLE LPAREN RPAREN lbrace statements rbrace
    (111) normal_function -> . VARIABLE LPAREN RPAREN lbrace rbrace
    (96) main_function -> . type MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (97) main_function -> . type MAIN LPAREN parameters RPAREN lbrace rbrace
    (98) main_function -> . MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (99) main_function -> . MAIN LPAREN parameters RPAREN lbrace rbrace
    (100) main_function -> . type MAIN LPAREN RPAREN lbrace statements rbrace
    (101) main_function -> . type MAIN LPAREN RPAREN lbrace rbrace
    (102) main_function -> . MAIN LPAREN RPAREN lbrace statements rbrace
    (103) main_function -> . MAIN LPAREN RPAREN lbrace rbrace
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    RBRACE          shift and go to state 95
    COMMENT         shift and go to state 13
    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 28
    FOR             shift and go to state 25
    WHILE           shift and go to state 9
    DO              shift and go to state 4
    BREAK           shift and go to state 38
    CONTINUE        shift and go to state 39
    RETURN          shift and go to state 1
    IF              shift and go to state 31
    INT             shift and go to state 33
    FLOAT           shift and go to state 37
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 34
    VOID            shift and go to state 5
    SHORT           shift and go to state 10
    LONG            shift and go to state 41
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    MAIN            shift and go to state 14
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    function                       shift and go to state 23
    rbrace                         shift and go to state 238
    unary_expression               shift and go to state 29
    type                           shift and go to state 21
    normal_function                shift and go to state 36
    function_call                  shift and go to state 7
    conditional_statement          shift and go to state 17
    main_function                  shift and go to state 2
    constant_statement             shift and go to state 32
    statement                      shift and go to state 45
    declaration                    shift and go to state 27
    exp                            shift and go to state 40
    constant                       shift and go to state 11
    iterative_statement            shift and go to state 12
    unary_operator                 shift and go to state 22

state 220

    (84) iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .

    RBRACE          reduce using rule 84 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    COMMENT         reduce using rule 84 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    LPAREN          reduce using rule 84 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    VARIABLE        reduce using rule 84 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    FOR             reduce using rule 84 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    WHILE           reduce using rule 84 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    DO              reduce using rule 84 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    BREAK           reduce using rule 84 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    CONTINUE        reduce using rule 84 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    RETURN          reduce using rule 84 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    IF              reduce using rule 84 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    INT             reduce using rule 84 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    FLOAT           reduce using rule 84 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    CHAR            reduce using rule 84 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    DOUBLE          reduce using rule 84 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    VOID            reduce using rule 84 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    SHORT           reduce using rule 84 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    LONG            reduce using rule 84 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    HEX_INT         reduce using rule 84 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    DOT_REAL        reduce using rule 84 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    EXP_REAL        reduce using rule 84 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    DEC_INT         reduce using rule 84 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    CHARACTER       reduce using rule 84 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    MAIN            reduce using rule 84 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    INCREMENT       reduce using rule 84 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    DECREMENT       reduce using rule 84 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    $end            reduce using rule 84 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    ELSE            reduce using rule 84 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)


state 221

    (82) iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .

    RBRACE          reduce using rule 82 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    COMMENT         reduce using rule 82 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    LPAREN          reduce using rule 82 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    VARIABLE        reduce using rule 82 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    FOR             reduce using rule 82 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    WHILE           reduce using rule 82 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    DO              reduce using rule 82 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    BREAK           reduce using rule 82 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    CONTINUE        reduce using rule 82 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    RETURN          reduce using rule 82 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    IF              reduce using rule 82 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    INT             reduce using rule 82 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    FLOAT           reduce using rule 82 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    CHAR            reduce using rule 82 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    DOUBLE          reduce using rule 82 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    VOID            reduce using rule 82 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    SHORT           reduce using rule 82 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    LONG            reduce using rule 82 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    HEX_INT         reduce using rule 82 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    DOT_REAL        reduce using rule 82 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    EXP_REAL        reduce using rule 82 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    DEC_INT         reduce using rule 82 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    CHARACTER       reduce using rule 82 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    MAIN            reduce using rule 82 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    INCREMENT       reduce using rule 82 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    DECREMENT       reduce using rule 82 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    $end            reduce using rule 82 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    ELSE            reduce using rule 82 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)


state 222

    (83) iterative_statement -> DO lbrace statements rbrace WHILE LPAREN exp . RPAREN SEMI_COLON
    (38) exp -> exp . ADD exp
    (39) exp -> exp . MINUS exp
    (40) exp -> exp . MULT exp
    (41) exp -> exp . DIV exp
    (42) exp -> exp . MOD exp
    (43) exp -> exp . L_OP exp
    (44) exp -> exp . G_OP exp
    (45) exp -> exp . LE_OP exp
    (46) exp -> exp . GE_OP exp
    (47) exp -> exp . NOTEQUALS exp
    (48) exp -> exp . EQUALS_OP exp
    (49) exp -> exp . OR_OP exp
    (50) exp -> exp . AND_OP exp
    (51) exp -> exp . MUL_ASSIGN exp
    (52) exp -> exp . DIV_ASSIGN exp
    (53) exp -> exp . MOD_ASSIGN exp
    (54) exp -> exp . ADD_ASSIGN exp
    (55) exp -> exp . SUB_ASSIGN exp
    (56) exp -> exp . LEFT_ASSIGN exp
    (57) exp -> exp . RIGHT_ASSIGN exp
    (58) exp -> exp . AND_ASSIGN exp
    (59) exp -> exp . XOR_ASSIGN exp
    (60) exp -> exp . OR_ASSIGN exp
    (61) exp -> exp . EQUALS exp

    RPAREN          shift and go to state 239
    ADD             shift and go to state 79
    MINUS           shift and go to state 69
    MULT            shift and go to state 70
    DIV             shift and go to state 68
    MOD             shift and go to state 88
    L_OP            shift and go to state 85
    G_OP            shift and go to state 73
    LE_OP           shift and go to state 71
    GE_OP           shift and go to state 80
    NOTEQUALS       shift and go to state 64
    EQUALS_OP       shift and go to state 65
    OR_OP           shift and go to state 74
    AND_OP          shift and go to state 78
    MUL_ASSIGN      shift and go to state 86
    DIV_ASSIGN      shift and go to state 66
    MOD_ASSIGN      shift and go to state 82
    ADD_ASSIGN      shift and go to state 76
    SUB_ASSIGN      shift and go to state 81
    LEFT_ASSIGN     shift and go to state 87
    RIGHT_ASSIGN    shift and go to state 72
    AND_ASSIGN      shift and go to state 75
    XOR_ASSIGN      shift and go to state 83
    OR_ASSIGN       shift and go to state 84
    EQUALS          shift and go to state 77


state 223

    (85) iterative_statement -> DO lbrace rbrace WHILE LPAREN exp RPAREN . SEMI_COLON

    SEMI_COLON      shift and go to state 240


state 224

    (80) iterative_statement -> WHILE LPAREN exp RPAREN lbrace statements rbrace .

    RBRACE          reduce using rule 80 (iterative_statement -> WHILE LPAREN exp RPAREN lbrace statements rbrace .)
    COMMENT         reduce using rule 80 (iterative_statement -> WHILE LPAREN exp RPAREN lbrace statements rbrace .)
    LPAREN          reduce using rule 80 (iterative_statement -> WHILE LPAREN exp RPAREN lbrace statements rbrace .)
    VARIABLE        reduce using rule 80 (iterative_statement -> WHILE LPAREN exp RPAREN lbrace statements rbrace .)
    FOR             reduce using rule 80 (iterative_statement -> WHILE LPAREN exp RPAREN lbrace statements rbrace .)
    WHILE           reduce using rule 80 (iterative_statement -> WHILE LPAREN exp RPAREN lbrace statements rbrace .)
    DO              reduce using rule 80 (iterative_statement -> WHILE LPAREN exp RPAREN lbrace statements rbrace .)
    BREAK           reduce using rule 80 (iterative_statement -> WHILE LPAREN exp RPAREN lbrace statements rbrace .)
    CONTINUE        reduce using rule 80 (iterative_statement -> WHILE LPAREN exp RPAREN lbrace statements rbrace .)
    RETURN          reduce using rule 80 (iterative_statement -> WHILE LPAREN exp RPAREN lbrace statements rbrace .)
    IF              reduce using rule 80 (iterative_statement -> WHILE LPAREN exp RPAREN lbrace statements rbrace .)
    INT             reduce using rule 80 (iterative_statement -> WHILE LPAREN exp RPAREN lbrace statements rbrace .)
    FLOAT           reduce using rule 80 (iterative_statement -> WHILE LPAREN exp RPAREN lbrace statements rbrace .)
    CHAR            reduce using rule 80 (iterative_statement -> WHILE LPAREN exp RPAREN lbrace statements rbrace .)
    DOUBLE          reduce using rule 80 (iterative_statement -> WHILE LPAREN exp RPAREN lbrace statements rbrace .)
    VOID            reduce using rule 80 (iterative_statement -> WHILE LPAREN exp RPAREN lbrace statements rbrace .)
    SHORT           reduce using rule 80 (iterative_statement -> WHILE LPAREN exp RPAREN lbrace statements rbrace .)
    LONG            reduce using rule 80 (iterative_statement -> WHILE LPAREN exp RPAREN lbrace statements rbrace .)
    HEX_INT         reduce using rule 80 (iterative_statement -> WHILE LPAREN exp RPAREN lbrace statements rbrace .)
    DOT_REAL        reduce using rule 80 (iterative_statement -> WHILE LPAREN exp RPAREN lbrace statements rbrace .)
    EXP_REAL        reduce using rule 80 (iterative_statement -> WHILE LPAREN exp RPAREN lbrace statements rbrace .)
    DEC_INT         reduce using rule 80 (iterative_statement -> WHILE LPAREN exp RPAREN lbrace statements rbrace .)
    CHARACTER       reduce using rule 80 (iterative_statement -> WHILE LPAREN exp RPAREN lbrace statements rbrace .)
    MAIN            reduce using rule 80 (iterative_statement -> WHILE LPAREN exp RPAREN lbrace statements rbrace .)
    INCREMENT       reduce using rule 80 (iterative_statement -> WHILE LPAREN exp RPAREN lbrace statements rbrace .)
    DECREMENT       reduce using rule 80 (iterative_statement -> WHILE LPAREN exp RPAREN lbrace statements rbrace .)
    $end            reduce using rule 80 (iterative_statement -> WHILE LPAREN exp RPAREN lbrace statements rbrace .)
    ELSE            reduce using rule 80 (iterative_statement -> WHILE LPAREN exp RPAREN lbrace statements rbrace .)


state 225

    (98) main_function -> MAIN LPAREN parameters RPAREN lbrace statements rbrace .

    RBRACE          reduce using rule 98 (main_function -> MAIN LPAREN parameters RPAREN lbrace statements rbrace .)
    COMMENT         reduce using rule 98 (main_function -> MAIN LPAREN parameters RPAREN lbrace statements rbrace .)
    LPAREN          reduce using rule 98 (main_function -> MAIN LPAREN parameters RPAREN lbrace statements rbrace .)
    VARIABLE        reduce using rule 98 (main_function -> MAIN LPAREN parameters RPAREN lbrace statements rbrace .)
    FOR             reduce using rule 98 (main_function -> MAIN LPAREN parameters RPAREN lbrace statements rbrace .)
    WHILE           reduce using rule 98 (main_function -> MAIN LPAREN parameters RPAREN lbrace statements rbrace .)
    DO              reduce using rule 98 (main_function -> MAIN LPAREN parameters RPAREN lbrace statements rbrace .)
    BREAK           reduce using rule 98 (main_function -> MAIN LPAREN parameters RPAREN lbrace statements rbrace .)
    CONTINUE        reduce using rule 98 (main_function -> MAIN LPAREN parameters RPAREN lbrace statements rbrace .)
    RETURN          reduce using rule 98 (main_function -> MAIN LPAREN parameters RPAREN lbrace statements rbrace .)
    IF              reduce using rule 98 (main_function -> MAIN LPAREN parameters RPAREN lbrace statements rbrace .)
    INT             reduce using rule 98 (main_function -> MAIN LPAREN parameters RPAREN lbrace statements rbrace .)
    FLOAT           reduce using rule 98 (main_function -> MAIN LPAREN parameters RPAREN lbrace statements rbrace .)
    CHAR            reduce using rule 98 (main_function -> MAIN LPAREN parameters RPAREN lbrace statements rbrace .)
    DOUBLE          reduce using rule 98 (main_function -> MAIN LPAREN parameters RPAREN lbrace statements rbrace .)
    VOID            reduce using rule 98 (main_function -> MAIN LPAREN parameters RPAREN lbrace statements rbrace .)
    SHORT           reduce using rule 98 (main_function -> MAIN LPAREN parameters RPAREN lbrace statements rbrace .)
    LONG            reduce using rule 98 (main_function -> MAIN LPAREN parameters RPAREN lbrace statements rbrace .)
    HEX_INT         reduce using rule 98 (main_function -> MAIN LPAREN parameters RPAREN lbrace statements rbrace .)
    DOT_REAL        reduce using rule 98 (main_function -> MAIN LPAREN parameters RPAREN lbrace statements rbrace .)
    EXP_REAL        reduce using rule 98 (main_function -> MAIN LPAREN parameters RPAREN lbrace statements rbrace .)
    DEC_INT         reduce using rule 98 (main_function -> MAIN LPAREN parameters RPAREN lbrace statements rbrace .)
    CHARACTER       reduce using rule 98 (main_function -> MAIN LPAREN parameters RPAREN lbrace statements rbrace .)
    MAIN            reduce using rule 98 (main_function -> MAIN LPAREN parameters RPAREN lbrace statements rbrace .)
    INCREMENT       reduce using rule 98 (main_function -> MAIN LPAREN parameters RPAREN lbrace statements rbrace .)
    DECREMENT       reduce using rule 98 (main_function -> MAIN LPAREN parameters RPAREN lbrace statements rbrace .)
    $end            reduce using rule 98 (main_function -> MAIN LPAREN parameters RPAREN lbrace statements rbrace .)
    ELSE            reduce using rule 98 (main_function -> MAIN LPAREN parameters RPAREN lbrace statements rbrace .)


state 226

    (21) enum_list -> VARIABLE LBIG exp RBIG EQUALS LBRACE . num_list RBRACE COMMA enum_list
    (23) enum_list -> VARIABLE LBIG exp RBIG EQUALS LBRACE . num_list RBRACE
    (24) num_list -> . exp COMMA num_list
    (25) num_list -> . exp
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 43
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    constant                       shift and go to state 11
    unary_expression               shift and go to state 29
    function_call                  shift and go to state 7
    exp                            shift and go to state 241
    num_list                       shift and go to state 242
    unary_operator                 shift and go to state 22

state 227

    (20) enum_list -> VARIABLE LBIG exp RBIG COMMA enum_list .

    SEMI_COLON      reduce using rule 20 (enum_list -> VARIABLE LBIG exp RBIG COMMA enum_list .)


state 228

    (108) normal_function -> type VARIABLE LPAREN RPAREN lbrace statements rbrace .

    RBRACE          reduce using rule 108 (normal_function -> type VARIABLE LPAREN RPAREN lbrace statements rbrace .)
    COMMENT         reduce using rule 108 (normal_function -> type VARIABLE LPAREN RPAREN lbrace statements rbrace .)
    LPAREN          reduce using rule 108 (normal_function -> type VARIABLE LPAREN RPAREN lbrace statements rbrace .)
    VARIABLE        reduce using rule 108 (normal_function -> type VARIABLE LPAREN RPAREN lbrace statements rbrace .)
    FOR             reduce using rule 108 (normal_function -> type VARIABLE LPAREN RPAREN lbrace statements rbrace .)
    WHILE           reduce using rule 108 (normal_function -> type VARIABLE LPAREN RPAREN lbrace statements rbrace .)
    DO              reduce using rule 108 (normal_function -> type VARIABLE LPAREN RPAREN lbrace statements rbrace .)
    BREAK           reduce using rule 108 (normal_function -> type VARIABLE LPAREN RPAREN lbrace statements rbrace .)
    CONTINUE        reduce using rule 108 (normal_function -> type VARIABLE LPAREN RPAREN lbrace statements rbrace .)
    RETURN          reduce using rule 108 (normal_function -> type VARIABLE LPAREN RPAREN lbrace statements rbrace .)
    IF              reduce using rule 108 (normal_function -> type VARIABLE LPAREN RPAREN lbrace statements rbrace .)
    INT             reduce using rule 108 (normal_function -> type VARIABLE LPAREN RPAREN lbrace statements rbrace .)
    FLOAT           reduce using rule 108 (normal_function -> type VARIABLE LPAREN RPAREN lbrace statements rbrace .)
    CHAR            reduce using rule 108 (normal_function -> type VARIABLE LPAREN RPAREN lbrace statements rbrace .)
    DOUBLE          reduce using rule 108 (normal_function -> type VARIABLE LPAREN RPAREN lbrace statements rbrace .)
    VOID            reduce using rule 108 (normal_function -> type VARIABLE LPAREN RPAREN lbrace statements rbrace .)
    SHORT           reduce using rule 108 (normal_function -> type VARIABLE LPAREN RPAREN lbrace statements rbrace .)
    LONG            reduce using rule 108 (normal_function -> type VARIABLE LPAREN RPAREN lbrace statements rbrace .)
    HEX_INT         reduce using rule 108 (normal_function -> type VARIABLE LPAREN RPAREN lbrace statements rbrace .)
    DOT_REAL        reduce using rule 108 (normal_function -> type VARIABLE LPAREN RPAREN lbrace statements rbrace .)
    EXP_REAL        reduce using rule 108 (normal_function -> type VARIABLE LPAREN RPAREN lbrace statements rbrace .)
    DEC_INT         reduce using rule 108 (normal_function -> type VARIABLE LPAREN RPAREN lbrace statements rbrace .)
    CHARACTER       reduce using rule 108 (normal_function -> type VARIABLE LPAREN RPAREN lbrace statements rbrace .)
    MAIN            reduce using rule 108 (normal_function -> type VARIABLE LPAREN RPAREN lbrace statements rbrace .)
    INCREMENT       reduce using rule 108 (normal_function -> type VARIABLE LPAREN RPAREN lbrace statements rbrace .)
    DECREMENT       reduce using rule 108 (normal_function -> type VARIABLE LPAREN RPAREN lbrace statements rbrace .)
    $end            reduce using rule 108 (normal_function -> type VARIABLE LPAREN RPAREN lbrace statements rbrace .)
    ELSE            reduce using rule 108 (normal_function -> type VARIABLE LPAREN RPAREN lbrace statements rbrace .)


state 229

    (104) normal_function -> type VARIABLE LPAREN parameters RPAREN lbrace statements . rbrace
    (2) statements -> statements . statement
    (121) rbrace -> . RBRACE
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (9) statement -> . conditional_statement
    (10) statement -> . COMMENT
    (15) declaration -> . type enum_list SEMI_COLON
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (74) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (75) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace statements rbrace
    (76) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (77) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace rbrace
    (78) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (79) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (80) iterative_statement -> . WHILE LPAREN exp RPAREN lbrace statements rbrace
    (81) iterative_statement -> . WHILE LPAREN exp RPAREN lbrace rbrace
    (82) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (83) iterative_statement -> . DO lbrace statements rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (84) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (85) iterative_statement -> . DO lbrace rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (94) function -> . normal_function
    (95) function -> . main_function
    (11) constant_statement -> . BREAK SEMI_COLON
    (12) constant_statement -> . CONTINUE SEMI_COLON
    (13) constant_statement -> . RETURN SEMI_COLON
    (14) constant_statement -> . RETURN exp SEMI_COLON
    (88) conditional_statement -> . IF LPAREN exp RPAREN statement
    (89) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace
    (90) conditional_statement -> . IF LPAREN exp RPAREN statement ELSE statement
    (91) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace ELSE statement
    (92) conditional_statement -> . IF LPAREN exp RPAREN statement ELSE lbrace statements rbrace
    (93) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace ELSE lbrace statements rbrace
    (26) type -> . INT
    (27) type -> . FLOAT
    (28) type -> . CHAR
    (29) type -> . DOUBLE
    (30) type -> . VOID
    (31) type -> . SHORT
    (32) type -> . LONG
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (104) normal_function -> . type VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (105) normal_function -> . type VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (106) normal_function -> . VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (107) normal_function -> . VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (108) normal_function -> . type VARIABLE LPAREN RPAREN lbrace statements rbrace
    (109) normal_function -> . type VARIABLE LPAREN RPAREN lbrace rbrace
    (110) normal_function -> . VARIABLE LPAREN RPAREN lbrace statements rbrace
    (111) normal_function -> . VARIABLE LPAREN RPAREN lbrace rbrace
    (96) main_function -> . type MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (97) main_function -> . type MAIN LPAREN parameters RPAREN lbrace rbrace
    (98) main_function -> . MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (99) main_function -> . MAIN LPAREN parameters RPAREN lbrace rbrace
    (100) main_function -> . type MAIN LPAREN RPAREN lbrace statements rbrace
    (101) main_function -> . type MAIN LPAREN RPAREN lbrace rbrace
    (102) main_function -> . MAIN LPAREN RPAREN lbrace statements rbrace
    (103) main_function -> . MAIN LPAREN RPAREN lbrace rbrace
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    RBRACE          shift and go to state 95
    COMMENT         shift and go to state 13
    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 28
    FOR             shift and go to state 25
    WHILE           shift and go to state 9
    DO              shift and go to state 4
    BREAK           shift and go to state 38
    CONTINUE        shift and go to state 39
    RETURN          shift and go to state 1
    IF              shift and go to state 31
    INT             shift and go to state 33
    FLOAT           shift and go to state 37
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 34
    VOID            shift and go to state 5
    SHORT           shift and go to state 10
    LONG            shift and go to state 41
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    MAIN            shift and go to state 14
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    function                       shift and go to state 23
    rbrace                         shift and go to state 243
    iterative_statement            shift and go to state 12
    normal_function                shift and go to state 36
    unary_expression               shift and go to state 29
    conditional_statement          shift and go to state 17
    main_function                  shift and go to state 2
    constant_statement             shift and go to state 32
    statement                      shift and go to state 45
    declaration                    shift and go to state 27
    exp                            shift and go to state 40
    constant                       shift and go to state 11
    type                           shift and go to state 21
    unary_operator                 shift and go to state 22
    function_call                  shift and go to state 7

state 230

    (105) normal_function -> type VARIABLE LPAREN parameters RPAREN lbrace rbrace .

    RBRACE          reduce using rule 105 (normal_function -> type VARIABLE LPAREN parameters RPAREN lbrace rbrace .)
    COMMENT         reduce using rule 105 (normal_function -> type VARIABLE LPAREN parameters RPAREN lbrace rbrace .)
    LPAREN          reduce using rule 105 (normal_function -> type VARIABLE LPAREN parameters RPAREN lbrace rbrace .)
    VARIABLE        reduce using rule 105 (normal_function -> type VARIABLE LPAREN parameters RPAREN lbrace rbrace .)
    FOR             reduce using rule 105 (normal_function -> type VARIABLE LPAREN parameters RPAREN lbrace rbrace .)
    WHILE           reduce using rule 105 (normal_function -> type VARIABLE LPAREN parameters RPAREN lbrace rbrace .)
    DO              reduce using rule 105 (normal_function -> type VARIABLE LPAREN parameters RPAREN lbrace rbrace .)
    BREAK           reduce using rule 105 (normal_function -> type VARIABLE LPAREN parameters RPAREN lbrace rbrace .)
    CONTINUE        reduce using rule 105 (normal_function -> type VARIABLE LPAREN parameters RPAREN lbrace rbrace .)
    RETURN          reduce using rule 105 (normal_function -> type VARIABLE LPAREN parameters RPAREN lbrace rbrace .)
    IF              reduce using rule 105 (normal_function -> type VARIABLE LPAREN parameters RPAREN lbrace rbrace .)
    INT             reduce using rule 105 (normal_function -> type VARIABLE LPAREN parameters RPAREN lbrace rbrace .)
    FLOAT           reduce using rule 105 (normal_function -> type VARIABLE LPAREN parameters RPAREN lbrace rbrace .)
    CHAR            reduce using rule 105 (normal_function -> type VARIABLE LPAREN parameters RPAREN lbrace rbrace .)
    DOUBLE          reduce using rule 105 (normal_function -> type VARIABLE LPAREN parameters RPAREN lbrace rbrace .)
    VOID            reduce using rule 105 (normal_function -> type VARIABLE LPAREN parameters RPAREN lbrace rbrace .)
    SHORT           reduce using rule 105 (normal_function -> type VARIABLE LPAREN parameters RPAREN lbrace rbrace .)
    LONG            reduce using rule 105 (normal_function -> type VARIABLE LPAREN parameters RPAREN lbrace rbrace .)
    HEX_INT         reduce using rule 105 (normal_function -> type VARIABLE LPAREN parameters RPAREN lbrace rbrace .)
    DOT_REAL        reduce using rule 105 (normal_function -> type VARIABLE LPAREN parameters RPAREN lbrace rbrace .)
    EXP_REAL        reduce using rule 105 (normal_function -> type VARIABLE LPAREN parameters RPAREN lbrace rbrace .)
    DEC_INT         reduce using rule 105 (normal_function -> type VARIABLE LPAREN parameters RPAREN lbrace rbrace .)
    CHARACTER       reduce using rule 105 (normal_function -> type VARIABLE LPAREN parameters RPAREN lbrace rbrace .)
    MAIN            reduce using rule 105 (normal_function -> type VARIABLE LPAREN parameters RPAREN lbrace rbrace .)
    INCREMENT       reduce using rule 105 (normal_function -> type VARIABLE LPAREN parameters RPAREN lbrace rbrace .)
    DECREMENT       reduce using rule 105 (normal_function -> type VARIABLE LPAREN parameters RPAREN lbrace rbrace .)
    $end            reduce using rule 105 (normal_function -> type VARIABLE LPAREN parameters RPAREN lbrace rbrace .)
    ELSE            reduce using rule 105 (normal_function -> type VARIABLE LPAREN parameters RPAREN lbrace rbrace .)


state 231

    (100) main_function -> type MAIN LPAREN RPAREN lbrace statements rbrace .

    RBRACE          reduce using rule 100 (main_function -> type MAIN LPAREN RPAREN lbrace statements rbrace .)
    COMMENT         reduce using rule 100 (main_function -> type MAIN LPAREN RPAREN lbrace statements rbrace .)
    LPAREN          reduce using rule 100 (main_function -> type MAIN LPAREN RPAREN lbrace statements rbrace .)
    VARIABLE        reduce using rule 100 (main_function -> type MAIN LPAREN RPAREN lbrace statements rbrace .)
    FOR             reduce using rule 100 (main_function -> type MAIN LPAREN RPAREN lbrace statements rbrace .)
    WHILE           reduce using rule 100 (main_function -> type MAIN LPAREN RPAREN lbrace statements rbrace .)
    DO              reduce using rule 100 (main_function -> type MAIN LPAREN RPAREN lbrace statements rbrace .)
    BREAK           reduce using rule 100 (main_function -> type MAIN LPAREN RPAREN lbrace statements rbrace .)
    CONTINUE        reduce using rule 100 (main_function -> type MAIN LPAREN RPAREN lbrace statements rbrace .)
    RETURN          reduce using rule 100 (main_function -> type MAIN LPAREN RPAREN lbrace statements rbrace .)
    IF              reduce using rule 100 (main_function -> type MAIN LPAREN RPAREN lbrace statements rbrace .)
    INT             reduce using rule 100 (main_function -> type MAIN LPAREN RPAREN lbrace statements rbrace .)
    FLOAT           reduce using rule 100 (main_function -> type MAIN LPAREN RPAREN lbrace statements rbrace .)
    CHAR            reduce using rule 100 (main_function -> type MAIN LPAREN RPAREN lbrace statements rbrace .)
    DOUBLE          reduce using rule 100 (main_function -> type MAIN LPAREN RPAREN lbrace statements rbrace .)
    VOID            reduce using rule 100 (main_function -> type MAIN LPAREN RPAREN lbrace statements rbrace .)
    SHORT           reduce using rule 100 (main_function -> type MAIN LPAREN RPAREN lbrace statements rbrace .)
    LONG            reduce using rule 100 (main_function -> type MAIN LPAREN RPAREN lbrace statements rbrace .)
    HEX_INT         reduce using rule 100 (main_function -> type MAIN LPAREN RPAREN lbrace statements rbrace .)
    DOT_REAL        reduce using rule 100 (main_function -> type MAIN LPAREN RPAREN lbrace statements rbrace .)
    EXP_REAL        reduce using rule 100 (main_function -> type MAIN LPAREN RPAREN lbrace statements rbrace .)
    DEC_INT         reduce using rule 100 (main_function -> type MAIN LPAREN RPAREN lbrace statements rbrace .)
    CHARACTER       reduce using rule 100 (main_function -> type MAIN LPAREN RPAREN lbrace statements rbrace .)
    MAIN            reduce using rule 100 (main_function -> type MAIN LPAREN RPAREN lbrace statements rbrace .)
    INCREMENT       reduce using rule 100 (main_function -> type MAIN LPAREN RPAREN lbrace statements rbrace .)
    DECREMENT       reduce using rule 100 (main_function -> type MAIN LPAREN RPAREN lbrace statements rbrace .)
    $end            reduce using rule 100 (main_function -> type MAIN LPAREN RPAREN lbrace statements rbrace .)
    ELSE            reduce using rule 100 (main_function -> type MAIN LPAREN RPAREN lbrace statements rbrace .)


state 232

    (96) main_function -> type MAIN LPAREN parameters RPAREN lbrace statements . rbrace
    (2) statements -> statements . statement
    (121) rbrace -> . RBRACE
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (9) statement -> . conditional_statement
    (10) statement -> . COMMENT
    (15) declaration -> . type enum_list SEMI_COLON
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (74) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (75) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace statements rbrace
    (76) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (77) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace rbrace
    (78) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (79) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (80) iterative_statement -> . WHILE LPAREN exp RPAREN lbrace statements rbrace
    (81) iterative_statement -> . WHILE LPAREN exp RPAREN lbrace rbrace
    (82) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (83) iterative_statement -> . DO lbrace statements rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (84) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (85) iterative_statement -> . DO lbrace rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (94) function -> . normal_function
    (95) function -> . main_function
    (11) constant_statement -> . BREAK SEMI_COLON
    (12) constant_statement -> . CONTINUE SEMI_COLON
    (13) constant_statement -> . RETURN SEMI_COLON
    (14) constant_statement -> . RETURN exp SEMI_COLON
    (88) conditional_statement -> . IF LPAREN exp RPAREN statement
    (89) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace
    (90) conditional_statement -> . IF LPAREN exp RPAREN statement ELSE statement
    (91) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace ELSE statement
    (92) conditional_statement -> . IF LPAREN exp RPAREN statement ELSE lbrace statements rbrace
    (93) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace ELSE lbrace statements rbrace
    (26) type -> . INT
    (27) type -> . FLOAT
    (28) type -> . CHAR
    (29) type -> . DOUBLE
    (30) type -> . VOID
    (31) type -> . SHORT
    (32) type -> . LONG
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (104) normal_function -> . type VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (105) normal_function -> . type VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (106) normal_function -> . VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (107) normal_function -> . VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (108) normal_function -> . type VARIABLE LPAREN RPAREN lbrace statements rbrace
    (109) normal_function -> . type VARIABLE LPAREN RPAREN lbrace rbrace
    (110) normal_function -> . VARIABLE LPAREN RPAREN lbrace statements rbrace
    (111) normal_function -> . VARIABLE LPAREN RPAREN lbrace rbrace
    (96) main_function -> . type MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (97) main_function -> . type MAIN LPAREN parameters RPAREN lbrace rbrace
    (98) main_function -> . MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (99) main_function -> . MAIN LPAREN parameters RPAREN lbrace rbrace
    (100) main_function -> . type MAIN LPAREN RPAREN lbrace statements rbrace
    (101) main_function -> . type MAIN LPAREN RPAREN lbrace rbrace
    (102) main_function -> . MAIN LPAREN RPAREN lbrace statements rbrace
    (103) main_function -> . MAIN LPAREN RPAREN lbrace rbrace
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    RBRACE          shift and go to state 95
    COMMENT         shift and go to state 13
    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 28
    FOR             shift and go to state 25
    WHILE           shift and go to state 9
    DO              shift and go to state 4
    BREAK           shift and go to state 38
    CONTINUE        shift and go to state 39
    RETURN          shift and go to state 1
    IF              shift and go to state 31
    INT             shift and go to state 33
    FLOAT           shift and go to state 37
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 34
    VOID            shift and go to state 5
    SHORT           shift and go to state 10
    LONG            shift and go to state 41
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    MAIN            shift and go to state 14
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    function                       shift and go to state 23
    rbrace                         shift and go to state 244
    iterative_statement            shift and go to state 12
    normal_function                shift and go to state 36
    unary_expression               shift and go to state 29
    conditional_statement          shift and go to state 17
    main_function                  shift and go to state 2
    constant_statement             shift and go to state 32
    statement                      shift and go to state 45
    declaration                    shift and go to state 27
    exp                            shift and go to state 40
    constant                       shift and go to state 11
    type                           shift and go to state 21
    unary_operator                 shift and go to state 22
    function_call                  shift and go to state 7

state 233

    (97) main_function -> type MAIN LPAREN parameters RPAREN lbrace rbrace .

    RBRACE          reduce using rule 97 (main_function -> type MAIN LPAREN parameters RPAREN lbrace rbrace .)
    COMMENT         reduce using rule 97 (main_function -> type MAIN LPAREN parameters RPAREN lbrace rbrace .)
    LPAREN          reduce using rule 97 (main_function -> type MAIN LPAREN parameters RPAREN lbrace rbrace .)
    VARIABLE        reduce using rule 97 (main_function -> type MAIN LPAREN parameters RPAREN lbrace rbrace .)
    FOR             reduce using rule 97 (main_function -> type MAIN LPAREN parameters RPAREN lbrace rbrace .)
    WHILE           reduce using rule 97 (main_function -> type MAIN LPAREN parameters RPAREN lbrace rbrace .)
    DO              reduce using rule 97 (main_function -> type MAIN LPAREN parameters RPAREN lbrace rbrace .)
    BREAK           reduce using rule 97 (main_function -> type MAIN LPAREN parameters RPAREN lbrace rbrace .)
    CONTINUE        reduce using rule 97 (main_function -> type MAIN LPAREN parameters RPAREN lbrace rbrace .)
    RETURN          reduce using rule 97 (main_function -> type MAIN LPAREN parameters RPAREN lbrace rbrace .)
    IF              reduce using rule 97 (main_function -> type MAIN LPAREN parameters RPAREN lbrace rbrace .)
    INT             reduce using rule 97 (main_function -> type MAIN LPAREN parameters RPAREN lbrace rbrace .)
    FLOAT           reduce using rule 97 (main_function -> type MAIN LPAREN parameters RPAREN lbrace rbrace .)
    CHAR            reduce using rule 97 (main_function -> type MAIN LPAREN parameters RPAREN lbrace rbrace .)
    DOUBLE          reduce using rule 97 (main_function -> type MAIN LPAREN parameters RPAREN lbrace rbrace .)
    VOID            reduce using rule 97 (main_function -> type MAIN LPAREN parameters RPAREN lbrace rbrace .)
    SHORT           reduce using rule 97 (main_function -> type MAIN LPAREN parameters RPAREN lbrace rbrace .)
    LONG            reduce using rule 97 (main_function -> type MAIN LPAREN parameters RPAREN lbrace rbrace .)
    HEX_INT         reduce using rule 97 (main_function -> type MAIN LPAREN parameters RPAREN lbrace rbrace .)
    DOT_REAL        reduce using rule 97 (main_function -> type MAIN LPAREN parameters RPAREN lbrace rbrace .)
    EXP_REAL        reduce using rule 97 (main_function -> type MAIN LPAREN parameters RPAREN lbrace rbrace .)
    DEC_INT         reduce using rule 97 (main_function -> type MAIN LPAREN parameters RPAREN lbrace rbrace .)
    CHARACTER       reduce using rule 97 (main_function -> type MAIN LPAREN parameters RPAREN lbrace rbrace .)
    MAIN            reduce using rule 97 (main_function -> type MAIN LPAREN parameters RPAREN lbrace rbrace .)
    INCREMENT       reduce using rule 97 (main_function -> type MAIN LPAREN parameters RPAREN lbrace rbrace .)
    DECREMENT       reduce using rule 97 (main_function -> type MAIN LPAREN parameters RPAREN lbrace rbrace .)
    $end            reduce using rule 97 (main_function -> type MAIN LPAREN parameters RPAREN lbrace rbrace .)
    ELSE            reduce using rule 97 (main_function -> type MAIN LPAREN parameters RPAREN lbrace rbrace .)


state 234

    (74) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp . RPAREN statement
    (75) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp . RPAREN lbrace statements rbrace
    (76) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp . RPAREN SEMI_COLON
    (77) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp . RPAREN lbrace rbrace

    RPAREN          shift and go to state 245


state 235

    (106) normal_function -> VARIABLE LPAREN parameters RPAREN lbrace statements rbrace .

    RBRACE          reduce using rule 106 (normal_function -> VARIABLE LPAREN parameters RPAREN lbrace statements rbrace .)
    COMMENT         reduce using rule 106 (normal_function -> VARIABLE LPAREN parameters RPAREN lbrace statements rbrace .)
    LPAREN          reduce using rule 106 (normal_function -> VARIABLE LPAREN parameters RPAREN lbrace statements rbrace .)
    VARIABLE        reduce using rule 106 (normal_function -> VARIABLE LPAREN parameters RPAREN lbrace statements rbrace .)
    FOR             reduce using rule 106 (normal_function -> VARIABLE LPAREN parameters RPAREN lbrace statements rbrace .)
    WHILE           reduce using rule 106 (normal_function -> VARIABLE LPAREN parameters RPAREN lbrace statements rbrace .)
    DO              reduce using rule 106 (normal_function -> VARIABLE LPAREN parameters RPAREN lbrace statements rbrace .)
    BREAK           reduce using rule 106 (normal_function -> VARIABLE LPAREN parameters RPAREN lbrace statements rbrace .)
    CONTINUE        reduce using rule 106 (normal_function -> VARIABLE LPAREN parameters RPAREN lbrace statements rbrace .)
    RETURN          reduce using rule 106 (normal_function -> VARIABLE LPAREN parameters RPAREN lbrace statements rbrace .)
    IF              reduce using rule 106 (normal_function -> VARIABLE LPAREN parameters RPAREN lbrace statements rbrace .)
    INT             reduce using rule 106 (normal_function -> VARIABLE LPAREN parameters RPAREN lbrace statements rbrace .)
    FLOAT           reduce using rule 106 (normal_function -> VARIABLE LPAREN parameters RPAREN lbrace statements rbrace .)
    CHAR            reduce using rule 106 (normal_function -> VARIABLE LPAREN parameters RPAREN lbrace statements rbrace .)
    DOUBLE          reduce using rule 106 (normal_function -> VARIABLE LPAREN parameters RPAREN lbrace statements rbrace .)
    VOID            reduce using rule 106 (normal_function -> VARIABLE LPAREN parameters RPAREN lbrace statements rbrace .)
    SHORT           reduce using rule 106 (normal_function -> VARIABLE LPAREN parameters RPAREN lbrace statements rbrace .)
    LONG            reduce using rule 106 (normal_function -> VARIABLE LPAREN parameters RPAREN lbrace statements rbrace .)
    HEX_INT         reduce using rule 106 (normal_function -> VARIABLE LPAREN parameters RPAREN lbrace statements rbrace .)
    DOT_REAL        reduce using rule 106 (normal_function -> VARIABLE LPAREN parameters RPAREN lbrace statements rbrace .)
    EXP_REAL        reduce using rule 106 (normal_function -> VARIABLE LPAREN parameters RPAREN lbrace statements rbrace .)
    DEC_INT         reduce using rule 106 (normal_function -> VARIABLE LPAREN parameters RPAREN lbrace statements rbrace .)
    CHARACTER       reduce using rule 106 (normal_function -> VARIABLE LPAREN parameters RPAREN lbrace statements rbrace .)
    MAIN            reduce using rule 106 (normal_function -> VARIABLE LPAREN parameters RPAREN lbrace statements rbrace .)
    INCREMENT       reduce using rule 106 (normal_function -> VARIABLE LPAREN parameters RPAREN lbrace statements rbrace .)
    DECREMENT       reduce using rule 106 (normal_function -> VARIABLE LPAREN parameters RPAREN lbrace statements rbrace .)
    $end            reduce using rule 106 (normal_function -> VARIABLE LPAREN parameters RPAREN lbrace statements rbrace .)
    ELSE            reduce using rule 106 (normal_function -> VARIABLE LPAREN parameters RPAREN lbrace statements rbrace .)


state 236

    (90) conditional_statement -> IF LPAREN exp RPAREN statement ELSE statement .

    RBRACE          reduce using rule 90 (conditional_statement -> IF LPAREN exp RPAREN statement ELSE statement .)
    COMMENT         reduce using rule 90 (conditional_statement -> IF LPAREN exp RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 90 (conditional_statement -> IF LPAREN exp RPAREN statement ELSE statement .)
    VARIABLE        reduce using rule 90 (conditional_statement -> IF LPAREN exp RPAREN statement ELSE statement .)
    FOR             reduce using rule 90 (conditional_statement -> IF LPAREN exp RPAREN statement ELSE statement .)
    WHILE           reduce using rule 90 (conditional_statement -> IF LPAREN exp RPAREN statement ELSE statement .)
    DO              reduce using rule 90 (conditional_statement -> IF LPAREN exp RPAREN statement ELSE statement .)
    BREAK           reduce using rule 90 (conditional_statement -> IF LPAREN exp RPAREN statement ELSE statement .)
    CONTINUE        reduce using rule 90 (conditional_statement -> IF LPAREN exp RPAREN statement ELSE statement .)
    RETURN          reduce using rule 90 (conditional_statement -> IF LPAREN exp RPAREN statement ELSE statement .)
    IF              reduce using rule 90 (conditional_statement -> IF LPAREN exp RPAREN statement ELSE statement .)
    INT             reduce using rule 90 (conditional_statement -> IF LPAREN exp RPAREN statement ELSE statement .)
    FLOAT           reduce using rule 90 (conditional_statement -> IF LPAREN exp RPAREN statement ELSE statement .)
    CHAR            reduce using rule 90 (conditional_statement -> IF LPAREN exp RPAREN statement ELSE statement .)
    DOUBLE          reduce using rule 90 (conditional_statement -> IF LPAREN exp RPAREN statement ELSE statement .)
    VOID            reduce using rule 90 (conditional_statement -> IF LPAREN exp RPAREN statement ELSE statement .)
    SHORT           reduce using rule 90 (conditional_statement -> IF LPAREN exp RPAREN statement ELSE statement .)
    LONG            reduce using rule 90 (conditional_statement -> IF LPAREN exp RPAREN statement ELSE statement .)
    HEX_INT         reduce using rule 90 (conditional_statement -> IF LPAREN exp RPAREN statement ELSE statement .)
    DOT_REAL        reduce using rule 90 (conditional_statement -> IF LPAREN exp RPAREN statement ELSE statement .)
    EXP_REAL        reduce using rule 90 (conditional_statement -> IF LPAREN exp RPAREN statement ELSE statement .)
    DEC_INT         reduce using rule 90 (conditional_statement -> IF LPAREN exp RPAREN statement ELSE statement .)
    CHARACTER       reduce using rule 90 (conditional_statement -> IF LPAREN exp RPAREN statement ELSE statement .)
    MAIN            reduce using rule 90 (conditional_statement -> IF LPAREN exp RPAREN statement ELSE statement .)
    INCREMENT       reduce using rule 90 (conditional_statement -> IF LPAREN exp RPAREN statement ELSE statement .)
    DECREMENT       reduce using rule 90 (conditional_statement -> IF LPAREN exp RPAREN statement ELSE statement .)
    $end            reduce using rule 90 (conditional_statement -> IF LPAREN exp RPAREN statement ELSE statement .)
    ELSE            reduce using rule 90 (conditional_statement -> IF LPAREN exp RPAREN statement ELSE statement .)


state 237

    (92) conditional_statement -> IF LPAREN exp RPAREN statement ELSE lbrace . statements rbrace
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (9) statement -> . conditional_statement
    (10) statement -> . COMMENT
    (15) declaration -> . type enum_list SEMI_COLON
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (74) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (75) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace statements rbrace
    (76) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (77) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace rbrace
    (78) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (79) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (80) iterative_statement -> . WHILE LPAREN exp RPAREN lbrace statements rbrace
    (81) iterative_statement -> . WHILE LPAREN exp RPAREN lbrace rbrace
    (82) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (83) iterative_statement -> . DO lbrace statements rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (84) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (85) iterative_statement -> . DO lbrace rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (94) function -> . normal_function
    (95) function -> . main_function
    (11) constant_statement -> . BREAK SEMI_COLON
    (12) constant_statement -> . CONTINUE SEMI_COLON
    (13) constant_statement -> . RETURN SEMI_COLON
    (14) constant_statement -> . RETURN exp SEMI_COLON
    (88) conditional_statement -> . IF LPAREN exp RPAREN statement
    (89) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace
    (90) conditional_statement -> . IF LPAREN exp RPAREN statement ELSE statement
    (91) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace ELSE statement
    (92) conditional_statement -> . IF LPAREN exp RPAREN statement ELSE lbrace statements rbrace
    (93) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace ELSE lbrace statements rbrace
    (26) type -> . INT
    (27) type -> . FLOAT
    (28) type -> . CHAR
    (29) type -> . DOUBLE
    (30) type -> . VOID
    (31) type -> . SHORT
    (32) type -> . LONG
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (104) normal_function -> . type VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (105) normal_function -> . type VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (106) normal_function -> . VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (107) normal_function -> . VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (108) normal_function -> . type VARIABLE LPAREN RPAREN lbrace statements rbrace
    (109) normal_function -> . type VARIABLE LPAREN RPAREN lbrace rbrace
    (110) normal_function -> . VARIABLE LPAREN RPAREN lbrace statements rbrace
    (111) normal_function -> . VARIABLE LPAREN RPAREN lbrace rbrace
    (96) main_function -> . type MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (97) main_function -> . type MAIN LPAREN parameters RPAREN lbrace rbrace
    (98) main_function -> . MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (99) main_function -> . MAIN LPAREN parameters RPAREN lbrace rbrace
    (100) main_function -> . type MAIN LPAREN RPAREN lbrace statements rbrace
    (101) main_function -> . type MAIN LPAREN RPAREN lbrace rbrace
    (102) main_function -> . MAIN LPAREN RPAREN lbrace statements rbrace
    (103) main_function -> . MAIN LPAREN RPAREN lbrace rbrace
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    COMMENT         shift and go to state 13
    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 28
    FOR             shift and go to state 25
    WHILE           shift and go to state 9
    DO              shift and go to state 4
    BREAK           shift and go to state 38
    CONTINUE        shift and go to state 39
    RETURN          shift and go to state 1
    IF              shift and go to state 31
    INT             shift and go to state 33
    FLOAT           shift and go to state 37
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 34
    VOID            shift and go to state 5
    SHORT           shift and go to state 10
    LONG            shift and go to state 41
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    MAIN            shift and go to state 14
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    function                       shift and go to state 23
    statements                     shift and go to state 246
    exp                            shift and go to state 40
    unary_expression               shift and go to state 29
    type                           shift and go to state 21
    normal_function                shift and go to state 36
    function_call                  shift and go to state 7
    conditional_statement          shift and go to state 17
    main_function                  shift and go to state 2
    statement                      shift and go to state 19
    declaration                    shift and go to state 27
    constant_statement             shift and go to state 32
    constant                       shift and go to state 11
    iterative_statement            shift and go to state 12
    unary_operator                 shift and go to state 22

state 238

    (89) conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace .
    (91) conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace . ELSE statement
    (93) conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace . ELSE lbrace statements rbrace

    RBRACE          reduce using rule 89 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace .)
    COMMENT         reduce using rule 89 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace .)
    LPAREN          reduce using rule 89 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace .)
    VARIABLE        reduce using rule 89 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace .)
    FOR             reduce using rule 89 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace .)
    WHILE           reduce using rule 89 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace .)
    DO              reduce using rule 89 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace .)
    BREAK           reduce using rule 89 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace .)
    CONTINUE        reduce using rule 89 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace .)
    RETURN          reduce using rule 89 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace .)
    IF              reduce using rule 89 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace .)
    INT             reduce using rule 89 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace .)
    FLOAT           reduce using rule 89 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace .)
    CHAR            reduce using rule 89 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace .)
    DOUBLE          reduce using rule 89 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace .)
    VOID            reduce using rule 89 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace .)
    SHORT           reduce using rule 89 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace .)
    LONG            reduce using rule 89 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace .)
    HEX_INT         reduce using rule 89 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace .)
    DOT_REAL        reduce using rule 89 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace .)
    EXP_REAL        reduce using rule 89 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace .)
    DEC_INT         reduce using rule 89 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace .)
    CHARACTER       reduce using rule 89 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace .)
    MAIN            reduce using rule 89 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace .)
    INCREMENT       reduce using rule 89 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace .)
    DECREMENT       reduce using rule 89 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace .)
    $end            reduce using rule 89 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace .)
    ELSE            shift and go to state 247

  ! ELSE            [ reduce using rule 89 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace .) ]


state 239

    (83) iterative_statement -> DO lbrace statements rbrace WHILE LPAREN exp RPAREN . SEMI_COLON

    SEMI_COLON      shift and go to state 248


state 240

    (85) iterative_statement -> DO lbrace rbrace WHILE LPAREN exp RPAREN SEMI_COLON .

    RBRACE          reduce using rule 85 (iterative_statement -> DO lbrace rbrace WHILE LPAREN exp RPAREN SEMI_COLON .)
    COMMENT         reduce using rule 85 (iterative_statement -> DO lbrace rbrace WHILE LPAREN exp RPAREN SEMI_COLON .)
    LPAREN          reduce using rule 85 (iterative_statement -> DO lbrace rbrace WHILE LPAREN exp RPAREN SEMI_COLON .)
    VARIABLE        reduce using rule 85 (iterative_statement -> DO lbrace rbrace WHILE LPAREN exp RPAREN SEMI_COLON .)
    FOR             reduce using rule 85 (iterative_statement -> DO lbrace rbrace WHILE LPAREN exp RPAREN SEMI_COLON .)
    WHILE           reduce using rule 85 (iterative_statement -> DO lbrace rbrace WHILE LPAREN exp RPAREN SEMI_COLON .)
    DO              reduce using rule 85 (iterative_statement -> DO lbrace rbrace WHILE LPAREN exp RPAREN SEMI_COLON .)
    BREAK           reduce using rule 85 (iterative_statement -> DO lbrace rbrace WHILE LPAREN exp RPAREN SEMI_COLON .)
    CONTINUE        reduce using rule 85 (iterative_statement -> DO lbrace rbrace WHILE LPAREN exp RPAREN SEMI_COLON .)
    RETURN          reduce using rule 85 (iterative_statement -> DO lbrace rbrace WHILE LPAREN exp RPAREN SEMI_COLON .)
    IF              reduce using rule 85 (iterative_statement -> DO lbrace rbrace WHILE LPAREN exp RPAREN SEMI_COLON .)
    INT             reduce using rule 85 (iterative_statement -> DO lbrace rbrace WHILE LPAREN exp RPAREN SEMI_COLON .)
    FLOAT           reduce using rule 85 (iterative_statement -> DO lbrace rbrace WHILE LPAREN exp RPAREN SEMI_COLON .)
    CHAR            reduce using rule 85 (iterative_statement -> DO lbrace rbrace WHILE LPAREN exp RPAREN SEMI_COLON .)
    DOUBLE          reduce using rule 85 (iterative_statement -> DO lbrace rbrace WHILE LPAREN exp RPAREN SEMI_COLON .)
    VOID            reduce using rule 85 (iterative_statement -> DO lbrace rbrace WHILE LPAREN exp RPAREN SEMI_COLON .)
    SHORT           reduce using rule 85 (iterative_statement -> DO lbrace rbrace WHILE LPAREN exp RPAREN SEMI_COLON .)
    LONG            reduce using rule 85 (iterative_statement -> DO lbrace rbrace WHILE LPAREN exp RPAREN SEMI_COLON .)
    HEX_INT         reduce using rule 85 (iterative_statement -> DO lbrace rbrace WHILE LPAREN exp RPAREN SEMI_COLON .)
    DOT_REAL        reduce using rule 85 (iterative_statement -> DO lbrace rbrace WHILE LPAREN exp RPAREN SEMI_COLON .)
    EXP_REAL        reduce using rule 85 (iterative_statement -> DO lbrace rbrace WHILE LPAREN exp RPAREN SEMI_COLON .)
    DEC_INT         reduce using rule 85 (iterative_statement -> DO lbrace rbrace WHILE LPAREN exp RPAREN SEMI_COLON .)
    CHARACTER       reduce using rule 85 (iterative_statement -> DO lbrace rbrace WHILE LPAREN exp RPAREN SEMI_COLON .)
    MAIN            reduce using rule 85 (iterative_statement -> DO lbrace rbrace WHILE LPAREN exp RPAREN SEMI_COLON .)
    INCREMENT       reduce using rule 85 (iterative_statement -> DO lbrace rbrace WHILE LPAREN exp RPAREN SEMI_COLON .)
    DECREMENT       reduce using rule 85 (iterative_statement -> DO lbrace rbrace WHILE LPAREN exp RPAREN SEMI_COLON .)
    $end            reduce using rule 85 (iterative_statement -> DO lbrace rbrace WHILE LPAREN exp RPAREN SEMI_COLON .)
    ELSE            reduce using rule 85 (iterative_statement -> DO lbrace rbrace WHILE LPAREN exp RPAREN SEMI_COLON .)


state 241

    (24) num_list -> exp . COMMA num_list
    (25) num_list -> exp .
    (38) exp -> exp . ADD exp
    (39) exp -> exp . MINUS exp
    (40) exp -> exp . MULT exp
    (41) exp -> exp . DIV exp
    (42) exp -> exp . MOD exp
    (43) exp -> exp . L_OP exp
    (44) exp -> exp . G_OP exp
    (45) exp -> exp . LE_OP exp
    (46) exp -> exp . GE_OP exp
    (47) exp -> exp . NOTEQUALS exp
    (48) exp -> exp . EQUALS_OP exp
    (49) exp -> exp . OR_OP exp
    (50) exp -> exp . AND_OP exp
    (51) exp -> exp . MUL_ASSIGN exp
    (52) exp -> exp . DIV_ASSIGN exp
    (53) exp -> exp . MOD_ASSIGN exp
    (54) exp -> exp . ADD_ASSIGN exp
    (55) exp -> exp . SUB_ASSIGN exp
    (56) exp -> exp . LEFT_ASSIGN exp
    (57) exp -> exp . RIGHT_ASSIGN exp
    (58) exp -> exp . AND_ASSIGN exp
    (59) exp -> exp . XOR_ASSIGN exp
    (60) exp -> exp . OR_ASSIGN exp
    (61) exp -> exp . EQUALS exp

    COMMA           shift and go to state 249
    RBRACE          reduce using rule 25 (num_list -> exp .)
    ADD             shift and go to state 79
    MINUS           shift and go to state 69
    MULT            shift and go to state 70
    DIV             shift and go to state 68
    MOD             shift and go to state 88
    L_OP            shift and go to state 85
    G_OP            shift and go to state 73
    LE_OP           shift and go to state 71
    GE_OP           shift and go to state 80
    NOTEQUALS       shift and go to state 64
    EQUALS_OP       shift and go to state 65
    OR_OP           shift and go to state 74
    AND_OP          shift and go to state 78
    MUL_ASSIGN      shift and go to state 86
    DIV_ASSIGN      shift and go to state 66
    MOD_ASSIGN      shift and go to state 82
    ADD_ASSIGN      shift and go to state 76
    SUB_ASSIGN      shift and go to state 81
    LEFT_ASSIGN     shift and go to state 87
    RIGHT_ASSIGN    shift and go to state 72
    AND_ASSIGN      shift and go to state 75
    XOR_ASSIGN      shift and go to state 83
    OR_ASSIGN       shift and go to state 84
    EQUALS          shift and go to state 77


state 242

    (21) enum_list -> VARIABLE LBIG exp RBIG EQUALS LBRACE num_list . RBRACE COMMA enum_list
    (23) enum_list -> VARIABLE LBIG exp RBIG EQUALS LBRACE num_list . RBRACE

    RBRACE          shift and go to state 250


state 243

    (104) normal_function -> type VARIABLE LPAREN parameters RPAREN lbrace statements rbrace .

    RBRACE          reduce using rule 104 (normal_function -> type VARIABLE LPAREN parameters RPAREN lbrace statements rbrace .)
    COMMENT         reduce using rule 104 (normal_function -> type VARIABLE LPAREN parameters RPAREN lbrace statements rbrace .)
    LPAREN          reduce using rule 104 (normal_function -> type VARIABLE LPAREN parameters RPAREN lbrace statements rbrace .)
    VARIABLE        reduce using rule 104 (normal_function -> type VARIABLE LPAREN parameters RPAREN lbrace statements rbrace .)
    FOR             reduce using rule 104 (normal_function -> type VARIABLE LPAREN parameters RPAREN lbrace statements rbrace .)
    WHILE           reduce using rule 104 (normal_function -> type VARIABLE LPAREN parameters RPAREN lbrace statements rbrace .)
    DO              reduce using rule 104 (normal_function -> type VARIABLE LPAREN parameters RPAREN lbrace statements rbrace .)
    BREAK           reduce using rule 104 (normal_function -> type VARIABLE LPAREN parameters RPAREN lbrace statements rbrace .)
    CONTINUE        reduce using rule 104 (normal_function -> type VARIABLE LPAREN parameters RPAREN lbrace statements rbrace .)
    RETURN          reduce using rule 104 (normal_function -> type VARIABLE LPAREN parameters RPAREN lbrace statements rbrace .)
    IF              reduce using rule 104 (normal_function -> type VARIABLE LPAREN parameters RPAREN lbrace statements rbrace .)
    INT             reduce using rule 104 (normal_function -> type VARIABLE LPAREN parameters RPAREN lbrace statements rbrace .)
    FLOAT           reduce using rule 104 (normal_function -> type VARIABLE LPAREN parameters RPAREN lbrace statements rbrace .)
    CHAR            reduce using rule 104 (normal_function -> type VARIABLE LPAREN parameters RPAREN lbrace statements rbrace .)
    DOUBLE          reduce using rule 104 (normal_function -> type VARIABLE LPAREN parameters RPAREN lbrace statements rbrace .)
    VOID            reduce using rule 104 (normal_function -> type VARIABLE LPAREN parameters RPAREN lbrace statements rbrace .)
    SHORT           reduce using rule 104 (normal_function -> type VARIABLE LPAREN parameters RPAREN lbrace statements rbrace .)
    LONG            reduce using rule 104 (normal_function -> type VARIABLE LPAREN parameters RPAREN lbrace statements rbrace .)
    HEX_INT         reduce using rule 104 (normal_function -> type VARIABLE LPAREN parameters RPAREN lbrace statements rbrace .)
    DOT_REAL        reduce using rule 104 (normal_function -> type VARIABLE LPAREN parameters RPAREN lbrace statements rbrace .)
    EXP_REAL        reduce using rule 104 (normal_function -> type VARIABLE LPAREN parameters RPAREN lbrace statements rbrace .)
    DEC_INT         reduce using rule 104 (normal_function -> type VARIABLE LPAREN parameters RPAREN lbrace statements rbrace .)
    CHARACTER       reduce using rule 104 (normal_function -> type VARIABLE LPAREN parameters RPAREN lbrace statements rbrace .)
    MAIN            reduce using rule 104 (normal_function -> type VARIABLE LPAREN parameters RPAREN lbrace statements rbrace .)
    INCREMENT       reduce using rule 104 (normal_function -> type VARIABLE LPAREN parameters RPAREN lbrace statements rbrace .)
    DECREMENT       reduce using rule 104 (normal_function -> type VARIABLE LPAREN parameters RPAREN lbrace statements rbrace .)
    $end            reduce using rule 104 (normal_function -> type VARIABLE LPAREN parameters RPAREN lbrace statements rbrace .)
    ELSE            reduce using rule 104 (normal_function -> type VARIABLE LPAREN parameters RPAREN lbrace statements rbrace .)


state 244

    (96) main_function -> type MAIN LPAREN parameters RPAREN lbrace statements rbrace .

    RBRACE          reduce using rule 96 (main_function -> type MAIN LPAREN parameters RPAREN lbrace statements rbrace .)
    COMMENT         reduce using rule 96 (main_function -> type MAIN LPAREN parameters RPAREN lbrace statements rbrace .)
    LPAREN          reduce using rule 96 (main_function -> type MAIN LPAREN parameters RPAREN lbrace statements rbrace .)
    VARIABLE        reduce using rule 96 (main_function -> type MAIN LPAREN parameters RPAREN lbrace statements rbrace .)
    FOR             reduce using rule 96 (main_function -> type MAIN LPAREN parameters RPAREN lbrace statements rbrace .)
    WHILE           reduce using rule 96 (main_function -> type MAIN LPAREN parameters RPAREN lbrace statements rbrace .)
    DO              reduce using rule 96 (main_function -> type MAIN LPAREN parameters RPAREN lbrace statements rbrace .)
    BREAK           reduce using rule 96 (main_function -> type MAIN LPAREN parameters RPAREN lbrace statements rbrace .)
    CONTINUE        reduce using rule 96 (main_function -> type MAIN LPAREN parameters RPAREN lbrace statements rbrace .)
    RETURN          reduce using rule 96 (main_function -> type MAIN LPAREN parameters RPAREN lbrace statements rbrace .)
    IF              reduce using rule 96 (main_function -> type MAIN LPAREN parameters RPAREN lbrace statements rbrace .)
    INT             reduce using rule 96 (main_function -> type MAIN LPAREN parameters RPAREN lbrace statements rbrace .)
    FLOAT           reduce using rule 96 (main_function -> type MAIN LPAREN parameters RPAREN lbrace statements rbrace .)
    CHAR            reduce using rule 96 (main_function -> type MAIN LPAREN parameters RPAREN lbrace statements rbrace .)
    DOUBLE          reduce using rule 96 (main_function -> type MAIN LPAREN parameters RPAREN lbrace statements rbrace .)
    VOID            reduce using rule 96 (main_function -> type MAIN LPAREN parameters RPAREN lbrace statements rbrace .)
    SHORT           reduce using rule 96 (main_function -> type MAIN LPAREN parameters RPAREN lbrace statements rbrace .)
    LONG            reduce using rule 96 (main_function -> type MAIN LPAREN parameters RPAREN lbrace statements rbrace .)
    HEX_INT         reduce using rule 96 (main_function -> type MAIN LPAREN parameters RPAREN lbrace statements rbrace .)
    DOT_REAL        reduce using rule 96 (main_function -> type MAIN LPAREN parameters RPAREN lbrace statements rbrace .)
    EXP_REAL        reduce using rule 96 (main_function -> type MAIN LPAREN parameters RPAREN lbrace statements rbrace .)
    DEC_INT         reduce using rule 96 (main_function -> type MAIN LPAREN parameters RPAREN lbrace statements rbrace .)
    CHARACTER       reduce using rule 96 (main_function -> type MAIN LPAREN parameters RPAREN lbrace statements rbrace .)
    MAIN            reduce using rule 96 (main_function -> type MAIN LPAREN parameters RPAREN lbrace statements rbrace .)
    INCREMENT       reduce using rule 96 (main_function -> type MAIN LPAREN parameters RPAREN lbrace statements rbrace .)
    DECREMENT       reduce using rule 96 (main_function -> type MAIN LPAREN parameters RPAREN lbrace statements rbrace .)
    $end            reduce using rule 96 (main_function -> type MAIN LPAREN parameters RPAREN lbrace statements rbrace .)
    ELSE            reduce using rule 96 (main_function -> type MAIN LPAREN parameters RPAREN lbrace statements rbrace .)


state 245

    (74) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN . statement
    (75) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN . lbrace statements rbrace
    (76) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN . SEMI_COLON
    (77) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN . lbrace rbrace
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (9) statement -> . conditional_statement
    (10) statement -> . COMMENT
    (120) lbrace -> . LBRACE
    (15) declaration -> . type enum_list SEMI_COLON
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (74) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (75) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace statements rbrace
    (76) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (77) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace rbrace
    (78) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (79) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (80) iterative_statement -> . WHILE LPAREN exp RPAREN lbrace statements rbrace
    (81) iterative_statement -> . WHILE LPAREN exp RPAREN lbrace rbrace
    (82) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (83) iterative_statement -> . DO lbrace statements rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (84) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (85) iterative_statement -> . DO lbrace rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (94) function -> . normal_function
    (95) function -> . main_function
    (11) constant_statement -> . BREAK SEMI_COLON
    (12) constant_statement -> . CONTINUE SEMI_COLON
    (13) constant_statement -> . RETURN SEMI_COLON
    (14) constant_statement -> . RETURN exp SEMI_COLON
    (88) conditional_statement -> . IF LPAREN exp RPAREN statement
    (89) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace
    (90) conditional_statement -> . IF LPAREN exp RPAREN statement ELSE statement
    (91) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace ELSE statement
    (92) conditional_statement -> . IF LPAREN exp RPAREN statement ELSE lbrace statements rbrace
    (93) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace ELSE lbrace statements rbrace
    (26) type -> . INT
    (27) type -> . FLOAT
    (28) type -> . CHAR
    (29) type -> . DOUBLE
    (30) type -> . VOID
    (31) type -> . SHORT
    (32) type -> . LONG
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (104) normal_function -> . type VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (105) normal_function -> . type VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (106) normal_function -> . VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (107) normal_function -> . VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (108) normal_function -> . type VARIABLE LPAREN RPAREN lbrace statements rbrace
    (109) normal_function -> . type VARIABLE LPAREN RPAREN lbrace rbrace
    (110) normal_function -> . VARIABLE LPAREN RPAREN lbrace statements rbrace
    (111) normal_function -> . VARIABLE LPAREN RPAREN lbrace rbrace
    (96) main_function -> . type MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (97) main_function -> . type MAIN LPAREN parameters RPAREN lbrace rbrace
    (98) main_function -> . MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (99) main_function -> . MAIN LPAREN parameters RPAREN lbrace rbrace
    (100) main_function -> . type MAIN LPAREN RPAREN lbrace statements rbrace
    (101) main_function -> . type MAIN LPAREN RPAREN lbrace rbrace
    (102) main_function -> . MAIN LPAREN RPAREN lbrace statements rbrace
    (103) main_function -> . MAIN LPAREN RPAREN lbrace rbrace
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    SEMI_COLON      shift and go to state 251
    COMMENT         shift and go to state 13
    LBRACE          shift and go to state 48
    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 28
    FOR             shift and go to state 25
    WHILE           shift and go to state 9
    DO              shift and go to state 4
    BREAK           shift and go to state 38
    CONTINUE        shift and go to state 39
    RETURN          shift and go to state 1
    IF              shift and go to state 31
    INT             shift and go to state 33
    FLOAT           shift and go to state 37
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 34
    VOID            shift and go to state 5
    SHORT           shift and go to state 10
    LONG            shift and go to state 41
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    MAIN            shift and go to state 14
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    function                       shift and go to state 23
    lbrace                         shift and go to state 253
    unary_expression               shift and go to state 29
    type                           shift and go to state 21
    normal_function                shift and go to state 36
    function_call                  shift and go to state 7
    conditional_statement          shift and go to state 17
    main_function                  shift and go to state 2
    constant_statement             shift and go to state 32
    statement                      shift and go to state 252
    declaration                    shift and go to state 27
    exp                            shift and go to state 40
    constant                       shift and go to state 11
    iterative_statement            shift and go to state 12
    unary_operator                 shift and go to state 22

state 246

    (92) conditional_statement -> IF LPAREN exp RPAREN statement ELSE lbrace statements . rbrace
    (2) statements -> statements . statement
    (121) rbrace -> . RBRACE
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (9) statement -> . conditional_statement
    (10) statement -> . COMMENT
    (15) declaration -> . type enum_list SEMI_COLON
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (74) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (75) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace statements rbrace
    (76) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (77) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace rbrace
    (78) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (79) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (80) iterative_statement -> . WHILE LPAREN exp RPAREN lbrace statements rbrace
    (81) iterative_statement -> . WHILE LPAREN exp RPAREN lbrace rbrace
    (82) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (83) iterative_statement -> . DO lbrace statements rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (84) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (85) iterative_statement -> . DO lbrace rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (94) function -> . normal_function
    (95) function -> . main_function
    (11) constant_statement -> . BREAK SEMI_COLON
    (12) constant_statement -> . CONTINUE SEMI_COLON
    (13) constant_statement -> . RETURN SEMI_COLON
    (14) constant_statement -> . RETURN exp SEMI_COLON
    (88) conditional_statement -> . IF LPAREN exp RPAREN statement
    (89) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace
    (90) conditional_statement -> . IF LPAREN exp RPAREN statement ELSE statement
    (91) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace ELSE statement
    (92) conditional_statement -> . IF LPAREN exp RPAREN statement ELSE lbrace statements rbrace
    (93) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace ELSE lbrace statements rbrace
    (26) type -> . INT
    (27) type -> . FLOAT
    (28) type -> . CHAR
    (29) type -> . DOUBLE
    (30) type -> . VOID
    (31) type -> . SHORT
    (32) type -> . LONG
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (104) normal_function -> . type VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (105) normal_function -> . type VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (106) normal_function -> . VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (107) normal_function -> . VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (108) normal_function -> . type VARIABLE LPAREN RPAREN lbrace statements rbrace
    (109) normal_function -> . type VARIABLE LPAREN RPAREN lbrace rbrace
    (110) normal_function -> . VARIABLE LPAREN RPAREN lbrace statements rbrace
    (111) normal_function -> . VARIABLE LPAREN RPAREN lbrace rbrace
    (96) main_function -> . type MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (97) main_function -> . type MAIN LPAREN parameters RPAREN lbrace rbrace
    (98) main_function -> . MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (99) main_function -> . MAIN LPAREN parameters RPAREN lbrace rbrace
    (100) main_function -> . type MAIN LPAREN RPAREN lbrace statements rbrace
    (101) main_function -> . type MAIN LPAREN RPAREN lbrace rbrace
    (102) main_function -> . MAIN LPAREN RPAREN lbrace statements rbrace
    (103) main_function -> . MAIN LPAREN RPAREN lbrace rbrace
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    RBRACE          shift and go to state 95
    COMMENT         shift and go to state 13
    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 28
    FOR             shift and go to state 25
    WHILE           shift and go to state 9
    DO              shift and go to state 4
    BREAK           shift and go to state 38
    CONTINUE        shift and go to state 39
    RETURN          shift and go to state 1
    IF              shift and go to state 31
    INT             shift and go to state 33
    FLOAT           shift and go to state 37
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 34
    VOID            shift and go to state 5
    SHORT           shift and go to state 10
    LONG            shift and go to state 41
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    MAIN            shift and go to state 14
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    function                       shift and go to state 23
    exp                            shift and go to state 40
    unary_expression               shift and go to state 29
    type                           shift and go to state 21
    normal_function                shift and go to state 36
    function_call                  shift and go to state 7
    conditional_statement          shift and go to state 17
    main_function                  shift and go to state 2
    statement                      shift and go to state 45
    declaration                    shift and go to state 27
    constant_statement             shift and go to state 32
    constant                       shift and go to state 11
    iterative_statement            shift and go to state 12
    unary_operator                 shift and go to state 22
    rbrace                         shift and go to state 254

state 247

    (91) conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace ELSE . statement
    (93) conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace ELSE . lbrace statements rbrace
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (9) statement -> . conditional_statement
    (10) statement -> . COMMENT
    (120) lbrace -> . LBRACE
    (15) declaration -> . type enum_list SEMI_COLON
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (74) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (75) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace statements rbrace
    (76) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (77) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace rbrace
    (78) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (79) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (80) iterative_statement -> . WHILE LPAREN exp RPAREN lbrace statements rbrace
    (81) iterative_statement -> . WHILE LPAREN exp RPAREN lbrace rbrace
    (82) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (83) iterative_statement -> . DO lbrace statements rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (84) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (85) iterative_statement -> . DO lbrace rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (94) function -> . normal_function
    (95) function -> . main_function
    (11) constant_statement -> . BREAK SEMI_COLON
    (12) constant_statement -> . CONTINUE SEMI_COLON
    (13) constant_statement -> . RETURN SEMI_COLON
    (14) constant_statement -> . RETURN exp SEMI_COLON
    (88) conditional_statement -> . IF LPAREN exp RPAREN statement
    (89) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace
    (90) conditional_statement -> . IF LPAREN exp RPAREN statement ELSE statement
    (91) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace ELSE statement
    (92) conditional_statement -> . IF LPAREN exp RPAREN statement ELSE lbrace statements rbrace
    (93) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace ELSE lbrace statements rbrace
    (26) type -> . INT
    (27) type -> . FLOAT
    (28) type -> . CHAR
    (29) type -> . DOUBLE
    (30) type -> . VOID
    (31) type -> . SHORT
    (32) type -> . LONG
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (104) normal_function -> . type VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (105) normal_function -> . type VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (106) normal_function -> . VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (107) normal_function -> . VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (108) normal_function -> . type VARIABLE LPAREN RPAREN lbrace statements rbrace
    (109) normal_function -> . type VARIABLE LPAREN RPAREN lbrace rbrace
    (110) normal_function -> . VARIABLE LPAREN RPAREN lbrace statements rbrace
    (111) normal_function -> . VARIABLE LPAREN RPAREN lbrace rbrace
    (96) main_function -> . type MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (97) main_function -> . type MAIN LPAREN parameters RPAREN lbrace rbrace
    (98) main_function -> . MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (99) main_function -> . MAIN LPAREN parameters RPAREN lbrace rbrace
    (100) main_function -> . type MAIN LPAREN RPAREN lbrace statements rbrace
    (101) main_function -> . type MAIN LPAREN RPAREN lbrace rbrace
    (102) main_function -> . MAIN LPAREN RPAREN lbrace statements rbrace
    (103) main_function -> . MAIN LPAREN RPAREN lbrace rbrace
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    COMMENT         shift and go to state 13
    LBRACE          shift and go to state 48
    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 28
    FOR             shift and go to state 25
    WHILE           shift and go to state 9
    DO              shift and go to state 4
    BREAK           shift and go to state 38
    CONTINUE        shift and go to state 39
    RETURN          shift and go to state 1
    IF              shift and go to state 31
    INT             shift and go to state 33
    FLOAT           shift and go to state 37
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 34
    VOID            shift and go to state 5
    SHORT           shift and go to state 10
    LONG            shift and go to state 41
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    MAIN            shift and go to state 14
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    function                       shift and go to state 23
    lbrace                         shift and go to state 256
    unary_expression               shift and go to state 29
    type                           shift and go to state 21
    normal_function                shift and go to state 36
    function_call                  shift and go to state 7
    conditional_statement          shift and go to state 17
    main_function                  shift and go to state 2
    constant_statement             shift and go to state 32
    statement                      shift and go to state 255
    declaration                    shift and go to state 27
    exp                            shift and go to state 40
    constant                       shift and go to state 11
    iterative_statement            shift and go to state 12
    unary_operator                 shift and go to state 22

state 248

    (83) iterative_statement -> DO lbrace statements rbrace WHILE LPAREN exp RPAREN SEMI_COLON .

    RBRACE          reduce using rule 83 (iterative_statement -> DO lbrace statements rbrace WHILE LPAREN exp RPAREN SEMI_COLON .)
    COMMENT         reduce using rule 83 (iterative_statement -> DO lbrace statements rbrace WHILE LPAREN exp RPAREN SEMI_COLON .)
    LPAREN          reduce using rule 83 (iterative_statement -> DO lbrace statements rbrace WHILE LPAREN exp RPAREN SEMI_COLON .)
    VARIABLE        reduce using rule 83 (iterative_statement -> DO lbrace statements rbrace WHILE LPAREN exp RPAREN SEMI_COLON .)
    FOR             reduce using rule 83 (iterative_statement -> DO lbrace statements rbrace WHILE LPAREN exp RPAREN SEMI_COLON .)
    WHILE           reduce using rule 83 (iterative_statement -> DO lbrace statements rbrace WHILE LPAREN exp RPAREN SEMI_COLON .)
    DO              reduce using rule 83 (iterative_statement -> DO lbrace statements rbrace WHILE LPAREN exp RPAREN SEMI_COLON .)
    BREAK           reduce using rule 83 (iterative_statement -> DO lbrace statements rbrace WHILE LPAREN exp RPAREN SEMI_COLON .)
    CONTINUE        reduce using rule 83 (iterative_statement -> DO lbrace statements rbrace WHILE LPAREN exp RPAREN SEMI_COLON .)
    RETURN          reduce using rule 83 (iterative_statement -> DO lbrace statements rbrace WHILE LPAREN exp RPAREN SEMI_COLON .)
    IF              reduce using rule 83 (iterative_statement -> DO lbrace statements rbrace WHILE LPAREN exp RPAREN SEMI_COLON .)
    INT             reduce using rule 83 (iterative_statement -> DO lbrace statements rbrace WHILE LPAREN exp RPAREN SEMI_COLON .)
    FLOAT           reduce using rule 83 (iterative_statement -> DO lbrace statements rbrace WHILE LPAREN exp RPAREN SEMI_COLON .)
    CHAR            reduce using rule 83 (iterative_statement -> DO lbrace statements rbrace WHILE LPAREN exp RPAREN SEMI_COLON .)
    DOUBLE          reduce using rule 83 (iterative_statement -> DO lbrace statements rbrace WHILE LPAREN exp RPAREN SEMI_COLON .)
    VOID            reduce using rule 83 (iterative_statement -> DO lbrace statements rbrace WHILE LPAREN exp RPAREN SEMI_COLON .)
    SHORT           reduce using rule 83 (iterative_statement -> DO lbrace statements rbrace WHILE LPAREN exp RPAREN SEMI_COLON .)
    LONG            reduce using rule 83 (iterative_statement -> DO lbrace statements rbrace WHILE LPAREN exp RPAREN SEMI_COLON .)
    HEX_INT         reduce using rule 83 (iterative_statement -> DO lbrace statements rbrace WHILE LPAREN exp RPAREN SEMI_COLON .)
    DOT_REAL        reduce using rule 83 (iterative_statement -> DO lbrace statements rbrace WHILE LPAREN exp RPAREN SEMI_COLON .)
    EXP_REAL        reduce using rule 83 (iterative_statement -> DO lbrace statements rbrace WHILE LPAREN exp RPAREN SEMI_COLON .)
    DEC_INT         reduce using rule 83 (iterative_statement -> DO lbrace statements rbrace WHILE LPAREN exp RPAREN SEMI_COLON .)
    CHARACTER       reduce using rule 83 (iterative_statement -> DO lbrace statements rbrace WHILE LPAREN exp RPAREN SEMI_COLON .)
    MAIN            reduce using rule 83 (iterative_statement -> DO lbrace statements rbrace WHILE LPAREN exp RPAREN SEMI_COLON .)
    INCREMENT       reduce using rule 83 (iterative_statement -> DO lbrace statements rbrace WHILE LPAREN exp RPAREN SEMI_COLON .)
    DECREMENT       reduce using rule 83 (iterative_statement -> DO lbrace statements rbrace WHILE LPAREN exp RPAREN SEMI_COLON .)
    $end            reduce using rule 83 (iterative_statement -> DO lbrace statements rbrace WHILE LPAREN exp RPAREN SEMI_COLON .)
    ELSE            reduce using rule 83 (iterative_statement -> DO lbrace statements rbrace WHILE LPAREN exp RPAREN SEMI_COLON .)


state 249

    (24) num_list -> exp COMMA . num_list
    (24) num_list -> . exp COMMA num_list
    (25) num_list -> . exp
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 43
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    constant                       shift and go to state 11
    unary_expression               shift and go to state 29
    function_call                  shift and go to state 7
    exp                            shift and go to state 241
    num_list                       shift and go to state 257
    unary_operator                 shift and go to state 22

state 250

    (21) enum_list -> VARIABLE LBIG exp RBIG EQUALS LBRACE num_list RBRACE . COMMA enum_list
    (23) enum_list -> VARIABLE LBIG exp RBIG EQUALS LBRACE num_list RBRACE .

    COMMA           shift and go to state 258
    SEMI_COLON      reduce using rule 23 (enum_list -> VARIABLE LBIG exp RBIG EQUALS LBRACE num_list RBRACE .)


state 251

    (76) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .

    RBRACE          reduce using rule 76 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    COMMENT         reduce using rule 76 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    LPAREN          reduce using rule 76 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    VARIABLE        reduce using rule 76 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    FOR             reduce using rule 76 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    WHILE           reduce using rule 76 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    DO              reduce using rule 76 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    BREAK           reduce using rule 76 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    CONTINUE        reduce using rule 76 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    RETURN          reduce using rule 76 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    IF              reduce using rule 76 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    INT             reduce using rule 76 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    FLOAT           reduce using rule 76 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    CHAR            reduce using rule 76 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    DOUBLE          reduce using rule 76 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    VOID            reduce using rule 76 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    SHORT           reduce using rule 76 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    LONG            reduce using rule 76 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    HEX_INT         reduce using rule 76 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    DOT_REAL        reduce using rule 76 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    EXP_REAL        reduce using rule 76 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    DEC_INT         reduce using rule 76 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    CHARACTER       reduce using rule 76 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    MAIN            reduce using rule 76 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    INCREMENT       reduce using rule 76 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    DECREMENT       reduce using rule 76 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    $end            reduce using rule 76 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    ELSE            reduce using rule 76 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)


state 252

    (74) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .

    RBRACE          reduce using rule 74 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    COMMENT         reduce using rule 74 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    LPAREN          reduce using rule 74 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    VARIABLE        reduce using rule 74 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    FOR             reduce using rule 74 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    WHILE           reduce using rule 74 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    DO              reduce using rule 74 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    BREAK           reduce using rule 74 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    CONTINUE        reduce using rule 74 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    RETURN          reduce using rule 74 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    IF              reduce using rule 74 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    INT             reduce using rule 74 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    FLOAT           reduce using rule 74 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    CHAR            reduce using rule 74 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    DOUBLE          reduce using rule 74 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    VOID            reduce using rule 74 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    SHORT           reduce using rule 74 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    LONG            reduce using rule 74 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    HEX_INT         reduce using rule 74 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    DOT_REAL        reduce using rule 74 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    EXP_REAL        reduce using rule 74 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    DEC_INT         reduce using rule 74 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    CHARACTER       reduce using rule 74 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    MAIN            reduce using rule 74 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    INCREMENT       reduce using rule 74 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    DECREMENT       reduce using rule 74 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    $end            reduce using rule 74 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    ELSE            reduce using rule 74 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)


state 253

    (75) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace . statements rbrace
    (77) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace . rbrace
    (2) statements -> . statements statement
    (3) statements -> . statement
    (121) rbrace -> . RBRACE
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (9) statement -> . conditional_statement
    (10) statement -> . COMMENT
    (15) declaration -> . type enum_list SEMI_COLON
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (74) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (75) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace statements rbrace
    (76) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (77) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace rbrace
    (78) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (79) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (80) iterative_statement -> . WHILE LPAREN exp RPAREN lbrace statements rbrace
    (81) iterative_statement -> . WHILE LPAREN exp RPAREN lbrace rbrace
    (82) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (83) iterative_statement -> . DO lbrace statements rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (84) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (85) iterative_statement -> . DO lbrace rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (94) function -> . normal_function
    (95) function -> . main_function
    (11) constant_statement -> . BREAK SEMI_COLON
    (12) constant_statement -> . CONTINUE SEMI_COLON
    (13) constant_statement -> . RETURN SEMI_COLON
    (14) constant_statement -> . RETURN exp SEMI_COLON
    (88) conditional_statement -> . IF LPAREN exp RPAREN statement
    (89) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace
    (90) conditional_statement -> . IF LPAREN exp RPAREN statement ELSE statement
    (91) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace ELSE statement
    (92) conditional_statement -> . IF LPAREN exp RPAREN statement ELSE lbrace statements rbrace
    (93) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace ELSE lbrace statements rbrace
    (26) type -> . INT
    (27) type -> . FLOAT
    (28) type -> . CHAR
    (29) type -> . DOUBLE
    (30) type -> . VOID
    (31) type -> . SHORT
    (32) type -> . LONG
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (104) normal_function -> . type VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (105) normal_function -> . type VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (106) normal_function -> . VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (107) normal_function -> . VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (108) normal_function -> . type VARIABLE LPAREN RPAREN lbrace statements rbrace
    (109) normal_function -> . type VARIABLE LPAREN RPAREN lbrace rbrace
    (110) normal_function -> . VARIABLE LPAREN RPAREN lbrace statements rbrace
    (111) normal_function -> . VARIABLE LPAREN RPAREN lbrace rbrace
    (96) main_function -> . type MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (97) main_function -> . type MAIN LPAREN parameters RPAREN lbrace rbrace
    (98) main_function -> . MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (99) main_function -> . MAIN LPAREN parameters RPAREN lbrace rbrace
    (100) main_function -> . type MAIN LPAREN RPAREN lbrace statements rbrace
    (101) main_function -> . type MAIN LPAREN RPAREN lbrace rbrace
    (102) main_function -> . MAIN LPAREN RPAREN lbrace statements rbrace
    (103) main_function -> . MAIN LPAREN RPAREN lbrace rbrace
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    RBRACE          shift and go to state 95
    COMMENT         shift and go to state 13
    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 28
    FOR             shift and go to state 25
    WHILE           shift and go to state 9
    DO              shift and go to state 4
    BREAK           shift and go to state 38
    CONTINUE        shift and go to state 39
    RETURN          shift and go to state 1
    IF              shift and go to state 31
    INT             shift and go to state 33
    FLOAT           shift and go to state 37
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 34
    VOID            shift and go to state 5
    SHORT           shift and go to state 10
    LONG            shift and go to state 41
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    MAIN            shift and go to state 14
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    function                       shift and go to state 23
    statements                     shift and go to state 259
    rbrace                         shift and go to state 260
    unary_expression               shift and go to state 29
    type                           shift and go to state 21
    normal_function                shift and go to state 36
    function_call                  shift and go to state 7
    conditional_statement          shift and go to state 17
    main_function                  shift and go to state 2
    constant_statement             shift and go to state 32
    statement                      shift and go to state 19
    declaration                    shift and go to state 27
    exp                            shift and go to state 40
    constant                       shift and go to state 11
    iterative_statement            shift and go to state 12
    unary_operator                 shift and go to state 22

state 254

    (92) conditional_statement -> IF LPAREN exp RPAREN statement ELSE lbrace statements rbrace .

    RBRACE          reduce using rule 92 (conditional_statement -> IF LPAREN exp RPAREN statement ELSE lbrace statements rbrace .)
    COMMENT         reduce using rule 92 (conditional_statement -> IF LPAREN exp RPAREN statement ELSE lbrace statements rbrace .)
    LPAREN          reduce using rule 92 (conditional_statement -> IF LPAREN exp RPAREN statement ELSE lbrace statements rbrace .)
    VARIABLE        reduce using rule 92 (conditional_statement -> IF LPAREN exp RPAREN statement ELSE lbrace statements rbrace .)
    FOR             reduce using rule 92 (conditional_statement -> IF LPAREN exp RPAREN statement ELSE lbrace statements rbrace .)
    WHILE           reduce using rule 92 (conditional_statement -> IF LPAREN exp RPAREN statement ELSE lbrace statements rbrace .)
    DO              reduce using rule 92 (conditional_statement -> IF LPAREN exp RPAREN statement ELSE lbrace statements rbrace .)
    BREAK           reduce using rule 92 (conditional_statement -> IF LPAREN exp RPAREN statement ELSE lbrace statements rbrace .)
    CONTINUE        reduce using rule 92 (conditional_statement -> IF LPAREN exp RPAREN statement ELSE lbrace statements rbrace .)
    RETURN          reduce using rule 92 (conditional_statement -> IF LPAREN exp RPAREN statement ELSE lbrace statements rbrace .)
    IF              reduce using rule 92 (conditional_statement -> IF LPAREN exp RPAREN statement ELSE lbrace statements rbrace .)
    INT             reduce using rule 92 (conditional_statement -> IF LPAREN exp RPAREN statement ELSE lbrace statements rbrace .)
    FLOAT           reduce using rule 92 (conditional_statement -> IF LPAREN exp RPAREN statement ELSE lbrace statements rbrace .)
    CHAR            reduce using rule 92 (conditional_statement -> IF LPAREN exp RPAREN statement ELSE lbrace statements rbrace .)
    DOUBLE          reduce using rule 92 (conditional_statement -> IF LPAREN exp RPAREN statement ELSE lbrace statements rbrace .)
    VOID            reduce using rule 92 (conditional_statement -> IF LPAREN exp RPAREN statement ELSE lbrace statements rbrace .)
    SHORT           reduce using rule 92 (conditional_statement -> IF LPAREN exp RPAREN statement ELSE lbrace statements rbrace .)
    LONG            reduce using rule 92 (conditional_statement -> IF LPAREN exp RPAREN statement ELSE lbrace statements rbrace .)
    HEX_INT         reduce using rule 92 (conditional_statement -> IF LPAREN exp RPAREN statement ELSE lbrace statements rbrace .)
    DOT_REAL        reduce using rule 92 (conditional_statement -> IF LPAREN exp RPAREN statement ELSE lbrace statements rbrace .)
    EXP_REAL        reduce using rule 92 (conditional_statement -> IF LPAREN exp RPAREN statement ELSE lbrace statements rbrace .)
    DEC_INT         reduce using rule 92 (conditional_statement -> IF LPAREN exp RPAREN statement ELSE lbrace statements rbrace .)
    CHARACTER       reduce using rule 92 (conditional_statement -> IF LPAREN exp RPAREN statement ELSE lbrace statements rbrace .)
    MAIN            reduce using rule 92 (conditional_statement -> IF LPAREN exp RPAREN statement ELSE lbrace statements rbrace .)
    INCREMENT       reduce using rule 92 (conditional_statement -> IF LPAREN exp RPAREN statement ELSE lbrace statements rbrace .)
    DECREMENT       reduce using rule 92 (conditional_statement -> IF LPAREN exp RPAREN statement ELSE lbrace statements rbrace .)
    $end            reduce using rule 92 (conditional_statement -> IF LPAREN exp RPAREN statement ELSE lbrace statements rbrace .)
    ELSE            reduce using rule 92 (conditional_statement -> IF LPAREN exp RPAREN statement ELSE lbrace statements rbrace .)


state 255

    (91) conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace ELSE statement .

    RBRACE          reduce using rule 91 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace ELSE statement .)
    COMMENT         reduce using rule 91 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace ELSE statement .)
    LPAREN          reduce using rule 91 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace ELSE statement .)
    VARIABLE        reduce using rule 91 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace ELSE statement .)
    FOR             reduce using rule 91 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace ELSE statement .)
    WHILE           reduce using rule 91 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace ELSE statement .)
    DO              reduce using rule 91 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace ELSE statement .)
    BREAK           reduce using rule 91 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace ELSE statement .)
    CONTINUE        reduce using rule 91 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace ELSE statement .)
    RETURN          reduce using rule 91 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace ELSE statement .)
    IF              reduce using rule 91 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace ELSE statement .)
    INT             reduce using rule 91 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace ELSE statement .)
    FLOAT           reduce using rule 91 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace ELSE statement .)
    CHAR            reduce using rule 91 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace ELSE statement .)
    DOUBLE          reduce using rule 91 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace ELSE statement .)
    VOID            reduce using rule 91 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace ELSE statement .)
    SHORT           reduce using rule 91 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace ELSE statement .)
    LONG            reduce using rule 91 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace ELSE statement .)
    HEX_INT         reduce using rule 91 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace ELSE statement .)
    DOT_REAL        reduce using rule 91 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace ELSE statement .)
    EXP_REAL        reduce using rule 91 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace ELSE statement .)
    DEC_INT         reduce using rule 91 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace ELSE statement .)
    CHARACTER       reduce using rule 91 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace ELSE statement .)
    MAIN            reduce using rule 91 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace ELSE statement .)
    INCREMENT       reduce using rule 91 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace ELSE statement .)
    DECREMENT       reduce using rule 91 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace ELSE statement .)
    $end            reduce using rule 91 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace ELSE statement .)
    ELSE            reduce using rule 91 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace ELSE statement .)


state 256

    (93) conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace ELSE lbrace . statements rbrace
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (9) statement -> . conditional_statement
    (10) statement -> . COMMENT
    (15) declaration -> . type enum_list SEMI_COLON
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (74) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (75) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace statements rbrace
    (76) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (77) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace rbrace
    (78) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (79) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (80) iterative_statement -> . WHILE LPAREN exp RPAREN lbrace statements rbrace
    (81) iterative_statement -> . WHILE LPAREN exp RPAREN lbrace rbrace
    (82) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (83) iterative_statement -> . DO lbrace statements rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (84) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (85) iterative_statement -> . DO lbrace rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (94) function -> . normal_function
    (95) function -> . main_function
    (11) constant_statement -> . BREAK SEMI_COLON
    (12) constant_statement -> . CONTINUE SEMI_COLON
    (13) constant_statement -> . RETURN SEMI_COLON
    (14) constant_statement -> . RETURN exp SEMI_COLON
    (88) conditional_statement -> . IF LPAREN exp RPAREN statement
    (89) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace
    (90) conditional_statement -> . IF LPAREN exp RPAREN statement ELSE statement
    (91) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace ELSE statement
    (92) conditional_statement -> . IF LPAREN exp RPAREN statement ELSE lbrace statements rbrace
    (93) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace ELSE lbrace statements rbrace
    (26) type -> . INT
    (27) type -> . FLOAT
    (28) type -> . CHAR
    (29) type -> . DOUBLE
    (30) type -> . VOID
    (31) type -> . SHORT
    (32) type -> . LONG
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (104) normal_function -> . type VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (105) normal_function -> . type VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (106) normal_function -> . VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (107) normal_function -> . VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (108) normal_function -> . type VARIABLE LPAREN RPAREN lbrace statements rbrace
    (109) normal_function -> . type VARIABLE LPAREN RPAREN lbrace rbrace
    (110) normal_function -> . VARIABLE LPAREN RPAREN lbrace statements rbrace
    (111) normal_function -> . VARIABLE LPAREN RPAREN lbrace rbrace
    (96) main_function -> . type MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (97) main_function -> . type MAIN LPAREN parameters RPAREN lbrace rbrace
    (98) main_function -> . MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (99) main_function -> . MAIN LPAREN parameters RPAREN lbrace rbrace
    (100) main_function -> . type MAIN LPAREN RPAREN lbrace statements rbrace
    (101) main_function -> . type MAIN LPAREN RPAREN lbrace rbrace
    (102) main_function -> . MAIN LPAREN RPAREN lbrace statements rbrace
    (103) main_function -> . MAIN LPAREN RPAREN lbrace rbrace
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    COMMENT         shift and go to state 13
    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 28
    FOR             shift and go to state 25
    WHILE           shift and go to state 9
    DO              shift and go to state 4
    BREAK           shift and go to state 38
    CONTINUE        shift and go to state 39
    RETURN          shift and go to state 1
    IF              shift and go to state 31
    INT             shift and go to state 33
    FLOAT           shift and go to state 37
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 34
    VOID            shift and go to state 5
    SHORT           shift and go to state 10
    LONG            shift and go to state 41
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    MAIN            shift and go to state 14
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    function                       shift and go to state 23
    statements                     shift and go to state 261
    unary_expression               shift and go to state 29
    type                           shift and go to state 21
    normal_function                shift and go to state 36
    function_call                  shift and go to state 7
    conditional_statement          shift and go to state 17
    main_function                  shift and go to state 2
    constant_statement             shift and go to state 32
    statement                      shift and go to state 19
    declaration                    shift and go to state 27
    exp                            shift and go to state 40
    constant                       shift and go to state 11
    iterative_statement            shift and go to state 12
    unary_operator                 shift and go to state 22

state 257

    (24) num_list -> exp COMMA num_list .

    RBRACE          reduce using rule 24 (num_list -> exp COMMA num_list .)


state 258

    (21) enum_list -> VARIABLE LBIG exp RBIG EQUALS LBRACE num_list RBRACE COMMA . enum_list
    (16) enum_list -> . VARIABLE COMMA enum_list
    (17) enum_list -> . VARIABLE EQUALS exp COMMA enum_list
    (18) enum_list -> . VARIABLE
    (19) enum_list -> . VARIABLE EQUALS exp
    (20) enum_list -> . VARIABLE LBIG exp RBIG COMMA enum_list
    (21) enum_list -> . VARIABLE LBIG exp RBIG EQUALS LBRACE num_list RBRACE COMMA enum_list
    (22) enum_list -> . VARIABLE LBIG exp RBIG
    (23) enum_list -> . VARIABLE LBIG exp RBIG EQUALS LBRACE num_list RBRACE

    VARIABLE        shift and go to state 153

    enum_list                      shift and go to state 262

state 259

    (75) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace statements . rbrace
    (2) statements -> statements . statement
    (121) rbrace -> . RBRACE
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (9) statement -> . conditional_statement
    (10) statement -> . COMMENT
    (15) declaration -> . type enum_list SEMI_COLON
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (74) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (75) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace statements rbrace
    (76) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (77) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace rbrace
    (78) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (79) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (80) iterative_statement -> . WHILE LPAREN exp RPAREN lbrace statements rbrace
    (81) iterative_statement -> . WHILE LPAREN exp RPAREN lbrace rbrace
    (82) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (83) iterative_statement -> . DO lbrace statements rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (84) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (85) iterative_statement -> . DO lbrace rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (94) function -> . normal_function
    (95) function -> . main_function
    (11) constant_statement -> . BREAK SEMI_COLON
    (12) constant_statement -> . CONTINUE SEMI_COLON
    (13) constant_statement -> . RETURN SEMI_COLON
    (14) constant_statement -> . RETURN exp SEMI_COLON
    (88) conditional_statement -> . IF LPAREN exp RPAREN statement
    (89) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace
    (90) conditional_statement -> . IF LPAREN exp RPAREN statement ELSE statement
    (91) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace ELSE statement
    (92) conditional_statement -> . IF LPAREN exp RPAREN statement ELSE lbrace statements rbrace
    (93) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace ELSE lbrace statements rbrace
    (26) type -> . INT
    (27) type -> . FLOAT
    (28) type -> . CHAR
    (29) type -> . DOUBLE
    (30) type -> . VOID
    (31) type -> . SHORT
    (32) type -> . LONG
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (104) normal_function -> . type VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (105) normal_function -> . type VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (106) normal_function -> . VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (107) normal_function -> . VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (108) normal_function -> . type VARIABLE LPAREN RPAREN lbrace statements rbrace
    (109) normal_function -> . type VARIABLE LPAREN RPAREN lbrace rbrace
    (110) normal_function -> . VARIABLE LPAREN RPAREN lbrace statements rbrace
    (111) normal_function -> . VARIABLE LPAREN RPAREN lbrace rbrace
    (96) main_function -> . type MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (97) main_function -> . type MAIN LPAREN parameters RPAREN lbrace rbrace
    (98) main_function -> . MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (99) main_function -> . MAIN LPAREN parameters RPAREN lbrace rbrace
    (100) main_function -> . type MAIN LPAREN RPAREN lbrace statements rbrace
    (101) main_function -> . type MAIN LPAREN RPAREN lbrace rbrace
    (102) main_function -> . MAIN LPAREN RPAREN lbrace statements rbrace
    (103) main_function -> . MAIN LPAREN RPAREN lbrace rbrace
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    RBRACE          shift and go to state 95
    COMMENT         shift and go to state 13
    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 28
    FOR             shift and go to state 25
    WHILE           shift and go to state 9
    DO              shift and go to state 4
    BREAK           shift and go to state 38
    CONTINUE        shift and go to state 39
    RETURN          shift and go to state 1
    IF              shift and go to state 31
    INT             shift and go to state 33
    FLOAT           shift and go to state 37
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 34
    VOID            shift and go to state 5
    SHORT           shift and go to state 10
    LONG            shift and go to state 41
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    MAIN            shift and go to state 14
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    function                       shift and go to state 23
    rbrace                         shift and go to state 263
    unary_expression               shift and go to state 29
    type                           shift and go to state 21
    normal_function                shift and go to state 36
    function_call                  shift and go to state 7
    conditional_statement          shift and go to state 17
    main_function                  shift and go to state 2
    constant_statement             shift and go to state 32
    statement                      shift and go to state 45
    declaration                    shift and go to state 27
    exp                            shift and go to state 40
    constant                       shift and go to state 11
    iterative_statement            shift and go to state 12
    unary_operator                 shift and go to state 22

state 260

    (77) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace rbrace .

    RBRACE          reduce using rule 77 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace rbrace .)
    COMMENT         reduce using rule 77 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace rbrace .)
    LPAREN          reduce using rule 77 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace rbrace .)
    VARIABLE        reduce using rule 77 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace rbrace .)
    FOR             reduce using rule 77 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace rbrace .)
    WHILE           reduce using rule 77 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace rbrace .)
    DO              reduce using rule 77 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace rbrace .)
    BREAK           reduce using rule 77 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace rbrace .)
    CONTINUE        reduce using rule 77 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace rbrace .)
    RETURN          reduce using rule 77 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace rbrace .)
    IF              reduce using rule 77 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace rbrace .)
    INT             reduce using rule 77 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace rbrace .)
    FLOAT           reduce using rule 77 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace rbrace .)
    CHAR            reduce using rule 77 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace rbrace .)
    DOUBLE          reduce using rule 77 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace rbrace .)
    VOID            reduce using rule 77 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace rbrace .)
    SHORT           reduce using rule 77 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace rbrace .)
    LONG            reduce using rule 77 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace rbrace .)
    HEX_INT         reduce using rule 77 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace rbrace .)
    DOT_REAL        reduce using rule 77 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace rbrace .)
    EXP_REAL        reduce using rule 77 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace rbrace .)
    DEC_INT         reduce using rule 77 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace rbrace .)
    CHARACTER       reduce using rule 77 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace rbrace .)
    MAIN            reduce using rule 77 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace rbrace .)
    INCREMENT       reduce using rule 77 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace rbrace .)
    DECREMENT       reduce using rule 77 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace rbrace .)
    $end            reduce using rule 77 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace rbrace .)
    ELSE            reduce using rule 77 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace rbrace .)


state 261

    (93) conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace ELSE lbrace statements . rbrace
    (2) statements -> statements . statement
    (121) rbrace -> . RBRACE
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (9) statement -> . conditional_statement
    (10) statement -> . COMMENT
    (15) declaration -> . type enum_list SEMI_COLON
    (38) exp -> . exp ADD exp
    (39) exp -> . exp MINUS exp
    (40) exp -> . exp MULT exp
    (41) exp -> . exp DIV exp
    (42) exp -> . exp MOD exp
    (43) exp -> . exp L_OP exp
    (44) exp -> . exp G_OP exp
    (45) exp -> . exp LE_OP exp
    (46) exp -> . exp GE_OP exp
    (47) exp -> . exp NOTEQUALS exp
    (48) exp -> . exp EQUALS_OP exp
    (49) exp -> . exp OR_OP exp
    (50) exp -> . exp AND_OP exp
    (51) exp -> . exp MUL_ASSIGN exp
    (52) exp -> . exp DIV_ASSIGN exp
    (53) exp -> . exp MOD_ASSIGN exp
    (54) exp -> . exp ADD_ASSIGN exp
    (55) exp -> . exp SUB_ASSIGN exp
    (56) exp -> . exp LEFT_ASSIGN exp
    (57) exp -> . exp RIGHT_ASSIGN exp
    (58) exp -> . exp AND_ASSIGN exp
    (59) exp -> . exp XOR_ASSIGN exp
    (60) exp -> . exp OR_ASSIGN exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . unary_expression
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . constant
    (65) exp -> . VARIABLE
    (66) exp -> . VARIABLE LBIG exp RBIG
    (67) exp -> . function_call
    (74) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (75) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace statements rbrace
    (76) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (77) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace rbrace
    (78) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (79) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (80) iterative_statement -> . WHILE LPAREN exp RPAREN lbrace statements rbrace
    (81) iterative_statement -> . WHILE LPAREN exp RPAREN lbrace rbrace
    (82) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (83) iterative_statement -> . DO lbrace statements rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (84) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (85) iterative_statement -> . DO lbrace rbrace WHILE LPAREN exp RPAREN SEMI_COLON
    (94) function -> . normal_function
    (95) function -> . main_function
    (11) constant_statement -> . BREAK SEMI_COLON
    (12) constant_statement -> . CONTINUE SEMI_COLON
    (13) constant_statement -> . RETURN SEMI_COLON
    (14) constant_statement -> . RETURN exp SEMI_COLON
    (88) conditional_statement -> . IF LPAREN exp RPAREN statement
    (89) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace
    (90) conditional_statement -> . IF LPAREN exp RPAREN statement ELSE statement
    (91) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace ELSE statement
    (92) conditional_statement -> . IF LPAREN exp RPAREN statement ELSE lbrace statements rbrace
    (93) conditional_statement -> . IF LPAREN exp RPAREN lbrace statements rbrace ELSE lbrace statements rbrace
    (26) type -> . INT
    (27) type -> . FLOAT
    (28) type -> . CHAR
    (29) type -> . DOUBLE
    (30) type -> . VOID
    (31) type -> . SHORT
    (32) type -> . LONG
    (68) unary_expression -> . VARIABLE unary_operator
    (69) unary_expression -> . unary_operator VARIABLE
    (70) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (71) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (33) constant -> . HEX_INT
    (34) constant -> . DOT_REAL
    (35) constant -> . EXP_REAL
    (36) constant -> . DEC_INT
    (37) constant -> . CHARACTER
    (114) function_call -> . VARIABLE LPAREN arguments RPAREN
    (115) function_call -> . VARIABLE LPAREN RPAREN
    (104) normal_function -> . type VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (105) normal_function -> . type VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (106) normal_function -> . VARIABLE LPAREN parameters RPAREN lbrace statements rbrace
    (107) normal_function -> . VARIABLE LPAREN parameters RPAREN lbrace rbrace
    (108) normal_function -> . type VARIABLE LPAREN RPAREN lbrace statements rbrace
    (109) normal_function -> . type VARIABLE LPAREN RPAREN lbrace rbrace
    (110) normal_function -> . VARIABLE LPAREN RPAREN lbrace statements rbrace
    (111) normal_function -> . VARIABLE LPAREN RPAREN lbrace rbrace
    (96) main_function -> . type MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (97) main_function -> . type MAIN LPAREN parameters RPAREN lbrace rbrace
    (98) main_function -> . MAIN LPAREN parameters RPAREN lbrace statements rbrace
    (99) main_function -> . MAIN LPAREN parameters RPAREN lbrace rbrace
    (100) main_function -> . type MAIN LPAREN RPAREN lbrace statements rbrace
    (101) main_function -> . type MAIN LPAREN RPAREN lbrace rbrace
    (102) main_function -> . MAIN LPAREN RPAREN lbrace statements rbrace
    (103) main_function -> . MAIN LPAREN RPAREN lbrace rbrace
    (72) unary_operator -> . INCREMENT
    (73) unary_operator -> . DECREMENT

    RBRACE          shift and go to state 95
    COMMENT         shift and go to state 13
    LPAREN          shift and go to state 26
    VARIABLE        shift and go to state 28
    FOR             shift and go to state 25
    WHILE           shift and go to state 9
    DO              shift and go to state 4
    BREAK           shift and go to state 38
    CONTINUE        shift and go to state 39
    RETURN          shift and go to state 1
    IF              shift and go to state 31
    INT             shift and go to state 33
    FLOAT           shift and go to state 37
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 34
    VOID            shift and go to state 5
    SHORT           shift and go to state 10
    LONG            shift and go to state 41
    HEX_INT         shift and go to state 35
    DOT_REAL        shift and go to state 20
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 16
    CHARACTER       shift and go to state 6
    MAIN            shift and go to state 14
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 30

    function                       shift and go to state 23
    rbrace                         shift and go to state 264
    unary_expression               shift and go to state 29
    type                           shift and go to state 21
    normal_function                shift and go to state 36
    function_call                  shift and go to state 7
    conditional_statement          shift and go to state 17
    main_function                  shift and go to state 2
    constant_statement             shift and go to state 32
    statement                      shift and go to state 45
    declaration                    shift and go to state 27
    exp                            shift and go to state 40
    constant                       shift and go to state 11
    iterative_statement            shift and go to state 12
    unary_operator                 shift and go to state 22

state 262

    (21) enum_list -> VARIABLE LBIG exp RBIG EQUALS LBRACE num_list RBRACE COMMA enum_list .

    SEMI_COLON      reduce using rule 21 (enum_list -> VARIABLE LBIG exp RBIG EQUALS LBRACE num_list RBRACE COMMA enum_list .)


state 263

    (75) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace statements rbrace .

    RBRACE          reduce using rule 75 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace statements rbrace .)
    COMMENT         reduce using rule 75 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace statements rbrace .)
    LPAREN          reduce using rule 75 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace statements rbrace .)
    VARIABLE        reduce using rule 75 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace statements rbrace .)
    FOR             reduce using rule 75 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace statements rbrace .)
    WHILE           reduce using rule 75 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace statements rbrace .)
    DO              reduce using rule 75 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace statements rbrace .)
    BREAK           reduce using rule 75 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace statements rbrace .)
    CONTINUE        reduce using rule 75 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace statements rbrace .)
    RETURN          reduce using rule 75 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace statements rbrace .)
    IF              reduce using rule 75 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace statements rbrace .)
    INT             reduce using rule 75 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace statements rbrace .)
    FLOAT           reduce using rule 75 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace statements rbrace .)
    CHAR            reduce using rule 75 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace statements rbrace .)
    DOUBLE          reduce using rule 75 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace statements rbrace .)
    VOID            reduce using rule 75 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace statements rbrace .)
    SHORT           reduce using rule 75 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace statements rbrace .)
    LONG            reduce using rule 75 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace statements rbrace .)
    HEX_INT         reduce using rule 75 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace statements rbrace .)
    DOT_REAL        reduce using rule 75 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace statements rbrace .)
    EXP_REAL        reduce using rule 75 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace statements rbrace .)
    DEC_INT         reduce using rule 75 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace statements rbrace .)
    CHARACTER       reduce using rule 75 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace statements rbrace .)
    MAIN            reduce using rule 75 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace statements rbrace .)
    INCREMENT       reduce using rule 75 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace statements rbrace .)
    DECREMENT       reduce using rule 75 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace statements rbrace .)
    $end            reduce using rule 75 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace statements rbrace .)
    ELSE            reduce using rule 75 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN lbrace statements rbrace .)


state 264

    (93) conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace ELSE lbrace statements rbrace .

    RBRACE          reduce using rule 93 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace ELSE lbrace statements rbrace .)
    COMMENT         reduce using rule 93 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace ELSE lbrace statements rbrace .)
    LPAREN          reduce using rule 93 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace ELSE lbrace statements rbrace .)
    VARIABLE        reduce using rule 93 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace ELSE lbrace statements rbrace .)
    FOR             reduce using rule 93 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace ELSE lbrace statements rbrace .)
    WHILE           reduce using rule 93 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace ELSE lbrace statements rbrace .)
    DO              reduce using rule 93 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace ELSE lbrace statements rbrace .)
    BREAK           reduce using rule 93 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace ELSE lbrace statements rbrace .)
    CONTINUE        reduce using rule 93 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace ELSE lbrace statements rbrace .)
    RETURN          reduce using rule 93 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace ELSE lbrace statements rbrace .)
    IF              reduce using rule 93 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace ELSE lbrace statements rbrace .)
    INT             reduce using rule 93 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace ELSE lbrace statements rbrace .)
    FLOAT           reduce using rule 93 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace ELSE lbrace statements rbrace .)
    CHAR            reduce using rule 93 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace ELSE lbrace statements rbrace .)
    DOUBLE          reduce using rule 93 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace ELSE lbrace statements rbrace .)
    VOID            reduce using rule 93 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace ELSE lbrace statements rbrace .)
    SHORT           reduce using rule 93 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace ELSE lbrace statements rbrace .)
    LONG            reduce using rule 93 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace ELSE lbrace statements rbrace .)
    HEX_INT         reduce using rule 93 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace ELSE lbrace statements rbrace .)
    DOT_REAL        reduce using rule 93 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace ELSE lbrace statements rbrace .)
    EXP_REAL        reduce using rule 93 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace ELSE lbrace statements rbrace .)
    DEC_INT         reduce using rule 93 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace ELSE lbrace statements rbrace .)
    CHARACTER       reduce using rule 93 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace ELSE lbrace statements rbrace .)
    MAIN            reduce using rule 93 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace ELSE lbrace statements rbrace .)
    INCREMENT       reduce using rule 93 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace ELSE lbrace statements rbrace .)
    DECREMENT       reduce using rule 93 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace ELSE lbrace statements rbrace .)
    $end            reduce using rule 93 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace ELSE lbrace statements rbrace .)
    ELSE            reduce using rule 93 (conditional_statement -> IF LPAREN exp RPAREN lbrace statements rbrace ELSE lbrace statements rbrace .)

