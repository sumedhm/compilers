Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    RIGHT_OP
    DEFAULT
    LEFT_OP
    COLON
    TRUE
    COMMENT
    NEWLINE
    CASE
    LBIG
    TILDA
    DOT
    IF
    SIZEOF
    SINGLE_QUOTES
    ANDI
    ELSE
    AND
    CONDOP
    DOUBLE_QUOTES
    NOT
    SWITCH
    RBIG
    OR

Grammar

Rule 0     S' -> statements
Rule 1     statements -> statements statement
Rule 2     statements -> statement
Rule 3     statement -> declaration
Rule 4     statement -> exp SEMI_COLON
Rule 5     statement -> iterative_statement
Rule 6     statement -> function
Rule 7     statement -> constant_statement
Rule 8     constant_statement -> BREAK SEMI_COLON
Rule 9     constant_statement -> CONTINUE SEMI_COLON
Rule 10    constant_statement -> RETURN SEMI_COLON
Rule 11    constant_statement -> RETURN exp SEMI_COLON
Rule 12    declaration -> type enum_list SEMI_COLON
Rule 13    enum_list -> VARIABLE COMMA enum_list
Rule 14    enum_list -> VARIABLE EQUALS exp COMMA enum_list
Rule 15    enum_list -> VARIABLE
Rule 16    enum_list -> VARIABLE EQUALS exp
Rule 17    type -> INT
Rule 18    type -> FLOAT
Rule 19    type -> CHAR
Rule 20    type -> DOUBLE
Rule 21    type -> VOID
Rule 22    type -> SHORT
Rule 23    type -> LONG
Rule 24    constant -> HEX_INT
Rule 25    constant -> DOT_REAL
Rule 26    constant -> EXP_REAL
Rule 27    constant -> DEC_INT
Rule 28    constant -> CHARACTER
Rule 29    exp -> exp ADD exp
Rule 30    exp -> exp MINUS exp
Rule 31    exp -> exp MULT exp
Rule 32    exp -> exp DIV exp
Rule 33    exp -> exp MOD exp
Rule 34    exp -> exp L_OP exp
Rule 35    exp -> exp G_OP exp
Rule 36    exp -> exp LE_OP exp
Rule 37    exp -> exp GE_OP exp
Rule 38    exp -> exp NOTEQUALS exp
Rule 39    exp -> exp EQUALS_OP exp
Rule 40    exp -> exp OR_OP exp
Rule 41    exp -> exp AND_OP exp
Rule 42    exp -> exp MUL_ASSIGN exp
Rule 43    exp -> exp DIV_ASSIGN exp
Rule 44    exp -> exp MOD_ASSIGN exp
Rule 45    exp -> exp ADD_ASSIGN exp
Rule 46    exp -> exp SUB_ASSIGN exp
Rule 47    exp -> exp LEFT_ASSIGN exp
Rule 48    exp -> exp RIGHT_ASSIGN exp
Rule 49    exp -> exp AND_ASSIGN exp
Rule 50    exp -> exp XOR_ASSIGN exp
Rule 51    exp -> exp OR_ASSIGN exp
Rule 52    exp -> exp EQUALS exp
Rule 53    exp -> unary_expression
Rule 54    exp -> LPAREN exp RPAREN
Rule 55    exp -> constant
Rule 56    exp -> VARIABLE
Rule 57    unary_expression -> VARIABLE unary_operator
Rule 58    unary_expression -> unary_operator VARIABLE
Rule 59    unary_operator -> INCREMENT
Rule 60    unary_operator -> DECREMENT
Rule 61    iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
Rule 62    iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE
Rule 63    iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
Rule 64    iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE
Rule 65    iterative_statement -> WHILE LPAREN exp RPAREN statement
Rule 66    iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON
Rule 67    iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE
Rule 68    iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE
Rule 69    iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON
Rule 70    iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
Rule 71    iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
Rule 72    iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
Rule 73    iterative_exp -> exp COMMA iterative_exp
Rule 74    iterative_exp -> exp
Rule 75    function -> normal_function
Rule 76    function -> main_function
Rule 77    main_function -> type MAIN LPAREN arguments RPAREN LBRACE statements RBRACE
Rule 78    main_function -> type MAIN LPAREN arguments RPAREN LBRACE RBRACE
Rule 79    normal_function -> type VARIABLE LPAREN arguments RPAREN LBRACE statements RBRACE
Rule 80    normal_function -> type VARIABLE LPAREN arguments RPAREN LBRACE RBRACE
Rule 81    arguments -> empty
Rule 82    empty -> <empty>

Terminals, with rules where they appear

ADD                  : 29
ADD_ASSIGN           : 45
AND                  : 
ANDI                 : 
AND_ASSIGN           : 49
AND_OP               : 41
BREAK                : 8
CASE                 : 
CHAR                 : 19
CHARACTER            : 28
COLON                : 
COMMA                : 13 14 73
COMMENT              : 
CONDOP               : 
CONTINUE             : 9
DECREMENT            : 60
DEC_INT              : 27
DEFAULT              : 
DIV                  : 32
DIV_ASSIGN           : 43
DO                   : 69 70 71 72
DOT                  : 
DOT_REAL             : 25
DOUBLE               : 20
DOUBLE_QUOTES        : 
ELSE                 : 
EQUALS               : 14 16 52
EQUALS_OP            : 39
EXP_REAL             : 26
FLOAT                : 18
FOR                  : 61 62 63 64
GE_OP                : 37
G_OP                 : 35
HEX_INT              : 24
IF                   : 
INCREMENT            : 59
INT                  : 17
LBIG                 : 
LBRACE               : 62 64 67 68 70 72 77 78 79 80
LEFT_ASSIGN          : 47
LEFT_OP              : 
LE_OP                : 36
LONG                 : 23
LPAREN               : 54 61 62 63 64 65 66 67 68 69 70 71 72 77 78 79 80
L_OP                 : 34
MAIN                 : 77 78
MINUS                : 30
MOD                  : 33
MOD_ASSIGN           : 44
MULT                 : 31
MUL_ASSIGN           : 42
NEWLINE              : 
NOT                  : 
NOTEQUALS            : 38
OR                   : 
OR_ASSIGN            : 51
OR_OP                : 40
RBIG                 : 
RBRACE               : 62 64 67 68 70 72 77 78 79 80
RETURN               : 10 11
RIGHT_ASSIGN         : 48
RIGHT_OP             : 
RPAREN               : 54 61 62 63 64 65 66 67 68 69 70 71 72 77 78 79 80
SEMI_COLON           : 4 8 9 10 11 12 61 61 62 62 63 63 63 64 64 66 69 70 71 71 72
SHORT                : 22
SINGLE_QUOTES        : 
SIZEOF               : 
SUB_ASSIGN           : 46
SWITCH               : 
TILDA                : 
TRUE                 : 
VARIABLE             : 13 14 15 16 56 57 58 79 80
VOID                 : 21
WHILE                : 65 66 67 68 69 70 71 72
XOR_ASSIGN           : 50
error                : 

Nonterminals, with rules where they appear

arguments            : 77 78 79 80
constant             : 55
constant_statement   : 7
declaration          : 3
empty                : 81
enum_list            : 12 13 14
exp                  : 4 11 14 16 29 29 30 30 31 31 32 32 33 33 34 34 35 35 36 36 37 37 38 38 39 39 40 40 41 41 42 42 43 43 44 44 45 45 46 46 47 47 48 48 49 49 50 50 51 51 52 52 54 65 66 67 68 69 70 71 72 73 74
function             : 6
iterative_exp        : 61 61 61 62 62 62 63 63 63 64 64 64 73
iterative_statement  : 5
main_function        : 76
normal_function      : 75
statement            : 1 2 61 65 69
statements           : 1 62 67 70 77 79 0
type                 : 12 77 78 79 80
unary_expression     : 53
unary_operator       : 57 58

Parsing method: LALR

state 0

    (0) S' -> . statements
    (1) statements -> . statements statement
    (2) statements -> . statement
    (3) statement -> . declaration
    (4) statement -> . exp SEMI_COLON
    (5) statement -> . iterative_statement
    (6) statement -> . function
    (7) statement -> . constant_statement
    (12) declaration -> . type enum_list SEMI_COLON
    (29) exp -> . exp ADD exp
    (30) exp -> . exp MINUS exp
    (31) exp -> . exp MULT exp
    (32) exp -> . exp DIV exp
    (33) exp -> . exp MOD exp
    (34) exp -> . exp L_OP exp
    (35) exp -> . exp G_OP exp
    (36) exp -> . exp LE_OP exp
    (37) exp -> . exp GE_OP exp
    (38) exp -> . exp NOTEQUALS exp
    (39) exp -> . exp EQUALS_OP exp
    (40) exp -> . exp OR_OP exp
    (41) exp -> . exp AND_OP exp
    (42) exp -> . exp MUL_ASSIGN exp
    (43) exp -> . exp DIV_ASSIGN exp
    (44) exp -> . exp MOD_ASSIGN exp
    (45) exp -> . exp ADD_ASSIGN exp
    (46) exp -> . exp SUB_ASSIGN exp
    (47) exp -> . exp LEFT_ASSIGN exp
    (48) exp -> . exp RIGHT_ASSIGN exp
    (49) exp -> . exp AND_ASSIGN exp
    (50) exp -> . exp XOR_ASSIGN exp
    (51) exp -> . exp OR_ASSIGN exp
    (52) exp -> . exp EQUALS exp
    (53) exp -> . unary_expression
    (54) exp -> . LPAREN exp RPAREN
    (55) exp -> . constant
    (56) exp -> . VARIABLE
    (61) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (62) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE
    (63) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (64) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE
    (65) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (66) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (67) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE statements RBRACE
    (68) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (69) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (70) iterative_statement -> . DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (71) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (72) iterative_statement -> . DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (75) function -> . normal_function
    (76) function -> . main_function
    (8) constant_statement -> . BREAK SEMI_COLON
    (9) constant_statement -> . CONTINUE SEMI_COLON
    (10) constant_statement -> . RETURN SEMI_COLON
    (11) constant_statement -> . RETURN exp SEMI_COLON
    (17) type -> . INT
    (18) type -> . FLOAT
    (19) type -> . CHAR
    (20) type -> . DOUBLE
    (21) type -> . VOID
    (22) type -> . SHORT
    (23) type -> . LONG
    (57) unary_expression -> . VARIABLE unary_operator
    (58) unary_expression -> . unary_operator VARIABLE
    (24) constant -> . HEX_INT
    (25) constant -> . DOT_REAL
    (26) constant -> . EXP_REAL
    (27) constant -> . DEC_INT
    (28) constant -> . CHARACTER
    (79) normal_function -> . type VARIABLE LPAREN arguments RPAREN LBRACE statements RBRACE
    (80) normal_function -> . type VARIABLE LPAREN arguments RPAREN LBRACE RBRACE
    (77) main_function -> . type MAIN LPAREN arguments RPAREN LBRACE statements RBRACE
    (78) main_function -> . type MAIN LPAREN arguments RPAREN LBRACE RBRACE
    (59) unary_operator -> . INCREMENT
    (60) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 21
    VARIABLE        shift and go to state 23
    FOR             shift and go to state 20
    WHILE           shift and go to state 8
    DO              shift and go to state 4
    BREAK           shift and go to state 32
    CONTINUE        shift and go to state 33
    RETURN          shift and go to state 1
    INT             shift and go to state 27
    FLOAT           shift and go to state 31
    CHAR            shift and go to state 7
    DOUBLE          shift and go to state 28
    VOID            shift and go to state 5
    SHORT           shift and go to state 9
    LONG            shift and go to state 35
    HEX_INT         shift and go to state 29
    DOT_REAL        shift and go to state 16
    EXP_REAL        shift and go to state 13
    DEC_INT         shift and go to state 14
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 12
    DECREMENT       shift and go to state 25

    function                       shift and go to state 19
    main_function                  shift and go to state 2
    statements                     shift and go to state 3
    statement                      shift and go to state 15
    unary_expression               shift and go to state 24
    type                           shift and go to state 17
    normal_function                shift and go to state 30
    exp                            shift and go to state 34
    declaration                    shift and go to state 22
    constant_statement             shift and go to state 26
    constant                       shift and go to state 10
    iterative_statement            shift and go to state 11
    unary_operator                 shift and go to state 18

state 1

    (10) constant_statement -> RETURN . SEMI_COLON
    (11) constant_statement -> RETURN . exp SEMI_COLON
    (29) exp -> . exp ADD exp
    (30) exp -> . exp MINUS exp
    (31) exp -> . exp MULT exp
    (32) exp -> . exp DIV exp
    (33) exp -> . exp MOD exp
    (34) exp -> . exp L_OP exp
    (35) exp -> . exp G_OP exp
    (36) exp -> . exp LE_OP exp
    (37) exp -> . exp GE_OP exp
    (38) exp -> . exp NOTEQUALS exp
    (39) exp -> . exp EQUALS_OP exp
    (40) exp -> . exp OR_OP exp
    (41) exp -> . exp AND_OP exp
    (42) exp -> . exp MUL_ASSIGN exp
    (43) exp -> . exp DIV_ASSIGN exp
    (44) exp -> . exp MOD_ASSIGN exp
    (45) exp -> . exp ADD_ASSIGN exp
    (46) exp -> . exp SUB_ASSIGN exp
    (47) exp -> . exp LEFT_ASSIGN exp
    (48) exp -> . exp RIGHT_ASSIGN exp
    (49) exp -> . exp AND_ASSIGN exp
    (50) exp -> . exp XOR_ASSIGN exp
    (51) exp -> . exp OR_ASSIGN exp
    (52) exp -> . exp EQUALS exp
    (53) exp -> . unary_expression
    (54) exp -> . LPAREN exp RPAREN
    (55) exp -> . constant
    (56) exp -> . VARIABLE
    (57) unary_expression -> . VARIABLE unary_operator
    (58) unary_expression -> . unary_operator VARIABLE
    (24) constant -> . HEX_INT
    (25) constant -> . DOT_REAL
    (26) constant -> . EXP_REAL
    (27) constant -> . DEC_INT
    (28) constant -> . CHARACTER
    (59) unary_operator -> . INCREMENT
    (60) unary_operator -> . DECREMENT

    SEMI_COLON      shift and go to state 36
    LPAREN          shift and go to state 21
    VARIABLE        shift and go to state 23
    HEX_INT         shift and go to state 29
    DOT_REAL        shift and go to state 16
    EXP_REAL        shift and go to state 13
    DEC_INT         shift and go to state 14
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 12
    DECREMENT       shift and go to state 25

    constant                       shift and go to state 10
    unary_expression               shift and go to state 24
    exp                            shift and go to state 37
    unary_operator                 shift and go to state 18

state 2

    (76) function -> main_function .

    LPAREN          reduce using rule 76 (function -> main_function .)
    VARIABLE        reduce using rule 76 (function -> main_function .)
    FOR             reduce using rule 76 (function -> main_function .)
    WHILE           reduce using rule 76 (function -> main_function .)
    DO              reduce using rule 76 (function -> main_function .)
    BREAK           reduce using rule 76 (function -> main_function .)
    CONTINUE        reduce using rule 76 (function -> main_function .)
    RETURN          reduce using rule 76 (function -> main_function .)
    INT             reduce using rule 76 (function -> main_function .)
    FLOAT           reduce using rule 76 (function -> main_function .)
    CHAR            reduce using rule 76 (function -> main_function .)
    DOUBLE          reduce using rule 76 (function -> main_function .)
    VOID            reduce using rule 76 (function -> main_function .)
    SHORT           reduce using rule 76 (function -> main_function .)
    LONG            reduce using rule 76 (function -> main_function .)
    HEX_INT         reduce using rule 76 (function -> main_function .)
    DOT_REAL        reduce using rule 76 (function -> main_function .)
    EXP_REAL        reduce using rule 76 (function -> main_function .)
    DEC_INT         reduce using rule 76 (function -> main_function .)
    CHARACTER       reduce using rule 76 (function -> main_function .)
    INCREMENT       reduce using rule 76 (function -> main_function .)
    DECREMENT       reduce using rule 76 (function -> main_function .)
    $end            reduce using rule 76 (function -> main_function .)
    RBRACE          reduce using rule 76 (function -> main_function .)


state 3

    (0) S' -> statements .
    (1) statements -> statements . statement
    (3) statement -> . declaration
    (4) statement -> . exp SEMI_COLON
    (5) statement -> . iterative_statement
    (6) statement -> . function
    (7) statement -> . constant_statement
    (12) declaration -> . type enum_list SEMI_COLON
    (29) exp -> . exp ADD exp
    (30) exp -> . exp MINUS exp
    (31) exp -> . exp MULT exp
    (32) exp -> . exp DIV exp
    (33) exp -> . exp MOD exp
    (34) exp -> . exp L_OP exp
    (35) exp -> . exp G_OP exp
    (36) exp -> . exp LE_OP exp
    (37) exp -> . exp GE_OP exp
    (38) exp -> . exp NOTEQUALS exp
    (39) exp -> . exp EQUALS_OP exp
    (40) exp -> . exp OR_OP exp
    (41) exp -> . exp AND_OP exp
    (42) exp -> . exp MUL_ASSIGN exp
    (43) exp -> . exp DIV_ASSIGN exp
    (44) exp -> . exp MOD_ASSIGN exp
    (45) exp -> . exp ADD_ASSIGN exp
    (46) exp -> . exp SUB_ASSIGN exp
    (47) exp -> . exp LEFT_ASSIGN exp
    (48) exp -> . exp RIGHT_ASSIGN exp
    (49) exp -> . exp AND_ASSIGN exp
    (50) exp -> . exp XOR_ASSIGN exp
    (51) exp -> . exp OR_ASSIGN exp
    (52) exp -> . exp EQUALS exp
    (53) exp -> . unary_expression
    (54) exp -> . LPAREN exp RPAREN
    (55) exp -> . constant
    (56) exp -> . VARIABLE
    (61) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (62) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE
    (63) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (64) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE
    (65) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (66) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (67) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE statements RBRACE
    (68) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (69) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (70) iterative_statement -> . DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (71) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (72) iterative_statement -> . DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (75) function -> . normal_function
    (76) function -> . main_function
    (8) constant_statement -> . BREAK SEMI_COLON
    (9) constant_statement -> . CONTINUE SEMI_COLON
    (10) constant_statement -> . RETURN SEMI_COLON
    (11) constant_statement -> . RETURN exp SEMI_COLON
    (17) type -> . INT
    (18) type -> . FLOAT
    (19) type -> . CHAR
    (20) type -> . DOUBLE
    (21) type -> . VOID
    (22) type -> . SHORT
    (23) type -> . LONG
    (57) unary_expression -> . VARIABLE unary_operator
    (58) unary_expression -> . unary_operator VARIABLE
    (24) constant -> . HEX_INT
    (25) constant -> . DOT_REAL
    (26) constant -> . EXP_REAL
    (27) constant -> . DEC_INT
    (28) constant -> . CHARACTER
    (79) normal_function -> . type VARIABLE LPAREN arguments RPAREN LBRACE statements RBRACE
    (80) normal_function -> . type VARIABLE LPAREN arguments RPAREN LBRACE RBRACE
    (77) main_function -> . type MAIN LPAREN arguments RPAREN LBRACE statements RBRACE
    (78) main_function -> . type MAIN LPAREN arguments RPAREN LBRACE RBRACE
    (59) unary_operator -> . INCREMENT
    (60) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 21
    VARIABLE        shift and go to state 23
    FOR             shift and go to state 20
    WHILE           shift and go to state 8
    DO              shift and go to state 4
    BREAK           shift and go to state 32
    CONTINUE        shift and go to state 33
    RETURN          shift and go to state 1
    INT             shift and go to state 27
    FLOAT           shift and go to state 31
    CHAR            shift and go to state 7
    DOUBLE          shift and go to state 28
    VOID            shift and go to state 5
    SHORT           shift and go to state 9
    LONG            shift and go to state 35
    HEX_INT         shift and go to state 29
    DOT_REAL        shift and go to state 16
    EXP_REAL        shift and go to state 13
    DEC_INT         shift and go to state 14
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 12
    DECREMENT       shift and go to state 25

    function                       shift and go to state 19
    main_function                  shift and go to state 2
    statement                      shift and go to state 38
    unary_expression               shift and go to state 24
    type                           shift and go to state 17
    normal_function                shift and go to state 30
    exp                            shift and go to state 34
    declaration                    shift and go to state 22
    constant_statement             shift and go to state 26
    constant                       shift and go to state 10
    iterative_statement            shift and go to state 11
    unary_operator                 shift and go to state 18

state 4

    (69) iterative_statement -> DO . statement WHILE LPAREN exp RPAREN SEMI_COLON
    (70) iterative_statement -> DO . LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (71) iterative_statement -> DO . SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (72) iterative_statement -> DO . LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (3) statement -> . declaration
    (4) statement -> . exp SEMI_COLON
    (5) statement -> . iterative_statement
    (6) statement -> . function
    (7) statement -> . constant_statement
    (12) declaration -> . type enum_list SEMI_COLON
    (29) exp -> . exp ADD exp
    (30) exp -> . exp MINUS exp
    (31) exp -> . exp MULT exp
    (32) exp -> . exp DIV exp
    (33) exp -> . exp MOD exp
    (34) exp -> . exp L_OP exp
    (35) exp -> . exp G_OP exp
    (36) exp -> . exp LE_OP exp
    (37) exp -> . exp GE_OP exp
    (38) exp -> . exp NOTEQUALS exp
    (39) exp -> . exp EQUALS_OP exp
    (40) exp -> . exp OR_OP exp
    (41) exp -> . exp AND_OP exp
    (42) exp -> . exp MUL_ASSIGN exp
    (43) exp -> . exp DIV_ASSIGN exp
    (44) exp -> . exp MOD_ASSIGN exp
    (45) exp -> . exp ADD_ASSIGN exp
    (46) exp -> . exp SUB_ASSIGN exp
    (47) exp -> . exp LEFT_ASSIGN exp
    (48) exp -> . exp RIGHT_ASSIGN exp
    (49) exp -> . exp AND_ASSIGN exp
    (50) exp -> . exp XOR_ASSIGN exp
    (51) exp -> . exp OR_ASSIGN exp
    (52) exp -> . exp EQUALS exp
    (53) exp -> . unary_expression
    (54) exp -> . LPAREN exp RPAREN
    (55) exp -> . constant
    (56) exp -> . VARIABLE
    (61) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (62) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE
    (63) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (64) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE
    (65) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (66) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (67) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE statements RBRACE
    (68) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (69) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (70) iterative_statement -> . DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (71) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (72) iterative_statement -> . DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (75) function -> . normal_function
    (76) function -> . main_function
    (8) constant_statement -> . BREAK SEMI_COLON
    (9) constant_statement -> . CONTINUE SEMI_COLON
    (10) constant_statement -> . RETURN SEMI_COLON
    (11) constant_statement -> . RETURN exp SEMI_COLON
    (17) type -> . INT
    (18) type -> . FLOAT
    (19) type -> . CHAR
    (20) type -> . DOUBLE
    (21) type -> . VOID
    (22) type -> . SHORT
    (23) type -> . LONG
    (57) unary_expression -> . VARIABLE unary_operator
    (58) unary_expression -> . unary_operator VARIABLE
    (24) constant -> . HEX_INT
    (25) constant -> . DOT_REAL
    (26) constant -> . EXP_REAL
    (27) constant -> . DEC_INT
    (28) constant -> . CHARACTER
    (79) normal_function -> . type VARIABLE LPAREN arguments RPAREN LBRACE statements RBRACE
    (80) normal_function -> . type VARIABLE LPAREN arguments RPAREN LBRACE RBRACE
    (77) main_function -> . type MAIN LPAREN arguments RPAREN LBRACE statements RBRACE
    (78) main_function -> . type MAIN LPAREN arguments RPAREN LBRACE RBRACE
    (59) unary_operator -> . INCREMENT
    (60) unary_operator -> . DECREMENT

    LBRACE          shift and go to state 41
    SEMI_COLON      shift and go to state 39
    LPAREN          shift and go to state 21
    VARIABLE        shift and go to state 23
    FOR             shift and go to state 20
    WHILE           shift and go to state 8
    DO              shift and go to state 4
    BREAK           shift and go to state 32
    CONTINUE        shift and go to state 33
    RETURN          shift and go to state 1
    INT             shift and go to state 27
    FLOAT           shift and go to state 31
    CHAR            shift and go to state 7
    DOUBLE          shift and go to state 28
    VOID            shift and go to state 5
    SHORT           shift and go to state 9
    LONG            shift and go to state 35
    HEX_INT         shift and go to state 29
    DOT_REAL        shift and go to state 16
    EXP_REAL        shift and go to state 13
    DEC_INT         shift and go to state 14
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 12
    DECREMENT       shift and go to state 25

    function                       shift and go to state 19
    main_function                  shift and go to state 2
    statement                      shift and go to state 40
    unary_expression               shift and go to state 24
    type                           shift and go to state 17
    normal_function                shift and go to state 30
    exp                            shift and go to state 34
    declaration                    shift and go to state 22
    constant_statement             shift and go to state 26
    constant                       shift and go to state 10
    iterative_statement            shift and go to state 11
    unary_operator                 shift and go to state 18

state 5

    (21) type -> VOID .

    VARIABLE        reduce using rule 21 (type -> VOID .)
    MAIN            reduce using rule 21 (type -> VOID .)


state 6

    (28) constant -> CHARACTER .

    ADD             reduce using rule 28 (constant -> CHARACTER .)
    MINUS           reduce using rule 28 (constant -> CHARACTER .)
    MULT            reduce using rule 28 (constant -> CHARACTER .)
    DIV             reduce using rule 28 (constant -> CHARACTER .)
    MOD             reduce using rule 28 (constant -> CHARACTER .)
    L_OP            reduce using rule 28 (constant -> CHARACTER .)
    G_OP            reduce using rule 28 (constant -> CHARACTER .)
    LE_OP           reduce using rule 28 (constant -> CHARACTER .)
    GE_OP           reduce using rule 28 (constant -> CHARACTER .)
    NOTEQUALS       reduce using rule 28 (constant -> CHARACTER .)
    EQUALS_OP       reduce using rule 28 (constant -> CHARACTER .)
    OR_OP           reduce using rule 28 (constant -> CHARACTER .)
    AND_OP          reduce using rule 28 (constant -> CHARACTER .)
    MUL_ASSIGN      reduce using rule 28 (constant -> CHARACTER .)
    DIV_ASSIGN      reduce using rule 28 (constant -> CHARACTER .)
    MOD_ASSIGN      reduce using rule 28 (constant -> CHARACTER .)
    ADD_ASSIGN      reduce using rule 28 (constant -> CHARACTER .)
    SUB_ASSIGN      reduce using rule 28 (constant -> CHARACTER .)
    LEFT_ASSIGN     reduce using rule 28 (constant -> CHARACTER .)
    RIGHT_ASSIGN    reduce using rule 28 (constant -> CHARACTER .)
    AND_ASSIGN      reduce using rule 28 (constant -> CHARACTER .)
    XOR_ASSIGN      reduce using rule 28 (constant -> CHARACTER .)
    OR_ASSIGN       reduce using rule 28 (constant -> CHARACTER .)
    EQUALS          reduce using rule 28 (constant -> CHARACTER .)
    SEMI_COLON      reduce using rule 28 (constant -> CHARACTER .)
    RPAREN          reduce using rule 28 (constant -> CHARACTER .)
    COMMA           reduce using rule 28 (constant -> CHARACTER .)


state 7

    (19) type -> CHAR .

    VARIABLE        reduce using rule 19 (type -> CHAR .)
    MAIN            reduce using rule 19 (type -> CHAR .)


state 8

    (65) iterative_statement -> WHILE . LPAREN exp RPAREN statement
    (66) iterative_statement -> WHILE . LPAREN exp RPAREN SEMI_COLON
    (67) iterative_statement -> WHILE . LPAREN exp RPAREN LBRACE statements RBRACE
    (68) iterative_statement -> WHILE . LPAREN exp RPAREN LBRACE RBRACE

    LPAREN          shift and go to state 42


state 9

    (22) type -> SHORT .

    VARIABLE        reduce using rule 22 (type -> SHORT .)
    MAIN            reduce using rule 22 (type -> SHORT .)


state 10

    (55) exp -> constant .

    ADD             reduce using rule 55 (exp -> constant .)
    MINUS           reduce using rule 55 (exp -> constant .)
    MULT            reduce using rule 55 (exp -> constant .)
    DIV             reduce using rule 55 (exp -> constant .)
    MOD             reduce using rule 55 (exp -> constant .)
    L_OP            reduce using rule 55 (exp -> constant .)
    G_OP            reduce using rule 55 (exp -> constant .)
    LE_OP           reduce using rule 55 (exp -> constant .)
    GE_OP           reduce using rule 55 (exp -> constant .)
    NOTEQUALS       reduce using rule 55 (exp -> constant .)
    EQUALS_OP       reduce using rule 55 (exp -> constant .)
    OR_OP           reduce using rule 55 (exp -> constant .)
    AND_OP          reduce using rule 55 (exp -> constant .)
    MUL_ASSIGN      reduce using rule 55 (exp -> constant .)
    DIV_ASSIGN      reduce using rule 55 (exp -> constant .)
    MOD_ASSIGN      reduce using rule 55 (exp -> constant .)
    ADD_ASSIGN      reduce using rule 55 (exp -> constant .)
    SUB_ASSIGN      reduce using rule 55 (exp -> constant .)
    LEFT_ASSIGN     reduce using rule 55 (exp -> constant .)
    RIGHT_ASSIGN    reduce using rule 55 (exp -> constant .)
    AND_ASSIGN      reduce using rule 55 (exp -> constant .)
    XOR_ASSIGN      reduce using rule 55 (exp -> constant .)
    OR_ASSIGN       reduce using rule 55 (exp -> constant .)
    EQUALS          reduce using rule 55 (exp -> constant .)
    SEMI_COLON      reduce using rule 55 (exp -> constant .)
    RPAREN          reduce using rule 55 (exp -> constant .)
    COMMA           reduce using rule 55 (exp -> constant .)


state 11

    (5) statement -> iterative_statement .

    LPAREN          reduce using rule 5 (statement -> iterative_statement .)
    VARIABLE        reduce using rule 5 (statement -> iterative_statement .)
    FOR             reduce using rule 5 (statement -> iterative_statement .)
    WHILE           reduce using rule 5 (statement -> iterative_statement .)
    DO              reduce using rule 5 (statement -> iterative_statement .)
    BREAK           reduce using rule 5 (statement -> iterative_statement .)
    CONTINUE        reduce using rule 5 (statement -> iterative_statement .)
    RETURN          reduce using rule 5 (statement -> iterative_statement .)
    INT             reduce using rule 5 (statement -> iterative_statement .)
    FLOAT           reduce using rule 5 (statement -> iterative_statement .)
    CHAR            reduce using rule 5 (statement -> iterative_statement .)
    DOUBLE          reduce using rule 5 (statement -> iterative_statement .)
    VOID            reduce using rule 5 (statement -> iterative_statement .)
    SHORT           reduce using rule 5 (statement -> iterative_statement .)
    LONG            reduce using rule 5 (statement -> iterative_statement .)
    HEX_INT         reduce using rule 5 (statement -> iterative_statement .)
    DOT_REAL        reduce using rule 5 (statement -> iterative_statement .)
    EXP_REAL        reduce using rule 5 (statement -> iterative_statement .)
    DEC_INT         reduce using rule 5 (statement -> iterative_statement .)
    CHARACTER       reduce using rule 5 (statement -> iterative_statement .)
    INCREMENT       reduce using rule 5 (statement -> iterative_statement .)
    DECREMENT       reduce using rule 5 (statement -> iterative_statement .)
    $end            reduce using rule 5 (statement -> iterative_statement .)
    RBRACE          reduce using rule 5 (statement -> iterative_statement .)


state 12

    (59) unary_operator -> INCREMENT .

    VARIABLE        reduce using rule 59 (unary_operator -> INCREMENT .)
    SEMI_COLON      reduce using rule 59 (unary_operator -> INCREMENT .)
    ADD             reduce using rule 59 (unary_operator -> INCREMENT .)
    MINUS           reduce using rule 59 (unary_operator -> INCREMENT .)
    MULT            reduce using rule 59 (unary_operator -> INCREMENT .)
    DIV             reduce using rule 59 (unary_operator -> INCREMENT .)
    MOD             reduce using rule 59 (unary_operator -> INCREMENT .)
    L_OP            reduce using rule 59 (unary_operator -> INCREMENT .)
    G_OP            reduce using rule 59 (unary_operator -> INCREMENT .)
    LE_OP           reduce using rule 59 (unary_operator -> INCREMENT .)
    GE_OP           reduce using rule 59 (unary_operator -> INCREMENT .)
    NOTEQUALS       reduce using rule 59 (unary_operator -> INCREMENT .)
    EQUALS_OP       reduce using rule 59 (unary_operator -> INCREMENT .)
    OR_OP           reduce using rule 59 (unary_operator -> INCREMENT .)
    AND_OP          reduce using rule 59 (unary_operator -> INCREMENT .)
    MUL_ASSIGN      reduce using rule 59 (unary_operator -> INCREMENT .)
    DIV_ASSIGN      reduce using rule 59 (unary_operator -> INCREMENT .)
    MOD_ASSIGN      reduce using rule 59 (unary_operator -> INCREMENT .)
    ADD_ASSIGN      reduce using rule 59 (unary_operator -> INCREMENT .)
    SUB_ASSIGN      reduce using rule 59 (unary_operator -> INCREMENT .)
    LEFT_ASSIGN     reduce using rule 59 (unary_operator -> INCREMENT .)
    RIGHT_ASSIGN    reduce using rule 59 (unary_operator -> INCREMENT .)
    AND_ASSIGN      reduce using rule 59 (unary_operator -> INCREMENT .)
    XOR_ASSIGN      reduce using rule 59 (unary_operator -> INCREMENT .)
    OR_ASSIGN       reduce using rule 59 (unary_operator -> INCREMENT .)
    EQUALS          reduce using rule 59 (unary_operator -> INCREMENT .)
    RPAREN          reduce using rule 59 (unary_operator -> INCREMENT .)
    COMMA           reduce using rule 59 (unary_operator -> INCREMENT .)


state 13

    (26) constant -> EXP_REAL .

    ADD             reduce using rule 26 (constant -> EXP_REAL .)
    MINUS           reduce using rule 26 (constant -> EXP_REAL .)
    MULT            reduce using rule 26 (constant -> EXP_REAL .)
    DIV             reduce using rule 26 (constant -> EXP_REAL .)
    MOD             reduce using rule 26 (constant -> EXP_REAL .)
    L_OP            reduce using rule 26 (constant -> EXP_REAL .)
    G_OP            reduce using rule 26 (constant -> EXP_REAL .)
    LE_OP           reduce using rule 26 (constant -> EXP_REAL .)
    GE_OP           reduce using rule 26 (constant -> EXP_REAL .)
    NOTEQUALS       reduce using rule 26 (constant -> EXP_REAL .)
    EQUALS_OP       reduce using rule 26 (constant -> EXP_REAL .)
    OR_OP           reduce using rule 26 (constant -> EXP_REAL .)
    AND_OP          reduce using rule 26 (constant -> EXP_REAL .)
    MUL_ASSIGN      reduce using rule 26 (constant -> EXP_REAL .)
    DIV_ASSIGN      reduce using rule 26 (constant -> EXP_REAL .)
    MOD_ASSIGN      reduce using rule 26 (constant -> EXP_REAL .)
    ADD_ASSIGN      reduce using rule 26 (constant -> EXP_REAL .)
    SUB_ASSIGN      reduce using rule 26 (constant -> EXP_REAL .)
    LEFT_ASSIGN     reduce using rule 26 (constant -> EXP_REAL .)
    RIGHT_ASSIGN    reduce using rule 26 (constant -> EXP_REAL .)
    AND_ASSIGN      reduce using rule 26 (constant -> EXP_REAL .)
    XOR_ASSIGN      reduce using rule 26 (constant -> EXP_REAL .)
    OR_ASSIGN       reduce using rule 26 (constant -> EXP_REAL .)
    EQUALS          reduce using rule 26 (constant -> EXP_REAL .)
    SEMI_COLON      reduce using rule 26 (constant -> EXP_REAL .)
    RPAREN          reduce using rule 26 (constant -> EXP_REAL .)
    COMMA           reduce using rule 26 (constant -> EXP_REAL .)


state 14

    (27) constant -> DEC_INT .

    ADD             reduce using rule 27 (constant -> DEC_INT .)
    MINUS           reduce using rule 27 (constant -> DEC_INT .)
    MULT            reduce using rule 27 (constant -> DEC_INT .)
    DIV             reduce using rule 27 (constant -> DEC_INT .)
    MOD             reduce using rule 27 (constant -> DEC_INT .)
    L_OP            reduce using rule 27 (constant -> DEC_INT .)
    G_OP            reduce using rule 27 (constant -> DEC_INT .)
    LE_OP           reduce using rule 27 (constant -> DEC_INT .)
    GE_OP           reduce using rule 27 (constant -> DEC_INT .)
    NOTEQUALS       reduce using rule 27 (constant -> DEC_INT .)
    EQUALS_OP       reduce using rule 27 (constant -> DEC_INT .)
    OR_OP           reduce using rule 27 (constant -> DEC_INT .)
    AND_OP          reduce using rule 27 (constant -> DEC_INT .)
    MUL_ASSIGN      reduce using rule 27 (constant -> DEC_INT .)
    DIV_ASSIGN      reduce using rule 27 (constant -> DEC_INT .)
    MOD_ASSIGN      reduce using rule 27 (constant -> DEC_INT .)
    ADD_ASSIGN      reduce using rule 27 (constant -> DEC_INT .)
    SUB_ASSIGN      reduce using rule 27 (constant -> DEC_INT .)
    LEFT_ASSIGN     reduce using rule 27 (constant -> DEC_INT .)
    RIGHT_ASSIGN    reduce using rule 27 (constant -> DEC_INT .)
    AND_ASSIGN      reduce using rule 27 (constant -> DEC_INT .)
    XOR_ASSIGN      reduce using rule 27 (constant -> DEC_INT .)
    OR_ASSIGN       reduce using rule 27 (constant -> DEC_INT .)
    EQUALS          reduce using rule 27 (constant -> DEC_INT .)
    SEMI_COLON      reduce using rule 27 (constant -> DEC_INT .)
    RPAREN          reduce using rule 27 (constant -> DEC_INT .)
    COMMA           reduce using rule 27 (constant -> DEC_INT .)


state 15

    (2) statements -> statement .

    RBRACE          reduce using rule 2 (statements -> statement .)
    LPAREN          reduce using rule 2 (statements -> statement .)
    VARIABLE        reduce using rule 2 (statements -> statement .)
    FOR             reduce using rule 2 (statements -> statement .)
    WHILE           reduce using rule 2 (statements -> statement .)
    DO              reduce using rule 2 (statements -> statement .)
    BREAK           reduce using rule 2 (statements -> statement .)
    CONTINUE        reduce using rule 2 (statements -> statement .)
    RETURN          reduce using rule 2 (statements -> statement .)
    INT             reduce using rule 2 (statements -> statement .)
    FLOAT           reduce using rule 2 (statements -> statement .)
    CHAR            reduce using rule 2 (statements -> statement .)
    DOUBLE          reduce using rule 2 (statements -> statement .)
    VOID            reduce using rule 2 (statements -> statement .)
    SHORT           reduce using rule 2 (statements -> statement .)
    LONG            reduce using rule 2 (statements -> statement .)
    HEX_INT         reduce using rule 2 (statements -> statement .)
    DOT_REAL        reduce using rule 2 (statements -> statement .)
    EXP_REAL        reduce using rule 2 (statements -> statement .)
    DEC_INT         reduce using rule 2 (statements -> statement .)
    CHARACTER       reduce using rule 2 (statements -> statement .)
    INCREMENT       reduce using rule 2 (statements -> statement .)
    DECREMENT       reduce using rule 2 (statements -> statement .)
    $end            reduce using rule 2 (statements -> statement .)


state 16

    (25) constant -> DOT_REAL .

    ADD             reduce using rule 25 (constant -> DOT_REAL .)
    MINUS           reduce using rule 25 (constant -> DOT_REAL .)
    MULT            reduce using rule 25 (constant -> DOT_REAL .)
    DIV             reduce using rule 25 (constant -> DOT_REAL .)
    MOD             reduce using rule 25 (constant -> DOT_REAL .)
    L_OP            reduce using rule 25 (constant -> DOT_REAL .)
    G_OP            reduce using rule 25 (constant -> DOT_REAL .)
    LE_OP           reduce using rule 25 (constant -> DOT_REAL .)
    GE_OP           reduce using rule 25 (constant -> DOT_REAL .)
    NOTEQUALS       reduce using rule 25 (constant -> DOT_REAL .)
    EQUALS_OP       reduce using rule 25 (constant -> DOT_REAL .)
    OR_OP           reduce using rule 25 (constant -> DOT_REAL .)
    AND_OP          reduce using rule 25 (constant -> DOT_REAL .)
    MUL_ASSIGN      reduce using rule 25 (constant -> DOT_REAL .)
    DIV_ASSIGN      reduce using rule 25 (constant -> DOT_REAL .)
    MOD_ASSIGN      reduce using rule 25 (constant -> DOT_REAL .)
    ADD_ASSIGN      reduce using rule 25 (constant -> DOT_REAL .)
    SUB_ASSIGN      reduce using rule 25 (constant -> DOT_REAL .)
    LEFT_ASSIGN     reduce using rule 25 (constant -> DOT_REAL .)
    RIGHT_ASSIGN    reduce using rule 25 (constant -> DOT_REAL .)
    AND_ASSIGN      reduce using rule 25 (constant -> DOT_REAL .)
    XOR_ASSIGN      reduce using rule 25 (constant -> DOT_REAL .)
    OR_ASSIGN       reduce using rule 25 (constant -> DOT_REAL .)
    EQUALS          reduce using rule 25 (constant -> DOT_REAL .)
    SEMI_COLON      reduce using rule 25 (constant -> DOT_REAL .)
    RPAREN          reduce using rule 25 (constant -> DOT_REAL .)
    COMMA           reduce using rule 25 (constant -> DOT_REAL .)


state 17

    (12) declaration -> type . enum_list SEMI_COLON
    (79) normal_function -> type . VARIABLE LPAREN arguments RPAREN LBRACE statements RBRACE
    (80) normal_function -> type . VARIABLE LPAREN arguments RPAREN LBRACE RBRACE
    (77) main_function -> type . MAIN LPAREN arguments RPAREN LBRACE statements RBRACE
    (78) main_function -> type . MAIN LPAREN arguments RPAREN LBRACE RBRACE
    (13) enum_list -> . VARIABLE COMMA enum_list
    (14) enum_list -> . VARIABLE EQUALS exp COMMA enum_list
    (15) enum_list -> . VARIABLE
    (16) enum_list -> . VARIABLE EQUALS exp

    VARIABLE        shift and go to state 44
    MAIN            shift and go to state 45

    enum_list                      shift and go to state 43

state 18

    (58) unary_expression -> unary_operator . VARIABLE

    VARIABLE        shift and go to state 46


state 19

    (6) statement -> function .

    LPAREN          reduce using rule 6 (statement -> function .)
    VARIABLE        reduce using rule 6 (statement -> function .)
    FOR             reduce using rule 6 (statement -> function .)
    WHILE           reduce using rule 6 (statement -> function .)
    DO              reduce using rule 6 (statement -> function .)
    BREAK           reduce using rule 6 (statement -> function .)
    CONTINUE        reduce using rule 6 (statement -> function .)
    RETURN          reduce using rule 6 (statement -> function .)
    INT             reduce using rule 6 (statement -> function .)
    FLOAT           reduce using rule 6 (statement -> function .)
    CHAR            reduce using rule 6 (statement -> function .)
    DOUBLE          reduce using rule 6 (statement -> function .)
    VOID            reduce using rule 6 (statement -> function .)
    SHORT           reduce using rule 6 (statement -> function .)
    LONG            reduce using rule 6 (statement -> function .)
    HEX_INT         reduce using rule 6 (statement -> function .)
    DOT_REAL        reduce using rule 6 (statement -> function .)
    EXP_REAL        reduce using rule 6 (statement -> function .)
    DEC_INT         reduce using rule 6 (statement -> function .)
    CHARACTER       reduce using rule 6 (statement -> function .)
    INCREMENT       reduce using rule 6 (statement -> function .)
    DECREMENT       reduce using rule 6 (statement -> function .)
    $end            reduce using rule 6 (statement -> function .)
    RBRACE          reduce using rule 6 (statement -> function .)


state 20

    (61) iterative_statement -> FOR . LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (62) iterative_statement -> FOR . LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE
    (63) iterative_statement -> FOR . LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (64) iterative_statement -> FOR . LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE

    LPAREN          shift and go to state 47


state 21

    (54) exp -> LPAREN . exp RPAREN
    (29) exp -> . exp ADD exp
    (30) exp -> . exp MINUS exp
    (31) exp -> . exp MULT exp
    (32) exp -> . exp DIV exp
    (33) exp -> . exp MOD exp
    (34) exp -> . exp L_OP exp
    (35) exp -> . exp G_OP exp
    (36) exp -> . exp LE_OP exp
    (37) exp -> . exp GE_OP exp
    (38) exp -> . exp NOTEQUALS exp
    (39) exp -> . exp EQUALS_OP exp
    (40) exp -> . exp OR_OP exp
    (41) exp -> . exp AND_OP exp
    (42) exp -> . exp MUL_ASSIGN exp
    (43) exp -> . exp DIV_ASSIGN exp
    (44) exp -> . exp MOD_ASSIGN exp
    (45) exp -> . exp ADD_ASSIGN exp
    (46) exp -> . exp SUB_ASSIGN exp
    (47) exp -> . exp LEFT_ASSIGN exp
    (48) exp -> . exp RIGHT_ASSIGN exp
    (49) exp -> . exp AND_ASSIGN exp
    (50) exp -> . exp XOR_ASSIGN exp
    (51) exp -> . exp OR_ASSIGN exp
    (52) exp -> . exp EQUALS exp
    (53) exp -> . unary_expression
    (54) exp -> . LPAREN exp RPAREN
    (55) exp -> . constant
    (56) exp -> . VARIABLE
    (57) unary_expression -> . VARIABLE unary_operator
    (58) unary_expression -> . unary_operator VARIABLE
    (24) constant -> . HEX_INT
    (25) constant -> . DOT_REAL
    (26) constant -> . EXP_REAL
    (27) constant -> . DEC_INT
    (28) constant -> . CHARACTER
    (59) unary_operator -> . INCREMENT
    (60) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 21
    VARIABLE        shift and go to state 23
    HEX_INT         shift and go to state 29
    DOT_REAL        shift and go to state 16
    EXP_REAL        shift and go to state 13
    DEC_INT         shift and go to state 14
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 12
    DECREMENT       shift and go to state 25

    constant                       shift and go to state 10
    unary_expression               shift and go to state 24
    exp                            shift and go to state 48
    unary_operator                 shift and go to state 18

state 22

    (3) statement -> declaration .

    LPAREN          reduce using rule 3 (statement -> declaration .)
    VARIABLE        reduce using rule 3 (statement -> declaration .)
    FOR             reduce using rule 3 (statement -> declaration .)
    WHILE           reduce using rule 3 (statement -> declaration .)
    DO              reduce using rule 3 (statement -> declaration .)
    BREAK           reduce using rule 3 (statement -> declaration .)
    CONTINUE        reduce using rule 3 (statement -> declaration .)
    RETURN          reduce using rule 3 (statement -> declaration .)
    INT             reduce using rule 3 (statement -> declaration .)
    FLOAT           reduce using rule 3 (statement -> declaration .)
    CHAR            reduce using rule 3 (statement -> declaration .)
    DOUBLE          reduce using rule 3 (statement -> declaration .)
    VOID            reduce using rule 3 (statement -> declaration .)
    SHORT           reduce using rule 3 (statement -> declaration .)
    LONG            reduce using rule 3 (statement -> declaration .)
    HEX_INT         reduce using rule 3 (statement -> declaration .)
    DOT_REAL        reduce using rule 3 (statement -> declaration .)
    EXP_REAL        reduce using rule 3 (statement -> declaration .)
    DEC_INT         reduce using rule 3 (statement -> declaration .)
    CHARACTER       reduce using rule 3 (statement -> declaration .)
    INCREMENT       reduce using rule 3 (statement -> declaration .)
    DECREMENT       reduce using rule 3 (statement -> declaration .)
    $end            reduce using rule 3 (statement -> declaration .)
    RBRACE          reduce using rule 3 (statement -> declaration .)


state 23

    (56) exp -> VARIABLE .
    (57) unary_expression -> VARIABLE . unary_operator
    (59) unary_operator -> . INCREMENT
    (60) unary_operator -> . DECREMENT

    ADD             reduce using rule 56 (exp -> VARIABLE .)
    MINUS           reduce using rule 56 (exp -> VARIABLE .)
    MULT            reduce using rule 56 (exp -> VARIABLE .)
    DIV             reduce using rule 56 (exp -> VARIABLE .)
    MOD             reduce using rule 56 (exp -> VARIABLE .)
    L_OP            reduce using rule 56 (exp -> VARIABLE .)
    G_OP            reduce using rule 56 (exp -> VARIABLE .)
    LE_OP           reduce using rule 56 (exp -> VARIABLE .)
    GE_OP           reduce using rule 56 (exp -> VARIABLE .)
    NOTEQUALS       reduce using rule 56 (exp -> VARIABLE .)
    EQUALS_OP       reduce using rule 56 (exp -> VARIABLE .)
    OR_OP           reduce using rule 56 (exp -> VARIABLE .)
    AND_OP          reduce using rule 56 (exp -> VARIABLE .)
    MUL_ASSIGN      reduce using rule 56 (exp -> VARIABLE .)
    DIV_ASSIGN      reduce using rule 56 (exp -> VARIABLE .)
    MOD_ASSIGN      reduce using rule 56 (exp -> VARIABLE .)
    ADD_ASSIGN      reduce using rule 56 (exp -> VARIABLE .)
    SUB_ASSIGN      reduce using rule 56 (exp -> VARIABLE .)
    LEFT_ASSIGN     reduce using rule 56 (exp -> VARIABLE .)
    RIGHT_ASSIGN    reduce using rule 56 (exp -> VARIABLE .)
    AND_ASSIGN      reduce using rule 56 (exp -> VARIABLE .)
    XOR_ASSIGN      reduce using rule 56 (exp -> VARIABLE .)
    OR_ASSIGN       reduce using rule 56 (exp -> VARIABLE .)
    EQUALS          reduce using rule 56 (exp -> VARIABLE .)
    SEMI_COLON      reduce using rule 56 (exp -> VARIABLE .)
    RPAREN          reduce using rule 56 (exp -> VARIABLE .)
    COMMA           reduce using rule 56 (exp -> VARIABLE .)
    INCREMENT       shift and go to state 12
    DECREMENT       shift and go to state 25

    unary_operator                 shift and go to state 49

state 24

    (53) exp -> unary_expression .

    ADD             reduce using rule 53 (exp -> unary_expression .)
    MINUS           reduce using rule 53 (exp -> unary_expression .)
    MULT            reduce using rule 53 (exp -> unary_expression .)
    DIV             reduce using rule 53 (exp -> unary_expression .)
    MOD             reduce using rule 53 (exp -> unary_expression .)
    L_OP            reduce using rule 53 (exp -> unary_expression .)
    G_OP            reduce using rule 53 (exp -> unary_expression .)
    LE_OP           reduce using rule 53 (exp -> unary_expression .)
    GE_OP           reduce using rule 53 (exp -> unary_expression .)
    NOTEQUALS       reduce using rule 53 (exp -> unary_expression .)
    EQUALS_OP       reduce using rule 53 (exp -> unary_expression .)
    OR_OP           reduce using rule 53 (exp -> unary_expression .)
    AND_OP          reduce using rule 53 (exp -> unary_expression .)
    MUL_ASSIGN      reduce using rule 53 (exp -> unary_expression .)
    DIV_ASSIGN      reduce using rule 53 (exp -> unary_expression .)
    MOD_ASSIGN      reduce using rule 53 (exp -> unary_expression .)
    ADD_ASSIGN      reduce using rule 53 (exp -> unary_expression .)
    SUB_ASSIGN      reduce using rule 53 (exp -> unary_expression .)
    LEFT_ASSIGN     reduce using rule 53 (exp -> unary_expression .)
    RIGHT_ASSIGN    reduce using rule 53 (exp -> unary_expression .)
    AND_ASSIGN      reduce using rule 53 (exp -> unary_expression .)
    XOR_ASSIGN      reduce using rule 53 (exp -> unary_expression .)
    OR_ASSIGN       reduce using rule 53 (exp -> unary_expression .)
    EQUALS          reduce using rule 53 (exp -> unary_expression .)
    SEMI_COLON      reduce using rule 53 (exp -> unary_expression .)
    RPAREN          reduce using rule 53 (exp -> unary_expression .)
    COMMA           reduce using rule 53 (exp -> unary_expression .)


state 25

    (60) unary_operator -> DECREMENT .

    VARIABLE        reduce using rule 60 (unary_operator -> DECREMENT .)
    SEMI_COLON      reduce using rule 60 (unary_operator -> DECREMENT .)
    ADD             reduce using rule 60 (unary_operator -> DECREMENT .)
    MINUS           reduce using rule 60 (unary_operator -> DECREMENT .)
    MULT            reduce using rule 60 (unary_operator -> DECREMENT .)
    DIV             reduce using rule 60 (unary_operator -> DECREMENT .)
    MOD             reduce using rule 60 (unary_operator -> DECREMENT .)
    L_OP            reduce using rule 60 (unary_operator -> DECREMENT .)
    G_OP            reduce using rule 60 (unary_operator -> DECREMENT .)
    LE_OP           reduce using rule 60 (unary_operator -> DECREMENT .)
    GE_OP           reduce using rule 60 (unary_operator -> DECREMENT .)
    NOTEQUALS       reduce using rule 60 (unary_operator -> DECREMENT .)
    EQUALS_OP       reduce using rule 60 (unary_operator -> DECREMENT .)
    OR_OP           reduce using rule 60 (unary_operator -> DECREMENT .)
    AND_OP          reduce using rule 60 (unary_operator -> DECREMENT .)
    MUL_ASSIGN      reduce using rule 60 (unary_operator -> DECREMENT .)
    DIV_ASSIGN      reduce using rule 60 (unary_operator -> DECREMENT .)
    MOD_ASSIGN      reduce using rule 60 (unary_operator -> DECREMENT .)
    ADD_ASSIGN      reduce using rule 60 (unary_operator -> DECREMENT .)
    SUB_ASSIGN      reduce using rule 60 (unary_operator -> DECREMENT .)
    LEFT_ASSIGN     reduce using rule 60 (unary_operator -> DECREMENT .)
    RIGHT_ASSIGN    reduce using rule 60 (unary_operator -> DECREMENT .)
    AND_ASSIGN      reduce using rule 60 (unary_operator -> DECREMENT .)
    XOR_ASSIGN      reduce using rule 60 (unary_operator -> DECREMENT .)
    OR_ASSIGN       reduce using rule 60 (unary_operator -> DECREMENT .)
    EQUALS          reduce using rule 60 (unary_operator -> DECREMENT .)
    RPAREN          reduce using rule 60 (unary_operator -> DECREMENT .)
    COMMA           reduce using rule 60 (unary_operator -> DECREMENT .)


state 26

    (7) statement -> constant_statement .

    LPAREN          reduce using rule 7 (statement -> constant_statement .)
    VARIABLE        reduce using rule 7 (statement -> constant_statement .)
    FOR             reduce using rule 7 (statement -> constant_statement .)
    WHILE           reduce using rule 7 (statement -> constant_statement .)
    DO              reduce using rule 7 (statement -> constant_statement .)
    BREAK           reduce using rule 7 (statement -> constant_statement .)
    CONTINUE        reduce using rule 7 (statement -> constant_statement .)
    RETURN          reduce using rule 7 (statement -> constant_statement .)
    INT             reduce using rule 7 (statement -> constant_statement .)
    FLOAT           reduce using rule 7 (statement -> constant_statement .)
    CHAR            reduce using rule 7 (statement -> constant_statement .)
    DOUBLE          reduce using rule 7 (statement -> constant_statement .)
    VOID            reduce using rule 7 (statement -> constant_statement .)
    SHORT           reduce using rule 7 (statement -> constant_statement .)
    LONG            reduce using rule 7 (statement -> constant_statement .)
    HEX_INT         reduce using rule 7 (statement -> constant_statement .)
    DOT_REAL        reduce using rule 7 (statement -> constant_statement .)
    EXP_REAL        reduce using rule 7 (statement -> constant_statement .)
    DEC_INT         reduce using rule 7 (statement -> constant_statement .)
    CHARACTER       reduce using rule 7 (statement -> constant_statement .)
    INCREMENT       reduce using rule 7 (statement -> constant_statement .)
    DECREMENT       reduce using rule 7 (statement -> constant_statement .)
    $end            reduce using rule 7 (statement -> constant_statement .)
    RBRACE          reduce using rule 7 (statement -> constant_statement .)


state 27

    (17) type -> INT .

    VARIABLE        reduce using rule 17 (type -> INT .)
    MAIN            reduce using rule 17 (type -> INT .)


state 28

    (20) type -> DOUBLE .

    VARIABLE        reduce using rule 20 (type -> DOUBLE .)
    MAIN            reduce using rule 20 (type -> DOUBLE .)


state 29

    (24) constant -> HEX_INT .

    ADD             reduce using rule 24 (constant -> HEX_INT .)
    MINUS           reduce using rule 24 (constant -> HEX_INT .)
    MULT            reduce using rule 24 (constant -> HEX_INT .)
    DIV             reduce using rule 24 (constant -> HEX_INT .)
    MOD             reduce using rule 24 (constant -> HEX_INT .)
    L_OP            reduce using rule 24 (constant -> HEX_INT .)
    G_OP            reduce using rule 24 (constant -> HEX_INT .)
    LE_OP           reduce using rule 24 (constant -> HEX_INT .)
    GE_OP           reduce using rule 24 (constant -> HEX_INT .)
    NOTEQUALS       reduce using rule 24 (constant -> HEX_INT .)
    EQUALS_OP       reduce using rule 24 (constant -> HEX_INT .)
    OR_OP           reduce using rule 24 (constant -> HEX_INT .)
    AND_OP          reduce using rule 24 (constant -> HEX_INT .)
    MUL_ASSIGN      reduce using rule 24 (constant -> HEX_INT .)
    DIV_ASSIGN      reduce using rule 24 (constant -> HEX_INT .)
    MOD_ASSIGN      reduce using rule 24 (constant -> HEX_INT .)
    ADD_ASSIGN      reduce using rule 24 (constant -> HEX_INT .)
    SUB_ASSIGN      reduce using rule 24 (constant -> HEX_INT .)
    LEFT_ASSIGN     reduce using rule 24 (constant -> HEX_INT .)
    RIGHT_ASSIGN    reduce using rule 24 (constant -> HEX_INT .)
    AND_ASSIGN      reduce using rule 24 (constant -> HEX_INT .)
    XOR_ASSIGN      reduce using rule 24 (constant -> HEX_INT .)
    OR_ASSIGN       reduce using rule 24 (constant -> HEX_INT .)
    EQUALS          reduce using rule 24 (constant -> HEX_INT .)
    SEMI_COLON      reduce using rule 24 (constant -> HEX_INT .)
    RPAREN          reduce using rule 24 (constant -> HEX_INT .)
    COMMA           reduce using rule 24 (constant -> HEX_INT .)


state 30

    (75) function -> normal_function .

    LPAREN          reduce using rule 75 (function -> normal_function .)
    VARIABLE        reduce using rule 75 (function -> normal_function .)
    FOR             reduce using rule 75 (function -> normal_function .)
    WHILE           reduce using rule 75 (function -> normal_function .)
    DO              reduce using rule 75 (function -> normal_function .)
    BREAK           reduce using rule 75 (function -> normal_function .)
    CONTINUE        reduce using rule 75 (function -> normal_function .)
    RETURN          reduce using rule 75 (function -> normal_function .)
    INT             reduce using rule 75 (function -> normal_function .)
    FLOAT           reduce using rule 75 (function -> normal_function .)
    CHAR            reduce using rule 75 (function -> normal_function .)
    DOUBLE          reduce using rule 75 (function -> normal_function .)
    VOID            reduce using rule 75 (function -> normal_function .)
    SHORT           reduce using rule 75 (function -> normal_function .)
    LONG            reduce using rule 75 (function -> normal_function .)
    HEX_INT         reduce using rule 75 (function -> normal_function .)
    DOT_REAL        reduce using rule 75 (function -> normal_function .)
    EXP_REAL        reduce using rule 75 (function -> normal_function .)
    DEC_INT         reduce using rule 75 (function -> normal_function .)
    CHARACTER       reduce using rule 75 (function -> normal_function .)
    INCREMENT       reduce using rule 75 (function -> normal_function .)
    DECREMENT       reduce using rule 75 (function -> normal_function .)
    $end            reduce using rule 75 (function -> normal_function .)
    RBRACE          reduce using rule 75 (function -> normal_function .)


state 31

    (18) type -> FLOAT .

    VARIABLE        reduce using rule 18 (type -> FLOAT .)
    MAIN            reduce using rule 18 (type -> FLOAT .)


state 32

    (8) constant_statement -> BREAK . SEMI_COLON

    SEMI_COLON      shift and go to state 50


state 33

    (9) constant_statement -> CONTINUE . SEMI_COLON

    SEMI_COLON      shift and go to state 51


state 34

    (4) statement -> exp . SEMI_COLON
    (29) exp -> exp . ADD exp
    (30) exp -> exp . MINUS exp
    (31) exp -> exp . MULT exp
    (32) exp -> exp . DIV exp
    (33) exp -> exp . MOD exp
    (34) exp -> exp . L_OP exp
    (35) exp -> exp . G_OP exp
    (36) exp -> exp . LE_OP exp
    (37) exp -> exp . GE_OP exp
    (38) exp -> exp . NOTEQUALS exp
    (39) exp -> exp . EQUALS_OP exp
    (40) exp -> exp . OR_OP exp
    (41) exp -> exp . AND_OP exp
    (42) exp -> exp . MUL_ASSIGN exp
    (43) exp -> exp . DIV_ASSIGN exp
    (44) exp -> exp . MOD_ASSIGN exp
    (45) exp -> exp . ADD_ASSIGN exp
    (46) exp -> exp . SUB_ASSIGN exp
    (47) exp -> exp . LEFT_ASSIGN exp
    (48) exp -> exp . RIGHT_ASSIGN exp
    (49) exp -> exp . AND_ASSIGN exp
    (50) exp -> exp . XOR_ASSIGN exp
    (51) exp -> exp . OR_ASSIGN exp
    (52) exp -> exp . EQUALS exp

    SEMI_COLON      shift and go to state 55
    ADD             shift and go to state 67
    MINUS           shift and go to state 57
    MULT            shift and go to state 58
    DIV             shift and go to state 56
    MOD             shift and go to state 76
    L_OP            shift and go to state 73
    G_OP            shift and go to state 61
    LE_OP           shift and go to state 59
    GE_OP           shift and go to state 68
    NOTEQUALS       shift and go to state 52
    EQUALS_OP       shift and go to state 53
    OR_OP           shift and go to state 62
    AND_OP          shift and go to state 66
    MUL_ASSIGN      shift and go to state 74
    DIV_ASSIGN      shift and go to state 54
    MOD_ASSIGN      shift and go to state 70
    ADD_ASSIGN      shift and go to state 64
    SUB_ASSIGN      shift and go to state 69
    LEFT_ASSIGN     shift and go to state 75
    RIGHT_ASSIGN    shift and go to state 60
    AND_ASSIGN      shift and go to state 63
    XOR_ASSIGN      shift and go to state 71
    OR_ASSIGN       shift and go to state 72
    EQUALS          shift and go to state 65


state 35

    (23) type -> LONG .

    VARIABLE        reduce using rule 23 (type -> LONG .)
    MAIN            reduce using rule 23 (type -> LONG .)


state 36

    (10) constant_statement -> RETURN SEMI_COLON .

    RBRACE          reduce using rule 10 (constant_statement -> RETURN SEMI_COLON .)
    LPAREN          reduce using rule 10 (constant_statement -> RETURN SEMI_COLON .)
    VARIABLE        reduce using rule 10 (constant_statement -> RETURN SEMI_COLON .)
    FOR             reduce using rule 10 (constant_statement -> RETURN SEMI_COLON .)
    WHILE           reduce using rule 10 (constant_statement -> RETURN SEMI_COLON .)
    DO              reduce using rule 10 (constant_statement -> RETURN SEMI_COLON .)
    BREAK           reduce using rule 10 (constant_statement -> RETURN SEMI_COLON .)
    CONTINUE        reduce using rule 10 (constant_statement -> RETURN SEMI_COLON .)
    RETURN          reduce using rule 10 (constant_statement -> RETURN SEMI_COLON .)
    INT             reduce using rule 10 (constant_statement -> RETURN SEMI_COLON .)
    FLOAT           reduce using rule 10 (constant_statement -> RETURN SEMI_COLON .)
    CHAR            reduce using rule 10 (constant_statement -> RETURN SEMI_COLON .)
    DOUBLE          reduce using rule 10 (constant_statement -> RETURN SEMI_COLON .)
    VOID            reduce using rule 10 (constant_statement -> RETURN SEMI_COLON .)
    SHORT           reduce using rule 10 (constant_statement -> RETURN SEMI_COLON .)
    LONG            reduce using rule 10 (constant_statement -> RETURN SEMI_COLON .)
    HEX_INT         reduce using rule 10 (constant_statement -> RETURN SEMI_COLON .)
    DOT_REAL        reduce using rule 10 (constant_statement -> RETURN SEMI_COLON .)
    EXP_REAL        reduce using rule 10 (constant_statement -> RETURN SEMI_COLON .)
    DEC_INT         reduce using rule 10 (constant_statement -> RETURN SEMI_COLON .)
    CHARACTER       reduce using rule 10 (constant_statement -> RETURN SEMI_COLON .)
    INCREMENT       reduce using rule 10 (constant_statement -> RETURN SEMI_COLON .)
    DECREMENT       reduce using rule 10 (constant_statement -> RETURN SEMI_COLON .)
    $end            reduce using rule 10 (constant_statement -> RETURN SEMI_COLON .)


state 37

    (11) constant_statement -> RETURN exp . SEMI_COLON
    (29) exp -> exp . ADD exp
    (30) exp -> exp . MINUS exp
    (31) exp -> exp . MULT exp
    (32) exp -> exp . DIV exp
    (33) exp -> exp . MOD exp
    (34) exp -> exp . L_OP exp
    (35) exp -> exp . G_OP exp
    (36) exp -> exp . LE_OP exp
    (37) exp -> exp . GE_OP exp
    (38) exp -> exp . NOTEQUALS exp
    (39) exp -> exp . EQUALS_OP exp
    (40) exp -> exp . OR_OP exp
    (41) exp -> exp . AND_OP exp
    (42) exp -> exp . MUL_ASSIGN exp
    (43) exp -> exp . DIV_ASSIGN exp
    (44) exp -> exp . MOD_ASSIGN exp
    (45) exp -> exp . ADD_ASSIGN exp
    (46) exp -> exp . SUB_ASSIGN exp
    (47) exp -> exp . LEFT_ASSIGN exp
    (48) exp -> exp . RIGHT_ASSIGN exp
    (49) exp -> exp . AND_ASSIGN exp
    (50) exp -> exp . XOR_ASSIGN exp
    (51) exp -> exp . OR_ASSIGN exp
    (52) exp -> exp . EQUALS exp

    SEMI_COLON      shift and go to state 77
    ADD             shift and go to state 67
    MINUS           shift and go to state 57
    MULT            shift and go to state 58
    DIV             shift and go to state 56
    MOD             shift and go to state 76
    L_OP            shift and go to state 73
    G_OP            shift and go to state 61
    LE_OP           shift and go to state 59
    GE_OP           shift and go to state 68
    NOTEQUALS       shift and go to state 52
    EQUALS_OP       shift and go to state 53
    OR_OP           shift and go to state 62
    AND_OP          shift and go to state 66
    MUL_ASSIGN      shift and go to state 74
    DIV_ASSIGN      shift and go to state 54
    MOD_ASSIGN      shift and go to state 70
    ADD_ASSIGN      shift and go to state 64
    SUB_ASSIGN      shift and go to state 69
    LEFT_ASSIGN     shift and go to state 75
    RIGHT_ASSIGN    shift and go to state 60
    AND_ASSIGN      shift and go to state 63
    XOR_ASSIGN      shift and go to state 71
    OR_ASSIGN       shift and go to state 72
    EQUALS          shift and go to state 65


state 38

    (1) statements -> statements statement .

    RBRACE          reduce using rule 1 (statements -> statements statement .)
    LPAREN          reduce using rule 1 (statements -> statements statement .)
    VARIABLE        reduce using rule 1 (statements -> statements statement .)
    FOR             reduce using rule 1 (statements -> statements statement .)
    WHILE           reduce using rule 1 (statements -> statements statement .)
    DO              reduce using rule 1 (statements -> statements statement .)
    BREAK           reduce using rule 1 (statements -> statements statement .)
    CONTINUE        reduce using rule 1 (statements -> statements statement .)
    RETURN          reduce using rule 1 (statements -> statements statement .)
    INT             reduce using rule 1 (statements -> statements statement .)
    FLOAT           reduce using rule 1 (statements -> statements statement .)
    CHAR            reduce using rule 1 (statements -> statements statement .)
    DOUBLE          reduce using rule 1 (statements -> statements statement .)
    VOID            reduce using rule 1 (statements -> statements statement .)
    SHORT           reduce using rule 1 (statements -> statements statement .)
    LONG            reduce using rule 1 (statements -> statements statement .)
    HEX_INT         reduce using rule 1 (statements -> statements statement .)
    DOT_REAL        reduce using rule 1 (statements -> statements statement .)
    EXP_REAL        reduce using rule 1 (statements -> statements statement .)
    DEC_INT         reduce using rule 1 (statements -> statements statement .)
    CHARACTER       reduce using rule 1 (statements -> statements statement .)
    INCREMENT       reduce using rule 1 (statements -> statements statement .)
    DECREMENT       reduce using rule 1 (statements -> statements statement .)
    $end            reduce using rule 1 (statements -> statements statement .)


state 39

    (71) iterative_statement -> DO SEMI_COLON . WHILE LPAREN exp RPAREN SEMI_COLON

    WHILE           shift and go to state 78


state 40

    (69) iterative_statement -> DO statement . WHILE LPAREN exp RPAREN SEMI_COLON

    WHILE           shift and go to state 79


state 41

    (70) iterative_statement -> DO LBRACE . statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (72) iterative_statement -> DO LBRACE . RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (1) statements -> . statements statement
    (2) statements -> . statement
    (3) statement -> . declaration
    (4) statement -> . exp SEMI_COLON
    (5) statement -> . iterative_statement
    (6) statement -> . function
    (7) statement -> . constant_statement
    (12) declaration -> . type enum_list SEMI_COLON
    (29) exp -> . exp ADD exp
    (30) exp -> . exp MINUS exp
    (31) exp -> . exp MULT exp
    (32) exp -> . exp DIV exp
    (33) exp -> . exp MOD exp
    (34) exp -> . exp L_OP exp
    (35) exp -> . exp G_OP exp
    (36) exp -> . exp LE_OP exp
    (37) exp -> . exp GE_OP exp
    (38) exp -> . exp NOTEQUALS exp
    (39) exp -> . exp EQUALS_OP exp
    (40) exp -> . exp OR_OP exp
    (41) exp -> . exp AND_OP exp
    (42) exp -> . exp MUL_ASSIGN exp
    (43) exp -> . exp DIV_ASSIGN exp
    (44) exp -> . exp MOD_ASSIGN exp
    (45) exp -> . exp ADD_ASSIGN exp
    (46) exp -> . exp SUB_ASSIGN exp
    (47) exp -> . exp LEFT_ASSIGN exp
    (48) exp -> . exp RIGHT_ASSIGN exp
    (49) exp -> . exp AND_ASSIGN exp
    (50) exp -> . exp XOR_ASSIGN exp
    (51) exp -> . exp OR_ASSIGN exp
    (52) exp -> . exp EQUALS exp
    (53) exp -> . unary_expression
    (54) exp -> . LPAREN exp RPAREN
    (55) exp -> . constant
    (56) exp -> . VARIABLE
    (61) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (62) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE
    (63) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (64) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE
    (65) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (66) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (67) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE statements RBRACE
    (68) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (69) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (70) iterative_statement -> . DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (71) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (72) iterative_statement -> . DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (75) function -> . normal_function
    (76) function -> . main_function
    (8) constant_statement -> . BREAK SEMI_COLON
    (9) constant_statement -> . CONTINUE SEMI_COLON
    (10) constant_statement -> . RETURN SEMI_COLON
    (11) constant_statement -> . RETURN exp SEMI_COLON
    (17) type -> . INT
    (18) type -> . FLOAT
    (19) type -> . CHAR
    (20) type -> . DOUBLE
    (21) type -> . VOID
    (22) type -> . SHORT
    (23) type -> . LONG
    (57) unary_expression -> . VARIABLE unary_operator
    (58) unary_expression -> . unary_operator VARIABLE
    (24) constant -> . HEX_INT
    (25) constant -> . DOT_REAL
    (26) constant -> . EXP_REAL
    (27) constant -> . DEC_INT
    (28) constant -> . CHARACTER
    (79) normal_function -> . type VARIABLE LPAREN arguments RPAREN LBRACE statements RBRACE
    (80) normal_function -> . type VARIABLE LPAREN arguments RPAREN LBRACE RBRACE
    (77) main_function -> . type MAIN LPAREN arguments RPAREN LBRACE statements RBRACE
    (78) main_function -> . type MAIN LPAREN arguments RPAREN LBRACE RBRACE
    (59) unary_operator -> . INCREMENT
    (60) unary_operator -> . DECREMENT

    RBRACE          shift and go to state 81
    LPAREN          shift and go to state 21
    VARIABLE        shift and go to state 23
    FOR             shift and go to state 20
    WHILE           shift and go to state 8
    DO              shift and go to state 4
    BREAK           shift and go to state 32
    CONTINUE        shift and go to state 33
    RETURN          shift and go to state 1
    INT             shift and go to state 27
    FLOAT           shift and go to state 31
    CHAR            shift and go to state 7
    DOUBLE          shift and go to state 28
    VOID            shift and go to state 5
    SHORT           shift and go to state 9
    LONG            shift and go to state 35
    HEX_INT         shift and go to state 29
    DOT_REAL        shift and go to state 16
    EXP_REAL        shift and go to state 13
    DEC_INT         shift and go to state 14
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 12
    DECREMENT       shift and go to state 25

    function                       shift and go to state 19
    main_function                  shift and go to state 2
    statements                     shift and go to state 80
    exp                            shift and go to state 34
    unary_expression               shift and go to state 24
    type                           shift and go to state 17
    normal_function                shift and go to state 30
    statement                      shift and go to state 15
    declaration                    shift and go to state 22
    constant_statement             shift and go to state 26
    constant                       shift and go to state 10
    iterative_statement            shift and go to state 11
    unary_operator                 shift and go to state 18

state 42

    (65) iterative_statement -> WHILE LPAREN . exp RPAREN statement
    (66) iterative_statement -> WHILE LPAREN . exp RPAREN SEMI_COLON
    (67) iterative_statement -> WHILE LPAREN . exp RPAREN LBRACE statements RBRACE
    (68) iterative_statement -> WHILE LPAREN . exp RPAREN LBRACE RBRACE
    (29) exp -> . exp ADD exp
    (30) exp -> . exp MINUS exp
    (31) exp -> . exp MULT exp
    (32) exp -> . exp DIV exp
    (33) exp -> . exp MOD exp
    (34) exp -> . exp L_OP exp
    (35) exp -> . exp G_OP exp
    (36) exp -> . exp LE_OP exp
    (37) exp -> . exp GE_OP exp
    (38) exp -> . exp NOTEQUALS exp
    (39) exp -> . exp EQUALS_OP exp
    (40) exp -> . exp OR_OP exp
    (41) exp -> . exp AND_OP exp
    (42) exp -> . exp MUL_ASSIGN exp
    (43) exp -> . exp DIV_ASSIGN exp
    (44) exp -> . exp MOD_ASSIGN exp
    (45) exp -> . exp ADD_ASSIGN exp
    (46) exp -> . exp SUB_ASSIGN exp
    (47) exp -> . exp LEFT_ASSIGN exp
    (48) exp -> . exp RIGHT_ASSIGN exp
    (49) exp -> . exp AND_ASSIGN exp
    (50) exp -> . exp XOR_ASSIGN exp
    (51) exp -> . exp OR_ASSIGN exp
    (52) exp -> . exp EQUALS exp
    (53) exp -> . unary_expression
    (54) exp -> . LPAREN exp RPAREN
    (55) exp -> . constant
    (56) exp -> . VARIABLE
    (57) unary_expression -> . VARIABLE unary_operator
    (58) unary_expression -> . unary_operator VARIABLE
    (24) constant -> . HEX_INT
    (25) constant -> . DOT_REAL
    (26) constant -> . EXP_REAL
    (27) constant -> . DEC_INT
    (28) constant -> . CHARACTER
    (59) unary_operator -> . INCREMENT
    (60) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 21
    VARIABLE        shift and go to state 23
    HEX_INT         shift and go to state 29
    DOT_REAL        shift and go to state 16
    EXP_REAL        shift and go to state 13
    DEC_INT         shift and go to state 14
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 12
    DECREMENT       shift and go to state 25

    constant                       shift and go to state 10
    exp                            shift and go to state 82
    unary_expression               shift and go to state 24
    unary_operator                 shift and go to state 18

state 43

    (12) declaration -> type enum_list . SEMI_COLON

    SEMI_COLON      shift and go to state 83


state 44

    (79) normal_function -> type VARIABLE . LPAREN arguments RPAREN LBRACE statements RBRACE
    (80) normal_function -> type VARIABLE . LPAREN arguments RPAREN LBRACE RBRACE
    (13) enum_list -> VARIABLE . COMMA enum_list
    (14) enum_list -> VARIABLE . EQUALS exp COMMA enum_list
    (15) enum_list -> VARIABLE .
    (16) enum_list -> VARIABLE . EQUALS exp

    LPAREN          shift and go to state 86
    COMMA           shift and go to state 85
    EQUALS          shift and go to state 84
    SEMI_COLON      reduce using rule 15 (enum_list -> VARIABLE .)


state 45

    (77) main_function -> type MAIN . LPAREN arguments RPAREN LBRACE statements RBRACE
    (78) main_function -> type MAIN . LPAREN arguments RPAREN LBRACE RBRACE

    LPAREN          shift and go to state 87


state 46

    (58) unary_expression -> unary_operator VARIABLE .

    ADD             reduce using rule 58 (unary_expression -> unary_operator VARIABLE .)
    MINUS           reduce using rule 58 (unary_expression -> unary_operator VARIABLE .)
    MULT            reduce using rule 58 (unary_expression -> unary_operator VARIABLE .)
    DIV             reduce using rule 58 (unary_expression -> unary_operator VARIABLE .)
    MOD             reduce using rule 58 (unary_expression -> unary_operator VARIABLE .)
    L_OP            reduce using rule 58 (unary_expression -> unary_operator VARIABLE .)
    G_OP            reduce using rule 58 (unary_expression -> unary_operator VARIABLE .)
    LE_OP           reduce using rule 58 (unary_expression -> unary_operator VARIABLE .)
    GE_OP           reduce using rule 58 (unary_expression -> unary_operator VARIABLE .)
    NOTEQUALS       reduce using rule 58 (unary_expression -> unary_operator VARIABLE .)
    EQUALS_OP       reduce using rule 58 (unary_expression -> unary_operator VARIABLE .)
    OR_OP           reduce using rule 58 (unary_expression -> unary_operator VARIABLE .)
    AND_OP          reduce using rule 58 (unary_expression -> unary_operator VARIABLE .)
    MUL_ASSIGN      reduce using rule 58 (unary_expression -> unary_operator VARIABLE .)
    DIV_ASSIGN      reduce using rule 58 (unary_expression -> unary_operator VARIABLE .)
    MOD_ASSIGN      reduce using rule 58 (unary_expression -> unary_operator VARIABLE .)
    ADD_ASSIGN      reduce using rule 58 (unary_expression -> unary_operator VARIABLE .)
    SUB_ASSIGN      reduce using rule 58 (unary_expression -> unary_operator VARIABLE .)
    LEFT_ASSIGN     reduce using rule 58 (unary_expression -> unary_operator VARIABLE .)
    RIGHT_ASSIGN    reduce using rule 58 (unary_expression -> unary_operator VARIABLE .)
    AND_ASSIGN      reduce using rule 58 (unary_expression -> unary_operator VARIABLE .)
    XOR_ASSIGN      reduce using rule 58 (unary_expression -> unary_operator VARIABLE .)
    OR_ASSIGN       reduce using rule 58 (unary_expression -> unary_operator VARIABLE .)
    EQUALS          reduce using rule 58 (unary_expression -> unary_operator VARIABLE .)
    SEMI_COLON      reduce using rule 58 (unary_expression -> unary_operator VARIABLE .)
    RPAREN          reduce using rule 58 (unary_expression -> unary_operator VARIABLE .)
    COMMA           reduce using rule 58 (unary_expression -> unary_operator VARIABLE .)


state 47

    (61) iterative_statement -> FOR LPAREN . iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (62) iterative_statement -> FOR LPAREN . iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE
    (63) iterative_statement -> FOR LPAREN . iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (64) iterative_statement -> FOR LPAREN . iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE
    (73) iterative_exp -> . exp COMMA iterative_exp
    (74) iterative_exp -> . exp
    (29) exp -> . exp ADD exp
    (30) exp -> . exp MINUS exp
    (31) exp -> . exp MULT exp
    (32) exp -> . exp DIV exp
    (33) exp -> . exp MOD exp
    (34) exp -> . exp L_OP exp
    (35) exp -> . exp G_OP exp
    (36) exp -> . exp LE_OP exp
    (37) exp -> . exp GE_OP exp
    (38) exp -> . exp NOTEQUALS exp
    (39) exp -> . exp EQUALS_OP exp
    (40) exp -> . exp OR_OP exp
    (41) exp -> . exp AND_OP exp
    (42) exp -> . exp MUL_ASSIGN exp
    (43) exp -> . exp DIV_ASSIGN exp
    (44) exp -> . exp MOD_ASSIGN exp
    (45) exp -> . exp ADD_ASSIGN exp
    (46) exp -> . exp SUB_ASSIGN exp
    (47) exp -> . exp LEFT_ASSIGN exp
    (48) exp -> . exp RIGHT_ASSIGN exp
    (49) exp -> . exp AND_ASSIGN exp
    (50) exp -> . exp XOR_ASSIGN exp
    (51) exp -> . exp OR_ASSIGN exp
    (52) exp -> . exp EQUALS exp
    (53) exp -> . unary_expression
    (54) exp -> . LPAREN exp RPAREN
    (55) exp -> . constant
    (56) exp -> . VARIABLE
    (57) unary_expression -> . VARIABLE unary_operator
    (58) unary_expression -> . unary_operator VARIABLE
    (24) constant -> . HEX_INT
    (25) constant -> . DOT_REAL
    (26) constant -> . EXP_REAL
    (27) constant -> . DEC_INT
    (28) constant -> . CHARACTER
    (59) unary_operator -> . INCREMENT
    (60) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 21
    VARIABLE        shift and go to state 23
    HEX_INT         shift and go to state 29
    DOT_REAL        shift and go to state 16
    EXP_REAL        shift and go to state 13
    DEC_INT         shift and go to state 14
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 12
    DECREMENT       shift and go to state 25

    constant                       shift and go to state 10
    unary_expression               shift and go to state 24
    iterative_exp                  shift and go to state 88
    exp                            shift and go to state 89
    unary_operator                 shift and go to state 18

state 48

    (54) exp -> LPAREN exp . RPAREN
    (29) exp -> exp . ADD exp
    (30) exp -> exp . MINUS exp
    (31) exp -> exp . MULT exp
    (32) exp -> exp . DIV exp
    (33) exp -> exp . MOD exp
    (34) exp -> exp . L_OP exp
    (35) exp -> exp . G_OP exp
    (36) exp -> exp . LE_OP exp
    (37) exp -> exp . GE_OP exp
    (38) exp -> exp . NOTEQUALS exp
    (39) exp -> exp . EQUALS_OP exp
    (40) exp -> exp . OR_OP exp
    (41) exp -> exp . AND_OP exp
    (42) exp -> exp . MUL_ASSIGN exp
    (43) exp -> exp . DIV_ASSIGN exp
    (44) exp -> exp . MOD_ASSIGN exp
    (45) exp -> exp . ADD_ASSIGN exp
    (46) exp -> exp . SUB_ASSIGN exp
    (47) exp -> exp . LEFT_ASSIGN exp
    (48) exp -> exp . RIGHT_ASSIGN exp
    (49) exp -> exp . AND_ASSIGN exp
    (50) exp -> exp . XOR_ASSIGN exp
    (51) exp -> exp . OR_ASSIGN exp
    (52) exp -> exp . EQUALS exp

    RPAREN          shift and go to state 90
    ADD             shift and go to state 67
    MINUS           shift and go to state 57
    MULT            shift and go to state 58
    DIV             shift and go to state 56
    MOD             shift and go to state 76
    L_OP            shift and go to state 73
    G_OP            shift and go to state 61
    LE_OP           shift and go to state 59
    GE_OP           shift and go to state 68
    NOTEQUALS       shift and go to state 52
    EQUALS_OP       shift and go to state 53
    OR_OP           shift and go to state 62
    AND_OP          shift and go to state 66
    MUL_ASSIGN      shift and go to state 74
    DIV_ASSIGN      shift and go to state 54
    MOD_ASSIGN      shift and go to state 70
    ADD_ASSIGN      shift and go to state 64
    SUB_ASSIGN      shift and go to state 69
    LEFT_ASSIGN     shift and go to state 75
    RIGHT_ASSIGN    shift and go to state 60
    AND_ASSIGN      shift and go to state 63
    XOR_ASSIGN      shift and go to state 71
    OR_ASSIGN       shift and go to state 72
    EQUALS          shift and go to state 65


state 49

    (57) unary_expression -> VARIABLE unary_operator .

    ADD             reduce using rule 57 (unary_expression -> VARIABLE unary_operator .)
    MINUS           reduce using rule 57 (unary_expression -> VARIABLE unary_operator .)
    MULT            reduce using rule 57 (unary_expression -> VARIABLE unary_operator .)
    DIV             reduce using rule 57 (unary_expression -> VARIABLE unary_operator .)
    MOD             reduce using rule 57 (unary_expression -> VARIABLE unary_operator .)
    L_OP            reduce using rule 57 (unary_expression -> VARIABLE unary_operator .)
    G_OP            reduce using rule 57 (unary_expression -> VARIABLE unary_operator .)
    LE_OP           reduce using rule 57 (unary_expression -> VARIABLE unary_operator .)
    GE_OP           reduce using rule 57 (unary_expression -> VARIABLE unary_operator .)
    NOTEQUALS       reduce using rule 57 (unary_expression -> VARIABLE unary_operator .)
    EQUALS_OP       reduce using rule 57 (unary_expression -> VARIABLE unary_operator .)
    OR_OP           reduce using rule 57 (unary_expression -> VARIABLE unary_operator .)
    AND_OP          reduce using rule 57 (unary_expression -> VARIABLE unary_operator .)
    MUL_ASSIGN      reduce using rule 57 (unary_expression -> VARIABLE unary_operator .)
    DIV_ASSIGN      reduce using rule 57 (unary_expression -> VARIABLE unary_operator .)
    MOD_ASSIGN      reduce using rule 57 (unary_expression -> VARIABLE unary_operator .)
    ADD_ASSIGN      reduce using rule 57 (unary_expression -> VARIABLE unary_operator .)
    SUB_ASSIGN      reduce using rule 57 (unary_expression -> VARIABLE unary_operator .)
    LEFT_ASSIGN     reduce using rule 57 (unary_expression -> VARIABLE unary_operator .)
    RIGHT_ASSIGN    reduce using rule 57 (unary_expression -> VARIABLE unary_operator .)
    AND_ASSIGN      reduce using rule 57 (unary_expression -> VARIABLE unary_operator .)
    XOR_ASSIGN      reduce using rule 57 (unary_expression -> VARIABLE unary_operator .)
    OR_ASSIGN       reduce using rule 57 (unary_expression -> VARIABLE unary_operator .)
    EQUALS          reduce using rule 57 (unary_expression -> VARIABLE unary_operator .)
    SEMI_COLON      reduce using rule 57 (unary_expression -> VARIABLE unary_operator .)
    RPAREN          reduce using rule 57 (unary_expression -> VARIABLE unary_operator .)
    COMMA           reduce using rule 57 (unary_expression -> VARIABLE unary_operator .)


state 50

    (8) constant_statement -> BREAK SEMI_COLON .

    RBRACE          reduce using rule 8 (constant_statement -> BREAK SEMI_COLON .)
    LPAREN          reduce using rule 8 (constant_statement -> BREAK SEMI_COLON .)
    VARIABLE        reduce using rule 8 (constant_statement -> BREAK SEMI_COLON .)
    FOR             reduce using rule 8 (constant_statement -> BREAK SEMI_COLON .)
    WHILE           reduce using rule 8 (constant_statement -> BREAK SEMI_COLON .)
    DO              reduce using rule 8 (constant_statement -> BREAK SEMI_COLON .)
    BREAK           reduce using rule 8 (constant_statement -> BREAK SEMI_COLON .)
    CONTINUE        reduce using rule 8 (constant_statement -> BREAK SEMI_COLON .)
    RETURN          reduce using rule 8 (constant_statement -> BREAK SEMI_COLON .)
    INT             reduce using rule 8 (constant_statement -> BREAK SEMI_COLON .)
    FLOAT           reduce using rule 8 (constant_statement -> BREAK SEMI_COLON .)
    CHAR            reduce using rule 8 (constant_statement -> BREAK SEMI_COLON .)
    DOUBLE          reduce using rule 8 (constant_statement -> BREAK SEMI_COLON .)
    VOID            reduce using rule 8 (constant_statement -> BREAK SEMI_COLON .)
    SHORT           reduce using rule 8 (constant_statement -> BREAK SEMI_COLON .)
    LONG            reduce using rule 8 (constant_statement -> BREAK SEMI_COLON .)
    HEX_INT         reduce using rule 8 (constant_statement -> BREAK SEMI_COLON .)
    DOT_REAL        reduce using rule 8 (constant_statement -> BREAK SEMI_COLON .)
    EXP_REAL        reduce using rule 8 (constant_statement -> BREAK SEMI_COLON .)
    DEC_INT         reduce using rule 8 (constant_statement -> BREAK SEMI_COLON .)
    CHARACTER       reduce using rule 8 (constant_statement -> BREAK SEMI_COLON .)
    INCREMENT       reduce using rule 8 (constant_statement -> BREAK SEMI_COLON .)
    DECREMENT       reduce using rule 8 (constant_statement -> BREAK SEMI_COLON .)
    $end            reduce using rule 8 (constant_statement -> BREAK SEMI_COLON .)


state 51

    (9) constant_statement -> CONTINUE SEMI_COLON .

    RBRACE          reduce using rule 9 (constant_statement -> CONTINUE SEMI_COLON .)
    LPAREN          reduce using rule 9 (constant_statement -> CONTINUE SEMI_COLON .)
    VARIABLE        reduce using rule 9 (constant_statement -> CONTINUE SEMI_COLON .)
    FOR             reduce using rule 9 (constant_statement -> CONTINUE SEMI_COLON .)
    WHILE           reduce using rule 9 (constant_statement -> CONTINUE SEMI_COLON .)
    DO              reduce using rule 9 (constant_statement -> CONTINUE SEMI_COLON .)
    BREAK           reduce using rule 9 (constant_statement -> CONTINUE SEMI_COLON .)
    CONTINUE        reduce using rule 9 (constant_statement -> CONTINUE SEMI_COLON .)
    RETURN          reduce using rule 9 (constant_statement -> CONTINUE SEMI_COLON .)
    INT             reduce using rule 9 (constant_statement -> CONTINUE SEMI_COLON .)
    FLOAT           reduce using rule 9 (constant_statement -> CONTINUE SEMI_COLON .)
    CHAR            reduce using rule 9 (constant_statement -> CONTINUE SEMI_COLON .)
    DOUBLE          reduce using rule 9 (constant_statement -> CONTINUE SEMI_COLON .)
    VOID            reduce using rule 9 (constant_statement -> CONTINUE SEMI_COLON .)
    SHORT           reduce using rule 9 (constant_statement -> CONTINUE SEMI_COLON .)
    LONG            reduce using rule 9 (constant_statement -> CONTINUE SEMI_COLON .)
    HEX_INT         reduce using rule 9 (constant_statement -> CONTINUE SEMI_COLON .)
    DOT_REAL        reduce using rule 9 (constant_statement -> CONTINUE SEMI_COLON .)
    EXP_REAL        reduce using rule 9 (constant_statement -> CONTINUE SEMI_COLON .)
    DEC_INT         reduce using rule 9 (constant_statement -> CONTINUE SEMI_COLON .)
    CHARACTER       reduce using rule 9 (constant_statement -> CONTINUE SEMI_COLON .)
    INCREMENT       reduce using rule 9 (constant_statement -> CONTINUE SEMI_COLON .)
    DECREMENT       reduce using rule 9 (constant_statement -> CONTINUE SEMI_COLON .)
    $end            reduce using rule 9 (constant_statement -> CONTINUE SEMI_COLON .)


state 52

    (38) exp -> exp NOTEQUALS . exp
    (29) exp -> . exp ADD exp
    (30) exp -> . exp MINUS exp
    (31) exp -> . exp MULT exp
    (32) exp -> . exp DIV exp
    (33) exp -> . exp MOD exp
    (34) exp -> . exp L_OP exp
    (35) exp -> . exp G_OP exp
    (36) exp -> . exp LE_OP exp
    (37) exp -> . exp GE_OP exp
    (38) exp -> . exp NOTEQUALS exp
    (39) exp -> . exp EQUALS_OP exp
    (40) exp -> . exp OR_OP exp
    (41) exp -> . exp AND_OP exp
    (42) exp -> . exp MUL_ASSIGN exp
    (43) exp -> . exp DIV_ASSIGN exp
    (44) exp -> . exp MOD_ASSIGN exp
    (45) exp -> . exp ADD_ASSIGN exp
    (46) exp -> . exp SUB_ASSIGN exp
    (47) exp -> . exp LEFT_ASSIGN exp
    (48) exp -> . exp RIGHT_ASSIGN exp
    (49) exp -> . exp AND_ASSIGN exp
    (50) exp -> . exp XOR_ASSIGN exp
    (51) exp -> . exp OR_ASSIGN exp
    (52) exp -> . exp EQUALS exp
    (53) exp -> . unary_expression
    (54) exp -> . LPAREN exp RPAREN
    (55) exp -> . constant
    (56) exp -> . VARIABLE
    (57) unary_expression -> . VARIABLE unary_operator
    (58) unary_expression -> . unary_operator VARIABLE
    (24) constant -> . HEX_INT
    (25) constant -> . DOT_REAL
    (26) constant -> . EXP_REAL
    (27) constant -> . DEC_INT
    (28) constant -> . CHARACTER
    (59) unary_operator -> . INCREMENT
    (60) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 21
    VARIABLE        shift and go to state 23
    HEX_INT         shift and go to state 29
    DOT_REAL        shift and go to state 16
    EXP_REAL        shift and go to state 13
    DEC_INT         shift and go to state 14
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 12
    DECREMENT       shift and go to state 25

    constant                       shift and go to state 10
    unary_expression               shift and go to state 24
    exp                            shift and go to state 91
    unary_operator                 shift and go to state 18

state 53

    (39) exp -> exp EQUALS_OP . exp
    (29) exp -> . exp ADD exp
    (30) exp -> . exp MINUS exp
    (31) exp -> . exp MULT exp
    (32) exp -> . exp DIV exp
    (33) exp -> . exp MOD exp
    (34) exp -> . exp L_OP exp
    (35) exp -> . exp G_OP exp
    (36) exp -> . exp LE_OP exp
    (37) exp -> . exp GE_OP exp
    (38) exp -> . exp NOTEQUALS exp
    (39) exp -> . exp EQUALS_OP exp
    (40) exp -> . exp OR_OP exp
    (41) exp -> . exp AND_OP exp
    (42) exp -> . exp MUL_ASSIGN exp
    (43) exp -> . exp DIV_ASSIGN exp
    (44) exp -> . exp MOD_ASSIGN exp
    (45) exp -> . exp ADD_ASSIGN exp
    (46) exp -> . exp SUB_ASSIGN exp
    (47) exp -> . exp LEFT_ASSIGN exp
    (48) exp -> . exp RIGHT_ASSIGN exp
    (49) exp -> . exp AND_ASSIGN exp
    (50) exp -> . exp XOR_ASSIGN exp
    (51) exp -> . exp OR_ASSIGN exp
    (52) exp -> . exp EQUALS exp
    (53) exp -> . unary_expression
    (54) exp -> . LPAREN exp RPAREN
    (55) exp -> . constant
    (56) exp -> . VARIABLE
    (57) unary_expression -> . VARIABLE unary_operator
    (58) unary_expression -> . unary_operator VARIABLE
    (24) constant -> . HEX_INT
    (25) constant -> . DOT_REAL
    (26) constant -> . EXP_REAL
    (27) constant -> . DEC_INT
    (28) constant -> . CHARACTER
    (59) unary_operator -> . INCREMENT
    (60) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 21
    VARIABLE        shift and go to state 23
    HEX_INT         shift and go to state 29
    DOT_REAL        shift and go to state 16
    EXP_REAL        shift and go to state 13
    DEC_INT         shift and go to state 14
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 12
    DECREMENT       shift and go to state 25

    constant                       shift and go to state 10
    unary_expression               shift and go to state 24
    exp                            shift and go to state 92
    unary_operator                 shift and go to state 18

state 54

    (43) exp -> exp DIV_ASSIGN . exp
    (29) exp -> . exp ADD exp
    (30) exp -> . exp MINUS exp
    (31) exp -> . exp MULT exp
    (32) exp -> . exp DIV exp
    (33) exp -> . exp MOD exp
    (34) exp -> . exp L_OP exp
    (35) exp -> . exp G_OP exp
    (36) exp -> . exp LE_OP exp
    (37) exp -> . exp GE_OP exp
    (38) exp -> . exp NOTEQUALS exp
    (39) exp -> . exp EQUALS_OP exp
    (40) exp -> . exp OR_OP exp
    (41) exp -> . exp AND_OP exp
    (42) exp -> . exp MUL_ASSIGN exp
    (43) exp -> . exp DIV_ASSIGN exp
    (44) exp -> . exp MOD_ASSIGN exp
    (45) exp -> . exp ADD_ASSIGN exp
    (46) exp -> . exp SUB_ASSIGN exp
    (47) exp -> . exp LEFT_ASSIGN exp
    (48) exp -> . exp RIGHT_ASSIGN exp
    (49) exp -> . exp AND_ASSIGN exp
    (50) exp -> . exp XOR_ASSIGN exp
    (51) exp -> . exp OR_ASSIGN exp
    (52) exp -> . exp EQUALS exp
    (53) exp -> . unary_expression
    (54) exp -> . LPAREN exp RPAREN
    (55) exp -> . constant
    (56) exp -> . VARIABLE
    (57) unary_expression -> . VARIABLE unary_operator
    (58) unary_expression -> . unary_operator VARIABLE
    (24) constant -> . HEX_INT
    (25) constant -> . DOT_REAL
    (26) constant -> . EXP_REAL
    (27) constant -> . DEC_INT
    (28) constant -> . CHARACTER
    (59) unary_operator -> . INCREMENT
    (60) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 21
    VARIABLE        shift and go to state 23
    HEX_INT         shift and go to state 29
    DOT_REAL        shift and go to state 16
    EXP_REAL        shift and go to state 13
    DEC_INT         shift and go to state 14
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 12
    DECREMENT       shift and go to state 25

    constant                       shift and go to state 10
    unary_expression               shift and go to state 24
    exp                            shift and go to state 93
    unary_operator                 shift and go to state 18

state 55

    (4) statement -> exp SEMI_COLON .

    LPAREN          reduce using rule 4 (statement -> exp SEMI_COLON .)
    VARIABLE        reduce using rule 4 (statement -> exp SEMI_COLON .)
    FOR             reduce using rule 4 (statement -> exp SEMI_COLON .)
    WHILE           reduce using rule 4 (statement -> exp SEMI_COLON .)
    DO              reduce using rule 4 (statement -> exp SEMI_COLON .)
    BREAK           reduce using rule 4 (statement -> exp SEMI_COLON .)
    CONTINUE        reduce using rule 4 (statement -> exp SEMI_COLON .)
    RETURN          reduce using rule 4 (statement -> exp SEMI_COLON .)
    INT             reduce using rule 4 (statement -> exp SEMI_COLON .)
    FLOAT           reduce using rule 4 (statement -> exp SEMI_COLON .)
    CHAR            reduce using rule 4 (statement -> exp SEMI_COLON .)
    DOUBLE          reduce using rule 4 (statement -> exp SEMI_COLON .)
    VOID            reduce using rule 4 (statement -> exp SEMI_COLON .)
    SHORT           reduce using rule 4 (statement -> exp SEMI_COLON .)
    LONG            reduce using rule 4 (statement -> exp SEMI_COLON .)
    HEX_INT         reduce using rule 4 (statement -> exp SEMI_COLON .)
    DOT_REAL        reduce using rule 4 (statement -> exp SEMI_COLON .)
    EXP_REAL        reduce using rule 4 (statement -> exp SEMI_COLON .)
    DEC_INT         reduce using rule 4 (statement -> exp SEMI_COLON .)
    CHARACTER       reduce using rule 4 (statement -> exp SEMI_COLON .)
    INCREMENT       reduce using rule 4 (statement -> exp SEMI_COLON .)
    DECREMENT       reduce using rule 4 (statement -> exp SEMI_COLON .)
    $end            reduce using rule 4 (statement -> exp SEMI_COLON .)
    RBRACE          reduce using rule 4 (statement -> exp SEMI_COLON .)


state 56

    (32) exp -> exp DIV . exp
    (29) exp -> . exp ADD exp
    (30) exp -> . exp MINUS exp
    (31) exp -> . exp MULT exp
    (32) exp -> . exp DIV exp
    (33) exp -> . exp MOD exp
    (34) exp -> . exp L_OP exp
    (35) exp -> . exp G_OP exp
    (36) exp -> . exp LE_OP exp
    (37) exp -> . exp GE_OP exp
    (38) exp -> . exp NOTEQUALS exp
    (39) exp -> . exp EQUALS_OP exp
    (40) exp -> . exp OR_OP exp
    (41) exp -> . exp AND_OP exp
    (42) exp -> . exp MUL_ASSIGN exp
    (43) exp -> . exp DIV_ASSIGN exp
    (44) exp -> . exp MOD_ASSIGN exp
    (45) exp -> . exp ADD_ASSIGN exp
    (46) exp -> . exp SUB_ASSIGN exp
    (47) exp -> . exp LEFT_ASSIGN exp
    (48) exp -> . exp RIGHT_ASSIGN exp
    (49) exp -> . exp AND_ASSIGN exp
    (50) exp -> . exp XOR_ASSIGN exp
    (51) exp -> . exp OR_ASSIGN exp
    (52) exp -> . exp EQUALS exp
    (53) exp -> . unary_expression
    (54) exp -> . LPAREN exp RPAREN
    (55) exp -> . constant
    (56) exp -> . VARIABLE
    (57) unary_expression -> . VARIABLE unary_operator
    (58) unary_expression -> . unary_operator VARIABLE
    (24) constant -> . HEX_INT
    (25) constant -> . DOT_REAL
    (26) constant -> . EXP_REAL
    (27) constant -> . DEC_INT
    (28) constant -> . CHARACTER
    (59) unary_operator -> . INCREMENT
    (60) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 21
    VARIABLE        shift and go to state 23
    HEX_INT         shift and go to state 29
    DOT_REAL        shift and go to state 16
    EXP_REAL        shift and go to state 13
    DEC_INT         shift and go to state 14
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 12
    DECREMENT       shift and go to state 25

    constant                       shift and go to state 10
    unary_expression               shift and go to state 24
    exp                            shift and go to state 94
    unary_operator                 shift and go to state 18

state 57

    (30) exp -> exp MINUS . exp
    (29) exp -> . exp ADD exp
    (30) exp -> . exp MINUS exp
    (31) exp -> . exp MULT exp
    (32) exp -> . exp DIV exp
    (33) exp -> . exp MOD exp
    (34) exp -> . exp L_OP exp
    (35) exp -> . exp G_OP exp
    (36) exp -> . exp LE_OP exp
    (37) exp -> . exp GE_OP exp
    (38) exp -> . exp NOTEQUALS exp
    (39) exp -> . exp EQUALS_OP exp
    (40) exp -> . exp OR_OP exp
    (41) exp -> . exp AND_OP exp
    (42) exp -> . exp MUL_ASSIGN exp
    (43) exp -> . exp DIV_ASSIGN exp
    (44) exp -> . exp MOD_ASSIGN exp
    (45) exp -> . exp ADD_ASSIGN exp
    (46) exp -> . exp SUB_ASSIGN exp
    (47) exp -> . exp LEFT_ASSIGN exp
    (48) exp -> . exp RIGHT_ASSIGN exp
    (49) exp -> . exp AND_ASSIGN exp
    (50) exp -> . exp XOR_ASSIGN exp
    (51) exp -> . exp OR_ASSIGN exp
    (52) exp -> . exp EQUALS exp
    (53) exp -> . unary_expression
    (54) exp -> . LPAREN exp RPAREN
    (55) exp -> . constant
    (56) exp -> . VARIABLE
    (57) unary_expression -> . VARIABLE unary_operator
    (58) unary_expression -> . unary_operator VARIABLE
    (24) constant -> . HEX_INT
    (25) constant -> . DOT_REAL
    (26) constant -> . EXP_REAL
    (27) constant -> . DEC_INT
    (28) constant -> . CHARACTER
    (59) unary_operator -> . INCREMENT
    (60) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 21
    VARIABLE        shift and go to state 23
    HEX_INT         shift and go to state 29
    DOT_REAL        shift and go to state 16
    EXP_REAL        shift and go to state 13
    DEC_INT         shift and go to state 14
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 12
    DECREMENT       shift and go to state 25

    constant                       shift and go to state 10
    unary_expression               shift and go to state 24
    exp                            shift and go to state 95
    unary_operator                 shift and go to state 18

state 58

    (31) exp -> exp MULT . exp
    (29) exp -> . exp ADD exp
    (30) exp -> . exp MINUS exp
    (31) exp -> . exp MULT exp
    (32) exp -> . exp DIV exp
    (33) exp -> . exp MOD exp
    (34) exp -> . exp L_OP exp
    (35) exp -> . exp G_OP exp
    (36) exp -> . exp LE_OP exp
    (37) exp -> . exp GE_OP exp
    (38) exp -> . exp NOTEQUALS exp
    (39) exp -> . exp EQUALS_OP exp
    (40) exp -> . exp OR_OP exp
    (41) exp -> . exp AND_OP exp
    (42) exp -> . exp MUL_ASSIGN exp
    (43) exp -> . exp DIV_ASSIGN exp
    (44) exp -> . exp MOD_ASSIGN exp
    (45) exp -> . exp ADD_ASSIGN exp
    (46) exp -> . exp SUB_ASSIGN exp
    (47) exp -> . exp LEFT_ASSIGN exp
    (48) exp -> . exp RIGHT_ASSIGN exp
    (49) exp -> . exp AND_ASSIGN exp
    (50) exp -> . exp XOR_ASSIGN exp
    (51) exp -> . exp OR_ASSIGN exp
    (52) exp -> . exp EQUALS exp
    (53) exp -> . unary_expression
    (54) exp -> . LPAREN exp RPAREN
    (55) exp -> . constant
    (56) exp -> . VARIABLE
    (57) unary_expression -> . VARIABLE unary_operator
    (58) unary_expression -> . unary_operator VARIABLE
    (24) constant -> . HEX_INT
    (25) constant -> . DOT_REAL
    (26) constant -> . EXP_REAL
    (27) constant -> . DEC_INT
    (28) constant -> . CHARACTER
    (59) unary_operator -> . INCREMENT
    (60) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 21
    VARIABLE        shift and go to state 23
    HEX_INT         shift and go to state 29
    DOT_REAL        shift and go to state 16
    EXP_REAL        shift and go to state 13
    DEC_INT         shift and go to state 14
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 12
    DECREMENT       shift and go to state 25

    constant                       shift and go to state 10
    unary_expression               shift and go to state 24
    exp                            shift and go to state 96
    unary_operator                 shift and go to state 18

state 59

    (36) exp -> exp LE_OP . exp
    (29) exp -> . exp ADD exp
    (30) exp -> . exp MINUS exp
    (31) exp -> . exp MULT exp
    (32) exp -> . exp DIV exp
    (33) exp -> . exp MOD exp
    (34) exp -> . exp L_OP exp
    (35) exp -> . exp G_OP exp
    (36) exp -> . exp LE_OP exp
    (37) exp -> . exp GE_OP exp
    (38) exp -> . exp NOTEQUALS exp
    (39) exp -> . exp EQUALS_OP exp
    (40) exp -> . exp OR_OP exp
    (41) exp -> . exp AND_OP exp
    (42) exp -> . exp MUL_ASSIGN exp
    (43) exp -> . exp DIV_ASSIGN exp
    (44) exp -> . exp MOD_ASSIGN exp
    (45) exp -> . exp ADD_ASSIGN exp
    (46) exp -> . exp SUB_ASSIGN exp
    (47) exp -> . exp LEFT_ASSIGN exp
    (48) exp -> . exp RIGHT_ASSIGN exp
    (49) exp -> . exp AND_ASSIGN exp
    (50) exp -> . exp XOR_ASSIGN exp
    (51) exp -> . exp OR_ASSIGN exp
    (52) exp -> . exp EQUALS exp
    (53) exp -> . unary_expression
    (54) exp -> . LPAREN exp RPAREN
    (55) exp -> . constant
    (56) exp -> . VARIABLE
    (57) unary_expression -> . VARIABLE unary_operator
    (58) unary_expression -> . unary_operator VARIABLE
    (24) constant -> . HEX_INT
    (25) constant -> . DOT_REAL
    (26) constant -> . EXP_REAL
    (27) constant -> . DEC_INT
    (28) constant -> . CHARACTER
    (59) unary_operator -> . INCREMENT
    (60) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 21
    VARIABLE        shift and go to state 23
    HEX_INT         shift and go to state 29
    DOT_REAL        shift and go to state 16
    EXP_REAL        shift and go to state 13
    DEC_INT         shift and go to state 14
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 12
    DECREMENT       shift and go to state 25

    constant                       shift and go to state 10
    unary_expression               shift and go to state 24
    exp                            shift and go to state 97
    unary_operator                 shift and go to state 18

state 60

    (48) exp -> exp RIGHT_ASSIGN . exp
    (29) exp -> . exp ADD exp
    (30) exp -> . exp MINUS exp
    (31) exp -> . exp MULT exp
    (32) exp -> . exp DIV exp
    (33) exp -> . exp MOD exp
    (34) exp -> . exp L_OP exp
    (35) exp -> . exp G_OP exp
    (36) exp -> . exp LE_OP exp
    (37) exp -> . exp GE_OP exp
    (38) exp -> . exp NOTEQUALS exp
    (39) exp -> . exp EQUALS_OP exp
    (40) exp -> . exp OR_OP exp
    (41) exp -> . exp AND_OP exp
    (42) exp -> . exp MUL_ASSIGN exp
    (43) exp -> . exp DIV_ASSIGN exp
    (44) exp -> . exp MOD_ASSIGN exp
    (45) exp -> . exp ADD_ASSIGN exp
    (46) exp -> . exp SUB_ASSIGN exp
    (47) exp -> . exp LEFT_ASSIGN exp
    (48) exp -> . exp RIGHT_ASSIGN exp
    (49) exp -> . exp AND_ASSIGN exp
    (50) exp -> . exp XOR_ASSIGN exp
    (51) exp -> . exp OR_ASSIGN exp
    (52) exp -> . exp EQUALS exp
    (53) exp -> . unary_expression
    (54) exp -> . LPAREN exp RPAREN
    (55) exp -> . constant
    (56) exp -> . VARIABLE
    (57) unary_expression -> . VARIABLE unary_operator
    (58) unary_expression -> . unary_operator VARIABLE
    (24) constant -> . HEX_INT
    (25) constant -> . DOT_REAL
    (26) constant -> . EXP_REAL
    (27) constant -> . DEC_INT
    (28) constant -> . CHARACTER
    (59) unary_operator -> . INCREMENT
    (60) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 21
    VARIABLE        shift and go to state 23
    HEX_INT         shift and go to state 29
    DOT_REAL        shift and go to state 16
    EXP_REAL        shift and go to state 13
    DEC_INT         shift and go to state 14
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 12
    DECREMENT       shift and go to state 25

    constant                       shift and go to state 10
    unary_expression               shift and go to state 24
    exp                            shift and go to state 98
    unary_operator                 shift and go to state 18

state 61

    (35) exp -> exp G_OP . exp
    (29) exp -> . exp ADD exp
    (30) exp -> . exp MINUS exp
    (31) exp -> . exp MULT exp
    (32) exp -> . exp DIV exp
    (33) exp -> . exp MOD exp
    (34) exp -> . exp L_OP exp
    (35) exp -> . exp G_OP exp
    (36) exp -> . exp LE_OP exp
    (37) exp -> . exp GE_OP exp
    (38) exp -> . exp NOTEQUALS exp
    (39) exp -> . exp EQUALS_OP exp
    (40) exp -> . exp OR_OP exp
    (41) exp -> . exp AND_OP exp
    (42) exp -> . exp MUL_ASSIGN exp
    (43) exp -> . exp DIV_ASSIGN exp
    (44) exp -> . exp MOD_ASSIGN exp
    (45) exp -> . exp ADD_ASSIGN exp
    (46) exp -> . exp SUB_ASSIGN exp
    (47) exp -> . exp LEFT_ASSIGN exp
    (48) exp -> . exp RIGHT_ASSIGN exp
    (49) exp -> . exp AND_ASSIGN exp
    (50) exp -> . exp XOR_ASSIGN exp
    (51) exp -> . exp OR_ASSIGN exp
    (52) exp -> . exp EQUALS exp
    (53) exp -> . unary_expression
    (54) exp -> . LPAREN exp RPAREN
    (55) exp -> . constant
    (56) exp -> . VARIABLE
    (57) unary_expression -> . VARIABLE unary_operator
    (58) unary_expression -> . unary_operator VARIABLE
    (24) constant -> . HEX_INT
    (25) constant -> . DOT_REAL
    (26) constant -> . EXP_REAL
    (27) constant -> . DEC_INT
    (28) constant -> . CHARACTER
    (59) unary_operator -> . INCREMENT
    (60) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 21
    VARIABLE        shift and go to state 23
    HEX_INT         shift and go to state 29
    DOT_REAL        shift and go to state 16
    EXP_REAL        shift and go to state 13
    DEC_INT         shift and go to state 14
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 12
    DECREMENT       shift and go to state 25

    constant                       shift and go to state 10
    unary_expression               shift and go to state 24
    exp                            shift and go to state 99
    unary_operator                 shift and go to state 18

state 62

    (40) exp -> exp OR_OP . exp
    (29) exp -> . exp ADD exp
    (30) exp -> . exp MINUS exp
    (31) exp -> . exp MULT exp
    (32) exp -> . exp DIV exp
    (33) exp -> . exp MOD exp
    (34) exp -> . exp L_OP exp
    (35) exp -> . exp G_OP exp
    (36) exp -> . exp LE_OP exp
    (37) exp -> . exp GE_OP exp
    (38) exp -> . exp NOTEQUALS exp
    (39) exp -> . exp EQUALS_OP exp
    (40) exp -> . exp OR_OP exp
    (41) exp -> . exp AND_OP exp
    (42) exp -> . exp MUL_ASSIGN exp
    (43) exp -> . exp DIV_ASSIGN exp
    (44) exp -> . exp MOD_ASSIGN exp
    (45) exp -> . exp ADD_ASSIGN exp
    (46) exp -> . exp SUB_ASSIGN exp
    (47) exp -> . exp LEFT_ASSIGN exp
    (48) exp -> . exp RIGHT_ASSIGN exp
    (49) exp -> . exp AND_ASSIGN exp
    (50) exp -> . exp XOR_ASSIGN exp
    (51) exp -> . exp OR_ASSIGN exp
    (52) exp -> . exp EQUALS exp
    (53) exp -> . unary_expression
    (54) exp -> . LPAREN exp RPAREN
    (55) exp -> . constant
    (56) exp -> . VARIABLE
    (57) unary_expression -> . VARIABLE unary_operator
    (58) unary_expression -> . unary_operator VARIABLE
    (24) constant -> . HEX_INT
    (25) constant -> . DOT_REAL
    (26) constant -> . EXP_REAL
    (27) constant -> . DEC_INT
    (28) constant -> . CHARACTER
    (59) unary_operator -> . INCREMENT
    (60) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 21
    VARIABLE        shift and go to state 23
    HEX_INT         shift and go to state 29
    DOT_REAL        shift and go to state 16
    EXP_REAL        shift and go to state 13
    DEC_INT         shift and go to state 14
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 12
    DECREMENT       shift and go to state 25

    constant                       shift and go to state 10
    unary_expression               shift and go to state 24
    exp                            shift and go to state 100
    unary_operator                 shift and go to state 18

state 63

    (49) exp -> exp AND_ASSIGN . exp
    (29) exp -> . exp ADD exp
    (30) exp -> . exp MINUS exp
    (31) exp -> . exp MULT exp
    (32) exp -> . exp DIV exp
    (33) exp -> . exp MOD exp
    (34) exp -> . exp L_OP exp
    (35) exp -> . exp G_OP exp
    (36) exp -> . exp LE_OP exp
    (37) exp -> . exp GE_OP exp
    (38) exp -> . exp NOTEQUALS exp
    (39) exp -> . exp EQUALS_OP exp
    (40) exp -> . exp OR_OP exp
    (41) exp -> . exp AND_OP exp
    (42) exp -> . exp MUL_ASSIGN exp
    (43) exp -> . exp DIV_ASSIGN exp
    (44) exp -> . exp MOD_ASSIGN exp
    (45) exp -> . exp ADD_ASSIGN exp
    (46) exp -> . exp SUB_ASSIGN exp
    (47) exp -> . exp LEFT_ASSIGN exp
    (48) exp -> . exp RIGHT_ASSIGN exp
    (49) exp -> . exp AND_ASSIGN exp
    (50) exp -> . exp XOR_ASSIGN exp
    (51) exp -> . exp OR_ASSIGN exp
    (52) exp -> . exp EQUALS exp
    (53) exp -> . unary_expression
    (54) exp -> . LPAREN exp RPAREN
    (55) exp -> . constant
    (56) exp -> . VARIABLE
    (57) unary_expression -> . VARIABLE unary_operator
    (58) unary_expression -> . unary_operator VARIABLE
    (24) constant -> . HEX_INT
    (25) constant -> . DOT_REAL
    (26) constant -> . EXP_REAL
    (27) constant -> . DEC_INT
    (28) constant -> . CHARACTER
    (59) unary_operator -> . INCREMENT
    (60) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 21
    VARIABLE        shift and go to state 23
    HEX_INT         shift and go to state 29
    DOT_REAL        shift and go to state 16
    EXP_REAL        shift and go to state 13
    DEC_INT         shift and go to state 14
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 12
    DECREMENT       shift and go to state 25

    constant                       shift and go to state 10
    unary_expression               shift and go to state 24
    exp                            shift and go to state 101
    unary_operator                 shift and go to state 18

state 64

    (45) exp -> exp ADD_ASSIGN . exp
    (29) exp -> . exp ADD exp
    (30) exp -> . exp MINUS exp
    (31) exp -> . exp MULT exp
    (32) exp -> . exp DIV exp
    (33) exp -> . exp MOD exp
    (34) exp -> . exp L_OP exp
    (35) exp -> . exp G_OP exp
    (36) exp -> . exp LE_OP exp
    (37) exp -> . exp GE_OP exp
    (38) exp -> . exp NOTEQUALS exp
    (39) exp -> . exp EQUALS_OP exp
    (40) exp -> . exp OR_OP exp
    (41) exp -> . exp AND_OP exp
    (42) exp -> . exp MUL_ASSIGN exp
    (43) exp -> . exp DIV_ASSIGN exp
    (44) exp -> . exp MOD_ASSIGN exp
    (45) exp -> . exp ADD_ASSIGN exp
    (46) exp -> . exp SUB_ASSIGN exp
    (47) exp -> . exp LEFT_ASSIGN exp
    (48) exp -> . exp RIGHT_ASSIGN exp
    (49) exp -> . exp AND_ASSIGN exp
    (50) exp -> . exp XOR_ASSIGN exp
    (51) exp -> . exp OR_ASSIGN exp
    (52) exp -> . exp EQUALS exp
    (53) exp -> . unary_expression
    (54) exp -> . LPAREN exp RPAREN
    (55) exp -> . constant
    (56) exp -> . VARIABLE
    (57) unary_expression -> . VARIABLE unary_operator
    (58) unary_expression -> . unary_operator VARIABLE
    (24) constant -> . HEX_INT
    (25) constant -> . DOT_REAL
    (26) constant -> . EXP_REAL
    (27) constant -> . DEC_INT
    (28) constant -> . CHARACTER
    (59) unary_operator -> . INCREMENT
    (60) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 21
    VARIABLE        shift and go to state 23
    HEX_INT         shift and go to state 29
    DOT_REAL        shift and go to state 16
    EXP_REAL        shift and go to state 13
    DEC_INT         shift and go to state 14
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 12
    DECREMENT       shift and go to state 25

    constant                       shift and go to state 10
    unary_expression               shift and go to state 24
    exp                            shift and go to state 102
    unary_operator                 shift and go to state 18

state 65

    (52) exp -> exp EQUALS . exp
    (29) exp -> . exp ADD exp
    (30) exp -> . exp MINUS exp
    (31) exp -> . exp MULT exp
    (32) exp -> . exp DIV exp
    (33) exp -> . exp MOD exp
    (34) exp -> . exp L_OP exp
    (35) exp -> . exp G_OP exp
    (36) exp -> . exp LE_OP exp
    (37) exp -> . exp GE_OP exp
    (38) exp -> . exp NOTEQUALS exp
    (39) exp -> . exp EQUALS_OP exp
    (40) exp -> . exp OR_OP exp
    (41) exp -> . exp AND_OP exp
    (42) exp -> . exp MUL_ASSIGN exp
    (43) exp -> . exp DIV_ASSIGN exp
    (44) exp -> . exp MOD_ASSIGN exp
    (45) exp -> . exp ADD_ASSIGN exp
    (46) exp -> . exp SUB_ASSIGN exp
    (47) exp -> . exp LEFT_ASSIGN exp
    (48) exp -> . exp RIGHT_ASSIGN exp
    (49) exp -> . exp AND_ASSIGN exp
    (50) exp -> . exp XOR_ASSIGN exp
    (51) exp -> . exp OR_ASSIGN exp
    (52) exp -> . exp EQUALS exp
    (53) exp -> . unary_expression
    (54) exp -> . LPAREN exp RPAREN
    (55) exp -> . constant
    (56) exp -> . VARIABLE
    (57) unary_expression -> . VARIABLE unary_operator
    (58) unary_expression -> . unary_operator VARIABLE
    (24) constant -> . HEX_INT
    (25) constant -> . DOT_REAL
    (26) constant -> . EXP_REAL
    (27) constant -> . DEC_INT
    (28) constant -> . CHARACTER
    (59) unary_operator -> . INCREMENT
    (60) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 21
    VARIABLE        shift and go to state 23
    HEX_INT         shift and go to state 29
    DOT_REAL        shift and go to state 16
    EXP_REAL        shift and go to state 13
    DEC_INT         shift and go to state 14
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 12
    DECREMENT       shift and go to state 25

    constant                       shift and go to state 10
    unary_expression               shift and go to state 24
    exp                            shift and go to state 103
    unary_operator                 shift and go to state 18

state 66

    (41) exp -> exp AND_OP . exp
    (29) exp -> . exp ADD exp
    (30) exp -> . exp MINUS exp
    (31) exp -> . exp MULT exp
    (32) exp -> . exp DIV exp
    (33) exp -> . exp MOD exp
    (34) exp -> . exp L_OP exp
    (35) exp -> . exp G_OP exp
    (36) exp -> . exp LE_OP exp
    (37) exp -> . exp GE_OP exp
    (38) exp -> . exp NOTEQUALS exp
    (39) exp -> . exp EQUALS_OP exp
    (40) exp -> . exp OR_OP exp
    (41) exp -> . exp AND_OP exp
    (42) exp -> . exp MUL_ASSIGN exp
    (43) exp -> . exp DIV_ASSIGN exp
    (44) exp -> . exp MOD_ASSIGN exp
    (45) exp -> . exp ADD_ASSIGN exp
    (46) exp -> . exp SUB_ASSIGN exp
    (47) exp -> . exp LEFT_ASSIGN exp
    (48) exp -> . exp RIGHT_ASSIGN exp
    (49) exp -> . exp AND_ASSIGN exp
    (50) exp -> . exp XOR_ASSIGN exp
    (51) exp -> . exp OR_ASSIGN exp
    (52) exp -> . exp EQUALS exp
    (53) exp -> . unary_expression
    (54) exp -> . LPAREN exp RPAREN
    (55) exp -> . constant
    (56) exp -> . VARIABLE
    (57) unary_expression -> . VARIABLE unary_operator
    (58) unary_expression -> . unary_operator VARIABLE
    (24) constant -> . HEX_INT
    (25) constant -> . DOT_REAL
    (26) constant -> . EXP_REAL
    (27) constant -> . DEC_INT
    (28) constant -> . CHARACTER
    (59) unary_operator -> . INCREMENT
    (60) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 21
    VARIABLE        shift and go to state 23
    HEX_INT         shift and go to state 29
    DOT_REAL        shift and go to state 16
    EXP_REAL        shift and go to state 13
    DEC_INT         shift and go to state 14
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 12
    DECREMENT       shift and go to state 25

    constant                       shift and go to state 10
    unary_expression               shift and go to state 24
    exp                            shift and go to state 104
    unary_operator                 shift and go to state 18

state 67

    (29) exp -> exp ADD . exp
    (29) exp -> . exp ADD exp
    (30) exp -> . exp MINUS exp
    (31) exp -> . exp MULT exp
    (32) exp -> . exp DIV exp
    (33) exp -> . exp MOD exp
    (34) exp -> . exp L_OP exp
    (35) exp -> . exp G_OP exp
    (36) exp -> . exp LE_OP exp
    (37) exp -> . exp GE_OP exp
    (38) exp -> . exp NOTEQUALS exp
    (39) exp -> . exp EQUALS_OP exp
    (40) exp -> . exp OR_OP exp
    (41) exp -> . exp AND_OP exp
    (42) exp -> . exp MUL_ASSIGN exp
    (43) exp -> . exp DIV_ASSIGN exp
    (44) exp -> . exp MOD_ASSIGN exp
    (45) exp -> . exp ADD_ASSIGN exp
    (46) exp -> . exp SUB_ASSIGN exp
    (47) exp -> . exp LEFT_ASSIGN exp
    (48) exp -> . exp RIGHT_ASSIGN exp
    (49) exp -> . exp AND_ASSIGN exp
    (50) exp -> . exp XOR_ASSIGN exp
    (51) exp -> . exp OR_ASSIGN exp
    (52) exp -> . exp EQUALS exp
    (53) exp -> . unary_expression
    (54) exp -> . LPAREN exp RPAREN
    (55) exp -> . constant
    (56) exp -> . VARIABLE
    (57) unary_expression -> . VARIABLE unary_operator
    (58) unary_expression -> . unary_operator VARIABLE
    (24) constant -> . HEX_INT
    (25) constant -> . DOT_REAL
    (26) constant -> . EXP_REAL
    (27) constant -> . DEC_INT
    (28) constant -> . CHARACTER
    (59) unary_operator -> . INCREMENT
    (60) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 21
    VARIABLE        shift and go to state 23
    HEX_INT         shift and go to state 29
    DOT_REAL        shift and go to state 16
    EXP_REAL        shift and go to state 13
    DEC_INT         shift and go to state 14
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 12
    DECREMENT       shift and go to state 25

    constant                       shift and go to state 10
    unary_expression               shift and go to state 24
    exp                            shift and go to state 105
    unary_operator                 shift and go to state 18

state 68

    (37) exp -> exp GE_OP . exp
    (29) exp -> . exp ADD exp
    (30) exp -> . exp MINUS exp
    (31) exp -> . exp MULT exp
    (32) exp -> . exp DIV exp
    (33) exp -> . exp MOD exp
    (34) exp -> . exp L_OP exp
    (35) exp -> . exp G_OP exp
    (36) exp -> . exp LE_OP exp
    (37) exp -> . exp GE_OP exp
    (38) exp -> . exp NOTEQUALS exp
    (39) exp -> . exp EQUALS_OP exp
    (40) exp -> . exp OR_OP exp
    (41) exp -> . exp AND_OP exp
    (42) exp -> . exp MUL_ASSIGN exp
    (43) exp -> . exp DIV_ASSIGN exp
    (44) exp -> . exp MOD_ASSIGN exp
    (45) exp -> . exp ADD_ASSIGN exp
    (46) exp -> . exp SUB_ASSIGN exp
    (47) exp -> . exp LEFT_ASSIGN exp
    (48) exp -> . exp RIGHT_ASSIGN exp
    (49) exp -> . exp AND_ASSIGN exp
    (50) exp -> . exp XOR_ASSIGN exp
    (51) exp -> . exp OR_ASSIGN exp
    (52) exp -> . exp EQUALS exp
    (53) exp -> . unary_expression
    (54) exp -> . LPAREN exp RPAREN
    (55) exp -> . constant
    (56) exp -> . VARIABLE
    (57) unary_expression -> . VARIABLE unary_operator
    (58) unary_expression -> . unary_operator VARIABLE
    (24) constant -> . HEX_INT
    (25) constant -> . DOT_REAL
    (26) constant -> . EXP_REAL
    (27) constant -> . DEC_INT
    (28) constant -> . CHARACTER
    (59) unary_operator -> . INCREMENT
    (60) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 21
    VARIABLE        shift and go to state 23
    HEX_INT         shift and go to state 29
    DOT_REAL        shift and go to state 16
    EXP_REAL        shift and go to state 13
    DEC_INT         shift and go to state 14
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 12
    DECREMENT       shift and go to state 25

    constant                       shift and go to state 10
    unary_expression               shift and go to state 24
    exp                            shift and go to state 106
    unary_operator                 shift and go to state 18

state 69

    (46) exp -> exp SUB_ASSIGN . exp
    (29) exp -> . exp ADD exp
    (30) exp -> . exp MINUS exp
    (31) exp -> . exp MULT exp
    (32) exp -> . exp DIV exp
    (33) exp -> . exp MOD exp
    (34) exp -> . exp L_OP exp
    (35) exp -> . exp G_OP exp
    (36) exp -> . exp LE_OP exp
    (37) exp -> . exp GE_OP exp
    (38) exp -> . exp NOTEQUALS exp
    (39) exp -> . exp EQUALS_OP exp
    (40) exp -> . exp OR_OP exp
    (41) exp -> . exp AND_OP exp
    (42) exp -> . exp MUL_ASSIGN exp
    (43) exp -> . exp DIV_ASSIGN exp
    (44) exp -> . exp MOD_ASSIGN exp
    (45) exp -> . exp ADD_ASSIGN exp
    (46) exp -> . exp SUB_ASSIGN exp
    (47) exp -> . exp LEFT_ASSIGN exp
    (48) exp -> . exp RIGHT_ASSIGN exp
    (49) exp -> . exp AND_ASSIGN exp
    (50) exp -> . exp XOR_ASSIGN exp
    (51) exp -> . exp OR_ASSIGN exp
    (52) exp -> . exp EQUALS exp
    (53) exp -> . unary_expression
    (54) exp -> . LPAREN exp RPAREN
    (55) exp -> . constant
    (56) exp -> . VARIABLE
    (57) unary_expression -> . VARIABLE unary_operator
    (58) unary_expression -> . unary_operator VARIABLE
    (24) constant -> . HEX_INT
    (25) constant -> . DOT_REAL
    (26) constant -> . EXP_REAL
    (27) constant -> . DEC_INT
    (28) constant -> . CHARACTER
    (59) unary_operator -> . INCREMENT
    (60) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 21
    VARIABLE        shift and go to state 23
    HEX_INT         shift and go to state 29
    DOT_REAL        shift and go to state 16
    EXP_REAL        shift and go to state 13
    DEC_INT         shift and go to state 14
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 12
    DECREMENT       shift and go to state 25

    constant                       shift and go to state 10
    unary_expression               shift and go to state 24
    exp                            shift and go to state 107
    unary_operator                 shift and go to state 18

state 70

    (44) exp -> exp MOD_ASSIGN . exp
    (29) exp -> . exp ADD exp
    (30) exp -> . exp MINUS exp
    (31) exp -> . exp MULT exp
    (32) exp -> . exp DIV exp
    (33) exp -> . exp MOD exp
    (34) exp -> . exp L_OP exp
    (35) exp -> . exp G_OP exp
    (36) exp -> . exp LE_OP exp
    (37) exp -> . exp GE_OP exp
    (38) exp -> . exp NOTEQUALS exp
    (39) exp -> . exp EQUALS_OP exp
    (40) exp -> . exp OR_OP exp
    (41) exp -> . exp AND_OP exp
    (42) exp -> . exp MUL_ASSIGN exp
    (43) exp -> . exp DIV_ASSIGN exp
    (44) exp -> . exp MOD_ASSIGN exp
    (45) exp -> . exp ADD_ASSIGN exp
    (46) exp -> . exp SUB_ASSIGN exp
    (47) exp -> . exp LEFT_ASSIGN exp
    (48) exp -> . exp RIGHT_ASSIGN exp
    (49) exp -> . exp AND_ASSIGN exp
    (50) exp -> . exp XOR_ASSIGN exp
    (51) exp -> . exp OR_ASSIGN exp
    (52) exp -> . exp EQUALS exp
    (53) exp -> . unary_expression
    (54) exp -> . LPAREN exp RPAREN
    (55) exp -> . constant
    (56) exp -> . VARIABLE
    (57) unary_expression -> . VARIABLE unary_operator
    (58) unary_expression -> . unary_operator VARIABLE
    (24) constant -> . HEX_INT
    (25) constant -> . DOT_REAL
    (26) constant -> . EXP_REAL
    (27) constant -> . DEC_INT
    (28) constant -> . CHARACTER
    (59) unary_operator -> . INCREMENT
    (60) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 21
    VARIABLE        shift and go to state 23
    HEX_INT         shift and go to state 29
    DOT_REAL        shift and go to state 16
    EXP_REAL        shift and go to state 13
    DEC_INT         shift and go to state 14
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 12
    DECREMENT       shift and go to state 25

    constant                       shift and go to state 10
    unary_expression               shift and go to state 24
    exp                            shift and go to state 108
    unary_operator                 shift and go to state 18

state 71

    (50) exp -> exp XOR_ASSIGN . exp
    (29) exp -> . exp ADD exp
    (30) exp -> . exp MINUS exp
    (31) exp -> . exp MULT exp
    (32) exp -> . exp DIV exp
    (33) exp -> . exp MOD exp
    (34) exp -> . exp L_OP exp
    (35) exp -> . exp G_OP exp
    (36) exp -> . exp LE_OP exp
    (37) exp -> . exp GE_OP exp
    (38) exp -> . exp NOTEQUALS exp
    (39) exp -> . exp EQUALS_OP exp
    (40) exp -> . exp OR_OP exp
    (41) exp -> . exp AND_OP exp
    (42) exp -> . exp MUL_ASSIGN exp
    (43) exp -> . exp DIV_ASSIGN exp
    (44) exp -> . exp MOD_ASSIGN exp
    (45) exp -> . exp ADD_ASSIGN exp
    (46) exp -> . exp SUB_ASSIGN exp
    (47) exp -> . exp LEFT_ASSIGN exp
    (48) exp -> . exp RIGHT_ASSIGN exp
    (49) exp -> . exp AND_ASSIGN exp
    (50) exp -> . exp XOR_ASSIGN exp
    (51) exp -> . exp OR_ASSIGN exp
    (52) exp -> . exp EQUALS exp
    (53) exp -> . unary_expression
    (54) exp -> . LPAREN exp RPAREN
    (55) exp -> . constant
    (56) exp -> . VARIABLE
    (57) unary_expression -> . VARIABLE unary_operator
    (58) unary_expression -> . unary_operator VARIABLE
    (24) constant -> . HEX_INT
    (25) constant -> . DOT_REAL
    (26) constant -> . EXP_REAL
    (27) constant -> . DEC_INT
    (28) constant -> . CHARACTER
    (59) unary_operator -> . INCREMENT
    (60) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 21
    VARIABLE        shift and go to state 23
    HEX_INT         shift and go to state 29
    DOT_REAL        shift and go to state 16
    EXP_REAL        shift and go to state 13
    DEC_INT         shift and go to state 14
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 12
    DECREMENT       shift and go to state 25

    constant                       shift and go to state 10
    unary_expression               shift and go to state 24
    exp                            shift and go to state 109
    unary_operator                 shift and go to state 18

state 72

    (51) exp -> exp OR_ASSIGN . exp
    (29) exp -> . exp ADD exp
    (30) exp -> . exp MINUS exp
    (31) exp -> . exp MULT exp
    (32) exp -> . exp DIV exp
    (33) exp -> . exp MOD exp
    (34) exp -> . exp L_OP exp
    (35) exp -> . exp G_OP exp
    (36) exp -> . exp LE_OP exp
    (37) exp -> . exp GE_OP exp
    (38) exp -> . exp NOTEQUALS exp
    (39) exp -> . exp EQUALS_OP exp
    (40) exp -> . exp OR_OP exp
    (41) exp -> . exp AND_OP exp
    (42) exp -> . exp MUL_ASSIGN exp
    (43) exp -> . exp DIV_ASSIGN exp
    (44) exp -> . exp MOD_ASSIGN exp
    (45) exp -> . exp ADD_ASSIGN exp
    (46) exp -> . exp SUB_ASSIGN exp
    (47) exp -> . exp LEFT_ASSIGN exp
    (48) exp -> . exp RIGHT_ASSIGN exp
    (49) exp -> . exp AND_ASSIGN exp
    (50) exp -> . exp XOR_ASSIGN exp
    (51) exp -> . exp OR_ASSIGN exp
    (52) exp -> . exp EQUALS exp
    (53) exp -> . unary_expression
    (54) exp -> . LPAREN exp RPAREN
    (55) exp -> . constant
    (56) exp -> . VARIABLE
    (57) unary_expression -> . VARIABLE unary_operator
    (58) unary_expression -> . unary_operator VARIABLE
    (24) constant -> . HEX_INT
    (25) constant -> . DOT_REAL
    (26) constant -> . EXP_REAL
    (27) constant -> . DEC_INT
    (28) constant -> . CHARACTER
    (59) unary_operator -> . INCREMENT
    (60) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 21
    VARIABLE        shift and go to state 23
    HEX_INT         shift and go to state 29
    DOT_REAL        shift and go to state 16
    EXP_REAL        shift and go to state 13
    DEC_INT         shift and go to state 14
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 12
    DECREMENT       shift and go to state 25

    constant                       shift and go to state 10
    unary_expression               shift and go to state 24
    exp                            shift and go to state 110
    unary_operator                 shift and go to state 18

state 73

    (34) exp -> exp L_OP . exp
    (29) exp -> . exp ADD exp
    (30) exp -> . exp MINUS exp
    (31) exp -> . exp MULT exp
    (32) exp -> . exp DIV exp
    (33) exp -> . exp MOD exp
    (34) exp -> . exp L_OP exp
    (35) exp -> . exp G_OP exp
    (36) exp -> . exp LE_OP exp
    (37) exp -> . exp GE_OP exp
    (38) exp -> . exp NOTEQUALS exp
    (39) exp -> . exp EQUALS_OP exp
    (40) exp -> . exp OR_OP exp
    (41) exp -> . exp AND_OP exp
    (42) exp -> . exp MUL_ASSIGN exp
    (43) exp -> . exp DIV_ASSIGN exp
    (44) exp -> . exp MOD_ASSIGN exp
    (45) exp -> . exp ADD_ASSIGN exp
    (46) exp -> . exp SUB_ASSIGN exp
    (47) exp -> . exp LEFT_ASSIGN exp
    (48) exp -> . exp RIGHT_ASSIGN exp
    (49) exp -> . exp AND_ASSIGN exp
    (50) exp -> . exp XOR_ASSIGN exp
    (51) exp -> . exp OR_ASSIGN exp
    (52) exp -> . exp EQUALS exp
    (53) exp -> . unary_expression
    (54) exp -> . LPAREN exp RPAREN
    (55) exp -> . constant
    (56) exp -> . VARIABLE
    (57) unary_expression -> . VARIABLE unary_operator
    (58) unary_expression -> . unary_operator VARIABLE
    (24) constant -> . HEX_INT
    (25) constant -> . DOT_REAL
    (26) constant -> . EXP_REAL
    (27) constant -> . DEC_INT
    (28) constant -> . CHARACTER
    (59) unary_operator -> . INCREMENT
    (60) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 21
    VARIABLE        shift and go to state 23
    HEX_INT         shift and go to state 29
    DOT_REAL        shift and go to state 16
    EXP_REAL        shift and go to state 13
    DEC_INT         shift and go to state 14
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 12
    DECREMENT       shift and go to state 25

    constant                       shift and go to state 10
    unary_expression               shift and go to state 24
    exp                            shift and go to state 111
    unary_operator                 shift and go to state 18

state 74

    (42) exp -> exp MUL_ASSIGN . exp
    (29) exp -> . exp ADD exp
    (30) exp -> . exp MINUS exp
    (31) exp -> . exp MULT exp
    (32) exp -> . exp DIV exp
    (33) exp -> . exp MOD exp
    (34) exp -> . exp L_OP exp
    (35) exp -> . exp G_OP exp
    (36) exp -> . exp LE_OP exp
    (37) exp -> . exp GE_OP exp
    (38) exp -> . exp NOTEQUALS exp
    (39) exp -> . exp EQUALS_OP exp
    (40) exp -> . exp OR_OP exp
    (41) exp -> . exp AND_OP exp
    (42) exp -> . exp MUL_ASSIGN exp
    (43) exp -> . exp DIV_ASSIGN exp
    (44) exp -> . exp MOD_ASSIGN exp
    (45) exp -> . exp ADD_ASSIGN exp
    (46) exp -> . exp SUB_ASSIGN exp
    (47) exp -> . exp LEFT_ASSIGN exp
    (48) exp -> . exp RIGHT_ASSIGN exp
    (49) exp -> . exp AND_ASSIGN exp
    (50) exp -> . exp XOR_ASSIGN exp
    (51) exp -> . exp OR_ASSIGN exp
    (52) exp -> . exp EQUALS exp
    (53) exp -> . unary_expression
    (54) exp -> . LPAREN exp RPAREN
    (55) exp -> . constant
    (56) exp -> . VARIABLE
    (57) unary_expression -> . VARIABLE unary_operator
    (58) unary_expression -> . unary_operator VARIABLE
    (24) constant -> . HEX_INT
    (25) constant -> . DOT_REAL
    (26) constant -> . EXP_REAL
    (27) constant -> . DEC_INT
    (28) constant -> . CHARACTER
    (59) unary_operator -> . INCREMENT
    (60) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 21
    VARIABLE        shift and go to state 23
    HEX_INT         shift and go to state 29
    DOT_REAL        shift and go to state 16
    EXP_REAL        shift and go to state 13
    DEC_INT         shift and go to state 14
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 12
    DECREMENT       shift and go to state 25

    constant                       shift and go to state 10
    unary_expression               shift and go to state 24
    exp                            shift and go to state 112
    unary_operator                 shift and go to state 18

state 75

    (47) exp -> exp LEFT_ASSIGN . exp
    (29) exp -> . exp ADD exp
    (30) exp -> . exp MINUS exp
    (31) exp -> . exp MULT exp
    (32) exp -> . exp DIV exp
    (33) exp -> . exp MOD exp
    (34) exp -> . exp L_OP exp
    (35) exp -> . exp G_OP exp
    (36) exp -> . exp LE_OP exp
    (37) exp -> . exp GE_OP exp
    (38) exp -> . exp NOTEQUALS exp
    (39) exp -> . exp EQUALS_OP exp
    (40) exp -> . exp OR_OP exp
    (41) exp -> . exp AND_OP exp
    (42) exp -> . exp MUL_ASSIGN exp
    (43) exp -> . exp DIV_ASSIGN exp
    (44) exp -> . exp MOD_ASSIGN exp
    (45) exp -> . exp ADD_ASSIGN exp
    (46) exp -> . exp SUB_ASSIGN exp
    (47) exp -> . exp LEFT_ASSIGN exp
    (48) exp -> . exp RIGHT_ASSIGN exp
    (49) exp -> . exp AND_ASSIGN exp
    (50) exp -> . exp XOR_ASSIGN exp
    (51) exp -> . exp OR_ASSIGN exp
    (52) exp -> . exp EQUALS exp
    (53) exp -> . unary_expression
    (54) exp -> . LPAREN exp RPAREN
    (55) exp -> . constant
    (56) exp -> . VARIABLE
    (57) unary_expression -> . VARIABLE unary_operator
    (58) unary_expression -> . unary_operator VARIABLE
    (24) constant -> . HEX_INT
    (25) constant -> . DOT_REAL
    (26) constant -> . EXP_REAL
    (27) constant -> . DEC_INT
    (28) constant -> . CHARACTER
    (59) unary_operator -> . INCREMENT
    (60) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 21
    VARIABLE        shift and go to state 23
    HEX_INT         shift and go to state 29
    DOT_REAL        shift and go to state 16
    EXP_REAL        shift and go to state 13
    DEC_INT         shift and go to state 14
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 12
    DECREMENT       shift and go to state 25

    constant                       shift and go to state 10
    unary_expression               shift and go to state 24
    exp                            shift and go to state 113
    unary_operator                 shift and go to state 18

state 76

    (33) exp -> exp MOD . exp
    (29) exp -> . exp ADD exp
    (30) exp -> . exp MINUS exp
    (31) exp -> . exp MULT exp
    (32) exp -> . exp DIV exp
    (33) exp -> . exp MOD exp
    (34) exp -> . exp L_OP exp
    (35) exp -> . exp G_OP exp
    (36) exp -> . exp LE_OP exp
    (37) exp -> . exp GE_OP exp
    (38) exp -> . exp NOTEQUALS exp
    (39) exp -> . exp EQUALS_OP exp
    (40) exp -> . exp OR_OP exp
    (41) exp -> . exp AND_OP exp
    (42) exp -> . exp MUL_ASSIGN exp
    (43) exp -> . exp DIV_ASSIGN exp
    (44) exp -> . exp MOD_ASSIGN exp
    (45) exp -> . exp ADD_ASSIGN exp
    (46) exp -> . exp SUB_ASSIGN exp
    (47) exp -> . exp LEFT_ASSIGN exp
    (48) exp -> . exp RIGHT_ASSIGN exp
    (49) exp -> . exp AND_ASSIGN exp
    (50) exp -> . exp XOR_ASSIGN exp
    (51) exp -> . exp OR_ASSIGN exp
    (52) exp -> . exp EQUALS exp
    (53) exp -> . unary_expression
    (54) exp -> . LPAREN exp RPAREN
    (55) exp -> . constant
    (56) exp -> . VARIABLE
    (57) unary_expression -> . VARIABLE unary_operator
    (58) unary_expression -> . unary_operator VARIABLE
    (24) constant -> . HEX_INT
    (25) constant -> . DOT_REAL
    (26) constant -> . EXP_REAL
    (27) constant -> . DEC_INT
    (28) constant -> . CHARACTER
    (59) unary_operator -> . INCREMENT
    (60) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 21
    VARIABLE        shift and go to state 23
    HEX_INT         shift and go to state 29
    DOT_REAL        shift and go to state 16
    EXP_REAL        shift and go to state 13
    DEC_INT         shift and go to state 14
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 12
    DECREMENT       shift and go to state 25

    constant                       shift and go to state 10
    unary_expression               shift and go to state 24
    exp                            shift and go to state 114
    unary_operator                 shift and go to state 18

state 77

    (11) constant_statement -> RETURN exp SEMI_COLON .

    RBRACE          reduce using rule 11 (constant_statement -> RETURN exp SEMI_COLON .)
    LPAREN          reduce using rule 11 (constant_statement -> RETURN exp SEMI_COLON .)
    VARIABLE        reduce using rule 11 (constant_statement -> RETURN exp SEMI_COLON .)
    FOR             reduce using rule 11 (constant_statement -> RETURN exp SEMI_COLON .)
    WHILE           reduce using rule 11 (constant_statement -> RETURN exp SEMI_COLON .)
    DO              reduce using rule 11 (constant_statement -> RETURN exp SEMI_COLON .)
    BREAK           reduce using rule 11 (constant_statement -> RETURN exp SEMI_COLON .)
    CONTINUE        reduce using rule 11 (constant_statement -> RETURN exp SEMI_COLON .)
    RETURN          reduce using rule 11 (constant_statement -> RETURN exp SEMI_COLON .)
    INT             reduce using rule 11 (constant_statement -> RETURN exp SEMI_COLON .)
    FLOAT           reduce using rule 11 (constant_statement -> RETURN exp SEMI_COLON .)
    CHAR            reduce using rule 11 (constant_statement -> RETURN exp SEMI_COLON .)
    DOUBLE          reduce using rule 11 (constant_statement -> RETURN exp SEMI_COLON .)
    VOID            reduce using rule 11 (constant_statement -> RETURN exp SEMI_COLON .)
    SHORT           reduce using rule 11 (constant_statement -> RETURN exp SEMI_COLON .)
    LONG            reduce using rule 11 (constant_statement -> RETURN exp SEMI_COLON .)
    HEX_INT         reduce using rule 11 (constant_statement -> RETURN exp SEMI_COLON .)
    DOT_REAL        reduce using rule 11 (constant_statement -> RETURN exp SEMI_COLON .)
    EXP_REAL        reduce using rule 11 (constant_statement -> RETURN exp SEMI_COLON .)
    DEC_INT         reduce using rule 11 (constant_statement -> RETURN exp SEMI_COLON .)
    CHARACTER       reduce using rule 11 (constant_statement -> RETURN exp SEMI_COLON .)
    INCREMENT       reduce using rule 11 (constant_statement -> RETURN exp SEMI_COLON .)
    DECREMENT       reduce using rule 11 (constant_statement -> RETURN exp SEMI_COLON .)
    $end            reduce using rule 11 (constant_statement -> RETURN exp SEMI_COLON .)


state 78

    (71) iterative_statement -> DO SEMI_COLON WHILE . LPAREN exp RPAREN SEMI_COLON

    LPAREN          shift and go to state 115


state 79

    (69) iterative_statement -> DO statement WHILE . LPAREN exp RPAREN SEMI_COLON

    LPAREN          shift and go to state 116


state 80

    (70) iterative_statement -> DO LBRACE statements . RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (1) statements -> statements . statement
    (3) statement -> . declaration
    (4) statement -> . exp SEMI_COLON
    (5) statement -> . iterative_statement
    (6) statement -> . function
    (7) statement -> . constant_statement
    (12) declaration -> . type enum_list SEMI_COLON
    (29) exp -> . exp ADD exp
    (30) exp -> . exp MINUS exp
    (31) exp -> . exp MULT exp
    (32) exp -> . exp DIV exp
    (33) exp -> . exp MOD exp
    (34) exp -> . exp L_OP exp
    (35) exp -> . exp G_OP exp
    (36) exp -> . exp LE_OP exp
    (37) exp -> . exp GE_OP exp
    (38) exp -> . exp NOTEQUALS exp
    (39) exp -> . exp EQUALS_OP exp
    (40) exp -> . exp OR_OP exp
    (41) exp -> . exp AND_OP exp
    (42) exp -> . exp MUL_ASSIGN exp
    (43) exp -> . exp DIV_ASSIGN exp
    (44) exp -> . exp MOD_ASSIGN exp
    (45) exp -> . exp ADD_ASSIGN exp
    (46) exp -> . exp SUB_ASSIGN exp
    (47) exp -> . exp LEFT_ASSIGN exp
    (48) exp -> . exp RIGHT_ASSIGN exp
    (49) exp -> . exp AND_ASSIGN exp
    (50) exp -> . exp XOR_ASSIGN exp
    (51) exp -> . exp OR_ASSIGN exp
    (52) exp -> . exp EQUALS exp
    (53) exp -> . unary_expression
    (54) exp -> . LPAREN exp RPAREN
    (55) exp -> . constant
    (56) exp -> . VARIABLE
    (61) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (62) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE
    (63) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (64) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE
    (65) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (66) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (67) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE statements RBRACE
    (68) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (69) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (70) iterative_statement -> . DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (71) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (72) iterative_statement -> . DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (75) function -> . normal_function
    (76) function -> . main_function
    (8) constant_statement -> . BREAK SEMI_COLON
    (9) constant_statement -> . CONTINUE SEMI_COLON
    (10) constant_statement -> . RETURN SEMI_COLON
    (11) constant_statement -> . RETURN exp SEMI_COLON
    (17) type -> . INT
    (18) type -> . FLOAT
    (19) type -> . CHAR
    (20) type -> . DOUBLE
    (21) type -> . VOID
    (22) type -> . SHORT
    (23) type -> . LONG
    (57) unary_expression -> . VARIABLE unary_operator
    (58) unary_expression -> . unary_operator VARIABLE
    (24) constant -> . HEX_INT
    (25) constant -> . DOT_REAL
    (26) constant -> . EXP_REAL
    (27) constant -> . DEC_INT
    (28) constant -> . CHARACTER
    (79) normal_function -> . type VARIABLE LPAREN arguments RPAREN LBRACE statements RBRACE
    (80) normal_function -> . type VARIABLE LPAREN arguments RPAREN LBRACE RBRACE
    (77) main_function -> . type MAIN LPAREN arguments RPAREN LBRACE statements RBRACE
    (78) main_function -> . type MAIN LPAREN arguments RPAREN LBRACE RBRACE
    (59) unary_operator -> . INCREMENT
    (60) unary_operator -> . DECREMENT

    RBRACE          shift and go to state 117
    LPAREN          shift and go to state 21
    VARIABLE        shift and go to state 23
    FOR             shift and go to state 20
    WHILE           shift and go to state 8
    DO              shift and go to state 4
    BREAK           shift and go to state 32
    CONTINUE        shift and go to state 33
    RETURN          shift and go to state 1
    INT             shift and go to state 27
    FLOAT           shift and go to state 31
    CHAR            shift and go to state 7
    DOUBLE          shift and go to state 28
    VOID            shift and go to state 5
    SHORT           shift and go to state 9
    LONG            shift and go to state 35
    HEX_INT         shift and go to state 29
    DOT_REAL        shift and go to state 16
    EXP_REAL        shift and go to state 13
    DEC_INT         shift and go to state 14
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 12
    DECREMENT       shift and go to state 25

    function                       shift and go to state 19
    main_function                  shift and go to state 2
    exp                            shift and go to state 34
    unary_expression               shift and go to state 24
    type                           shift and go to state 17
    normal_function                shift and go to state 30
    statement                      shift and go to state 38
    declaration                    shift and go to state 22
    constant_statement             shift and go to state 26
    constant                       shift and go to state 10
    iterative_statement            shift and go to state 11
    unary_operator                 shift and go to state 18

state 81

    (72) iterative_statement -> DO LBRACE RBRACE . WHILE LPAREN exp RPAREN SEMI_COLON

    WHILE           shift and go to state 118


state 82

    (65) iterative_statement -> WHILE LPAREN exp . RPAREN statement
    (66) iterative_statement -> WHILE LPAREN exp . RPAREN SEMI_COLON
    (67) iterative_statement -> WHILE LPAREN exp . RPAREN LBRACE statements RBRACE
    (68) iterative_statement -> WHILE LPAREN exp . RPAREN LBRACE RBRACE
    (29) exp -> exp . ADD exp
    (30) exp -> exp . MINUS exp
    (31) exp -> exp . MULT exp
    (32) exp -> exp . DIV exp
    (33) exp -> exp . MOD exp
    (34) exp -> exp . L_OP exp
    (35) exp -> exp . G_OP exp
    (36) exp -> exp . LE_OP exp
    (37) exp -> exp . GE_OP exp
    (38) exp -> exp . NOTEQUALS exp
    (39) exp -> exp . EQUALS_OP exp
    (40) exp -> exp . OR_OP exp
    (41) exp -> exp . AND_OP exp
    (42) exp -> exp . MUL_ASSIGN exp
    (43) exp -> exp . DIV_ASSIGN exp
    (44) exp -> exp . MOD_ASSIGN exp
    (45) exp -> exp . ADD_ASSIGN exp
    (46) exp -> exp . SUB_ASSIGN exp
    (47) exp -> exp . LEFT_ASSIGN exp
    (48) exp -> exp . RIGHT_ASSIGN exp
    (49) exp -> exp . AND_ASSIGN exp
    (50) exp -> exp . XOR_ASSIGN exp
    (51) exp -> exp . OR_ASSIGN exp
    (52) exp -> exp . EQUALS exp

    RPAREN          shift and go to state 119
    ADD             shift and go to state 67
    MINUS           shift and go to state 57
    MULT            shift and go to state 58
    DIV             shift and go to state 56
    MOD             shift and go to state 76
    L_OP            shift and go to state 73
    G_OP            shift and go to state 61
    LE_OP           shift and go to state 59
    GE_OP           shift and go to state 68
    NOTEQUALS       shift and go to state 52
    EQUALS_OP       shift and go to state 53
    OR_OP           shift and go to state 62
    AND_OP          shift and go to state 66
    MUL_ASSIGN      shift and go to state 74
    DIV_ASSIGN      shift and go to state 54
    MOD_ASSIGN      shift and go to state 70
    ADD_ASSIGN      shift and go to state 64
    SUB_ASSIGN      shift and go to state 69
    LEFT_ASSIGN     shift and go to state 75
    RIGHT_ASSIGN    shift and go to state 60
    AND_ASSIGN      shift and go to state 63
    XOR_ASSIGN      shift and go to state 71
    OR_ASSIGN       shift and go to state 72
    EQUALS          shift and go to state 65


state 83

    (12) declaration -> type enum_list SEMI_COLON .

    RBRACE          reduce using rule 12 (declaration -> type enum_list SEMI_COLON .)
    LPAREN          reduce using rule 12 (declaration -> type enum_list SEMI_COLON .)
    VARIABLE        reduce using rule 12 (declaration -> type enum_list SEMI_COLON .)
    FOR             reduce using rule 12 (declaration -> type enum_list SEMI_COLON .)
    WHILE           reduce using rule 12 (declaration -> type enum_list SEMI_COLON .)
    DO              reduce using rule 12 (declaration -> type enum_list SEMI_COLON .)
    BREAK           reduce using rule 12 (declaration -> type enum_list SEMI_COLON .)
    CONTINUE        reduce using rule 12 (declaration -> type enum_list SEMI_COLON .)
    RETURN          reduce using rule 12 (declaration -> type enum_list SEMI_COLON .)
    INT             reduce using rule 12 (declaration -> type enum_list SEMI_COLON .)
    FLOAT           reduce using rule 12 (declaration -> type enum_list SEMI_COLON .)
    CHAR            reduce using rule 12 (declaration -> type enum_list SEMI_COLON .)
    DOUBLE          reduce using rule 12 (declaration -> type enum_list SEMI_COLON .)
    VOID            reduce using rule 12 (declaration -> type enum_list SEMI_COLON .)
    SHORT           reduce using rule 12 (declaration -> type enum_list SEMI_COLON .)
    LONG            reduce using rule 12 (declaration -> type enum_list SEMI_COLON .)
    HEX_INT         reduce using rule 12 (declaration -> type enum_list SEMI_COLON .)
    DOT_REAL        reduce using rule 12 (declaration -> type enum_list SEMI_COLON .)
    EXP_REAL        reduce using rule 12 (declaration -> type enum_list SEMI_COLON .)
    DEC_INT         reduce using rule 12 (declaration -> type enum_list SEMI_COLON .)
    CHARACTER       reduce using rule 12 (declaration -> type enum_list SEMI_COLON .)
    INCREMENT       reduce using rule 12 (declaration -> type enum_list SEMI_COLON .)
    DECREMENT       reduce using rule 12 (declaration -> type enum_list SEMI_COLON .)
    $end            reduce using rule 12 (declaration -> type enum_list SEMI_COLON .)


state 84

    (14) enum_list -> VARIABLE EQUALS . exp COMMA enum_list
    (16) enum_list -> VARIABLE EQUALS . exp
    (29) exp -> . exp ADD exp
    (30) exp -> . exp MINUS exp
    (31) exp -> . exp MULT exp
    (32) exp -> . exp DIV exp
    (33) exp -> . exp MOD exp
    (34) exp -> . exp L_OP exp
    (35) exp -> . exp G_OP exp
    (36) exp -> . exp LE_OP exp
    (37) exp -> . exp GE_OP exp
    (38) exp -> . exp NOTEQUALS exp
    (39) exp -> . exp EQUALS_OP exp
    (40) exp -> . exp OR_OP exp
    (41) exp -> . exp AND_OP exp
    (42) exp -> . exp MUL_ASSIGN exp
    (43) exp -> . exp DIV_ASSIGN exp
    (44) exp -> . exp MOD_ASSIGN exp
    (45) exp -> . exp ADD_ASSIGN exp
    (46) exp -> . exp SUB_ASSIGN exp
    (47) exp -> . exp LEFT_ASSIGN exp
    (48) exp -> . exp RIGHT_ASSIGN exp
    (49) exp -> . exp AND_ASSIGN exp
    (50) exp -> . exp XOR_ASSIGN exp
    (51) exp -> . exp OR_ASSIGN exp
    (52) exp -> . exp EQUALS exp
    (53) exp -> . unary_expression
    (54) exp -> . LPAREN exp RPAREN
    (55) exp -> . constant
    (56) exp -> . VARIABLE
    (57) unary_expression -> . VARIABLE unary_operator
    (58) unary_expression -> . unary_operator VARIABLE
    (24) constant -> . HEX_INT
    (25) constant -> . DOT_REAL
    (26) constant -> . EXP_REAL
    (27) constant -> . DEC_INT
    (28) constant -> . CHARACTER
    (59) unary_operator -> . INCREMENT
    (60) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 21
    VARIABLE        shift and go to state 23
    HEX_INT         shift and go to state 29
    DOT_REAL        shift and go to state 16
    EXP_REAL        shift and go to state 13
    DEC_INT         shift and go to state 14
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 12
    DECREMENT       shift and go to state 25

    unary_operator                 shift and go to state 18
    constant                       shift and go to state 10
    unary_expression               shift and go to state 24
    exp                            shift and go to state 120

state 85

    (13) enum_list -> VARIABLE COMMA . enum_list
    (13) enum_list -> . VARIABLE COMMA enum_list
    (14) enum_list -> . VARIABLE EQUALS exp COMMA enum_list
    (15) enum_list -> . VARIABLE
    (16) enum_list -> . VARIABLE EQUALS exp

    VARIABLE        shift and go to state 121

    enum_list                      shift and go to state 122

state 86

    (79) normal_function -> type VARIABLE LPAREN . arguments RPAREN LBRACE statements RBRACE
    (80) normal_function -> type VARIABLE LPAREN . arguments RPAREN LBRACE RBRACE
    (81) arguments -> . empty
    (82) empty -> .

    RPAREN          reduce using rule 82 (empty -> .)

    arguments                      shift and go to state 123
    empty                          shift and go to state 124

state 87

    (77) main_function -> type MAIN LPAREN . arguments RPAREN LBRACE statements RBRACE
    (78) main_function -> type MAIN LPAREN . arguments RPAREN LBRACE RBRACE
    (81) arguments -> . empty
    (82) empty -> .

    RPAREN          reduce using rule 82 (empty -> .)

    arguments                      shift and go to state 125
    empty                          shift and go to state 124

state 88

    (61) iterative_statement -> FOR LPAREN iterative_exp . SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (62) iterative_statement -> FOR LPAREN iterative_exp . SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE
    (63) iterative_statement -> FOR LPAREN iterative_exp . SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (64) iterative_statement -> FOR LPAREN iterative_exp . SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE

    SEMI_COLON      shift and go to state 126


state 89

    (73) iterative_exp -> exp . COMMA iterative_exp
    (74) iterative_exp -> exp .
    (29) exp -> exp . ADD exp
    (30) exp -> exp . MINUS exp
    (31) exp -> exp . MULT exp
    (32) exp -> exp . DIV exp
    (33) exp -> exp . MOD exp
    (34) exp -> exp . L_OP exp
    (35) exp -> exp . G_OP exp
    (36) exp -> exp . LE_OP exp
    (37) exp -> exp . GE_OP exp
    (38) exp -> exp . NOTEQUALS exp
    (39) exp -> exp . EQUALS_OP exp
    (40) exp -> exp . OR_OP exp
    (41) exp -> exp . AND_OP exp
    (42) exp -> exp . MUL_ASSIGN exp
    (43) exp -> exp . DIV_ASSIGN exp
    (44) exp -> exp . MOD_ASSIGN exp
    (45) exp -> exp . ADD_ASSIGN exp
    (46) exp -> exp . SUB_ASSIGN exp
    (47) exp -> exp . LEFT_ASSIGN exp
    (48) exp -> exp . RIGHT_ASSIGN exp
    (49) exp -> exp . AND_ASSIGN exp
    (50) exp -> exp . XOR_ASSIGN exp
    (51) exp -> exp . OR_ASSIGN exp
    (52) exp -> exp . EQUALS exp

    COMMA           shift and go to state 127
    SEMI_COLON      reduce using rule 74 (iterative_exp -> exp .)
    RPAREN          reduce using rule 74 (iterative_exp -> exp .)
    ADD             shift and go to state 67
    MINUS           shift and go to state 57
    MULT            shift and go to state 58
    DIV             shift and go to state 56
    MOD             shift and go to state 76
    L_OP            shift and go to state 73
    G_OP            shift and go to state 61
    LE_OP           shift and go to state 59
    GE_OP           shift and go to state 68
    NOTEQUALS       shift and go to state 52
    EQUALS_OP       shift and go to state 53
    OR_OP           shift and go to state 62
    AND_OP          shift and go to state 66
    MUL_ASSIGN      shift and go to state 74
    DIV_ASSIGN      shift and go to state 54
    MOD_ASSIGN      shift and go to state 70
    ADD_ASSIGN      shift and go to state 64
    SUB_ASSIGN      shift and go to state 69
    LEFT_ASSIGN     shift and go to state 75
    RIGHT_ASSIGN    shift and go to state 60
    AND_ASSIGN      shift and go to state 63
    XOR_ASSIGN      shift and go to state 71
    OR_ASSIGN       shift and go to state 72
    EQUALS          shift and go to state 65


state 90

    (54) exp -> LPAREN exp RPAREN .

    ADD             reduce using rule 54 (exp -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 54 (exp -> LPAREN exp RPAREN .)
    MULT            reduce using rule 54 (exp -> LPAREN exp RPAREN .)
    DIV             reduce using rule 54 (exp -> LPAREN exp RPAREN .)
    MOD             reduce using rule 54 (exp -> LPAREN exp RPAREN .)
    L_OP            reduce using rule 54 (exp -> LPAREN exp RPAREN .)
    G_OP            reduce using rule 54 (exp -> LPAREN exp RPAREN .)
    LE_OP           reduce using rule 54 (exp -> LPAREN exp RPAREN .)
    GE_OP           reduce using rule 54 (exp -> LPAREN exp RPAREN .)
    NOTEQUALS       reduce using rule 54 (exp -> LPAREN exp RPAREN .)
    EQUALS_OP       reduce using rule 54 (exp -> LPAREN exp RPAREN .)
    OR_OP           reduce using rule 54 (exp -> LPAREN exp RPAREN .)
    AND_OP          reduce using rule 54 (exp -> LPAREN exp RPAREN .)
    MUL_ASSIGN      reduce using rule 54 (exp -> LPAREN exp RPAREN .)
    DIV_ASSIGN      reduce using rule 54 (exp -> LPAREN exp RPAREN .)
    MOD_ASSIGN      reduce using rule 54 (exp -> LPAREN exp RPAREN .)
    ADD_ASSIGN      reduce using rule 54 (exp -> LPAREN exp RPAREN .)
    SUB_ASSIGN      reduce using rule 54 (exp -> LPAREN exp RPAREN .)
    LEFT_ASSIGN     reduce using rule 54 (exp -> LPAREN exp RPAREN .)
    RIGHT_ASSIGN    reduce using rule 54 (exp -> LPAREN exp RPAREN .)
    AND_ASSIGN      reduce using rule 54 (exp -> LPAREN exp RPAREN .)
    XOR_ASSIGN      reduce using rule 54 (exp -> LPAREN exp RPAREN .)
    OR_ASSIGN       reduce using rule 54 (exp -> LPAREN exp RPAREN .)
    EQUALS          reduce using rule 54 (exp -> LPAREN exp RPAREN .)
    SEMI_COLON      reduce using rule 54 (exp -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 54 (exp -> LPAREN exp RPAREN .)
    COMMA           reduce using rule 54 (exp -> LPAREN exp RPAREN .)


state 91

    (38) exp -> exp NOTEQUALS exp .
    (29) exp -> exp . ADD exp
    (30) exp -> exp . MINUS exp
    (31) exp -> exp . MULT exp
    (32) exp -> exp . DIV exp
    (33) exp -> exp . MOD exp
    (34) exp -> exp . L_OP exp
    (35) exp -> exp . G_OP exp
    (36) exp -> exp . LE_OP exp
    (37) exp -> exp . GE_OP exp
    (38) exp -> exp . NOTEQUALS exp
    (39) exp -> exp . EQUALS_OP exp
    (40) exp -> exp . OR_OP exp
    (41) exp -> exp . AND_OP exp
    (42) exp -> exp . MUL_ASSIGN exp
    (43) exp -> exp . DIV_ASSIGN exp
    (44) exp -> exp . MOD_ASSIGN exp
    (45) exp -> exp . ADD_ASSIGN exp
    (46) exp -> exp . SUB_ASSIGN exp
    (47) exp -> exp . LEFT_ASSIGN exp
    (48) exp -> exp . RIGHT_ASSIGN exp
    (49) exp -> exp . AND_ASSIGN exp
    (50) exp -> exp . XOR_ASSIGN exp
    (51) exp -> exp . OR_ASSIGN exp
    (52) exp -> exp . EQUALS exp

    ADD             reduce using rule 38 (exp -> exp NOTEQUALS exp .)
    MINUS           reduce using rule 38 (exp -> exp NOTEQUALS exp .)
    MULT            reduce using rule 38 (exp -> exp NOTEQUALS exp .)
    DIV             reduce using rule 38 (exp -> exp NOTEQUALS exp .)
    MOD             reduce using rule 38 (exp -> exp NOTEQUALS exp .)
    L_OP            reduce using rule 38 (exp -> exp NOTEQUALS exp .)
    G_OP            reduce using rule 38 (exp -> exp NOTEQUALS exp .)
    LE_OP           reduce using rule 38 (exp -> exp NOTEQUALS exp .)
    GE_OP           reduce using rule 38 (exp -> exp NOTEQUALS exp .)
    NOTEQUALS       reduce using rule 38 (exp -> exp NOTEQUALS exp .)
    EQUALS_OP       reduce using rule 38 (exp -> exp NOTEQUALS exp .)
    SEMI_COLON      reduce using rule 38 (exp -> exp NOTEQUALS exp .)
    RPAREN          reduce using rule 38 (exp -> exp NOTEQUALS exp .)
    COMMA           reduce using rule 38 (exp -> exp NOTEQUALS exp .)
    OR_OP           shift and go to state 62
    AND_OP          shift and go to state 66
    MUL_ASSIGN      shift and go to state 74
    DIV_ASSIGN      shift and go to state 54
    MOD_ASSIGN      shift and go to state 70
    ADD_ASSIGN      shift and go to state 64
    SUB_ASSIGN      shift and go to state 69
    LEFT_ASSIGN     shift and go to state 75
    RIGHT_ASSIGN    shift and go to state 60
    AND_ASSIGN      shift and go to state 63
    XOR_ASSIGN      shift and go to state 71
    OR_ASSIGN       shift and go to state 72
    EQUALS          shift and go to state 65

  ! OR_OP           [ reduce using rule 38 (exp -> exp NOTEQUALS exp .) ]
  ! AND_OP          [ reduce using rule 38 (exp -> exp NOTEQUALS exp .) ]
  ! MUL_ASSIGN      [ reduce using rule 38 (exp -> exp NOTEQUALS exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 38 (exp -> exp NOTEQUALS exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 38 (exp -> exp NOTEQUALS exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 38 (exp -> exp NOTEQUALS exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 38 (exp -> exp NOTEQUALS exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 38 (exp -> exp NOTEQUALS exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 38 (exp -> exp NOTEQUALS exp .) ]
  ! AND_ASSIGN      [ reduce using rule 38 (exp -> exp NOTEQUALS exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 38 (exp -> exp NOTEQUALS exp .) ]
  ! OR_ASSIGN       [ reduce using rule 38 (exp -> exp NOTEQUALS exp .) ]
  ! EQUALS          [ reduce using rule 38 (exp -> exp NOTEQUALS exp .) ]
  ! ADD             [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 57 ]
  ! MULT            [ shift and go to state 58 ]
  ! DIV             [ shift and go to state 56 ]
  ! MOD             [ shift and go to state 76 ]
  ! L_OP            [ shift and go to state 73 ]
  ! G_OP            [ shift and go to state 61 ]
  ! LE_OP           [ shift and go to state 59 ]
  ! GE_OP           [ shift and go to state 68 ]
  ! NOTEQUALS       [ shift and go to state 52 ]
  ! EQUALS_OP       [ shift and go to state 53 ]


state 92

    (39) exp -> exp EQUALS_OP exp .
    (29) exp -> exp . ADD exp
    (30) exp -> exp . MINUS exp
    (31) exp -> exp . MULT exp
    (32) exp -> exp . DIV exp
    (33) exp -> exp . MOD exp
    (34) exp -> exp . L_OP exp
    (35) exp -> exp . G_OP exp
    (36) exp -> exp . LE_OP exp
    (37) exp -> exp . GE_OP exp
    (38) exp -> exp . NOTEQUALS exp
    (39) exp -> exp . EQUALS_OP exp
    (40) exp -> exp . OR_OP exp
    (41) exp -> exp . AND_OP exp
    (42) exp -> exp . MUL_ASSIGN exp
    (43) exp -> exp . DIV_ASSIGN exp
    (44) exp -> exp . MOD_ASSIGN exp
    (45) exp -> exp . ADD_ASSIGN exp
    (46) exp -> exp . SUB_ASSIGN exp
    (47) exp -> exp . LEFT_ASSIGN exp
    (48) exp -> exp . RIGHT_ASSIGN exp
    (49) exp -> exp . AND_ASSIGN exp
    (50) exp -> exp . XOR_ASSIGN exp
    (51) exp -> exp . OR_ASSIGN exp
    (52) exp -> exp . EQUALS exp

    ADD             reduce using rule 39 (exp -> exp EQUALS_OP exp .)
    MINUS           reduce using rule 39 (exp -> exp EQUALS_OP exp .)
    MULT            reduce using rule 39 (exp -> exp EQUALS_OP exp .)
    DIV             reduce using rule 39 (exp -> exp EQUALS_OP exp .)
    MOD             reduce using rule 39 (exp -> exp EQUALS_OP exp .)
    L_OP            reduce using rule 39 (exp -> exp EQUALS_OP exp .)
    G_OP            reduce using rule 39 (exp -> exp EQUALS_OP exp .)
    LE_OP           reduce using rule 39 (exp -> exp EQUALS_OP exp .)
    GE_OP           reduce using rule 39 (exp -> exp EQUALS_OP exp .)
    NOTEQUALS       reduce using rule 39 (exp -> exp EQUALS_OP exp .)
    EQUALS_OP       reduce using rule 39 (exp -> exp EQUALS_OP exp .)
    SEMI_COLON      reduce using rule 39 (exp -> exp EQUALS_OP exp .)
    RPAREN          reduce using rule 39 (exp -> exp EQUALS_OP exp .)
    COMMA           reduce using rule 39 (exp -> exp EQUALS_OP exp .)
    OR_OP           shift and go to state 62
    AND_OP          shift and go to state 66
    MUL_ASSIGN      shift and go to state 74
    DIV_ASSIGN      shift and go to state 54
    MOD_ASSIGN      shift and go to state 70
    ADD_ASSIGN      shift and go to state 64
    SUB_ASSIGN      shift and go to state 69
    LEFT_ASSIGN     shift and go to state 75
    RIGHT_ASSIGN    shift and go to state 60
    AND_ASSIGN      shift and go to state 63
    XOR_ASSIGN      shift and go to state 71
    OR_ASSIGN       shift and go to state 72
    EQUALS          shift and go to state 65

  ! OR_OP           [ reduce using rule 39 (exp -> exp EQUALS_OP exp .) ]
  ! AND_OP          [ reduce using rule 39 (exp -> exp EQUALS_OP exp .) ]
  ! MUL_ASSIGN      [ reduce using rule 39 (exp -> exp EQUALS_OP exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 39 (exp -> exp EQUALS_OP exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 39 (exp -> exp EQUALS_OP exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 39 (exp -> exp EQUALS_OP exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 39 (exp -> exp EQUALS_OP exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 39 (exp -> exp EQUALS_OP exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 39 (exp -> exp EQUALS_OP exp .) ]
  ! AND_ASSIGN      [ reduce using rule 39 (exp -> exp EQUALS_OP exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 39 (exp -> exp EQUALS_OP exp .) ]
  ! OR_ASSIGN       [ reduce using rule 39 (exp -> exp EQUALS_OP exp .) ]
  ! EQUALS          [ reduce using rule 39 (exp -> exp EQUALS_OP exp .) ]
  ! ADD             [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 57 ]
  ! MULT            [ shift and go to state 58 ]
  ! DIV             [ shift and go to state 56 ]
  ! MOD             [ shift and go to state 76 ]
  ! L_OP            [ shift and go to state 73 ]
  ! G_OP            [ shift and go to state 61 ]
  ! LE_OP           [ shift and go to state 59 ]
  ! GE_OP           [ shift and go to state 68 ]
  ! NOTEQUALS       [ shift and go to state 52 ]
  ! EQUALS_OP       [ shift and go to state 53 ]


state 93

    (43) exp -> exp DIV_ASSIGN exp .
    (29) exp -> exp . ADD exp
    (30) exp -> exp . MINUS exp
    (31) exp -> exp . MULT exp
    (32) exp -> exp . DIV exp
    (33) exp -> exp . MOD exp
    (34) exp -> exp . L_OP exp
    (35) exp -> exp . G_OP exp
    (36) exp -> exp . LE_OP exp
    (37) exp -> exp . GE_OP exp
    (38) exp -> exp . NOTEQUALS exp
    (39) exp -> exp . EQUALS_OP exp
    (40) exp -> exp . OR_OP exp
    (41) exp -> exp . AND_OP exp
    (42) exp -> exp . MUL_ASSIGN exp
    (43) exp -> exp . DIV_ASSIGN exp
    (44) exp -> exp . MOD_ASSIGN exp
    (45) exp -> exp . ADD_ASSIGN exp
    (46) exp -> exp . SUB_ASSIGN exp
    (47) exp -> exp . LEFT_ASSIGN exp
    (48) exp -> exp . RIGHT_ASSIGN exp
    (49) exp -> exp . AND_ASSIGN exp
    (50) exp -> exp . XOR_ASSIGN exp
    (51) exp -> exp . OR_ASSIGN exp
    (52) exp -> exp . EQUALS exp

    ADD             reduce using rule 43 (exp -> exp DIV_ASSIGN exp .)
    MINUS           reduce using rule 43 (exp -> exp DIV_ASSIGN exp .)
    MULT            reduce using rule 43 (exp -> exp DIV_ASSIGN exp .)
    DIV             reduce using rule 43 (exp -> exp DIV_ASSIGN exp .)
    MOD             reduce using rule 43 (exp -> exp DIV_ASSIGN exp .)
    L_OP            reduce using rule 43 (exp -> exp DIV_ASSIGN exp .)
    G_OP            reduce using rule 43 (exp -> exp DIV_ASSIGN exp .)
    LE_OP           reduce using rule 43 (exp -> exp DIV_ASSIGN exp .)
    GE_OP           reduce using rule 43 (exp -> exp DIV_ASSIGN exp .)
    NOTEQUALS       reduce using rule 43 (exp -> exp DIV_ASSIGN exp .)
    EQUALS_OP       reduce using rule 43 (exp -> exp DIV_ASSIGN exp .)
    OR_OP           reduce using rule 43 (exp -> exp DIV_ASSIGN exp .)
    AND_OP          reduce using rule 43 (exp -> exp DIV_ASSIGN exp .)
    SEMI_COLON      reduce using rule 43 (exp -> exp DIV_ASSIGN exp .)
    RPAREN          reduce using rule 43 (exp -> exp DIV_ASSIGN exp .)
    COMMA           reduce using rule 43 (exp -> exp DIV_ASSIGN exp .)
    MUL_ASSIGN      shift and go to state 74
    DIV_ASSIGN      shift and go to state 54
    MOD_ASSIGN      shift and go to state 70
    ADD_ASSIGN      shift and go to state 64
    SUB_ASSIGN      shift and go to state 69
    LEFT_ASSIGN     shift and go to state 75
    RIGHT_ASSIGN    shift and go to state 60
    AND_ASSIGN      shift and go to state 63
    XOR_ASSIGN      shift and go to state 71
    OR_ASSIGN       shift and go to state 72
    EQUALS          shift and go to state 65

  ! MUL_ASSIGN      [ reduce using rule 43 (exp -> exp DIV_ASSIGN exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 43 (exp -> exp DIV_ASSIGN exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 43 (exp -> exp DIV_ASSIGN exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 43 (exp -> exp DIV_ASSIGN exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 43 (exp -> exp DIV_ASSIGN exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 43 (exp -> exp DIV_ASSIGN exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 43 (exp -> exp DIV_ASSIGN exp .) ]
  ! AND_ASSIGN      [ reduce using rule 43 (exp -> exp DIV_ASSIGN exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 43 (exp -> exp DIV_ASSIGN exp .) ]
  ! OR_ASSIGN       [ reduce using rule 43 (exp -> exp DIV_ASSIGN exp .) ]
  ! EQUALS          [ reduce using rule 43 (exp -> exp DIV_ASSIGN exp .) ]
  ! ADD             [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 57 ]
  ! MULT            [ shift and go to state 58 ]
  ! DIV             [ shift and go to state 56 ]
  ! MOD             [ shift and go to state 76 ]
  ! L_OP            [ shift and go to state 73 ]
  ! G_OP            [ shift and go to state 61 ]
  ! LE_OP           [ shift and go to state 59 ]
  ! GE_OP           [ shift and go to state 68 ]
  ! NOTEQUALS       [ shift and go to state 52 ]
  ! EQUALS_OP       [ shift and go to state 53 ]
  ! OR_OP           [ shift and go to state 62 ]
  ! AND_OP          [ shift and go to state 66 ]


state 94

    (32) exp -> exp DIV exp .
    (29) exp -> exp . ADD exp
    (30) exp -> exp . MINUS exp
    (31) exp -> exp . MULT exp
    (32) exp -> exp . DIV exp
    (33) exp -> exp . MOD exp
    (34) exp -> exp . L_OP exp
    (35) exp -> exp . G_OP exp
    (36) exp -> exp . LE_OP exp
    (37) exp -> exp . GE_OP exp
    (38) exp -> exp . NOTEQUALS exp
    (39) exp -> exp . EQUALS_OP exp
    (40) exp -> exp . OR_OP exp
    (41) exp -> exp . AND_OP exp
    (42) exp -> exp . MUL_ASSIGN exp
    (43) exp -> exp . DIV_ASSIGN exp
    (44) exp -> exp . MOD_ASSIGN exp
    (45) exp -> exp . ADD_ASSIGN exp
    (46) exp -> exp . SUB_ASSIGN exp
    (47) exp -> exp . LEFT_ASSIGN exp
    (48) exp -> exp . RIGHT_ASSIGN exp
    (49) exp -> exp . AND_ASSIGN exp
    (50) exp -> exp . XOR_ASSIGN exp
    (51) exp -> exp . OR_ASSIGN exp
    (52) exp -> exp . EQUALS exp

    ADD             reduce using rule 32 (exp -> exp DIV exp .)
    MINUS           reduce using rule 32 (exp -> exp DIV exp .)
    MULT            reduce using rule 32 (exp -> exp DIV exp .)
    DIV             reduce using rule 32 (exp -> exp DIV exp .)
    MOD             reduce using rule 32 (exp -> exp DIV exp .)
    SEMI_COLON      reduce using rule 32 (exp -> exp DIV exp .)
    RPAREN          reduce using rule 32 (exp -> exp DIV exp .)
    COMMA           reduce using rule 32 (exp -> exp DIV exp .)
    L_OP            shift and go to state 73
    G_OP            shift and go to state 61
    LE_OP           shift and go to state 59
    GE_OP           shift and go to state 68
    NOTEQUALS       shift and go to state 52
    EQUALS_OP       shift and go to state 53
    OR_OP           shift and go to state 62
    AND_OP          shift and go to state 66
    MUL_ASSIGN      shift and go to state 74
    DIV_ASSIGN      shift and go to state 54
    MOD_ASSIGN      shift and go to state 70
    ADD_ASSIGN      shift and go to state 64
    SUB_ASSIGN      shift and go to state 69
    LEFT_ASSIGN     shift and go to state 75
    RIGHT_ASSIGN    shift and go to state 60
    AND_ASSIGN      shift and go to state 63
    XOR_ASSIGN      shift and go to state 71
    OR_ASSIGN       shift and go to state 72
    EQUALS          shift and go to state 65

  ! L_OP            [ reduce using rule 32 (exp -> exp DIV exp .) ]
  ! G_OP            [ reduce using rule 32 (exp -> exp DIV exp .) ]
  ! LE_OP           [ reduce using rule 32 (exp -> exp DIV exp .) ]
  ! GE_OP           [ reduce using rule 32 (exp -> exp DIV exp .) ]
  ! NOTEQUALS       [ reduce using rule 32 (exp -> exp DIV exp .) ]
  ! EQUALS_OP       [ reduce using rule 32 (exp -> exp DIV exp .) ]
  ! OR_OP           [ reduce using rule 32 (exp -> exp DIV exp .) ]
  ! AND_OP          [ reduce using rule 32 (exp -> exp DIV exp .) ]
  ! MUL_ASSIGN      [ reduce using rule 32 (exp -> exp DIV exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 32 (exp -> exp DIV exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 32 (exp -> exp DIV exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 32 (exp -> exp DIV exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 32 (exp -> exp DIV exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 32 (exp -> exp DIV exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 32 (exp -> exp DIV exp .) ]
  ! AND_ASSIGN      [ reduce using rule 32 (exp -> exp DIV exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 32 (exp -> exp DIV exp .) ]
  ! OR_ASSIGN       [ reduce using rule 32 (exp -> exp DIV exp .) ]
  ! EQUALS          [ reduce using rule 32 (exp -> exp DIV exp .) ]
  ! ADD             [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 57 ]
  ! MULT            [ shift and go to state 58 ]
  ! DIV             [ shift and go to state 56 ]
  ! MOD             [ shift and go to state 76 ]


state 95

    (30) exp -> exp MINUS exp .
    (29) exp -> exp . ADD exp
    (30) exp -> exp . MINUS exp
    (31) exp -> exp . MULT exp
    (32) exp -> exp . DIV exp
    (33) exp -> exp . MOD exp
    (34) exp -> exp . L_OP exp
    (35) exp -> exp . G_OP exp
    (36) exp -> exp . LE_OP exp
    (37) exp -> exp . GE_OP exp
    (38) exp -> exp . NOTEQUALS exp
    (39) exp -> exp . EQUALS_OP exp
    (40) exp -> exp . OR_OP exp
    (41) exp -> exp . AND_OP exp
    (42) exp -> exp . MUL_ASSIGN exp
    (43) exp -> exp . DIV_ASSIGN exp
    (44) exp -> exp . MOD_ASSIGN exp
    (45) exp -> exp . ADD_ASSIGN exp
    (46) exp -> exp . SUB_ASSIGN exp
    (47) exp -> exp . LEFT_ASSIGN exp
    (48) exp -> exp . RIGHT_ASSIGN exp
    (49) exp -> exp . AND_ASSIGN exp
    (50) exp -> exp . XOR_ASSIGN exp
    (51) exp -> exp . OR_ASSIGN exp
    (52) exp -> exp . EQUALS exp

    ADD             reduce using rule 30 (exp -> exp MINUS exp .)
    MINUS           reduce using rule 30 (exp -> exp MINUS exp .)
    SEMI_COLON      reduce using rule 30 (exp -> exp MINUS exp .)
    RPAREN          reduce using rule 30 (exp -> exp MINUS exp .)
    COMMA           reduce using rule 30 (exp -> exp MINUS exp .)
    MULT            shift and go to state 58
    DIV             shift and go to state 56
    MOD             shift and go to state 76
    L_OP            shift and go to state 73
    G_OP            shift and go to state 61
    LE_OP           shift and go to state 59
    GE_OP           shift and go to state 68
    NOTEQUALS       shift and go to state 52
    EQUALS_OP       shift and go to state 53
    OR_OP           shift and go to state 62
    AND_OP          shift and go to state 66
    MUL_ASSIGN      shift and go to state 74
    DIV_ASSIGN      shift and go to state 54
    MOD_ASSIGN      shift and go to state 70
    ADD_ASSIGN      shift and go to state 64
    SUB_ASSIGN      shift and go to state 69
    LEFT_ASSIGN     shift and go to state 75
    RIGHT_ASSIGN    shift and go to state 60
    AND_ASSIGN      shift and go to state 63
    XOR_ASSIGN      shift and go to state 71
    OR_ASSIGN       shift and go to state 72
    EQUALS          shift and go to state 65

  ! MULT            [ reduce using rule 30 (exp -> exp MINUS exp .) ]
  ! DIV             [ reduce using rule 30 (exp -> exp MINUS exp .) ]
  ! MOD             [ reduce using rule 30 (exp -> exp MINUS exp .) ]
  ! L_OP            [ reduce using rule 30 (exp -> exp MINUS exp .) ]
  ! G_OP            [ reduce using rule 30 (exp -> exp MINUS exp .) ]
  ! LE_OP           [ reduce using rule 30 (exp -> exp MINUS exp .) ]
  ! GE_OP           [ reduce using rule 30 (exp -> exp MINUS exp .) ]
  ! NOTEQUALS       [ reduce using rule 30 (exp -> exp MINUS exp .) ]
  ! EQUALS_OP       [ reduce using rule 30 (exp -> exp MINUS exp .) ]
  ! OR_OP           [ reduce using rule 30 (exp -> exp MINUS exp .) ]
  ! AND_OP          [ reduce using rule 30 (exp -> exp MINUS exp .) ]
  ! MUL_ASSIGN      [ reduce using rule 30 (exp -> exp MINUS exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 30 (exp -> exp MINUS exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 30 (exp -> exp MINUS exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 30 (exp -> exp MINUS exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 30 (exp -> exp MINUS exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 30 (exp -> exp MINUS exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 30 (exp -> exp MINUS exp .) ]
  ! AND_ASSIGN      [ reduce using rule 30 (exp -> exp MINUS exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 30 (exp -> exp MINUS exp .) ]
  ! OR_ASSIGN       [ reduce using rule 30 (exp -> exp MINUS exp .) ]
  ! EQUALS          [ reduce using rule 30 (exp -> exp MINUS exp .) ]
  ! ADD             [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 57 ]


state 96

    (31) exp -> exp MULT exp .
    (29) exp -> exp . ADD exp
    (30) exp -> exp . MINUS exp
    (31) exp -> exp . MULT exp
    (32) exp -> exp . DIV exp
    (33) exp -> exp . MOD exp
    (34) exp -> exp . L_OP exp
    (35) exp -> exp . G_OP exp
    (36) exp -> exp . LE_OP exp
    (37) exp -> exp . GE_OP exp
    (38) exp -> exp . NOTEQUALS exp
    (39) exp -> exp . EQUALS_OP exp
    (40) exp -> exp . OR_OP exp
    (41) exp -> exp . AND_OP exp
    (42) exp -> exp . MUL_ASSIGN exp
    (43) exp -> exp . DIV_ASSIGN exp
    (44) exp -> exp . MOD_ASSIGN exp
    (45) exp -> exp . ADD_ASSIGN exp
    (46) exp -> exp . SUB_ASSIGN exp
    (47) exp -> exp . LEFT_ASSIGN exp
    (48) exp -> exp . RIGHT_ASSIGN exp
    (49) exp -> exp . AND_ASSIGN exp
    (50) exp -> exp . XOR_ASSIGN exp
    (51) exp -> exp . OR_ASSIGN exp
    (52) exp -> exp . EQUALS exp

    ADD             reduce using rule 31 (exp -> exp MULT exp .)
    MINUS           reduce using rule 31 (exp -> exp MULT exp .)
    MULT            reduce using rule 31 (exp -> exp MULT exp .)
    DIV             reduce using rule 31 (exp -> exp MULT exp .)
    MOD             reduce using rule 31 (exp -> exp MULT exp .)
    SEMI_COLON      reduce using rule 31 (exp -> exp MULT exp .)
    RPAREN          reduce using rule 31 (exp -> exp MULT exp .)
    COMMA           reduce using rule 31 (exp -> exp MULT exp .)
    L_OP            shift and go to state 73
    G_OP            shift and go to state 61
    LE_OP           shift and go to state 59
    GE_OP           shift and go to state 68
    NOTEQUALS       shift and go to state 52
    EQUALS_OP       shift and go to state 53
    OR_OP           shift and go to state 62
    AND_OP          shift and go to state 66
    MUL_ASSIGN      shift and go to state 74
    DIV_ASSIGN      shift and go to state 54
    MOD_ASSIGN      shift and go to state 70
    ADD_ASSIGN      shift and go to state 64
    SUB_ASSIGN      shift and go to state 69
    LEFT_ASSIGN     shift and go to state 75
    RIGHT_ASSIGN    shift and go to state 60
    AND_ASSIGN      shift and go to state 63
    XOR_ASSIGN      shift and go to state 71
    OR_ASSIGN       shift and go to state 72
    EQUALS          shift and go to state 65

  ! L_OP            [ reduce using rule 31 (exp -> exp MULT exp .) ]
  ! G_OP            [ reduce using rule 31 (exp -> exp MULT exp .) ]
  ! LE_OP           [ reduce using rule 31 (exp -> exp MULT exp .) ]
  ! GE_OP           [ reduce using rule 31 (exp -> exp MULT exp .) ]
  ! NOTEQUALS       [ reduce using rule 31 (exp -> exp MULT exp .) ]
  ! EQUALS_OP       [ reduce using rule 31 (exp -> exp MULT exp .) ]
  ! OR_OP           [ reduce using rule 31 (exp -> exp MULT exp .) ]
  ! AND_OP          [ reduce using rule 31 (exp -> exp MULT exp .) ]
  ! MUL_ASSIGN      [ reduce using rule 31 (exp -> exp MULT exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 31 (exp -> exp MULT exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 31 (exp -> exp MULT exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 31 (exp -> exp MULT exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 31 (exp -> exp MULT exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 31 (exp -> exp MULT exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 31 (exp -> exp MULT exp .) ]
  ! AND_ASSIGN      [ reduce using rule 31 (exp -> exp MULT exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 31 (exp -> exp MULT exp .) ]
  ! OR_ASSIGN       [ reduce using rule 31 (exp -> exp MULT exp .) ]
  ! EQUALS          [ reduce using rule 31 (exp -> exp MULT exp .) ]
  ! ADD             [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 57 ]
  ! MULT            [ shift and go to state 58 ]
  ! DIV             [ shift and go to state 56 ]
  ! MOD             [ shift and go to state 76 ]


state 97

    (36) exp -> exp LE_OP exp .
    (29) exp -> exp . ADD exp
    (30) exp -> exp . MINUS exp
    (31) exp -> exp . MULT exp
    (32) exp -> exp . DIV exp
    (33) exp -> exp . MOD exp
    (34) exp -> exp . L_OP exp
    (35) exp -> exp . G_OP exp
    (36) exp -> exp . LE_OP exp
    (37) exp -> exp . GE_OP exp
    (38) exp -> exp . NOTEQUALS exp
    (39) exp -> exp . EQUALS_OP exp
    (40) exp -> exp . OR_OP exp
    (41) exp -> exp . AND_OP exp
    (42) exp -> exp . MUL_ASSIGN exp
    (43) exp -> exp . DIV_ASSIGN exp
    (44) exp -> exp . MOD_ASSIGN exp
    (45) exp -> exp . ADD_ASSIGN exp
    (46) exp -> exp . SUB_ASSIGN exp
    (47) exp -> exp . LEFT_ASSIGN exp
    (48) exp -> exp . RIGHT_ASSIGN exp
    (49) exp -> exp . AND_ASSIGN exp
    (50) exp -> exp . XOR_ASSIGN exp
    (51) exp -> exp . OR_ASSIGN exp
    (52) exp -> exp . EQUALS exp

    ADD             reduce using rule 36 (exp -> exp LE_OP exp .)
    MINUS           reduce using rule 36 (exp -> exp LE_OP exp .)
    MULT            reduce using rule 36 (exp -> exp LE_OP exp .)
    DIV             reduce using rule 36 (exp -> exp LE_OP exp .)
    MOD             reduce using rule 36 (exp -> exp LE_OP exp .)
    L_OP            reduce using rule 36 (exp -> exp LE_OP exp .)
    G_OP            reduce using rule 36 (exp -> exp LE_OP exp .)
    LE_OP           reduce using rule 36 (exp -> exp LE_OP exp .)
    GE_OP           reduce using rule 36 (exp -> exp LE_OP exp .)
    SEMI_COLON      reduce using rule 36 (exp -> exp LE_OP exp .)
    RPAREN          reduce using rule 36 (exp -> exp LE_OP exp .)
    COMMA           reduce using rule 36 (exp -> exp LE_OP exp .)
    NOTEQUALS       shift and go to state 52
    EQUALS_OP       shift and go to state 53
    OR_OP           shift and go to state 62
    AND_OP          shift and go to state 66
    MUL_ASSIGN      shift and go to state 74
    DIV_ASSIGN      shift and go to state 54
    MOD_ASSIGN      shift and go to state 70
    ADD_ASSIGN      shift and go to state 64
    SUB_ASSIGN      shift and go to state 69
    LEFT_ASSIGN     shift and go to state 75
    RIGHT_ASSIGN    shift and go to state 60
    AND_ASSIGN      shift and go to state 63
    XOR_ASSIGN      shift and go to state 71
    OR_ASSIGN       shift and go to state 72
    EQUALS          shift and go to state 65

  ! NOTEQUALS       [ reduce using rule 36 (exp -> exp LE_OP exp .) ]
  ! EQUALS_OP       [ reduce using rule 36 (exp -> exp LE_OP exp .) ]
  ! OR_OP           [ reduce using rule 36 (exp -> exp LE_OP exp .) ]
  ! AND_OP          [ reduce using rule 36 (exp -> exp LE_OP exp .) ]
  ! MUL_ASSIGN      [ reduce using rule 36 (exp -> exp LE_OP exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 36 (exp -> exp LE_OP exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 36 (exp -> exp LE_OP exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 36 (exp -> exp LE_OP exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 36 (exp -> exp LE_OP exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 36 (exp -> exp LE_OP exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 36 (exp -> exp LE_OP exp .) ]
  ! AND_ASSIGN      [ reduce using rule 36 (exp -> exp LE_OP exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 36 (exp -> exp LE_OP exp .) ]
  ! OR_ASSIGN       [ reduce using rule 36 (exp -> exp LE_OP exp .) ]
  ! EQUALS          [ reduce using rule 36 (exp -> exp LE_OP exp .) ]
  ! ADD             [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 57 ]
  ! MULT            [ shift and go to state 58 ]
  ! DIV             [ shift and go to state 56 ]
  ! MOD             [ shift and go to state 76 ]
  ! L_OP            [ shift and go to state 73 ]
  ! G_OP            [ shift and go to state 61 ]
  ! LE_OP           [ shift and go to state 59 ]
  ! GE_OP           [ shift and go to state 68 ]


state 98

    (48) exp -> exp RIGHT_ASSIGN exp .
    (29) exp -> exp . ADD exp
    (30) exp -> exp . MINUS exp
    (31) exp -> exp . MULT exp
    (32) exp -> exp . DIV exp
    (33) exp -> exp . MOD exp
    (34) exp -> exp . L_OP exp
    (35) exp -> exp . G_OP exp
    (36) exp -> exp . LE_OP exp
    (37) exp -> exp . GE_OP exp
    (38) exp -> exp . NOTEQUALS exp
    (39) exp -> exp . EQUALS_OP exp
    (40) exp -> exp . OR_OP exp
    (41) exp -> exp . AND_OP exp
    (42) exp -> exp . MUL_ASSIGN exp
    (43) exp -> exp . DIV_ASSIGN exp
    (44) exp -> exp . MOD_ASSIGN exp
    (45) exp -> exp . ADD_ASSIGN exp
    (46) exp -> exp . SUB_ASSIGN exp
    (47) exp -> exp . LEFT_ASSIGN exp
    (48) exp -> exp . RIGHT_ASSIGN exp
    (49) exp -> exp . AND_ASSIGN exp
    (50) exp -> exp . XOR_ASSIGN exp
    (51) exp -> exp . OR_ASSIGN exp
    (52) exp -> exp . EQUALS exp

    ADD             reduce using rule 48 (exp -> exp RIGHT_ASSIGN exp .)
    MINUS           reduce using rule 48 (exp -> exp RIGHT_ASSIGN exp .)
    MULT            reduce using rule 48 (exp -> exp RIGHT_ASSIGN exp .)
    DIV             reduce using rule 48 (exp -> exp RIGHT_ASSIGN exp .)
    MOD             reduce using rule 48 (exp -> exp RIGHT_ASSIGN exp .)
    L_OP            reduce using rule 48 (exp -> exp RIGHT_ASSIGN exp .)
    G_OP            reduce using rule 48 (exp -> exp RIGHT_ASSIGN exp .)
    LE_OP           reduce using rule 48 (exp -> exp RIGHT_ASSIGN exp .)
    GE_OP           reduce using rule 48 (exp -> exp RIGHT_ASSIGN exp .)
    NOTEQUALS       reduce using rule 48 (exp -> exp RIGHT_ASSIGN exp .)
    EQUALS_OP       reduce using rule 48 (exp -> exp RIGHT_ASSIGN exp .)
    OR_OP           reduce using rule 48 (exp -> exp RIGHT_ASSIGN exp .)
    AND_OP          reduce using rule 48 (exp -> exp RIGHT_ASSIGN exp .)
    SEMI_COLON      reduce using rule 48 (exp -> exp RIGHT_ASSIGN exp .)
    RPAREN          reduce using rule 48 (exp -> exp RIGHT_ASSIGN exp .)
    COMMA           reduce using rule 48 (exp -> exp RIGHT_ASSIGN exp .)
    MUL_ASSIGN      shift and go to state 74
    DIV_ASSIGN      shift and go to state 54
    MOD_ASSIGN      shift and go to state 70
    ADD_ASSIGN      shift and go to state 64
    SUB_ASSIGN      shift and go to state 69
    LEFT_ASSIGN     shift and go to state 75
    RIGHT_ASSIGN    shift and go to state 60
    AND_ASSIGN      shift and go to state 63
    XOR_ASSIGN      shift and go to state 71
    OR_ASSIGN       shift and go to state 72
    EQUALS          shift and go to state 65

  ! MUL_ASSIGN      [ reduce using rule 48 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 48 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 48 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 48 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 48 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 48 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 48 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! AND_ASSIGN      [ reduce using rule 48 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 48 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! OR_ASSIGN       [ reduce using rule 48 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! EQUALS          [ reduce using rule 48 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! ADD             [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 57 ]
  ! MULT            [ shift and go to state 58 ]
  ! DIV             [ shift and go to state 56 ]
  ! MOD             [ shift and go to state 76 ]
  ! L_OP            [ shift and go to state 73 ]
  ! G_OP            [ shift and go to state 61 ]
  ! LE_OP           [ shift and go to state 59 ]
  ! GE_OP           [ shift and go to state 68 ]
  ! NOTEQUALS       [ shift and go to state 52 ]
  ! EQUALS_OP       [ shift and go to state 53 ]
  ! OR_OP           [ shift and go to state 62 ]
  ! AND_OP          [ shift and go to state 66 ]


state 99

    (35) exp -> exp G_OP exp .
    (29) exp -> exp . ADD exp
    (30) exp -> exp . MINUS exp
    (31) exp -> exp . MULT exp
    (32) exp -> exp . DIV exp
    (33) exp -> exp . MOD exp
    (34) exp -> exp . L_OP exp
    (35) exp -> exp . G_OP exp
    (36) exp -> exp . LE_OP exp
    (37) exp -> exp . GE_OP exp
    (38) exp -> exp . NOTEQUALS exp
    (39) exp -> exp . EQUALS_OP exp
    (40) exp -> exp . OR_OP exp
    (41) exp -> exp . AND_OP exp
    (42) exp -> exp . MUL_ASSIGN exp
    (43) exp -> exp . DIV_ASSIGN exp
    (44) exp -> exp . MOD_ASSIGN exp
    (45) exp -> exp . ADD_ASSIGN exp
    (46) exp -> exp . SUB_ASSIGN exp
    (47) exp -> exp . LEFT_ASSIGN exp
    (48) exp -> exp . RIGHT_ASSIGN exp
    (49) exp -> exp . AND_ASSIGN exp
    (50) exp -> exp . XOR_ASSIGN exp
    (51) exp -> exp . OR_ASSIGN exp
    (52) exp -> exp . EQUALS exp

    ADD             reduce using rule 35 (exp -> exp G_OP exp .)
    MINUS           reduce using rule 35 (exp -> exp G_OP exp .)
    MULT            reduce using rule 35 (exp -> exp G_OP exp .)
    DIV             reduce using rule 35 (exp -> exp G_OP exp .)
    MOD             reduce using rule 35 (exp -> exp G_OP exp .)
    L_OP            reduce using rule 35 (exp -> exp G_OP exp .)
    G_OP            reduce using rule 35 (exp -> exp G_OP exp .)
    LE_OP           reduce using rule 35 (exp -> exp G_OP exp .)
    GE_OP           reduce using rule 35 (exp -> exp G_OP exp .)
    SEMI_COLON      reduce using rule 35 (exp -> exp G_OP exp .)
    RPAREN          reduce using rule 35 (exp -> exp G_OP exp .)
    COMMA           reduce using rule 35 (exp -> exp G_OP exp .)
    NOTEQUALS       shift and go to state 52
    EQUALS_OP       shift and go to state 53
    OR_OP           shift and go to state 62
    AND_OP          shift and go to state 66
    MUL_ASSIGN      shift and go to state 74
    DIV_ASSIGN      shift and go to state 54
    MOD_ASSIGN      shift and go to state 70
    ADD_ASSIGN      shift and go to state 64
    SUB_ASSIGN      shift and go to state 69
    LEFT_ASSIGN     shift and go to state 75
    RIGHT_ASSIGN    shift and go to state 60
    AND_ASSIGN      shift and go to state 63
    XOR_ASSIGN      shift and go to state 71
    OR_ASSIGN       shift and go to state 72
    EQUALS          shift and go to state 65

  ! NOTEQUALS       [ reduce using rule 35 (exp -> exp G_OP exp .) ]
  ! EQUALS_OP       [ reduce using rule 35 (exp -> exp G_OP exp .) ]
  ! OR_OP           [ reduce using rule 35 (exp -> exp G_OP exp .) ]
  ! AND_OP          [ reduce using rule 35 (exp -> exp G_OP exp .) ]
  ! MUL_ASSIGN      [ reduce using rule 35 (exp -> exp G_OP exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 35 (exp -> exp G_OP exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 35 (exp -> exp G_OP exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 35 (exp -> exp G_OP exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 35 (exp -> exp G_OP exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 35 (exp -> exp G_OP exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 35 (exp -> exp G_OP exp .) ]
  ! AND_ASSIGN      [ reduce using rule 35 (exp -> exp G_OP exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 35 (exp -> exp G_OP exp .) ]
  ! OR_ASSIGN       [ reduce using rule 35 (exp -> exp G_OP exp .) ]
  ! EQUALS          [ reduce using rule 35 (exp -> exp G_OP exp .) ]
  ! ADD             [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 57 ]
  ! MULT            [ shift and go to state 58 ]
  ! DIV             [ shift and go to state 56 ]
  ! MOD             [ shift and go to state 76 ]
  ! L_OP            [ shift and go to state 73 ]
  ! G_OP            [ shift and go to state 61 ]
  ! LE_OP           [ shift and go to state 59 ]
  ! GE_OP           [ shift and go to state 68 ]


state 100

    (40) exp -> exp OR_OP exp .
    (29) exp -> exp . ADD exp
    (30) exp -> exp . MINUS exp
    (31) exp -> exp . MULT exp
    (32) exp -> exp . DIV exp
    (33) exp -> exp . MOD exp
    (34) exp -> exp . L_OP exp
    (35) exp -> exp . G_OP exp
    (36) exp -> exp . LE_OP exp
    (37) exp -> exp . GE_OP exp
    (38) exp -> exp . NOTEQUALS exp
    (39) exp -> exp . EQUALS_OP exp
    (40) exp -> exp . OR_OP exp
    (41) exp -> exp . AND_OP exp
    (42) exp -> exp . MUL_ASSIGN exp
    (43) exp -> exp . DIV_ASSIGN exp
    (44) exp -> exp . MOD_ASSIGN exp
    (45) exp -> exp . ADD_ASSIGN exp
    (46) exp -> exp . SUB_ASSIGN exp
    (47) exp -> exp . LEFT_ASSIGN exp
    (48) exp -> exp . RIGHT_ASSIGN exp
    (49) exp -> exp . AND_ASSIGN exp
    (50) exp -> exp . XOR_ASSIGN exp
    (51) exp -> exp . OR_ASSIGN exp
    (52) exp -> exp . EQUALS exp

    ADD             reduce using rule 40 (exp -> exp OR_OP exp .)
    MINUS           reduce using rule 40 (exp -> exp OR_OP exp .)
    MULT            reduce using rule 40 (exp -> exp OR_OP exp .)
    DIV             reduce using rule 40 (exp -> exp OR_OP exp .)
    MOD             reduce using rule 40 (exp -> exp OR_OP exp .)
    L_OP            reduce using rule 40 (exp -> exp OR_OP exp .)
    G_OP            reduce using rule 40 (exp -> exp OR_OP exp .)
    LE_OP           reduce using rule 40 (exp -> exp OR_OP exp .)
    GE_OP           reduce using rule 40 (exp -> exp OR_OP exp .)
    NOTEQUALS       reduce using rule 40 (exp -> exp OR_OP exp .)
    EQUALS_OP       reduce using rule 40 (exp -> exp OR_OP exp .)
    OR_OP           reduce using rule 40 (exp -> exp OR_OP exp .)
    AND_OP          reduce using rule 40 (exp -> exp OR_OP exp .)
    SEMI_COLON      reduce using rule 40 (exp -> exp OR_OP exp .)
    RPAREN          reduce using rule 40 (exp -> exp OR_OP exp .)
    COMMA           reduce using rule 40 (exp -> exp OR_OP exp .)
    MUL_ASSIGN      shift and go to state 74
    DIV_ASSIGN      shift and go to state 54
    MOD_ASSIGN      shift and go to state 70
    ADD_ASSIGN      shift and go to state 64
    SUB_ASSIGN      shift and go to state 69
    LEFT_ASSIGN     shift and go to state 75
    RIGHT_ASSIGN    shift and go to state 60
    AND_ASSIGN      shift and go to state 63
    XOR_ASSIGN      shift and go to state 71
    OR_ASSIGN       shift and go to state 72
    EQUALS          shift and go to state 65

  ! MUL_ASSIGN      [ reduce using rule 40 (exp -> exp OR_OP exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 40 (exp -> exp OR_OP exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 40 (exp -> exp OR_OP exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 40 (exp -> exp OR_OP exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 40 (exp -> exp OR_OP exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 40 (exp -> exp OR_OP exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 40 (exp -> exp OR_OP exp .) ]
  ! AND_ASSIGN      [ reduce using rule 40 (exp -> exp OR_OP exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 40 (exp -> exp OR_OP exp .) ]
  ! OR_ASSIGN       [ reduce using rule 40 (exp -> exp OR_OP exp .) ]
  ! EQUALS          [ reduce using rule 40 (exp -> exp OR_OP exp .) ]
  ! ADD             [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 57 ]
  ! MULT            [ shift and go to state 58 ]
  ! DIV             [ shift and go to state 56 ]
  ! MOD             [ shift and go to state 76 ]
  ! L_OP            [ shift and go to state 73 ]
  ! G_OP            [ shift and go to state 61 ]
  ! LE_OP           [ shift and go to state 59 ]
  ! GE_OP           [ shift and go to state 68 ]
  ! NOTEQUALS       [ shift and go to state 52 ]
  ! EQUALS_OP       [ shift and go to state 53 ]
  ! OR_OP           [ shift and go to state 62 ]
  ! AND_OP          [ shift and go to state 66 ]


state 101

    (49) exp -> exp AND_ASSIGN exp .
    (29) exp -> exp . ADD exp
    (30) exp -> exp . MINUS exp
    (31) exp -> exp . MULT exp
    (32) exp -> exp . DIV exp
    (33) exp -> exp . MOD exp
    (34) exp -> exp . L_OP exp
    (35) exp -> exp . G_OP exp
    (36) exp -> exp . LE_OP exp
    (37) exp -> exp . GE_OP exp
    (38) exp -> exp . NOTEQUALS exp
    (39) exp -> exp . EQUALS_OP exp
    (40) exp -> exp . OR_OP exp
    (41) exp -> exp . AND_OP exp
    (42) exp -> exp . MUL_ASSIGN exp
    (43) exp -> exp . DIV_ASSIGN exp
    (44) exp -> exp . MOD_ASSIGN exp
    (45) exp -> exp . ADD_ASSIGN exp
    (46) exp -> exp . SUB_ASSIGN exp
    (47) exp -> exp . LEFT_ASSIGN exp
    (48) exp -> exp . RIGHT_ASSIGN exp
    (49) exp -> exp . AND_ASSIGN exp
    (50) exp -> exp . XOR_ASSIGN exp
    (51) exp -> exp . OR_ASSIGN exp
    (52) exp -> exp . EQUALS exp

    ADD             reduce using rule 49 (exp -> exp AND_ASSIGN exp .)
    MINUS           reduce using rule 49 (exp -> exp AND_ASSIGN exp .)
    MULT            reduce using rule 49 (exp -> exp AND_ASSIGN exp .)
    DIV             reduce using rule 49 (exp -> exp AND_ASSIGN exp .)
    MOD             reduce using rule 49 (exp -> exp AND_ASSIGN exp .)
    L_OP            reduce using rule 49 (exp -> exp AND_ASSIGN exp .)
    G_OP            reduce using rule 49 (exp -> exp AND_ASSIGN exp .)
    LE_OP           reduce using rule 49 (exp -> exp AND_ASSIGN exp .)
    GE_OP           reduce using rule 49 (exp -> exp AND_ASSIGN exp .)
    NOTEQUALS       reduce using rule 49 (exp -> exp AND_ASSIGN exp .)
    EQUALS_OP       reduce using rule 49 (exp -> exp AND_ASSIGN exp .)
    OR_OP           reduce using rule 49 (exp -> exp AND_ASSIGN exp .)
    AND_OP          reduce using rule 49 (exp -> exp AND_ASSIGN exp .)
    SEMI_COLON      reduce using rule 49 (exp -> exp AND_ASSIGN exp .)
    RPAREN          reduce using rule 49 (exp -> exp AND_ASSIGN exp .)
    COMMA           reduce using rule 49 (exp -> exp AND_ASSIGN exp .)
    MUL_ASSIGN      shift and go to state 74
    DIV_ASSIGN      shift and go to state 54
    MOD_ASSIGN      shift and go to state 70
    ADD_ASSIGN      shift and go to state 64
    SUB_ASSIGN      shift and go to state 69
    LEFT_ASSIGN     shift and go to state 75
    RIGHT_ASSIGN    shift and go to state 60
    AND_ASSIGN      shift and go to state 63
    XOR_ASSIGN      shift and go to state 71
    OR_ASSIGN       shift and go to state 72
    EQUALS          shift and go to state 65

  ! MUL_ASSIGN      [ reduce using rule 49 (exp -> exp AND_ASSIGN exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 49 (exp -> exp AND_ASSIGN exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 49 (exp -> exp AND_ASSIGN exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 49 (exp -> exp AND_ASSIGN exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 49 (exp -> exp AND_ASSIGN exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 49 (exp -> exp AND_ASSIGN exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 49 (exp -> exp AND_ASSIGN exp .) ]
  ! AND_ASSIGN      [ reduce using rule 49 (exp -> exp AND_ASSIGN exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 49 (exp -> exp AND_ASSIGN exp .) ]
  ! OR_ASSIGN       [ reduce using rule 49 (exp -> exp AND_ASSIGN exp .) ]
  ! EQUALS          [ reduce using rule 49 (exp -> exp AND_ASSIGN exp .) ]
  ! ADD             [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 57 ]
  ! MULT            [ shift and go to state 58 ]
  ! DIV             [ shift and go to state 56 ]
  ! MOD             [ shift and go to state 76 ]
  ! L_OP            [ shift and go to state 73 ]
  ! G_OP            [ shift and go to state 61 ]
  ! LE_OP           [ shift and go to state 59 ]
  ! GE_OP           [ shift and go to state 68 ]
  ! NOTEQUALS       [ shift and go to state 52 ]
  ! EQUALS_OP       [ shift and go to state 53 ]
  ! OR_OP           [ shift and go to state 62 ]
  ! AND_OP          [ shift and go to state 66 ]


state 102

    (45) exp -> exp ADD_ASSIGN exp .
    (29) exp -> exp . ADD exp
    (30) exp -> exp . MINUS exp
    (31) exp -> exp . MULT exp
    (32) exp -> exp . DIV exp
    (33) exp -> exp . MOD exp
    (34) exp -> exp . L_OP exp
    (35) exp -> exp . G_OP exp
    (36) exp -> exp . LE_OP exp
    (37) exp -> exp . GE_OP exp
    (38) exp -> exp . NOTEQUALS exp
    (39) exp -> exp . EQUALS_OP exp
    (40) exp -> exp . OR_OP exp
    (41) exp -> exp . AND_OP exp
    (42) exp -> exp . MUL_ASSIGN exp
    (43) exp -> exp . DIV_ASSIGN exp
    (44) exp -> exp . MOD_ASSIGN exp
    (45) exp -> exp . ADD_ASSIGN exp
    (46) exp -> exp . SUB_ASSIGN exp
    (47) exp -> exp . LEFT_ASSIGN exp
    (48) exp -> exp . RIGHT_ASSIGN exp
    (49) exp -> exp . AND_ASSIGN exp
    (50) exp -> exp . XOR_ASSIGN exp
    (51) exp -> exp . OR_ASSIGN exp
    (52) exp -> exp . EQUALS exp

    ADD             reduce using rule 45 (exp -> exp ADD_ASSIGN exp .)
    MINUS           reduce using rule 45 (exp -> exp ADD_ASSIGN exp .)
    MULT            reduce using rule 45 (exp -> exp ADD_ASSIGN exp .)
    DIV             reduce using rule 45 (exp -> exp ADD_ASSIGN exp .)
    MOD             reduce using rule 45 (exp -> exp ADD_ASSIGN exp .)
    L_OP            reduce using rule 45 (exp -> exp ADD_ASSIGN exp .)
    G_OP            reduce using rule 45 (exp -> exp ADD_ASSIGN exp .)
    LE_OP           reduce using rule 45 (exp -> exp ADD_ASSIGN exp .)
    GE_OP           reduce using rule 45 (exp -> exp ADD_ASSIGN exp .)
    NOTEQUALS       reduce using rule 45 (exp -> exp ADD_ASSIGN exp .)
    EQUALS_OP       reduce using rule 45 (exp -> exp ADD_ASSIGN exp .)
    OR_OP           reduce using rule 45 (exp -> exp ADD_ASSIGN exp .)
    AND_OP          reduce using rule 45 (exp -> exp ADD_ASSIGN exp .)
    SEMI_COLON      reduce using rule 45 (exp -> exp ADD_ASSIGN exp .)
    RPAREN          reduce using rule 45 (exp -> exp ADD_ASSIGN exp .)
    COMMA           reduce using rule 45 (exp -> exp ADD_ASSIGN exp .)
    MUL_ASSIGN      shift and go to state 74
    DIV_ASSIGN      shift and go to state 54
    MOD_ASSIGN      shift and go to state 70
    ADD_ASSIGN      shift and go to state 64
    SUB_ASSIGN      shift and go to state 69
    LEFT_ASSIGN     shift and go to state 75
    RIGHT_ASSIGN    shift and go to state 60
    AND_ASSIGN      shift and go to state 63
    XOR_ASSIGN      shift and go to state 71
    OR_ASSIGN       shift and go to state 72
    EQUALS          shift and go to state 65

  ! MUL_ASSIGN      [ reduce using rule 45 (exp -> exp ADD_ASSIGN exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 45 (exp -> exp ADD_ASSIGN exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 45 (exp -> exp ADD_ASSIGN exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 45 (exp -> exp ADD_ASSIGN exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 45 (exp -> exp ADD_ASSIGN exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 45 (exp -> exp ADD_ASSIGN exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 45 (exp -> exp ADD_ASSIGN exp .) ]
  ! AND_ASSIGN      [ reduce using rule 45 (exp -> exp ADD_ASSIGN exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 45 (exp -> exp ADD_ASSIGN exp .) ]
  ! OR_ASSIGN       [ reduce using rule 45 (exp -> exp ADD_ASSIGN exp .) ]
  ! EQUALS          [ reduce using rule 45 (exp -> exp ADD_ASSIGN exp .) ]
  ! ADD             [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 57 ]
  ! MULT            [ shift and go to state 58 ]
  ! DIV             [ shift and go to state 56 ]
  ! MOD             [ shift and go to state 76 ]
  ! L_OP            [ shift and go to state 73 ]
  ! G_OP            [ shift and go to state 61 ]
  ! LE_OP           [ shift and go to state 59 ]
  ! GE_OP           [ shift and go to state 68 ]
  ! NOTEQUALS       [ shift and go to state 52 ]
  ! EQUALS_OP       [ shift and go to state 53 ]
  ! OR_OP           [ shift and go to state 62 ]
  ! AND_OP          [ shift and go to state 66 ]


state 103

    (52) exp -> exp EQUALS exp .
    (29) exp -> exp . ADD exp
    (30) exp -> exp . MINUS exp
    (31) exp -> exp . MULT exp
    (32) exp -> exp . DIV exp
    (33) exp -> exp . MOD exp
    (34) exp -> exp . L_OP exp
    (35) exp -> exp . G_OP exp
    (36) exp -> exp . LE_OP exp
    (37) exp -> exp . GE_OP exp
    (38) exp -> exp . NOTEQUALS exp
    (39) exp -> exp . EQUALS_OP exp
    (40) exp -> exp . OR_OP exp
    (41) exp -> exp . AND_OP exp
    (42) exp -> exp . MUL_ASSIGN exp
    (43) exp -> exp . DIV_ASSIGN exp
    (44) exp -> exp . MOD_ASSIGN exp
    (45) exp -> exp . ADD_ASSIGN exp
    (46) exp -> exp . SUB_ASSIGN exp
    (47) exp -> exp . LEFT_ASSIGN exp
    (48) exp -> exp . RIGHT_ASSIGN exp
    (49) exp -> exp . AND_ASSIGN exp
    (50) exp -> exp . XOR_ASSIGN exp
    (51) exp -> exp . OR_ASSIGN exp
    (52) exp -> exp . EQUALS exp

    ADD             reduce using rule 52 (exp -> exp EQUALS exp .)
    MINUS           reduce using rule 52 (exp -> exp EQUALS exp .)
    MULT            reduce using rule 52 (exp -> exp EQUALS exp .)
    DIV             reduce using rule 52 (exp -> exp EQUALS exp .)
    MOD             reduce using rule 52 (exp -> exp EQUALS exp .)
    L_OP            reduce using rule 52 (exp -> exp EQUALS exp .)
    G_OP            reduce using rule 52 (exp -> exp EQUALS exp .)
    LE_OP           reduce using rule 52 (exp -> exp EQUALS exp .)
    GE_OP           reduce using rule 52 (exp -> exp EQUALS exp .)
    NOTEQUALS       reduce using rule 52 (exp -> exp EQUALS exp .)
    EQUALS_OP       reduce using rule 52 (exp -> exp EQUALS exp .)
    OR_OP           reduce using rule 52 (exp -> exp EQUALS exp .)
    AND_OP          reduce using rule 52 (exp -> exp EQUALS exp .)
    SEMI_COLON      reduce using rule 52 (exp -> exp EQUALS exp .)
    RPAREN          reduce using rule 52 (exp -> exp EQUALS exp .)
    COMMA           reduce using rule 52 (exp -> exp EQUALS exp .)
    MUL_ASSIGN      shift and go to state 74
    DIV_ASSIGN      shift and go to state 54
    MOD_ASSIGN      shift and go to state 70
    ADD_ASSIGN      shift and go to state 64
    SUB_ASSIGN      shift and go to state 69
    LEFT_ASSIGN     shift and go to state 75
    RIGHT_ASSIGN    shift and go to state 60
    AND_ASSIGN      shift and go to state 63
    XOR_ASSIGN      shift and go to state 71
    OR_ASSIGN       shift and go to state 72
    EQUALS          shift and go to state 65

  ! MUL_ASSIGN      [ reduce using rule 52 (exp -> exp EQUALS exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 52 (exp -> exp EQUALS exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 52 (exp -> exp EQUALS exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 52 (exp -> exp EQUALS exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 52 (exp -> exp EQUALS exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 52 (exp -> exp EQUALS exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 52 (exp -> exp EQUALS exp .) ]
  ! AND_ASSIGN      [ reduce using rule 52 (exp -> exp EQUALS exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 52 (exp -> exp EQUALS exp .) ]
  ! OR_ASSIGN       [ reduce using rule 52 (exp -> exp EQUALS exp .) ]
  ! EQUALS          [ reduce using rule 52 (exp -> exp EQUALS exp .) ]
  ! ADD             [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 57 ]
  ! MULT            [ shift and go to state 58 ]
  ! DIV             [ shift and go to state 56 ]
  ! MOD             [ shift and go to state 76 ]
  ! L_OP            [ shift and go to state 73 ]
  ! G_OP            [ shift and go to state 61 ]
  ! LE_OP           [ shift and go to state 59 ]
  ! GE_OP           [ shift and go to state 68 ]
  ! NOTEQUALS       [ shift and go to state 52 ]
  ! EQUALS_OP       [ shift and go to state 53 ]
  ! OR_OP           [ shift and go to state 62 ]
  ! AND_OP          [ shift and go to state 66 ]


state 104

    (41) exp -> exp AND_OP exp .
    (29) exp -> exp . ADD exp
    (30) exp -> exp . MINUS exp
    (31) exp -> exp . MULT exp
    (32) exp -> exp . DIV exp
    (33) exp -> exp . MOD exp
    (34) exp -> exp . L_OP exp
    (35) exp -> exp . G_OP exp
    (36) exp -> exp . LE_OP exp
    (37) exp -> exp . GE_OP exp
    (38) exp -> exp . NOTEQUALS exp
    (39) exp -> exp . EQUALS_OP exp
    (40) exp -> exp . OR_OP exp
    (41) exp -> exp . AND_OP exp
    (42) exp -> exp . MUL_ASSIGN exp
    (43) exp -> exp . DIV_ASSIGN exp
    (44) exp -> exp . MOD_ASSIGN exp
    (45) exp -> exp . ADD_ASSIGN exp
    (46) exp -> exp . SUB_ASSIGN exp
    (47) exp -> exp . LEFT_ASSIGN exp
    (48) exp -> exp . RIGHT_ASSIGN exp
    (49) exp -> exp . AND_ASSIGN exp
    (50) exp -> exp . XOR_ASSIGN exp
    (51) exp -> exp . OR_ASSIGN exp
    (52) exp -> exp . EQUALS exp

    ADD             reduce using rule 41 (exp -> exp AND_OP exp .)
    MINUS           reduce using rule 41 (exp -> exp AND_OP exp .)
    MULT            reduce using rule 41 (exp -> exp AND_OP exp .)
    DIV             reduce using rule 41 (exp -> exp AND_OP exp .)
    MOD             reduce using rule 41 (exp -> exp AND_OP exp .)
    L_OP            reduce using rule 41 (exp -> exp AND_OP exp .)
    G_OP            reduce using rule 41 (exp -> exp AND_OP exp .)
    LE_OP           reduce using rule 41 (exp -> exp AND_OP exp .)
    GE_OP           reduce using rule 41 (exp -> exp AND_OP exp .)
    NOTEQUALS       reduce using rule 41 (exp -> exp AND_OP exp .)
    EQUALS_OP       reduce using rule 41 (exp -> exp AND_OP exp .)
    OR_OP           reduce using rule 41 (exp -> exp AND_OP exp .)
    AND_OP          reduce using rule 41 (exp -> exp AND_OP exp .)
    SEMI_COLON      reduce using rule 41 (exp -> exp AND_OP exp .)
    RPAREN          reduce using rule 41 (exp -> exp AND_OP exp .)
    COMMA           reduce using rule 41 (exp -> exp AND_OP exp .)
    MUL_ASSIGN      shift and go to state 74
    DIV_ASSIGN      shift and go to state 54
    MOD_ASSIGN      shift and go to state 70
    ADD_ASSIGN      shift and go to state 64
    SUB_ASSIGN      shift and go to state 69
    LEFT_ASSIGN     shift and go to state 75
    RIGHT_ASSIGN    shift and go to state 60
    AND_ASSIGN      shift and go to state 63
    XOR_ASSIGN      shift and go to state 71
    OR_ASSIGN       shift and go to state 72
    EQUALS          shift and go to state 65

  ! MUL_ASSIGN      [ reduce using rule 41 (exp -> exp AND_OP exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 41 (exp -> exp AND_OP exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 41 (exp -> exp AND_OP exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 41 (exp -> exp AND_OP exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 41 (exp -> exp AND_OP exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 41 (exp -> exp AND_OP exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 41 (exp -> exp AND_OP exp .) ]
  ! AND_ASSIGN      [ reduce using rule 41 (exp -> exp AND_OP exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 41 (exp -> exp AND_OP exp .) ]
  ! OR_ASSIGN       [ reduce using rule 41 (exp -> exp AND_OP exp .) ]
  ! EQUALS          [ reduce using rule 41 (exp -> exp AND_OP exp .) ]
  ! ADD             [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 57 ]
  ! MULT            [ shift and go to state 58 ]
  ! DIV             [ shift and go to state 56 ]
  ! MOD             [ shift and go to state 76 ]
  ! L_OP            [ shift and go to state 73 ]
  ! G_OP            [ shift and go to state 61 ]
  ! LE_OP           [ shift and go to state 59 ]
  ! GE_OP           [ shift and go to state 68 ]
  ! NOTEQUALS       [ shift and go to state 52 ]
  ! EQUALS_OP       [ shift and go to state 53 ]
  ! OR_OP           [ shift and go to state 62 ]
  ! AND_OP          [ shift and go to state 66 ]


state 105

    (29) exp -> exp ADD exp .
    (29) exp -> exp . ADD exp
    (30) exp -> exp . MINUS exp
    (31) exp -> exp . MULT exp
    (32) exp -> exp . DIV exp
    (33) exp -> exp . MOD exp
    (34) exp -> exp . L_OP exp
    (35) exp -> exp . G_OP exp
    (36) exp -> exp . LE_OP exp
    (37) exp -> exp . GE_OP exp
    (38) exp -> exp . NOTEQUALS exp
    (39) exp -> exp . EQUALS_OP exp
    (40) exp -> exp . OR_OP exp
    (41) exp -> exp . AND_OP exp
    (42) exp -> exp . MUL_ASSIGN exp
    (43) exp -> exp . DIV_ASSIGN exp
    (44) exp -> exp . MOD_ASSIGN exp
    (45) exp -> exp . ADD_ASSIGN exp
    (46) exp -> exp . SUB_ASSIGN exp
    (47) exp -> exp . LEFT_ASSIGN exp
    (48) exp -> exp . RIGHT_ASSIGN exp
    (49) exp -> exp . AND_ASSIGN exp
    (50) exp -> exp . XOR_ASSIGN exp
    (51) exp -> exp . OR_ASSIGN exp
    (52) exp -> exp . EQUALS exp

    ADD             reduce using rule 29 (exp -> exp ADD exp .)
    MINUS           reduce using rule 29 (exp -> exp ADD exp .)
    SEMI_COLON      reduce using rule 29 (exp -> exp ADD exp .)
    RPAREN          reduce using rule 29 (exp -> exp ADD exp .)
    COMMA           reduce using rule 29 (exp -> exp ADD exp .)
    MULT            shift and go to state 58
    DIV             shift and go to state 56
    MOD             shift and go to state 76
    L_OP            shift and go to state 73
    G_OP            shift and go to state 61
    LE_OP           shift and go to state 59
    GE_OP           shift and go to state 68
    NOTEQUALS       shift and go to state 52
    EQUALS_OP       shift and go to state 53
    OR_OP           shift and go to state 62
    AND_OP          shift and go to state 66
    MUL_ASSIGN      shift and go to state 74
    DIV_ASSIGN      shift and go to state 54
    MOD_ASSIGN      shift and go to state 70
    ADD_ASSIGN      shift and go to state 64
    SUB_ASSIGN      shift and go to state 69
    LEFT_ASSIGN     shift and go to state 75
    RIGHT_ASSIGN    shift and go to state 60
    AND_ASSIGN      shift and go to state 63
    XOR_ASSIGN      shift and go to state 71
    OR_ASSIGN       shift and go to state 72
    EQUALS          shift and go to state 65

  ! MULT            [ reduce using rule 29 (exp -> exp ADD exp .) ]
  ! DIV             [ reduce using rule 29 (exp -> exp ADD exp .) ]
  ! MOD             [ reduce using rule 29 (exp -> exp ADD exp .) ]
  ! L_OP            [ reduce using rule 29 (exp -> exp ADD exp .) ]
  ! G_OP            [ reduce using rule 29 (exp -> exp ADD exp .) ]
  ! LE_OP           [ reduce using rule 29 (exp -> exp ADD exp .) ]
  ! GE_OP           [ reduce using rule 29 (exp -> exp ADD exp .) ]
  ! NOTEQUALS       [ reduce using rule 29 (exp -> exp ADD exp .) ]
  ! EQUALS_OP       [ reduce using rule 29 (exp -> exp ADD exp .) ]
  ! OR_OP           [ reduce using rule 29 (exp -> exp ADD exp .) ]
  ! AND_OP          [ reduce using rule 29 (exp -> exp ADD exp .) ]
  ! MUL_ASSIGN      [ reduce using rule 29 (exp -> exp ADD exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 29 (exp -> exp ADD exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 29 (exp -> exp ADD exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 29 (exp -> exp ADD exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 29 (exp -> exp ADD exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 29 (exp -> exp ADD exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 29 (exp -> exp ADD exp .) ]
  ! AND_ASSIGN      [ reduce using rule 29 (exp -> exp ADD exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 29 (exp -> exp ADD exp .) ]
  ! OR_ASSIGN       [ reduce using rule 29 (exp -> exp ADD exp .) ]
  ! EQUALS          [ reduce using rule 29 (exp -> exp ADD exp .) ]
  ! ADD             [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 57 ]


state 106

    (37) exp -> exp GE_OP exp .
    (29) exp -> exp . ADD exp
    (30) exp -> exp . MINUS exp
    (31) exp -> exp . MULT exp
    (32) exp -> exp . DIV exp
    (33) exp -> exp . MOD exp
    (34) exp -> exp . L_OP exp
    (35) exp -> exp . G_OP exp
    (36) exp -> exp . LE_OP exp
    (37) exp -> exp . GE_OP exp
    (38) exp -> exp . NOTEQUALS exp
    (39) exp -> exp . EQUALS_OP exp
    (40) exp -> exp . OR_OP exp
    (41) exp -> exp . AND_OP exp
    (42) exp -> exp . MUL_ASSIGN exp
    (43) exp -> exp . DIV_ASSIGN exp
    (44) exp -> exp . MOD_ASSIGN exp
    (45) exp -> exp . ADD_ASSIGN exp
    (46) exp -> exp . SUB_ASSIGN exp
    (47) exp -> exp . LEFT_ASSIGN exp
    (48) exp -> exp . RIGHT_ASSIGN exp
    (49) exp -> exp . AND_ASSIGN exp
    (50) exp -> exp . XOR_ASSIGN exp
    (51) exp -> exp . OR_ASSIGN exp
    (52) exp -> exp . EQUALS exp

    ADD             reduce using rule 37 (exp -> exp GE_OP exp .)
    MINUS           reduce using rule 37 (exp -> exp GE_OP exp .)
    MULT            reduce using rule 37 (exp -> exp GE_OP exp .)
    DIV             reduce using rule 37 (exp -> exp GE_OP exp .)
    MOD             reduce using rule 37 (exp -> exp GE_OP exp .)
    L_OP            reduce using rule 37 (exp -> exp GE_OP exp .)
    G_OP            reduce using rule 37 (exp -> exp GE_OP exp .)
    LE_OP           reduce using rule 37 (exp -> exp GE_OP exp .)
    GE_OP           reduce using rule 37 (exp -> exp GE_OP exp .)
    SEMI_COLON      reduce using rule 37 (exp -> exp GE_OP exp .)
    RPAREN          reduce using rule 37 (exp -> exp GE_OP exp .)
    COMMA           reduce using rule 37 (exp -> exp GE_OP exp .)
    NOTEQUALS       shift and go to state 52
    EQUALS_OP       shift and go to state 53
    OR_OP           shift and go to state 62
    AND_OP          shift and go to state 66
    MUL_ASSIGN      shift and go to state 74
    DIV_ASSIGN      shift and go to state 54
    MOD_ASSIGN      shift and go to state 70
    ADD_ASSIGN      shift and go to state 64
    SUB_ASSIGN      shift and go to state 69
    LEFT_ASSIGN     shift and go to state 75
    RIGHT_ASSIGN    shift and go to state 60
    AND_ASSIGN      shift and go to state 63
    XOR_ASSIGN      shift and go to state 71
    OR_ASSIGN       shift and go to state 72
    EQUALS          shift and go to state 65

  ! NOTEQUALS       [ reduce using rule 37 (exp -> exp GE_OP exp .) ]
  ! EQUALS_OP       [ reduce using rule 37 (exp -> exp GE_OP exp .) ]
  ! OR_OP           [ reduce using rule 37 (exp -> exp GE_OP exp .) ]
  ! AND_OP          [ reduce using rule 37 (exp -> exp GE_OP exp .) ]
  ! MUL_ASSIGN      [ reduce using rule 37 (exp -> exp GE_OP exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 37 (exp -> exp GE_OP exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 37 (exp -> exp GE_OP exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 37 (exp -> exp GE_OP exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 37 (exp -> exp GE_OP exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 37 (exp -> exp GE_OP exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 37 (exp -> exp GE_OP exp .) ]
  ! AND_ASSIGN      [ reduce using rule 37 (exp -> exp GE_OP exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 37 (exp -> exp GE_OP exp .) ]
  ! OR_ASSIGN       [ reduce using rule 37 (exp -> exp GE_OP exp .) ]
  ! EQUALS          [ reduce using rule 37 (exp -> exp GE_OP exp .) ]
  ! ADD             [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 57 ]
  ! MULT            [ shift and go to state 58 ]
  ! DIV             [ shift and go to state 56 ]
  ! MOD             [ shift and go to state 76 ]
  ! L_OP            [ shift and go to state 73 ]
  ! G_OP            [ shift and go to state 61 ]
  ! LE_OP           [ shift and go to state 59 ]
  ! GE_OP           [ shift and go to state 68 ]


state 107

    (46) exp -> exp SUB_ASSIGN exp .
    (29) exp -> exp . ADD exp
    (30) exp -> exp . MINUS exp
    (31) exp -> exp . MULT exp
    (32) exp -> exp . DIV exp
    (33) exp -> exp . MOD exp
    (34) exp -> exp . L_OP exp
    (35) exp -> exp . G_OP exp
    (36) exp -> exp . LE_OP exp
    (37) exp -> exp . GE_OP exp
    (38) exp -> exp . NOTEQUALS exp
    (39) exp -> exp . EQUALS_OP exp
    (40) exp -> exp . OR_OP exp
    (41) exp -> exp . AND_OP exp
    (42) exp -> exp . MUL_ASSIGN exp
    (43) exp -> exp . DIV_ASSIGN exp
    (44) exp -> exp . MOD_ASSIGN exp
    (45) exp -> exp . ADD_ASSIGN exp
    (46) exp -> exp . SUB_ASSIGN exp
    (47) exp -> exp . LEFT_ASSIGN exp
    (48) exp -> exp . RIGHT_ASSIGN exp
    (49) exp -> exp . AND_ASSIGN exp
    (50) exp -> exp . XOR_ASSIGN exp
    (51) exp -> exp . OR_ASSIGN exp
    (52) exp -> exp . EQUALS exp

    ADD             reduce using rule 46 (exp -> exp SUB_ASSIGN exp .)
    MINUS           reduce using rule 46 (exp -> exp SUB_ASSIGN exp .)
    MULT            reduce using rule 46 (exp -> exp SUB_ASSIGN exp .)
    DIV             reduce using rule 46 (exp -> exp SUB_ASSIGN exp .)
    MOD             reduce using rule 46 (exp -> exp SUB_ASSIGN exp .)
    L_OP            reduce using rule 46 (exp -> exp SUB_ASSIGN exp .)
    G_OP            reduce using rule 46 (exp -> exp SUB_ASSIGN exp .)
    LE_OP           reduce using rule 46 (exp -> exp SUB_ASSIGN exp .)
    GE_OP           reduce using rule 46 (exp -> exp SUB_ASSIGN exp .)
    NOTEQUALS       reduce using rule 46 (exp -> exp SUB_ASSIGN exp .)
    EQUALS_OP       reduce using rule 46 (exp -> exp SUB_ASSIGN exp .)
    OR_OP           reduce using rule 46 (exp -> exp SUB_ASSIGN exp .)
    AND_OP          reduce using rule 46 (exp -> exp SUB_ASSIGN exp .)
    SEMI_COLON      reduce using rule 46 (exp -> exp SUB_ASSIGN exp .)
    RPAREN          reduce using rule 46 (exp -> exp SUB_ASSIGN exp .)
    COMMA           reduce using rule 46 (exp -> exp SUB_ASSIGN exp .)
    MUL_ASSIGN      shift and go to state 74
    DIV_ASSIGN      shift and go to state 54
    MOD_ASSIGN      shift and go to state 70
    ADD_ASSIGN      shift and go to state 64
    SUB_ASSIGN      shift and go to state 69
    LEFT_ASSIGN     shift and go to state 75
    RIGHT_ASSIGN    shift and go to state 60
    AND_ASSIGN      shift and go to state 63
    XOR_ASSIGN      shift and go to state 71
    OR_ASSIGN       shift and go to state 72
    EQUALS          shift and go to state 65

  ! MUL_ASSIGN      [ reduce using rule 46 (exp -> exp SUB_ASSIGN exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 46 (exp -> exp SUB_ASSIGN exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 46 (exp -> exp SUB_ASSIGN exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 46 (exp -> exp SUB_ASSIGN exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 46 (exp -> exp SUB_ASSIGN exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 46 (exp -> exp SUB_ASSIGN exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 46 (exp -> exp SUB_ASSIGN exp .) ]
  ! AND_ASSIGN      [ reduce using rule 46 (exp -> exp SUB_ASSIGN exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 46 (exp -> exp SUB_ASSIGN exp .) ]
  ! OR_ASSIGN       [ reduce using rule 46 (exp -> exp SUB_ASSIGN exp .) ]
  ! EQUALS          [ reduce using rule 46 (exp -> exp SUB_ASSIGN exp .) ]
  ! ADD             [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 57 ]
  ! MULT            [ shift and go to state 58 ]
  ! DIV             [ shift and go to state 56 ]
  ! MOD             [ shift and go to state 76 ]
  ! L_OP            [ shift and go to state 73 ]
  ! G_OP            [ shift and go to state 61 ]
  ! LE_OP           [ shift and go to state 59 ]
  ! GE_OP           [ shift and go to state 68 ]
  ! NOTEQUALS       [ shift and go to state 52 ]
  ! EQUALS_OP       [ shift and go to state 53 ]
  ! OR_OP           [ shift and go to state 62 ]
  ! AND_OP          [ shift and go to state 66 ]


state 108

    (44) exp -> exp MOD_ASSIGN exp .
    (29) exp -> exp . ADD exp
    (30) exp -> exp . MINUS exp
    (31) exp -> exp . MULT exp
    (32) exp -> exp . DIV exp
    (33) exp -> exp . MOD exp
    (34) exp -> exp . L_OP exp
    (35) exp -> exp . G_OP exp
    (36) exp -> exp . LE_OP exp
    (37) exp -> exp . GE_OP exp
    (38) exp -> exp . NOTEQUALS exp
    (39) exp -> exp . EQUALS_OP exp
    (40) exp -> exp . OR_OP exp
    (41) exp -> exp . AND_OP exp
    (42) exp -> exp . MUL_ASSIGN exp
    (43) exp -> exp . DIV_ASSIGN exp
    (44) exp -> exp . MOD_ASSIGN exp
    (45) exp -> exp . ADD_ASSIGN exp
    (46) exp -> exp . SUB_ASSIGN exp
    (47) exp -> exp . LEFT_ASSIGN exp
    (48) exp -> exp . RIGHT_ASSIGN exp
    (49) exp -> exp . AND_ASSIGN exp
    (50) exp -> exp . XOR_ASSIGN exp
    (51) exp -> exp . OR_ASSIGN exp
    (52) exp -> exp . EQUALS exp

    ADD             reduce using rule 44 (exp -> exp MOD_ASSIGN exp .)
    MINUS           reduce using rule 44 (exp -> exp MOD_ASSIGN exp .)
    MULT            reduce using rule 44 (exp -> exp MOD_ASSIGN exp .)
    DIV             reduce using rule 44 (exp -> exp MOD_ASSIGN exp .)
    MOD             reduce using rule 44 (exp -> exp MOD_ASSIGN exp .)
    L_OP            reduce using rule 44 (exp -> exp MOD_ASSIGN exp .)
    G_OP            reduce using rule 44 (exp -> exp MOD_ASSIGN exp .)
    LE_OP           reduce using rule 44 (exp -> exp MOD_ASSIGN exp .)
    GE_OP           reduce using rule 44 (exp -> exp MOD_ASSIGN exp .)
    NOTEQUALS       reduce using rule 44 (exp -> exp MOD_ASSIGN exp .)
    EQUALS_OP       reduce using rule 44 (exp -> exp MOD_ASSIGN exp .)
    OR_OP           reduce using rule 44 (exp -> exp MOD_ASSIGN exp .)
    AND_OP          reduce using rule 44 (exp -> exp MOD_ASSIGN exp .)
    SEMI_COLON      reduce using rule 44 (exp -> exp MOD_ASSIGN exp .)
    RPAREN          reduce using rule 44 (exp -> exp MOD_ASSIGN exp .)
    COMMA           reduce using rule 44 (exp -> exp MOD_ASSIGN exp .)
    MUL_ASSIGN      shift and go to state 74
    DIV_ASSIGN      shift and go to state 54
    MOD_ASSIGN      shift and go to state 70
    ADD_ASSIGN      shift and go to state 64
    SUB_ASSIGN      shift and go to state 69
    LEFT_ASSIGN     shift and go to state 75
    RIGHT_ASSIGN    shift and go to state 60
    AND_ASSIGN      shift and go to state 63
    XOR_ASSIGN      shift and go to state 71
    OR_ASSIGN       shift and go to state 72
    EQUALS          shift and go to state 65

  ! MUL_ASSIGN      [ reduce using rule 44 (exp -> exp MOD_ASSIGN exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 44 (exp -> exp MOD_ASSIGN exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 44 (exp -> exp MOD_ASSIGN exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 44 (exp -> exp MOD_ASSIGN exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 44 (exp -> exp MOD_ASSIGN exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 44 (exp -> exp MOD_ASSIGN exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 44 (exp -> exp MOD_ASSIGN exp .) ]
  ! AND_ASSIGN      [ reduce using rule 44 (exp -> exp MOD_ASSIGN exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 44 (exp -> exp MOD_ASSIGN exp .) ]
  ! OR_ASSIGN       [ reduce using rule 44 (exp -> exp MOD_ASSIGN exp .) ]
  ! EQUALS          [ reduce using rule 44 (exp -> exp MOD_ASSIGN exp .) ]
  ! ADD             [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 57 ]
  ! MULT            [ shift and go to state 58 ]
  ! DIV             [ shift and go to state 56 ]
  ! MOD             [ shift and go to state 76 ]
  ! L_OP            [ shift and go to state 73 ]
  ! G_OP            [ shift and go to state 61 ]
  ! LE_OP           [ shift and go to state 59 ]
  ! GE_OP           [ shift and go to state 68 ]
  ! NOTEQUALS       [ shift and go to state 52 ]
  ! EQUALS_OP       [ shift and go to state 53 ]
  ! OR_OP           [ shift and go to state 62 ]
  ! AND_OP          [ shift and go to state 66 ]


state 109

    (50) exp -> exp XOR_ASSIGN exp .
    (29) exp -> exp . ADD exp
    (30) exp -> exp . MINUS exp
    (31) exp -> exp . MULT exp
    (32) exp -> exp . DIV exp
    (33) exp -> exp . MOD exp
    (34) exp -> exp . L_OP exp
    (35) exp -> exp . G_OP exp
    (36) exp -> exp . LE_OP exp
    (37) exp -> exp . GE_OP exp
    (38) exp -> exp . NOTEQUALS exp
    (39) exp -> exp . EQUALS_OP exp
    (40) exp -> exp . OR_OP exp
    (41) exp -> exp . AND_OP exp
    (42) exp -> exp . MUL_ASSIGN exp
    (43) exp -> exp . DIV_ASSIGN exp
    (44) exp -> exp . MOD_ASSIGN exp
    (45) exp -> exp . ADD_ASSIGN exp
    (46) exp -> exp . SUB_ASSIGN exp
    (47) exp -> exp . LEFT_ASSIGN exp
    (48) exp -> exp . RIGHT_ASSIGN exp
    (49) exp -> exp . AND_ASSIGN exp
    (50) exp -> exp . XOR_ASSIGN exp
    (51) exp -> exp . OR_ASSIGN exp
    (52) exp -> exp . EQUALS exp

    ADD             reduce using rule 50 (exp -> exp XOR_ASSIGN exp .)
    MINUS           reduce using rule 50 (exp -> exp XOR_ASSIGN exp .)
    MULT            reduce using rule 50 (exp -> exp XOR_ASSIGN exp .)
    DIV             reduce using rule 50 (exp -> exp XOR_ASSIGN exp .)
    MOD             reduce using rule 50 (exp -> exp XOR_ASSIGN exp .)
    L_OP            reduce using rule 50 (exp -> exp XOR_ASSIGN exp .)
    G_OP            reduce using rule 50 (exp -> exp XOR_ASSIGN exp .)
    LE_OP           reduce using rule 50 (exp -> exp XOR_ASSIGN exp .)
    GE_OP           reduce using rule 50 (exp -> exp XOR_ASSIGN exp .)
    NOTEQUALS       reduce using rule 50 (exp -> exp XOR_ASSIGN exp .)
    EQUALS_OP       reduce using rule 50 (exp -> exp XOR_ASSIGN exp .)
    OR_OP           reduce using rule 50 (exp -> exp XOR_ASSIGN exp .)
    AND_OP          reduce using rule 50 (exp -> exp XOR_ASSIGN exp .)
    SEMI_COLON      reduce using rule 50 (exp -> exp XOR_ASSIGN exp .)
    RPAREN          reduce using rule 50 (exp -> exp XOR_ASSIGN exp .)
    COMMA           reduce using rule 50 (exp -> exp XOR_ASSIGN exp .)
    MUL_ASSIGN      shift and go to state 74
    DIV_ASSIGN      shift and go to state 54
    MOD_ASSIGN      shift and go to state 70
    ADD_ASSIGN      shift and go to state 64
    SUB_ASSIGN      shift and go to state 69
    LEFT_ASSIGN     shift and go to state 75
    RIGHT_ASSIGN    shift and go to state 60
    AND_ASSIGN      shift and go to state 63
    XOR_ASSIGN      shift and go to state 71
    OR_ASSIGN       shift and go to state 72
    EQUALS          shift and go to state 65

  ! MUL_ASSIGN      [ reduce using rule 50 (exp -> exp XOR_ASSIGN exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 50 (exp -> exp XOR_ASSIGN exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 50 (exp -> exp XOR_ASSIGN exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 50 (exp -> exp XOR_ASSIGN exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 50 (exp -> exp XOR_ASSIGN exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 50 (exp -> exp XOR_ASSIGN exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 50 (exp -> exp XOR_ASSIGN exp .) ]
  ! AND_ASSIGN      [ reduce using rule 50 (exp -> exp XOR_ASSIGN exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 50 (exp -> exp XOR_ASSIGN exp .) ]
  ! OR_ASSIGN       [ reduce using rule 50 (exp -> exp XOR_ASSIGN exp .) ]
  ! EQUALS          [ reduce using rule 50 (exp -> exp XOR_ASSIGN exp .) ]
  ! ADD             [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 57 ]
  ! MULT            [ shift and go to state 58 ]
  ! DIV             [ shift and go to state 56 ]
  ! MOD             [ shift and go to state 76 ]
  ! L_OP            [ shift and go to state 73 ]
  ! G_OP            [ shift and go to state 61 ]
  ! LE_OP           [ shift and go to state 59 ]
  ! GE_OP           [ shift and go to state 68 ]
  ! NOTEQUALS       [ shift and go to state 52 ]
  ! EQUALS_OP       [ shift and go to state 53 ]
  ! OR_OP           [ shift and go to state 62 ]
  ! AND_OP          [ shift and go to state 66 ]


state 110

    (51) exp -> exp OR_ASSIGN exp .
    (29) exp -> exp . ADD exp
    (30) exp -> exp . MINUS exp
    (31) exp -> exp . MULT exp
    (32) exp -> exp . DIV exp
    (33) exp -> exp . MOD exp
    (34) exp -> exp . L_OP exp
    (35) exp -> exp . G_OP exp
    (36) exp -> exp . LE_OP exp
    (37) exp -> exp . GE_OP exp
    (38) exp -> exp . NOTEQUALS exp
    (39) exp -> exp . EQUALS_OP exp
    (40) exp -> exp . OR_OP exp
    (41) exp -> exp . AND_OP exp
    (42) exp -> exp . MUL_ASSIGN exp
    (43) exp -> exp . DIV_ASSIGN exp
    (44) exp -> exp . MOD_ASSIGN exp
    (45) exp -> exp . ADD_ASSIGN exp
    (46) exp -> exp . SUB_ASSIGN exp
    (47) exp -> exp . LEFT_ASSIGN exp
    (48) exp -> exp . RIGHT_ASSIGN exp
    (49) exp -> exp . AND_ASSIGN exp
    (50) exp -> exp . XOR_ASSIGN exp
    (51) exp -> exp . OR_ASSIGN exp
    (52) exp -> exp . EQUALS exp

    ADD             reduce using rule 51 (exp -> exp OR_ASSIGN exp .)
    MINUS           reduce using rule 51 (exp -> exp OR_ASSIGN exp .)
    MULT            reduce using rule 51 (exp -> exp OR_ASSIGN exp .)
    DIV             reduce using rule 51 (exp -> exp OR_ASSIGN exp .)
    MOD             reduce using rule 51 (exp -> exp OR_ASSIGN exp .)
    L_OP            reduce using rule 51 (exp -> exp OR_ASSIGN exp .)
    G_OP            reduce using rule 51 (exp -> exp OR_ASSIGN exp .)
    LE_OP           reduce using rule 51 (exp -> exp OR_ASSIGN exp .)
    GE_OP           reduce using rule 51 (exp -> exp OR_ASSIGN exp .)
    NOTEQUALS       reduce using rule 51 (exp -> exp OR_ASSIGN exp .)
    EQUALS_OP       reduce using rule 51 (exp -> exp OR_ASSIGN exp .)
    OR_OP           reduce using rule 51 (exp -> exp OR_ASSIGN exp .)
    AND_OP          reduce using rule 51 (exp -> exp OR_ASSIGN exp .)
    SEMI_COLON      reduce using rule 51 (exp -> exp OR_ASSIGN exp .)
    RPAREN          reduce using rule 51 (exp -> exp OR_ASSIGN exp .)
    COMMA           reduce using rule 51 (exp -> exp OR_ASSIGN exp .)
    MUL_ASSIGN      shift and go to state 74
    DIV_ASSIGN      shift and go to state 54
    MOD_ASSIGN      shift and go to state 70
    ADD_ASSIGN      shift and go to state 64
    SUB_ASSIGN      shift and go to state 69
    LEFT_ASSIGN     shift and go to state 75
    RIGHT_ASSIGN    shift and go to state 60
    AND_ASSIGN      shift and go to state 63
    XOR_ASSIGN      shift and go to state 71
    OR_ASSIGN       shift and go to state 72
    EQUALS          shift and go to state 65

  ! MUL_ASSIGN      [ reduce using rule 51 (exp -> exp OR_ASSIGN exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 51 (exp -> exp OR_ASSIGN exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 51 (exp -> exp OR_ASSIGN exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 51 (exp -> exp OR_ASSIGN exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 51 (exp -> exp OR_ASSIGN exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 51 (exp -> exp OR_ASSIGN exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 51 (exp -> exp OR_ASSIGN exp .) ]
  ! AND_ASSIGN      [ reduce using rule 51 (exp -> exp OR_ASSIGN exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 51 (exp -> exp OR_ASSIGN exp .) ]
  ! OR_ASSIGN       [ reduce using rule 51 (exp -> exp OR_ASSIGN exp .) ]
  ! EQUALS          [ reduce using rule 51 (exp -> exp OR_ASSIGN exp .) ]
  ! ADD             [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 57 ]
  ! MULT            [ shift and go to state 58 ]
  ! DIV             [ shift and go to state 56 ]
  ! MOD             [ shift and go to state 76 ]
  ! L_OP            [ shift and go to state 73 ]
  ! G_OP            [ shift and go to state 61 ]
  ! LE_OP           [ shift and go to state 59 ]
  ! GE_OP           [ shift and go to state 68 ]
  ! NOTEQUALS       [ shift and go to state 52 ]
  ! EQUALS_OP       [ shift and go to state 53 ]
  ! OR_OP           [ shift and go to state 62 ]
  ! AND_OP          [ shift and go to state 66 ]


state 111

    (34) exp -> exp L_OP exp .
    (29) exp -> exp . ADD exp
    (30) exp -> exp . MINUS exp
    (31) exp -> exp . MULT exp
    (32) exp -> exp . DIV exp
    (33) exp -> exp . MOD exp
    (34) exp -> exp . L_OP exp
    (35) exp -> exp . G_OP exp
    (36) exp -> exp . LE_OP exp
    (37) exp -> exp . GE_OP exp
    (38) exp -> exp . NOTEQUALS exp
    (39) exp -> exp . EQUALS_OP exp
    (40) exp -> exp . OR_OP exp
    (41) exp -> exp . AND_OP exp
    (42) exp -> exp . MUL_ASSIGN exp
    (43) exp -> exp . DIV_ASSIGN exp
    (44) exp -> exp . MOD_ASSIGN exp
    (45) exp -> exp . ADD_ASSIGN exp
    (46) exp -> exp . SUB_ASSIGN exp
    (47) exp -> exp . LEFT_ASSIGN exp
    (48) exp -> exp . RIGHT_ASSIGN exp
    (49) exp -> exp . AND_ASSIGN exp
    (50) exp -> exp . XOR_ASSIGN exp
    (51) exp -> exp . OR_ASSIGN exp
    (52) exp -> exp . EQUALS exp

    ADD             reduce using rule 34 (exp -> exp L_OP exp .)
    MINUS           reduce using rule 34 (exp -> exp L_OP exp .)
    MULT            reduce using rule 34 (exp -> exp L_OP exp .)
    DIV             reduce using rule 34 (exp -> exp L_OP exp .)
    MOD             reduce using rule 34 (exp -> exp L_OP exp .)
    L_OP            reduce using rule 34 (exp -> exp L_OP exp .)
    G_OP            reduce using rule 34 (exp -> exp L_OP exp .)
    LE_OP           reduce using rule 34 (exp -> exp L_OP exp .)
    GE_OP           reduce using rule 34 (exp -> exp L_OP exp .)
    SEMI_COLON      reduce using rule 34 (exp -> exp L_OP exp .)
    RPAREN          reduce using rule 34 (exp -> exp L_OP exp .)
    COMMA           reduce using rule 34 (exp -> exp L_OP exp .)
    NOTEQUALS       shift and go to state 52
    EQUALS_OP       shift and go to state 53
    OR_OP           shift and go to state 62
    AND_OP          shift and go to state 66
    MUL_ASSIGN      shift and go to state 74
    DIV_ASSIGN      shift and go to state 54
    MOD_ASSIGN      shift and go to state 70
    ADD_ASSIGN      shift and go to state 64
    SUB_ASSIGN      shift and go to state 69
    LEFT_ASSIGN     shift and go to state 75
    RIGHT_ASSIGN    shift and go to state 60
    AND_ASSIGN      shift and go to state 63
    XOR_ASSIGN      shift and go to state 71
    OR_ASSIGN       shift and go to state 72
    EQUALS          shift and go to state 65

  ! NOTEQUALS       [ reduce using rule 34 (exp -> exp L_OP exp .) ]
  ! EQUALS_OP       [ reduce using rule 34 (exp -> exp L_OP exp .) ]
  ! OR_OP           [ reduce using rule 34 (exp -> exp L_OP exp .) ]
  ! AND_OP          [ reduce using rule 34 (exp -> exp L_OP exp .) ]
  ! MUL_ASSIGN      [ reduce using rule 34 (exp -> exp L_OP exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 34 (exp -> exp L_OP exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 34 (exp -> exp L_OP exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 34 (exp -> exp L_OP exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 34 (exp -> exp L_OP exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 34 (exp -> exp L_OP exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 34 (exp -> exp L_OP exp .) ]
  ! AND_ASSIGN      [ reduce using rule 34 (exp -> exp L_OP exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 34 (exp -> exp L_OP exp .) ]
  ! OR_ASSIGN       [ reduce using rule 34 (exp -> exp L_OP exp .) ]
  ! EQUALS          [ reduce using rule 34 (exp -> exp L_OP exp .) ]
  ! ADD             [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 57 ]
  ! MULT            [ shift and go to state 58 ]
  ! DIV             [ shift and go to state 56 ]
  ! MOD             [ shift and go to state 76 ]
  ! L_OP            [ shift and go to state 73 ]
  ! G_OP            [ shift and go to state 61 ]
  ! LE_OP           [ shift and go to state 59 ]
  ! GE_OP           [ shift and go to state 68 ]


state 112

    (42) exp -> exp MUL_ASSIGN exp .
    (29) exp -> exp . ADD exp
    (30) exp -> exp . MINUS exp
    (31) exp -> exp . MULT exp
    (32) exp -> exp . DIV exp
    (33) exp -> exp . MOD exp
    (34) exp -> exp . L_OP exp
    (35) exp -> exp . G_OP exp
    (36) exp -> exp . LE_OP exp
    (37) exp -> exp . GE_OP exp
    (38) exp -> exp . NOTEQUALS exp
    (39) exp -> exp . EQUALS_OP exp
    (40) exp -> exp . OR_OP exp
    (41) exp -> exp . AND_OP exp
    (42) exp -> exp . MUL_ASSIGN exp
    (43) exp -> exp . DIV_ASSIGN exp
    (44) exp -> exp . MOD_ASSIGN exp
    (45) exp -> exp . ADD_ASSIGN exp
    (46) exp -> exp . SUB_ASSIGN exp
    (47) exp -> exp . LEFT_ASSIGN exp
    (48) exp -> exp . RIGHT_ASSIGN exp
    (49) exp -> exp . AND_ASSIGN exp
    (50) exp -> exp . XOR_ASSIGN exp
    (51) exp -> exp . OR_ASSIGN exp
    (52) exp -> exp . EQUALS exp

    ADD             reduce using rule 42 (exp -> exp MUL_ASSIGN exp .)
    MINUS           reduce using rule 42 (exp -> exp MUL_ASSIGN exp .)
    MULT            reduce using rule 42 (exp -> exp MUL_ASSIGN exp .)
    DIV             reduce using rule 42 (exp -> exp MUL_ASSIGN exp .)
    MOD             reduce using rule 42 (exp -> exp MUL_ASSIGN exp .)
    L_OP            reduce using rule 42 (exp -> exp MUL_ASSIGN exp .)
    G_OP            reduce using rule 42 (exp -> exp MUL_ASSIGN exp .)
    LE_OP           reduce using rule 42 (exp -> exp MUL_ASSIGN exp .)
    GE_OP           reduce using rule 42 (exp -> exp MUL_ASSIGN exp .)
    NOTEQUALS       reduce using rule 42 (exp -> exp MUL_ASSIGN exp .)
    EQUALS_OP       reduce using rule 42 (exp -> exp MUL_ASSIGN exp .)
    OR_OP           reduce using rule 42 (exp -> exp MUL_ASSIGN exp .)
    AND_OP          reduce using rule 42 (exp -> exp MUL_ASSIGN exp .)
    SEMI_COLON      reduce using rule 42 (exp -> exp MUL_ASSIGN exp .)
    RPAREN          reduce using rule 42 (exp -> exp MUL_ASSIGN exp .)
    COMMA           reduce using rule 42 (exp -> exp MUL_ASSIGN exp .)
    MUL_ASSIGN      shift and go to state 74
    DIV_ASSIGN      shift and go to state 54
    MOD_ASSIGN      shift and go to state 70
    ADD_ASSIGN      shift and go to state 64
    SUB_ASSIGN      shift and go to state 69
    LEFT_ASSIGN     shift and go to state 75
    RIGHT_ASSIGN    shift and go to state 60
    AND_ASSIGN      shift and go to state 63
    XOR_ASSIGN      shift and go to state 71
    OR_ASSIGN       shift and go to state 72
    EQUALS          shift and go to state 65

  ! MUL_ASSIGN      [ reduce using rule 42 (exp -> exp MUL_ASSIGN exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 42 (exp -> exp MUL_ASSIGN exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 42 (exp -> exp MUL_ASSIGN exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 42 (exp -> exp MUL_ASSIGN exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 42 (exp -> exp MUL_ASSIGN exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 42 (exp -> exp MUL_ASSIGN exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 42 (exp -> exp MUL_ASSIGN exp .) ]
  ! AND_ASSIGN      [ reduce using rule 42 (exp -> exp MUL_ASSIGN exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 42 (exp -> exp MUL_ASSIGN exp .) ]
  ! OR_ASSIGN       [ reduce using rule 42 (exp -> exp MUL_ASSIGN exp .) ]
  ! EQUALS          [ reduce using rule 42 (exp -> exp MUL_ASSIGN exp .) ]
  ! ADD             [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 57 ]
  ! MULT            [ shift and go to state 58 ]
  ! DIV             [ shift and go to state 56 ]
  ! MOD             [ shift and go to state 76 ]
  ! L_OP            [ shift and go to state 73 ]
  ! G_OP            [ shift and go to state 61 ]
  ! LE_OP           [ shift and go to state 59 ]
  ! GE_OP           [ shift and go to state 68 ]
  ! NOTEQUALS       [ shift and go to state 52 ]
  ! EQUALS_OP       [ shift and go to state 53 ]
  ! OR_OP           [ shift and go to state 62 ]
  ! AND_OP          [ shift and go to state 66 ]


state 113

    (47) exp -> exp LEFT_ASSIGN exp .
    (29) exp -> exp . ADD exp
    (30) exp -> exp . MINUS exp
    (31) exp -> exp . MULT exp
    (32) exp -> exp . DIV exp
    (33) exp -> exp . MOD exp
    (34) exp -> exp . L_OP exp
    (35) exp -> exp . G_OP exp
    (36) exp -> exp . LE_OP exp
    (37) exp -> exp . GE_OP exp
    (38) exp -> exp . NOTEQUALS exp
    (39) exp -> exp . EQUALS_OP exp
    (40) exp -> exp . OR_OP exp
    (41) exp -> exp . AND_OP exp
    (42) exp -> exp . MUL_ASSIGN exp
    (43) exp -> exp . DIV_ASSIGN exp
    (44) exp -> exp . MOD_ASSIGN exp
    (45) exp -> exp . ADD_ASSIGN exp
    (46) exp -> exp . SUB_ASSIGN exp
    (47) exp -> exp . LEFT_ASSIGN exp
    (48) exp -> exp . RIGHT_ASSIGN exp
    (49) exp -> exp . AND_ASSIGN exp
    (50) exp -> exp . XOR_ASSIGN exp
    (51) exp -> exp . OR_ASSIGN exp
    (52) exp -> exp . EQUALS exp

    ADD             reduce using rule 47 (exp -> exp LEFT_ASSIGN exp .)
    MINUS           reduce using rule 47 (exp -> exp LEFT_ASSIGN exp .)
    MULT            reduce using rule 47 (exp -> exp LEFT_ASSIGN exp .)
    DIV             reduce using rule 47 (exp -> exp LEFT_ASSIGN exp .)
    MOD             reduce using rule 47 (exp -> exp LEFT_ASSIGN exp .)
    L_OP            reduce using rule 47 (exp -> exp LEFT_ASSIGN exp .)
    G_OP            reduce using rule 47 (exp -> exp LEFT_ASSIGN exp .)
    LE_OP           reduce using rule 47 (exp -> exp LEFT_ASSIGN exp .)
    GE_OP           reduce using rule 47 (exp -> exp LEFT_ASSIGN exp .)
    NOTEQUALS       reduce using rule 47 (exp -> exp LEFT_ASSIGN exp .)
    EQUALS_OP       reduce using rule 47 (exp -> exp LEFT_ASSIGN exp .)
    OR_OP           reduce using rule 47 (exp -> exp LEFT_ASSIGN exp .)
    AND_OP          reduce using rule 47 (exp -> exp LEFT_ASSIGN exp .)
    SEMI_COLON      reduce using rule 47 (exp -> exp LEFT_ASSIGN exp .)
    RPAREN          reduce using rule 47 (exp -> exp LEFT_ASSIGN exp .)
    COMMA           reduce using rule 47 (exp -> exp LEFT_ASSIGN exp .)
    MUL_ASSIGN      shift and go to state 74
    DIV_ASSIGN      shift and go to state 54
    MOD_ASSIGN      shift and go to state 70
    ADD_ASSIGN      shift and go to state 64
    SUB_ASSIGN      shift and go to state 69
    LEFT_ASSIGN     shift and go to state 75
    RIGHT_ASSIGN    shift and go to state 60
    AND_ASSIGN      shift and go to state 63
    XOR_ASSIGN      shift and go to state 71
    OR_ASSIGN       shift and go to state 72
    EQUALS          shift and go to state 65

  ! MUL_ASSIGN      [ reduce using rule 47 (exp -> exp LEFT_ASSIGN exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 47 (exp -> exp LEFT_ASSIGN exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 47 (exp -> exp LEFT_ASSIGN exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 47 (exp -> exp LEFT_ASSIGN exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 47 (exp -> exp LEFT_ASSIGN exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 47 (exp -> exp LEFT_ASSIGN exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 47 (exp -> exp LEFT_ASSIGN exp .) ]
  ! AND_ASSIGN      [ reduce using rule 47 (exp -> exp LEFT_ASSIGN exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 47 (exp -> exp LEFT_ASSIGN exp .) ]
  ! OR_ASSIGN       [ reduce using rule 47 (exp -> exp LEFT_ASSIGN exp .) ]
  ! EQUALS          [ reduce using rule 47 (exp -> exp LEFT_ASSIGN exp .) ]
  ! ADD             [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 57 ]
  ! MULT            [ shift and go to state 58 ]
  ! DIV             [ shift and go to state 56 ]
  ! MOD             [ shift and go to state 76 ]
  ! L_OP            [ shift and go to state 73 ]
  ! G_OP            [ shift and go to state 61 ]
  ! LE_OP           [ shift and go to state 59 ]
  ! GE_OP           [ shift and go to state 68 ]
  ! NOTEQUALS       [ shift and go to state 52 ]
  ! EQUALS_OP       [ shift and go to state 53 ]
  ! OR_OP           [ shift and go to state 62 ]
  ! AND_OP          [ shift and go to state 66 ]


state 114

    (33) exp -> exp MOD exp .
    (29) exp -> exp . ADD exp
    (30) exp -> exp . MINUS exp
    (31) exp -> exp . MULT exp
    (32) exp -> exp . DIV exp
    (33) exp -> exp . MOD exp
    (34) exp -> exp . L_OP exp
    (35) exp -> exp . G_OP exp
    (36) exp -> exp . LE_OP exp
    (37) exp -> exp . GE_OP exp
    (38) exp -> exp . NOTEQUALS exp
    (39) exp -> exp . EQUALS_OP exp
    (40) exp -> exp . OR_OP exp
    (41) exp -> exp . AND_OP exp
    (42) exp -> exp . MUL_ASSIGN exp
    (43) exp -> exp . DIV_ASSIGN exp
    (44) exp -> exp . MOD_ASSIGN exp
    (45) exp -> exp . ADD_ASSIGN exp
    (46) exp -> exp . SUB_ASSIGN exp
    (47) exp -> exp . LEFT_ASSIGN exp
    (48) exp -> exp . RIGHT_ASSIGN exp
    (49) exp -> exp . AND_ASSIGN exp
    (50) exp -> exp . XOR_ASSIGN exp
    (51) exp -> exp . OR_ASSIGN exp
    (52) exp -> exp . EQUALS exp

    ADD             reduce using rule 33 (exp -> exp MOD exp .)
    MINUS           reduce using rule 33 (exp -> exp MOD exp .)
    MULT            reduce using rule 33 (exp -> exp MOD exp .)
    DIV             reduce using rule 33 (exp -> exp MOD exp .)
    MOD             reduce using rule 33 (exp -> exp MOD exp .)
    SEMI_COLON      reduce using rule 33 (exp -> exp MOD exp .)
    RPAREN          reduce using rule 33 (exp -> exp MOD exp .)
    COMMA           reduce using rule 33 (exp -> exp MOD exp .)
    L_OP            shift and go to state 73
    G_OP            shift and go to state 61
    LE_OP           shift and go to state 59
    GE_OP           shift and go to state 68
    NOTEQUALS       shift and go to state 52
    EQUALS_OP       shift and go to state 53
    OR_OP           shift and go to state 62
    AND_OP          shift and go to state 66
    MUL_ASSIGN      shift and go to state 74
    DIV_ASSIGN      shift and go to state 54
    MOD_ASSIGN      shift and go to state 70
    ADD_ASSIGN      shift and go to state 64
    SUB_ASSIGN      shift and go to state 69
    LEFT_ASSIGN     shift and go to state 75
    RIGHT_ASSIGN    shift and go to state 60
    AND_ASSIGN      shift and go to state 63
    XOR_ASSIGN      shift and go to state 71
    OR_ASSIGN       shift and go to state 72
    EQUALS          shift and go to state 65

  ! L_OP            [ reduce using rule 33 (exp -> exp MOD exp .) ]
  ! G_OP            [ reduce using rule 33 (exp -> exp MOD exp .) ]
  ! LE_OP           [ reduce using rule 33 (exp -> exp MOD exp .) ]
  ! GE_OP           [ reduce using rule 33 (exp -> exp MOD exp .) ]
  ! NOTEQUALS       [ reduce using rule 33 (exp -> exp MOD exp .) ]
  ! EQUALS_OP       [ reduce using rule 33 (exp -> exp MOD exp .) ]
  ! OR_OP           [ reduce using rule 33 (exp -> exp MOD exp .) ]
  ! AND_OP          [ reduce using rule 33 (exp -> exp MOD exp .) ]
  ! MUL_ASSIGN      [ reduce using rule 33 (exp -> exp MOD exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 33 (exp -> exp MOD exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 33 (exp -> exp MOD exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 33 (exp -> exp MOD exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 33 (exp -> exp MOD exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 33 (exp -> exp MOD exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 33 (exp -> exp MOD exp .) ]
  ! AND_ASSIGN      [ reduce using rule 33 (exp -> exp MOD exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 33 (exp -> exp MOD exp .) ]
  ! OR_ASSIGN       [ reduce using rule 33 (exp -> exp MOD exp .) ]
  ! EQUALS          [ reduce using rule 33 (exp -> exp MOD exp .) ]
  ! ADD             [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 57 ]
  ! MULT            [ shift and go to state 58 ]
  ! DIV             [ shift and go to state 56 ]
  ! MOD             [ shift and go to state 76 ]


state 115

    (71) iterative_statement -> DO SEMI_COLON WHILE LPAREN . exp RPAREN SEMI_COLON
    (29) exp -> . exp ADD exp
    (30) exp -> . exp MINUS exp
    (31) exp -> . exp MULT exp
    (32) exp -> . exp DIV exp
    (33) exp -> . exp MOD exp
    (34) exp -> . exp L_OP exp
    (35) exp -> . exp G_OP exp
    (36) exp -> . exp LE_OP exp
    (37) exp -> . exp GE_OP exp
    (38) exp -> . exp NOTEQUALS exp
    (39) exp -> . exp EQUALS_OP exp
    (40) exp -> . exp OR_OP exp
    (41) exp -> . exp AND_OP exp
    (42) exp -> . exp MUL_ASSIGN exp
    (43) exp -> . exp DIV_ASSIGN exp
    (44) exp -> . exp MOD_ASSIGN exp
    (45) exp -> . exp ADD_ASSIGN exp
    (46) exp -> . exp SUB_ASSIGN exp
    (47) exp -> . exp LEFT_ASSIGN exp
    (48) exp -> . exp RIGHT_ASSIGN exp
    (49) exp -> . exp AND_ASSIGN exp
    (50) exp -> . exp XOR_ASSIGN exp
    (51) exp -> . exp OR_ASSIGN exp
    (52) exp -> . exp EQUALS exp
    (53) exp -> . unary_expression
    (54) exp -> . LPAREN exp RPAREN
    (55) exp -> . constant
    (56) exp -> . VARIABLE
    (57) unary_expression -> . VARIABLE unary_operator
    (58) unary_expression -> . unary_operator VARIABLE
    (24) constant -> . HEX_INT
    (25) constant -> . DOT_REAL
    (26) constant -> . EXP_REAL
    (27) constant -> . DEC_INT
    (28) constant -> . CHARACTER
    (59) unary_operator -> . INCREMENT
    (60) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 21
    VARIABLE        shift and go to state 23
    HEX_INT         shift and go to state 29
    DOT_REAL        shift and go to state 16
    EXP_REAL        shift and go to state 13
    DEC_INT         shift and go to state 14
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 12
    DECREMENT       shift and go to state 25

    constant                       shift and go to state 10
    unary_expression               shift and go to state 24
    exp                            shift and go to state 128
    unary_operator                 shift and go to state 18

state 116

    (69) iterative_statement -> DO statement WHILE LPAREN . exp RPAREN SEMI_COLON
    (29) exp -> . exp ADD exp
    (30) exp -> . exp MINUS exp
    (31) exp -> . exp MULT exp
    (32) exp -> . exp DIV exp
    (33) exp -> . exp MOD exp
    (34) exp -> . exp L_OP exp
    (35) exp -> . exp G_OP exp
    (36) exp -> . exp LE_OP exp
    (37) exp -> . exp GE_OP exp
    (38) exp -> . exp NOTEQUALS exp
    (39) exp -> . exp EQUALS_OP exp
    (40) exp -> . exp OR_OP exp
    (41) exp -> . exp AND_OP exp
    (42) exp -> . exp MUL_ASSIGN exp
    (43) exp -> . exp DIV_ASSIGN exp
    (44) exp -> . exp MOD_ASSIGN exp
    (45) exp -> . exp ADD_ASSIGN exp
    (46) exp -> . exp SUB_ASSIGN exp
    (47) exp -> . exp LEFT_ASSIGN exp
    (48) exp -> . exp RIGHT_ASSIGN exp
    (49) exp -> . exp AND_ASSIGN exp
    (50) exp -> . exp XOR_ASSIGN exp
    (51) exp -> . exp OR_ASSIGN exp
    (52) exp -> . exp EQUALS exp
    (53) exp -> . unary_expression
    (54) exp -> . LPAREN exp RPAREN
    (55) exp -> . constant
    (56) exp -> . VARIABLE
    (57) unary_expression -> . VARIABLE unary_operator
    (58) unary_expression -> . unary_operator VARIABLE
    (24) constant -> . HEX_INT
    (25) constant -> . DOT_REAL
    (26) constant -> . EXP_REAL
    (27) constant -> . DEC_INT
    (28) constant -> . CHARACTER
    (59) unary_operator -> . INCREMENT
    (60) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 21
    VARIABLE        shift and go to state 23
    HEX_INT         shift and go to state 29
    DOT_REAL        shift and go to state 16
    EXP_REAL        shift and go to state 13
    DEC_INT         shift and go to state 14
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 12
    DECREMENT       shift and go to state 25

    constant                       shift and go to state 10
    unary_expression               shift and go to state 24
    exp                            shift and go to state 129
    unary_operator                 shift and go to state 18

state 117

    (70) iterative_statement -> DO LBRACE statements RBRACE . WHILE LPAREN exp RPAREN SEMI_COLON

    WHILE           shift and go to state 130


state 118

    (72) iterative_statement -> DO LBRACE RBRACE WHILE . LPAREN exp RPAREN SEMI_COLON

    LPAREN          shift and go to state 131


state 119

    (65) iterative_statement -> WHILE LPAREN exp RPAREN . statement
    (66) iterative_statement -> WHILE LPAREN exp RPAREN . SEMI_COLON
    (67) iterative_statement -> WHILE LPAREN exp RPAREN . LBRACE statements RBRACE
    (68) iterative_statement -> WHILE LPAREN exp RPAREN . LBRACE RBRACE
    (3) statement -> . declaration
    (4) statement -> . exp SEMI_COLON
    (5) statement -> . iterative_statement
    (6) statement -> . function
    (7) statement -> . constant_statement
    (12) declaration -> . type enum_list SEMI_COLON
    (29) exp -> . exp ADD exp
    (30) exp -> . exp MINUS exp
    (31) exp -> . exp MULT exp
    (32) exp -> . exp DIV exp
    (33) exp -> . exp MOD exp
    (34) exp -> . exp L_OP exp
    (35) exp -> . exp G_OP exp
    (36) exp -> . exp LE_OP exp
    (37) exp -> . exp GE_OP exp
    (38) exp -> . exp NOTEQUALS exp
    (39) exp -> . exp EQUALS_OP exp
    (40) exp -> . exp OR_OP exp
    (41) exp -> . exp AND_OP exp
    (42) exp -> . exp MUL_ASSIGN exp
    (43) exp -> . exp DIV_ASSIGN exp
    (44) exp -> . exp MOD_ASSIGN exp
    (45) exp -> . exp ADD_ASSIGN exp
    (46) exp -> . exp SUB_ASSIGN exp
    (47) exp -> . exp LEFT_ASSIGN exp
    (48) exp -> . exp RIGHT_ASSIGN exp
    (49) exp -> . exp AND_ASSIGN exp
    (50) exp -> . exp XOR_ASSIGN exp
    (51) exp -> . exp OR_ASSIGN exp
    (52) exp -> . exp EQUALS exp
    (53) exp -> . unary_expression
    (54) exp -> . LPAREN exp RPAREN
    (55) exp -> . constant
    (56) exp -> . VARIABLE
    (61) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (62) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE
    (63) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (64) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE
    (65) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (66) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (67) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE statements RBRACE
    (68) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (69) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (70) iterative_statement -> . DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (71) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (72) iterative_statement -> . DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (75) function -> . normal_function
    (76) function -> . main_function
    (8) constant_statement -> . BREAK SEMI_COLON
    (9) constant_statement -> . CONTINUE SEMI_COLON
    (10) constant_statement -> . RETURN SEMI_COLON
    (11) constant_statement -> . RETURN exp SEMI_COLON
    (17) type -> . INT
    (18) type -> . FLOAT
    (19) type -> . CHAR
    (20) type -> . DOUBLE
    (21) type -> . VOID
    (22) type -> . SHORT
    (23) type -> . LONG
    (57) unary_expression -> . VARIABLE unary_operator
    (58) unary_expression -> . unary_operator VARIABLE
    (24) constant -> . HEX_INT
    (25) constant -> . DOT_REAL
    (26) constant -> . EXP_REAL
    (27) constant -> . DEC_INT
    (28) constant -> . CHARACTER
    (79) normal_function -> . type VARIABLE LPAREN arguments RPAREN LBRACE statements RBRACE
    (80) normal_function -> . type VARIABLE LPAREN arguments RPAREN LBRACE RBRACE
    (77) main_function -> . type MAIN LPAREN arguments RPAREN LBRACE statements RBRACE
    (78) main_function -> . type MAIN LPAREN arguments RPAREN LBRACE RBRACE
    (59) unary_operator -> . INCREMENT
    (60) unary_operator -> . DECREMENT

    SEMI_COLON      shift and go to state 132
    LBRACE          shift and go to state 134
    LPAREN          shift and go to state 21
    VARIABLE        shift and go to state 23
    FOR             shift and go to state 20
    WHILE           shift and go to state 8
    DO              shift and go to state 4
    BREAK           shift and go to state 32
    CONTINUE        shift and go to state 33
    RETURN          shift and go to state 1
    INT             shift and go to state 27
    FLOAT           shift and go to state 31
    CHAR            shift and go to state 7
    DOUBLE          shift and go to state 28
    VOID            shift and go to state 5
    SHORT           shift and go to state 9
    LONG            shift and go to state 35
    HEX_INT         shift and go to state 29
    DOT_REAL        shift and go to state 16
    EXP_REAL        shift and go to state 13
    DEC_INT         shift and go to state 14
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 12
    DECREMENT       shift and go to state 25

    function                       shift and go to state 19
    main_function                  shift and go to state 2
    exp                            shift and go to state 34
    unary_expression               shift and go to state 24
    type                           shift and go to state 17
    normal_function                shift and go to state 30
    statement                      shift and go to state 133
    declaration                    shift and go to state 22
    constant_statement             shift and go to state 26
    constant                       shift and go to state 10
    iterative_statement            shift and go to state 11
    unary_operator                 shift and go to state 18

state 120

    (14) enum_list -> VARIABLE EQUALS exp . COMMA enum_list
    (16) enum_list -> VARIABLE EQUALS exp .
    (29) exp -> exp . ADD exp
    (30) exp -> exp . MINUS exp
    (31) exp -> exp . MULT exp
    (32) exp -> exp . DIV exp
    (33) exp -> exp . MOD exp
    (34) exp -> exp . L_OP exp
    (35) exp -> exp . G_OP exp
    (36) exp -> exp . LE_OP exp
    (37) exp -> exp . GE_OP exp
    (38) exp -> exp . NOTEQUALS exp
    (39) exp -> exp . EQUALS_OP exp
    (40) exp -> exp . OR_OP exp
    (41) exp -> exp . AND_OP exp
    (42) exp -> exp . MUL_ASSIGN exp
    (43) exp -> exp . DIV_ASSIGN exp
    (44) exp -> exp . MOD_ASSIGN exp
    (45) exp -> exp . ADD_ASSIGN exp
    (46) exp -> exp . SUB_ASSIGN exp
    (47) exp -> exp . LEFT_ASSIGN exp
    (48) exp -> exp . RIGHT_ASSIGN exp
    (49) exp -> exp . AND_ASSIGN exp
    (50) exp -> exp . XOR_ASSIGN exp
    (51) exp -> exp . OR_ASSIGN exp
    (52) exp -> exp . EQUALS exp

    COMMA           shift and go to state 135
    SEMI_COLON      reduce using rule 16 (enum_list -> VARIABLE EQUALS exp .)
    ADD             shift and go to state 67
    MINUS           shift and go to state 57
    MULT            shift and go to state 58
    DIV             shift and go to state 56
    MOD             shift and go to state 76
    L_OP            shift and go to state 73
    G_OP            shift and go to state 61
    LE_OP           shift and go to state 59
    GE_OP           shift and go to state 68
    NOTEQUALS       shift and go to state 52
    EQUALS_OP       shift and go to state 53
    OR_OP           shift and go to state 62
    AND_OP          shift and go to state 66
    MUL_ASSIGN      shift and go to state 74
    DIV_ASSIGN      shift and go to state 54
    MOD_ASSIGN      shift and go to state 70
    ADD_ASSIGN      shift and go to state 64
    SUB_ASSIGN      shift and go to state 69
    LEFT_ASSIGN     shift and go to state 75
    RIGHT_ASSIGN    shift and go to state 60
    AND_ASSIGN      shift and go to state 63
    XOR_ASSIGN      shift and go to state 71
    OR_ASSIGN       shift and go to state 72
    EQUALS          shift and go to state 65


state 121

    (13) enum_list -> VARIABLE . COMMA enum_list
    (14) enum_list -> VARIABLE . EQUALS exp COMMA enum_list
    (15) enum_list -> VARIABLE .
    (16) enum_list -> VARIABLE . EQUALS exp

    COMMA           shift and go to state 85
    EQUALS          shift and go to state 84
    SEMI_COLON      reduce using rule 15 (enum_list -> VARIABLE .)


state 122

    (13) enum_list -> VARIABLE COMMA enum_list .

    SEMI_COLON      reduce using rule 13 (enum_list -> VARIABLE COMMA enum_list .)


state 123

    (79) normal_function -> type VARIABLE LPAREN arguments . RPAREN LBRACE statements RBRACE
    (80) normal_function -> type VARIABLE LPAREN arguments . RPAREN LBRACE RBRACE

    RPAREN          shift and go to state 136


state 124

    (81) arguments -> empty .

    RPAREN          reduce using rule 81 (arguments -> empty .)


state 125

    (77) main_function -> type MAIN LPAREN arguments . RPAREN LBRACE statements RBRACE
    (78) main_function -> type MAIN LPAREN arguments . RPAREN LBRACE RBRACE

    RPAREN          shift and go to state 137


state 126

    (61) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON . iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (62) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON . iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE
    (63) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON . iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (64) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON . iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE
    (73) iterative_exp -> . exp COMMA iterative_exp
    (74) iterative_exp -> . exp
    (29) exp -> . exp ADD exp
    (30) exp -> . exp MINUS exp
    (31) exp -> . exp MULT exp
    (32) exp -> . exp DIV exp
    (33) exp -> . exp MOD exp
    (34) exp -> . exp L_OP exp
    (35) exp -> . exp G_OP exp
    (36) exp -> . exp LE_OP exp
    (37) exp -> . exp GE_OP exp
    (38) exp -> . exp NOTEQUALS exp
    (39) exp -> . exp EQUALS_OP exp
    (40) exp -> . exp OR_OP exp
    (41) exp -> . exp AND_OP exp
    (42) exp -> . exp MUL_ASSIGN exp
    (43) exp -> . exp DIV_ASSIGN exp
    (44) exp -> . exp MOD_ASSIGN exp
    (45) exp -> . exp ADD_ASSIGN exp
    (46) exp -> . exp SUB_ASSIGN exp
    (47) exp -> . exp LEFT_ASSIGN exp
    (48) exp -> . exp RIGHT_ASSIGN exp
    (49) exp -> . exp AND_ASSIGN exp
    (50) exp -> . exp XOR_ASSIGN exp
    (51) exp -> . exp OR_ASSIGN exp
    (52) exp -> . exp EQUALS exp
    (53) exp -> . unary_expression
    (54) exp -> . LPAREN exp RPAREN
    (55) exp -> . constant
    (56) exp -> . VARIABLE
    (57) unary_expression -> . VARIABLE unary_operator
    (58) unary_expression -> . unary_operator VARIABLE
    (24) constant -> . HEX_INT
    (25) constant -> . DOT_REAL
    (26) constant -> . EXP_REAL
    (27) constant -> . DEC_INT
    (28) constant -> . CHARACTER
    (59) unary_operator -> . INCREMENT
    (60) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 21
    VARIABLE        shift and go to state 23
    HEX_INT         shift and go to state 29
    DOT_REAL        shift and go to state 16
    EXP_REAL        shift and go to state 13
    DEC_INT         shift and go to state 14
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 12
    DECREMENT       shift and go to state 25

    constant                       shift and go to state 10
    unary_expression               shift and go to state 24
    iterative_exp                  shift and go to state 138
    exp                            shift and go to state 89
    unary_operator                 shift and go to state 18

state 127

    (73) iterative_exp -> exp COMMA . iterative_exp
    (73) iterative_exp -> . exp COMMA iterative_exp
    (74) iterative_exp -> . exp
    (29) exp -> . exp ADD exp
    (30) exp -> . exp MINUS exp
    (31) exp -> . exp MULT exp
    (32) exp -> . exp DIV exp
    (33) exp -> . exp MOD exp
    (34) exp -> . exp L_OP exp
    (35) exp -> . exp G_OP exp
    (36) exp -> . exp LE_OP exp
    (37) exp -> . exp GE_OP exp
    (38) exp -> . exp NOTEQUALS exp
    (39) exp -> . exp EQUALS_OP exp
    (40) exp -> . exp OR_OP exp
    (41) exp -> . exp AND_OP exp
    (42) exp -> . exp MUL_ASSIGN exp
    (43) exp -> . exp DIV_ASSIGN exp
    (44) exp -> . exp MOD_ASSIGN exp
    (45) exp -> . exp ADD_ASSIGN exp
    (46) exp -> . exp SUB_ASSIGN exp
    (47) exp -> . exp LEFT_ASSIGN exp
    (48) exp -> . exp RIGHT_ASSIGN exp
    (49) exp -> . exp AND_ASSIGN exp
    (50) exp -> . exp XOR_ASSIGN exp
    (51) exp -> . exp OR_ASSIGN exp
    (52) exp -> . exp EQUALS exp
    (53) exp -> . unary_expression
    (54) exp -> . LPAREN exp RPAREN
    (55) exp -> . constant
    (56) exp -> . VARIABLE
    (57) unary_expression -> . VARIABLE unary_operator
    (58) unary_expression -> . unary_operator VARIABLE
    (24) constant -> . HEX_INT
    (25) constant -> . DOT_REAL
    (26) constant -> . EXP_REAL
    (27) constant -> . DEC_INT
    (28) constant -> . CHARACTER
    (59) unary_operator -> . INCREMENT
    (60) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 21
    VARIABLE        shift and go to state 23
    HEX_INT         shift and go to state 29
    DOT_REAL        shift and go to state 16
    EXP_REAL        shift and go to state 13
    DEC_INT         shift and go to state 14
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 12
    DECREMENT       shift and go to state 25

    iterative_exp                  shift and go to state 139
    constant                       shift and go to state 10
    unary_expression               shift and go to state 24
    exp                            shift and go to state 89
    unary_operator                 shift and go to state 18

state 128

    (71) iterative_statement -> DO SEMI_COLON WHILE LPAREN exp . RPAREN SEMI_COLON
    (29) exp -> exp . ADD exp
    (30) exp -> exp . MINUS exp
    (31) exp -> exp . MULT exp
    (32) exp -> exp . DIV exp
    (33) exp -> exp . MOD exp
    (34) exp -> exp . L_OP exp
    (35) exp -> exp . G_OP exp
    (36) exp -> exp . LE_OP exp
    (37) exp -> exp . GE_OP exp
    (38) exp -> exp . NOTEQUALS exp
    (39) exp -> exp . EQUALS_OP exp
    (40) exp -> exp . OR_OP exp
    (41) exp -> exp . AND_OP exp
    (42) exp -> exp . MUL_ASSIGN exp
    (43) exp -> exp . DIV_ASSIGN exp
    (44) exp -> exp . MOD_ASSIGN exp
    (45) exp -> exp . ADD_ASSIGN exp
    (46) exp -> exp . SUB_ASSIGN exp
    (47) exp -> exp . LEFT_ASSIGN exp
    (48) exp -> exp . RIGHT_ASSIGN exp
    (49) exp -> exp . AND_ASSIGN exp
    (50) exp -> exp . XOR_ASSIGN exp
    (51) exp -> exp . OR_ASSIGN exp
    (52) exp -> exp . EQUALS exp

    RPAREN          shift and go to state 140
    ADD             shift and go to state 67
    MINUS           shift and go to state 57
    MULT            shift and go to state 58
    DIV             shift and go to state 56
    MOD             shift and go to state 76
    L_OP            shift and go to state 73
    G_OP            shift and go to state 61
    LE_OP           shift and go to state 59
    GE_OP           shift and go to state 68
    NOTEQUALS       shift and go to state 52
    EQUALS_OP       shift and go to state 53
    OR_OP           shift and go to state 62
    AND_OP          shift and go to state 66
    MUL_ASSIGN      shift and go to state 74
    DIV_ASSIGN      shift and go to state 54
    MOD_ASSIGN      shift and go to state 70
    ADD_ASSIGN      shift and go to state 64
    SUB_ASSIGN      shift and go to state 69
    LEFT_ASSIGN     shift and go to state 75
    RIGHT_ASSIGN    shift and go to state 60
    AND_ASSIGN      shift and go to state 63
    XOR_ASSIGN      shift and go to state 71
    OR_ASSIGN       shift and go to state 72
    EQUALS          shift and go to state 65


state 129

    (69) iterative_statement -> DO statement WHILE LPAREN exp . RPAREN SEMI_COLON
    (29) exp -> exp . ADD exp
    (30) exp -> exp . MINUS exp
    (31) exp -> exp . MULT exp
    (32) exp -> exp . DIV exp
    (33) exp -> exp . MOD exp
    (34) exp -> exp . L_OP exp
    (35) exp -> exp . G_OP exp
    (36) exp -> exp . LE_OP exp
    (37) exp -> exp . GE_OP exp
    (38) exp -> exp . NOTEQUALS exp
    (39) exp -> exp . EQUALS_OP exp
    (40) exp -> exp . OR_OP exp
    (41) exp -> exp . AND_OP exp
    (42) exp -> exp . MUL_ASSIGN exp
    (43) exp -> exp . DIV_ASSIGN exp
    (44) exp -> exp . MOD_ASSIGN exp
    (45) exp -> exp . ADD_ASSIGN exp
    (46) exp -> exp . SUB_ASSIGN exp
    (47) exp -> exp . LEFT_ASSIGN exp
    (48) exp -> exp . RIGHT_ASSIGN exp
    (49) exp -> exp . AND_ASSIGN exp
    (50) exp -> exp . XOR_ASSIGN exp
    (51) exp -> exp . OR_ASSIGN exp
    (52) exp -> exp . EQUALS exp

    RPAREN          shift and go to state 141
    ADD             shift and go to state 67
    MINUS           shift and go to state 57
    MULT            shift and go to state 58
    DIV             shift and go to state 56
    MOD             shift and go to state 76
    L_OP            shift and go to state 73
    G_OP            shift and go to state 61
    LE_OP           shift and go to state 59
    GE_OP           shift and go to state 68
    NOTEQUALS       shift and go to state 52
    EQUALS_OP       shift and go to state 53
    OR_OP           shift and go to state 62
    AND_OP          shift and go to state 66
    MUL_ASSIGN      shift and go to state 74
    DIV_ASSIGN      shift and go to state 54
    MOD_ASSIGN      shift and go to state 70
    ADD_ASSIGN      shift and go to state 64
    SUB_ASSIGN      shift and go to state 69
    LEFT_ASSIGN     shift and go to state 75
    RIGHT_ASSIGN    shift and go to state 60
    AND_ASSIGN      shift and go to state 63
    XOR_ASSIGN      shift and go to state 71
    OR_ASSIGN       shift and go to state 72
    EQUALS          shift and go to state 65


state 130

    (70) iterative_statement -> DO LBRACE statements RBRACE WHILE . LPAREN exp RPAREN SEMI_COLON

    LPAREN          shift and go to state 142


state 131

    (72) iterative_statement -> DO LBRACE RBRACE WHILE LPAREN . exp RPAREN SEMI_COLON
    (29) exp -> . exp ADD exp
    (30) exp -> . exp MINUS exp
    (31) exp -> . exp MULT exp
    (32) exp -> . exp DIV exp
    (33) exp -> . exp MOD exp
    (34) exp -> . exp L_OP exp
    (35) exp -> . exp G_OP exp
    (36) exp -> . exp LE_OP exp
    (37) exp -> . exp GE_OP exp
    (38) exp -> . exp NOTEQUALS exp
    (39) exp -> . exp EQUALS_OP exp
    (40) exp -> . exp OR_OP exp
    (41) exp -> . exp AND_OP exp
    (42) exp -> . exp MUL_ASSIGN exp
    (43) exp -> . exp DIV_ASSIGN exp
    (44) exp -> . exp MOD_ASSIGN exp
    (45) exp -> . exp ADD_ASSIGN exp
    (46) exp -> . exp SUB_ASSIGN exp
    (47) exp -> . exp LEFT_ASSIGN exp
    (48) exp -> . exp RIGHT_ASSIGN exp
    (49) exp -> . exp AND_ASSIGN exp
    (50) exp -> . exp XOR_ASSIGN exp
    (51) exp -> . exp OR_ASSIGN exp
    (52) exp -> . exp EQUALS exp
    (53) exp -> . unary_expression
    (54) exp -> . LPAREN exp RPAREN
    (55) exp -> . constant
    (56) exp -> . VARIABLE
    (57) unary_expression -> . VARIABLE unary_operator
    (58) unary_expression -> . unary_operator VARIABLE
    (24) constant -> . HEX_INT
    (25) constant -> . DOT_REAL
    (26) constant -> . EXP_REAL
    (27) constant -> . DEC_INT
    (28) constant -> . CHARACTER
    (59) unary_operator -> . INCREMENT
    (60) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 21
    VARIABLE        shift and go to state 23
    HEX_INT         shift and go to state 29
    DOT_REAL        shift and go to state 16
    EXP_REAL        shift and go to state 13
    DEC_INT         shift and go to state 14
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 12
    DECREMENT       shift and go to state 25

    constant                       shift and go to state 10
    unary_expression               shift and go to state 24
    exp                            shift and go to state 143
    unary_operator                 shift and go to state 18

state 132

    (66) iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .

    RBRACE          reduce using rule 66 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    LPAREN          reduce using rule 66 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    VARIABLE        reduce using rule 66 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    FOR             reduce using rule 66 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    WHILE           reduce using rule 66 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    DO              reduce using rule 66 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    BREAK           reduce using rule 66 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    CONTINUE        reduce using rule 66 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    RETURN          reduce using rule 66 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    INT             reduce using rule 66 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    FLOAT           reduce using rule 66 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    CHAR            reduce using rule 66 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    DOUBLE          reduce using rule 66 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    VOID            reduce using rule 66 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    SHORT           reduce using rule 66 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    LONG            reduce using rule 66 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    HEX_INT         reduce using rule 66 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    DOT_REAL        reduce using rule 66 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    EXP_REAL        reduce using rule 66 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    DEC_INT         reduce using rule 66 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    CHARACTER       reduce using rule 66 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    INCREMENT       reduce using rule 66 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    DECREMENT       reduce using rule 66 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)
    $end            reduce using rule 66 (iterative_statement -> WHILE LPAREN exp RPAREN SEMI_COLON .)


state 133

    (65) iterative_statement -> WHILE LPAREN exp RPAREN statement .

    RBRACE          reduce using rule 65 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    LPAREN          reduce using rule 65 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    VARIABLE        reduce using rule 65 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    FOR             reduce using rule 65 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    WHILE           reduce using rule 65 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    DO              reduce using rule 65 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    BREAK           reduce using rule 65 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    CONTINUE        reduce using rule 65 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    RETURN          reduce using rule 65 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    INT             reduce using rule 65 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    FLOAT           reduce using rule 65 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    CHAR            reduce using rule 65 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    DOUBLE          reduce using rule 65 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    VOID            reduce using rule 65 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    SHORT           reduce using rule 65 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    LONG            reduce using rule 65 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    HEX_INT         reduce using rule 65 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    DOT_REAL        reduce using rule 65 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    EXP_REAL        reduce using rule 65 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    DEC_INT         reduce using rule 65 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    CHARACTER       reduce using rule 65 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    INCREMENT       reduce using rule 65 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    DECREMENT       reduce using rule 65 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)
    $end            reduce using rule 65 (iterative_statement -> WHILE LPAREN exp RPAREN statement .)


state 134

    (67) iterative_statement -> WHILE LPAREN exp RPAREN LBRACE . statements RBRACE
    (68) iterative_statement -> WHILE LPAREN exp RPAREN LBRACE . RBRACE
    (1) statements -> . statements statement
    (2) statements -> . statement
    (3) statement -> . declaration
    (4) statement -> . exp SEMI_COLON
    (5) statement -> . iterative_statement
    (6) statement -> . function
    (7) statement -> . constant_statement
    (12) declaration -> . type enum_list SEMI_COLON
    (29) exp -> . exp ADD exp
    (30) exp -> . exp MINUS exp
    (31) exp -> . exp MULT exp
    (32) exp -> . exp DIV exp
    (33) exp -> . exp MOD exp
    (34) exp -> . exp L_OP exp
    (35) exp -> . exp G_OP exp
    (36) exp -> . exp LE_OP exp
    (37) exp -> . exp GE_OP exp
    (38) exp -> . exp NOTEQUALS exp
    (39) exp -> . exp EQUALS_OP exp
    (40) exp -> . exp OR_OP exp
    (41) exp -> . exp AND_OP exp
    (42) exp -> . exp MUL_ASSIGN exp
    (43) exp -> . exp DIV_ASSIGN exp
    (44) exp -> . exp MOD_ASSIGN exp
    (45) exp -> . exp ADD_ASSIGN exp
    (46) exp -> . exp SUB_ASSIGN exp
    (47) exp -> . exp LEFT_ASSIGN exp
    (48) exp -> . exp RIGHT_ASSIGN exp
    (49) exp -> . exp AND_ASSIGN exp
    (50) exp -> . exp XOR_ASSIGN exp
    (51) exp -> . exp OR_ASSIGN exp
    (52) exp -> . exp EQUALS exp
    (53) exp -> . unary_expression
    (54) exp -> . LPAREN exp RPAREN
    (55) exp -> . constant
    (56) exp -> . VARIABLE
    (61) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (62) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE
    (63) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (64) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE
    (65) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (66) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (67) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE statements RBRACE
    (68) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (69) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (70) iterative_statement -> . DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (71) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (72) iterative_statement -> . DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (75) function -> . normal_function
    (76) function -> . main_function
    (8) constant_statement -> . BREAK SEMI_COLON
    (9) constant_statement -> . CONTINUE SEMI_COLON
    (10) constant_statement -> . RETURN SEMI_COLON
    (11) constant_statement -> . RETURN exp SEMI_COLON
    (17) type -> . INT
    (18) type -> . FLOAT
    (19) type -> . CHAR
    (20) type -> . DOUBLE
    (21) type -> . VOID
    (22) type -> . SHORT
    (23) type -> . LONG
    (57) unary_expression -> . VARIABLE unary_operator
    (58) unary_expression -> . unary_operator VARIABLE
    (24) constant -> . HEX_INT
    (25) constant -> . DOT_REAL
    (26) constant -> . EXP_REAL
    (27) constant -> . DEC_INT
    (28) constant -> . CHARACTER
    (79) normal_function -> . type VARIABLE LPAREN arguments RPAREN LBRACE statements RBRACE
    (80) normal_function -> . type VARIABLE LPAREN arguments RPAREN LBRACE RBRACE
    (77) main_function -> . type MAIN LPAREN arguments RPAREN LBRACE statements RBRACE
    (78) main_function -> . type MAIN LPAREN arguments RPAREN LBRACE RBRACE
    (59) unary_operator -> . INCREMENT
    (60) unary_operator -> . DECREMENT

    RBRACE          shift and go to state 145
    LPAREN          shift and go to state 21
    VARIABLE        shift and go to state 23
    FOR             shift and go to state 20
    WHILE           shift and go to state 8
    DO              shift and go to state 4
    BREAK           shift and go to state 32
    CONTINUE        shift and go to state 33
    RETURN          shift and go to state 1
    INT             shift and go to state 27
    FLOAT           shift and go to state 31
    CHAR            shift and go to state 7
    DOUBLE          shift and go to state 28
    VOID            shift and go to state 5
    SHORT           shift and go to state 9
    LONG            shift and go to state 35
    HEX_INT         shift and go to state 29
    DOT_REAL        shift and go to state 16
    EXP_REAL        shift and go to state 13
    DEC_INT         shift and go to state 14
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 12
    DECREMENT       shift and go to state 25

    function                       shift and go to state 19
    main_function                  shift and go to state 2
    statements                     shift and go to state 144
    exp                            shift and go to state 34
    unary_expression               shift and go to state 24
    type                           shift and go to state 17
    normal_function                shift and go to state 30
    statement                      shift and go to state 15
    declaration                    shift and go to state 22
    constant_statement             shift and go to state 26
    constant                       shift and go to state 10
    iterative_statement            shift and go to state 11
    unary_operator                 shift and go to state 18

state 135

    (14) enum_list -> VARIABLE EQUALS exp COMMA . enum_list
    (13) enum_list -> . VARIABLE COMMA enum_list
    (14) enum_list -> . VARIABLE EQUALS exp COMMA enum_list
    (15) enum_list -> . VARIABLE
    (16) enum_list -> . VARIABLE EQUALS exp

    VARIABLE        shift and go to state 121

    enum_list                      shift and go to state 146

state 136

    (79) normal_function -> type VARIABLE LPAREN arguments RPAREN . LBRACE statements RBRACE
    (80) normal_function -> type VARIABLE LPAREN arguments RPAREN . LBRACE RBRACE

    LBRACE          shift and go to state 147


state 137

    (77) main_function -> type MAIN LPAREN arguments RPAREN . LBRACE statements RBRACE
    (78) main_function -> type MAIN LPAREN arguments RPAREN . LBRACE RBRACE

    LBRACE          shift and go to state 148


state 138

    (61) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp . SEMI_COLON iterative_exp RPAREN statement
    (62) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp . SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE
    (63) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp . SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (64) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp . SEMI_COLON iterative_exp RPAREN LBRACE RBRACE

    SEMI_COLON      shift and go to state 149


state 139

    (73) iterative_exp -> exp COMMA iterative_exp .

    SEMI_COLON      reduce using rule 73 (iterative_exp -> exp COMMA iterative_exp .)
    RPAREN          reduce using rule 73 (iterative_exp -> exp COMMA iterative_exp .)


state 140

    (71) iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN . SEMI_COLON

    SEMI_COLON      shift and go to state 150


state 141

    (69) iterative_statement -> DO statement WHILE LPAREN exp RPAREN . SEMI_COLON

    SEMI_COLON      shift and go to state 151


state 142

    (70) iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN . exp RPAREN SEMI_COLON
    (29) exp -> . exp ADD exp
    (30) exp -> . exp MINUS exp
    (31) exp -> . exp MULT exp
    (32) exp -> . exp DIV exp
    (33) exp -> . exp MOD exp
    (34) exp -> . exp L_OP exp
    (35) exp -> . exp G_OP exp
    (36) exp -> . exp LE_OP exp
    (37) exp -> . exp GE_OP exp
    (38) exp -> . exp NOTEQUALS exp
    (39) exp -> . exp EQUALS_OP exp
    (40) exp -> . exp OR_OP exp
    (41) exp -> . exp AND_OP exp
    (42) exp -> . exp MUL_ASSIGN exp
    (43) exp -> . exp DIV_ASSIGN exp
    (44) exp -> . exp MOD_ASSIGN exp
    (45) exp -> . exp ADD_ASSIGN exp
    (46) exp -> . exp SUB_ASSIGN exp
    (47) exp -> . exp LEFT_ASSIGN exp
    (48) exp -> . exp RIGHT_ASSIGN exp
    (49) exp -> . exp AND_ASSIGN exp
    (50) exp -> . exp XOR_ASSIGN exp
    (51) exp -> . exp OR_ASSIGN exp
    (52) exp -> . exp EQUALS exp
    (53) exp -> . unary_expression
    (54) exp -> . LPAREN exp RPAREN
    (55) exp -> . constant
    (56) exp -> . VARIABLE
    (57) unary_expression -> . VARIABLE unary_operator
    (58) unary_expression -> . unary_operator VARIABLE
    (24) constant -> . HEX_INT
    (25) constant -> . DOT_REAL
    (26) constant -> . EXP_REAL
    (27) constant -> . DEC_INT
    (28) constant -> . CHARACTER
    (59) unary_operator -> . INCREMENT
    (60) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 21
    VARIABLE        shift and go to state 23
    HEX_INT         shift and go to state 29
    DOT_REAL        shift and go to state 16
    EXP_REAL        shift and go to state 13
    DEC_INT         shift and go to state 14
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 12
    DECREMENT       shift and go to state 25

    constant                       shift and go to state 10
    unary_expression               shift and go to state 24
    exp                            shift and go to state 152
    unary_operator                 shift and go to state 18

state 143

    (72) iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp . RPAREN SEMI_COLON
    (29) exp -> exp . ADD exp
    (30) exp -> exp . MINUS exp
    (31) exp -> exp . MULT exp
    (32) exp -> exp . DIV exp
    (33) exp -> exp . MOD exp
    (34) exp -> exp . L_OP exp
    (35) exp -> exp . G_OP exp
    (36) exp -> exp . LE_OP exp
    (37) exp -> exp . GE_OP exp
    (38) exp -> exp . NOTEQUALS exp
    (39) exp -> exp . EQUALS_OP exp
    (40) exp -> exp . OR_OP exp
    (41) exp -> exp . AND_OP exp
    (42) exp -> exp . MUL_ASSIGN exp
    (43) exp -> exp . DIV_ASSIGN exp
    (44) exp -> exp . MOD_ASSIGN exp
    (45) exp -> exp . ADD_ASSIGN exp
    (46) exp -> exp . SUB_ASSIGN exp
    (47) exp -> exp . LEFT_ASSIGN exp
    (48) exp -> exp . RIGHT_ASSIGN exp
    (49) exp -> exp . AND_ASSIGN exp
    (50) exp -> exp . XOR_ASSIGN exp
    (51) exp -> exp . OR_ASSIGN exp
    (52) exp -> exp . EQUALS exp

    RPAREN          shift and go to state 153
    ADD             shift and go to state 67
    MINUS           shift and go to state 57
    MULT            shift and go to state 58
    DIV             shift and go to state 56
    MOD             shift and go to state 76
    L_OP            shift and go to state 73
    G_OP            shift and go to state 61
    LE_OP           shift and go to state 59
    GE_OP           shift and go to state 68
    NOTEQUALS       shift and go to state 52
    EQUALS_OP       shift and go to state 53
    OR_OP           shift and go to state 62
    AND_OP          shift and go to state 66
    MUL_ASSIGN      shift and go to state 74
    DIV_ASSIGN      shift and go to state 54
    MOD_ASSIGN      shift and go to state 70
    ADD_ASSIGN      shift and go to state 64
    SUB_ASSIGN      shift and go to state 69
    LEFT_ASSIGN     shift and go to state 75
    RIGHT_ASSIGN    shift and go to state 60
    AND_ASSIGN      shift and go to state 63
    XOR_ASSIGN      shift and go to state 71
    OR_ASSIGN       shift and go to state 72
    EQUALS          shift and go to state 65


state 144

    (67) iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements . RBRACE
    (1) statements -> statements . statement
    (3) statement -> . declaration
    (4) statement -> . exp SEMI_COLON
    (5) statement -> . iterative_statement
    (6) statement -> . function
    (7) statement -> . constant_statement
    (12) declaration -> . type enum_list SEMI_COLON
    (29) exp -> . exp ADD exp
    (30) exp -> . exp MINUS exp
    (31) exp -> . exp MULT exp
    (32) exp -> . exp DIV exp
    (33) exp -> . exp MOD exp
    (34) exp -> . exp L_OP exp
    (35) exp -> . exp G_OP exp
    (36) exp -> . exp LE_OP exp
    (37) exp -> . exp GE_OP exp
    (38) exp -> . exp NOTEQUALS exp
    (39) exp -> . exp EQUALS_OP exp
    (40) exp -> . exp OR_OP exp
    (41) exp -> . exp AND_OP exp
    (42) exp -> . exp MUL_ASSIGN exp
    (43) exp -> . exp DIV_ASSIGN exp
    (44) exp -> . exp MOD_ASSIGN exp
    (45) exp -> . exp ADD_ASSIGN exp
    (46) exp -> . exp SUB_ASSIGN exp
    (47) exp -> . exp LEFT_ASSIGN exp
    (48) exp -> . exp RIGHT_ASSIGN exp
    (49) exp -> . exp AND_ASSIGN exp
    (50) exp -> . exp XOR_ASSIGN exp
    (51) exp -> . exp OR_ASSIGN exp
    (52) exp -> . exp EQUALS exp
    (53) exp -> . unary_expression
    (54) exp -> . LPAREN exp RPAREN
    (55) exp -> . constant
    (56) exp -> . VARIABLE
    (61) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (62) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE
    (63) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (64) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE
    (65) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (66) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (67) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE statements RBRACE
    (68) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (69) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (70) iterative_statement -> . DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (71) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (72) iterative_statement -> . DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (75) function -> . normal_function
    (76) function -> . main_function
    (8) constant_statement -> . BREAK SEMI_COLON
    (9) constant_statement -> . CONTINUE SEMI_COLON
    (10) constant_statement -> . RETURN SEMI_COLON
    (11) constant_statement -> . RETURN exp SEMI_COLON
    (17) type -> . INT
    (18) type -> . FLOAT
    (19) type -> . CHAR
    (20) type -> . DOUBLE
    (21) type -> . VOID
    (22) type -> . SHORT
    (23) type -> . LONG
    (57) unary_expression -> . VARIABLE unary_operator
    (58) unary_expression -> . unary_operator VARIABLE
    (24) constant -> . HEX_INT
    (25) constant -> . DOT_REAL
    (26) constant -> . EXP_REAL
    (27) constant -> . DEC_INT
    (28) constant -> . CHARACTER
    (79) normal_function -> . type VARIABLE LPAREN arguments RPAREN LBRACE statements RBRACE
    (80) normal_function -> . type VARIABLE LPAREN arguments RPAREN LBRACE RBRACE
    (77) main_function -> . type MAIN LPAREN arguments RPAREN LBRACE statements RBRACE
    (78) main_function -> . type MAIN LPAREN arguments RPAREN LBRACE RBRACE
    (59) unary_operator -> . INCREMENT
    (60) unary_operator -> . DECREMENT

    RBRACE          shift and go to state 154
    LPAREN          shift and go to state 21
    VARIABLE        shift and go to state 23
    FOR             shift and go to state 20
    WHILE           shift and go to state 8
    DO              shift and go to state 4
    BREAK           shift and go to state 32
    CONTINUE        shift and go to state 33
    RETURN          shift and go to state 1
    INT             shift and go to state 27
    FLOAT           shift and go to state 31
    CHAR            shift and go to state 7
    DOUBLE          shift and go to state 28
    VOID            shift and go to state 5
    SHORT           shift and go to state 9
    LONG            shift and go to state 35
    HEX_INT         shift and go to state 29
    DOT_REAL        shift and go to state 16
    EXP_REAL        shift and go to state 13
    DEC_INT         shift and go to state 14
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 12
    DECREMENT       shift and go to state 25

    function                       shift and go to state 19
    main_function                  shift and go to state 2
    exp                            shift and go to state 34
    unary_expression               shift and go to state 24
    type                           shift and go to state 17
    normal_function                shift and go to state 30
    statement                      shift and go to state 38
    declaration                    shift and go to state 22
    constant_statement             shift and go to state 26
    constant                       shift and go to state 10
    iterative_statement            shift and go to state 11
    unary_operator                 shift and go to state 18

state 145

    (68) iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE .

    RBRACE          reduce using rule 68 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    LPAREN          reduce using rule 68 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    VARIABLE        reduce using rule 68 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    FOR             reduce using rule 68 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    WHILE           reduce using rule 68 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    DO              reduce using rule 68 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    BREAK           reduce using rule 68 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    CONTINUE        reduce using rule 68 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    RETURN          reduce using rule 68 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    INT             reduce using rule 68 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    FLOAT           reduce using rule 68 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    CHAR            reduce using rule 68 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    DOUBLE          reduce using rule 68 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    VOID            reduce using rule 68 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    SHORT           reduce using rule 68 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    LONG            reduce using rule 68 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    HEX_INT         reduce using rule 68 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    DOT_REAL        reduce using rule 68 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    EXP_REAL        reduce using rule 68 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    DEC_INT         reduce using rule 68 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    CHARACTER       reduce using rule 68 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    INCREMENT       reduce using rule 68 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    DECREMENT       reduce using rule 68 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    $end            reduce using rule 68 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)


state 146

    (14) enum_list -> VARIABLE EQUALS exp COMMA enum_list .

    SEMI_COLON      reduce using rule 14 (enum_list -> VARIABLE EQUALS exp COMMA enum_list .)


state 147

    (79) normal_function -> type VARIABLE LPAREN arguments RPAREN LBRACE . statements RBRACE
    (80) normal_function -> type VARIABLE LPAREN arguments RPAREN LBRACE . RBRACE
    (1) statements -> . statements statement
    (2) statements -> . statement
    (3) statement -> . declaration
    (4) statement -> . exp SEMI_COLON
    (5) statement -> . iterative_statement
    (6) statement -> . function
    (7) statement -> . constant_statement
    (12) declaration -> . type enum_list SEMI_COLON
    (29) exp -> . exp ADD exp
    (30) exp -> . exp MINUS exp
    (31) exp -> . exp MULT exp
    (32) exp -> . exp DIV exp
    (33) exp -> . exp MOD exp
    (34) exp -> . exp L_OP exp
    (35) exp -> . exp G_OP exp
    (36) exp -> . exp LE_OP exp
    (37) exp -> . exp GE_OP exp
    (38) exp -> . exp NOTEQUALS exp
    (39) exp -> . exp EQUALS_OP exp
    (40) exp -> . exp OR_OP exp
    (41) exp -> . exp AND_OP exp
    (42) exp -> . exp MUL_ASSIGN exp
    (43) exp -> . exp DIV_ASSIGN exp
    (44) exp -> . exp MOD_ASSIGN exp
    (45) exp -> . exp ADD_ASSIGN exp
    (46) exp -> . exp SUB_ASSIGN exp
    (47) exp -> . exp LEFT_ASSIGN exp
    (48) exp -> . exp RIGHT_ASSIGN exp
    (49) exp -> . exp AND_ASSIGN exp
    (50) exp -> . exp XOR_ASSIGN exp
    (51) exp -> . exp OR_ASSIGN exp
    (52) exp -> . exp EQUALS exp
    (53) exp -> . unary_expression
    (54) exp -> . LPAREN exp RPAREN
    (55) exp -> . constant
    (56) exp -> . VARIABLE
    (61) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (62) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE
    (63) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (64) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE
    (65) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (66) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (67) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE statements RBRACE
    (68) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (69) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (70) iterative_statement -> . DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (71) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (72) iterative_statement -> . DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (75) function -> . normal_function
    (76) function -> . main_function
    (8) constant_statement -> . BREAK SEMI_COLON
    (9) constant_statement -> . CONTINUE SEMI_COLON
    (10) constant_statement -> . RETURN SEMI_COLON
    (11) constant_statement -> . RETURN exp SEMI_COLON
    (17) type -> . INT
    (18) type -> . FLOAT
    (19) type -> . CHAR
    (20) type -> . DOUBLE
    (21) type -> . VOID
    (22) type -> . SHORT
    (23) type -> . LONG
    (57) unary_expression -> . VARIABLE unary_operator
    (58) unary_expression -> . unary_operator VARIABLE
    (24) constant -> . HEX_INT
    (25) constant -> . DOT_REAL
    (26) constant -> . EXP_REAL
    (27) constant -> . DEC_INT
    (28) constant -> . CHARACTER
    (79) normal_function -> . type VARIABLE LPAREN arguments RPAREN LBRACE statements RBRACE
    (80) normal_function -> . type VARIABLE LPAREN arguments RPAREN LBRACE RBRACE
    (77) main_function -> . type MAIN LPAREN arguments RPAREN LBRACE statements RBRACE
    (78) main_function -> . type MAIN LPAREN arguments RPAREN LBRACE RBRACE
    (59) unary_operator -> . INCREMENT
    (60) unary_operator -> . DECREMENT

    RBRACE          shift and go to state 156
    LPAREN          shift and go to state 21
    VARIABLE        shift and go to state 23
    FOR             shift and go to state 20
    WHILE           shift and go to state 8
    DO              shift and go to state 4
    BREAK           shift and go to state 32
    CONTINUE        shift and go to state 33
    RETURN          shift and go to state 1
    INT             shift and go to state 27
    FLOAT           shift and go to state 31
    CHAR            shift and go to state 7
    DOUBLE          shift and go to state 28
    VOID            shift and go to state 5
    SHORT           shift and go to state 9
    LONG            shift and go to state 35
    HEX_INT         shift and go to state 29
    DOT_REAL        shift and go to state 16
    EXP_REAL        shift and go to state 13
    DEC_INT         shift and go to state 14
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 12
    DECREMENT       shift and go to state 25

    function                       shift and go to state 19
    main_function                  shift and go to state 2
    statements                     shift and go to state 155
    statement                      shift and go to state 15
    unary_expression               shift and go to state 24
    iterative_statement            shift and go to state 11
    normal_function                shift and go to state 30
    exp                            shift and go to state 34
    declaration                    shift and go to state 22
    constant_statement             shift and go to state 26
    constant                       shift and go to state 10
    type                           shift and go to state 17
    unary_operator                 shift and go to state 18

state 148

    (77) main_function -> type MAIN LPAREN arguments RPAREN LBRACE . statements RBRACE
    (78) main_function -> type MAIN LPAREN arguments RPAREN LBRACE . RBRACE
    (1) statements -> . statements statement
    (2) statements -> . statement
    (3) statement -> . declaration
    (4) statement -> . exp SEMI_COLON
    (5) statement -> . iterative_statement
    (6) statement -> . function
    (7) statement -> . constant_statement
    (12) declaration -> . type enum_list SEMI_COLON
    (29) exp -> . exp ADD exp
    (30) exp -> . exp MINUS exp
    (31) exp -> . exp MULT exp
    (32) exp -> . exp DIV exp
    (33) exp -> . exp MOD exp
    (34) exp -> . exp L_OP exp
    (35) exp -> . exp G_OP exp
    (36) exp -> . exp LE_OP exp
    (37) exp -> . exp GE_OP exp
    (38) exp -> . exp NOTEQUALS exp
    (39) exp -> . exp EQUALS_OP exp
    (40) exp -> . exp OR_OP exp
    (41) exp -> . exp AND_OP exp
    (42) exp -> . exp MUL_ASSIGN exp
    (43) exp -> . exp DIV_ASSIGN exp
    (44) exp -> . exp MOD_ASSIGN exp
    (45) exp -> . exp ADD_ASSIGN exp
    (46) exp -> . exp SUB_ASSIGN exp
    (47) exp -> . exp LEFT_ASSIGN exp
    (48) exp -> . exp RIGHT_ASSIGN exp
    (49) exp -> . exp AND_ASSIGN exp
    (50) exp -> . exp XOR_ASSIGN exp
    (51) exp -> . exp OR_ASSIGN exp
    (52) exp -> . exp EQUALS exp
    (53) exp -> . unary_expression
    (54) exp -> . LPAREN exp RPAREN
    (55) exp -> . constant
    (56) exp -> . VARIABLE
    (61) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (62) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE
    (63) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (64) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE
    (65) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (66) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (67) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE statements RBRACE
    (68) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (69) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (70) iterative_statement -> . DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (71) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (72) iterative_statement -> . DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (75) function -> . normal_function
    (76) function -> . main_function
    (8) constant_statement -> . BREAK SEMI_COLON
    (9) constant_statement -> . CONTINUE SEMI_COLON
    (10) constant_statement -> . RETURN SEMI_COLON
    (11) constant_statement -> . RETURN exp SEMI_COLON
    (17) type -> . INT
    (18) type -> . FLOAT
    (19) type -> . CHAR
    (20) type -> . DOUBLE
    (21) type -> . VOID
    (22) type -> . SHORT
    (23) type -> . LONG
    (57) unary_expression -> . VARIABLE unary_operator
    (58) unary_expression -> . unary_operator VARIABLE
    (24) constant -> . HEX_INT
    (25) constant -> . DOT_REAL
    (26) constant -> . EXP_REAL
    (27) constant -> . DEC_INT
    (28) constant -> . CHARACTER
    (79) normal_function -> . type VARIABLE LPAREN arguments RPAREN LBRACE statements RBRACE
    (80) normal_function -> . type VARIABLE LPAREN arguments RPAREN LBRACE RBRACE
    (77) main_function -> . type MAIN LPAREN arguments RPAREN LBRACE statements RBRACE
    (78) main_function -> . type MAIN LPAREN arguments RPAREN LBRACE RBRACE
    (59) unary_operator -> . INCREMENT
    (60) unary_operator -> . DECREMENT

    RBRACE          shift and go to state 158
    LPAREN          shift and go to state 21
    VARIABLE        shift and go to state 23
    FOR             shift and go to state 20
    WHILE           shift and go to state 8
    DO              shift and go to state 4
    BREAK           shift and go to state 32
    CONTINUE        shift and go to state 33
    RETURN          shift and go to state 1
    INT             shift and go to state 27
    FLOAT           shift and go to state 31
    CHAR            shift and go to state 7
    DOUBLE          shift and go to state 28
    VOID            shift and go to state 5
    SHORT           shift and go to state 9
    LONG            shift and go to state 35
    HEX_INT         shift and go to state 29
    DOT_REAL        shift and go to state 16
    EXP_REAL        shift and go to state 13
    DEC_INT         shift and go to state 14
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 12
    DECREMENT       shift and go to state 25

    function                       shift and go to state 19
    main_function                  shift and go to state 2
    statements                     shift and go to state 157
    statement                      shift and go to state 15
    unary_expression               shift and go to state 24
    iterative_statement            shift and go to state 11
    normal_function                shift and go to state 30
    exp                            shift and go to state 34
    declaration                    shift and go to state 22
    constant_statement             shift and go to state 26
    constant                       shift and go to state 10
    type                           shift and go to state 17
    unary_operator                 shift and go to state 18

state 149

    (61) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON . iterative_exp RPAREN statement
    (62) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON . iterative_exp RPAREN LBRACE statements RBRACE
    (63) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON . iterative_exp RPAREN SEMI_COLON
    (64) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON . iterative_exp RPAREN LBRACE RBRACE
    (73) iterative_exp -> . exp COMMA iterative_exp
    (74) iterative_exp -> . exp
    (29) exp -> . exp ADD exp
    (30) exp -> . exp MINUS exp
    (31) exp -> . exp MULT exp
    (32) exp -> . exp DIV exp
    (33) exp -> . exp MOD exp
    (34) exp -> . exp L_OP exp
    (35) exp -> . exp G_OP exp
    (36) exp -> . exp LE_OP exp
    (37) exp -> . exp GE_OP exp
    (38) exp -> . exp NOTEQUALS exp
    (39) exp -> . exp EQUALS_OP exp
    (40) exp -> . exp OR_OP exp
    (41) exp -> . exp AND_OP exp
    (42) exp -> . exp MUL_ASSIGN exp
    (43) exp -> . exp DIV_ASSIGN exp
    (44) exp -> . exp MOD_ASSIGN exp
    (45) exp -> . exp ADD_ASSIGN exp
    (46) exp -> . exp SUB_ASSIGN exp
    (47) exp -> . exp LEFT_ASSIGN exp
    (48) exp -> . exp RIGHT_ASSIGN exp
    (49) exp -> . exp AND_ASSIGN exp
    (50) exp -> . exp XOR_ASSIGN exp
    (51) exp -> . exp OR_ASSIGN exp
    (52) exp -> . exp EQUALS exp
    (53) exp -> . unary_expression
    (54) exp -> . LPAREN exp RPAREN
    (55) exp -> . constant
    (56) exp -> . VARIABLE
    (57) unary_expression -> . VARIABLE unary_operator
    (58) unary_expression -> . unary_operator VARIABLE
    (24) constant -> . HEX_INT
    (25) constant -> . DOT_REAL
    (26) constant -> . EXP_REAL
    (27) constant -> . DEC_INT
    (28) constant -> . CHARACTER
    (59) unary_operator -> . INCREMENT
    (60) unary_operator -> . DECREMENT

    LPAREN          shift and go to state 21
    VARIABLE        shift and go to state 23
    HEX_INT         shift and go to state 29
    DOT_REAL        shift and go to state 16
    EXP_REAL        shift and go to state 13
    DEC_INT         shift and go to state 14
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 12
    DECREMENT       shift and go to state 25

    constant                       shift and go to state 10
    unary_expression               shift and go to state 24
    iterative_exp                  shift and go to state 159
    exp                            shift and go to state 89
    unary_operator                 shift and go to state 18

state 150

    (71) iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .

    RBRACE          reduce using rule 71 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    LPAREN          reduce using rule 71 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    VARIABLE        reduce using rule 71 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    FOR             reduce using rule 71 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    WHILE           reduce using rule 71 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    DO              reduce using rule 71 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    BREAK           reduce using rule 71 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    CONTINUE        reduce using rule 71 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    RETURN          reduce using rule 71 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    INT             reduce using rule 71 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    FLOAT           reduce using rule 71 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    CHAR            reduce using rule 71 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    DOUBLE          reduce using rule 71 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    VOID            reduce using rule 71 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    SHORT           reduce using rule 71 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    LONG            reduce using rule 71 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    HEX_INT         reduce using rule 71 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    DOT_REAL        reduce using rule 71 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    EXP_REAL        reduce using rule 71 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    DEC_INT         reduce using rule 71 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    CHARACTER       reduce using rule 71 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    INCREMENT       reduce using rule 71 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    DECREMENT       reduce using rule 71 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)
    $end            reduce using rule 71 (iterative_statement -> DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON .)


state 151

    (69) iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .

    RBRACE          reduce using rule 69 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    LPAREN          reduce using rule 69 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    VARIABLE        reduce using rule 69 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    FOR             reduce using rule 69 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    WHILE           reduce using rule 69 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    DO              reduce using rule 69 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    BREAK           reduce using rule 69 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    CONTINUE        reduce using rule 69 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    RETURN          reduce using rule 69 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    INT             reduce using rule 69 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    FLOAT           reduce using rule 69 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    CHAR            reduce using rule 69 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    DOUBLE          reduce using rule 69 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    VOID            reduce using rule 69 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    SHORT           reduce using rule 69 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    LONG            reduce using rule 69 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    HEX_INT         reduce using rule 69 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    DOT_REAL        reduce using rule 69 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    EXP_REAL        reduce using rule 69 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    DEC_INT         reduce using rule 69 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    CHARACTER       reduce using rule 69 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    INCREMENT       reduce using rule 69 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    DECREMENT       reduce using rule 69 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)
    $end            reduce using rule 69 (iterative_statement -> DO statement WHILE LPAREN exp RPAREN SEMI_COLON .)


state 152

    (70) iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp . RPAREN SEMI_COLON
    (29) exp -> exp . ADD exp
    (30) exp -> exp . MINUS exp
    (31) exp -> exp . MULT exp
    (32) exp -> exp . DIV exp
    (33) exp -> exp . MOD exp
    (34) exp -> exp . L_OP exp
    (35) exp -> exp . G_OP exp
    (36) exp -> exp . LE_OP exp
    (37) exp -> exp . GE_OP exp
    (38) exp -> exp . NOTEQUALS exp
    (39) exp -> exp . EQUALS_OP exp
    (40) exp -> exp . OR_OP exp
    (41) exp -> exp . AND_OP exp
    (42) exp -> exp . MUL_ASSIGN exp
    (43) exp -> exp . DIV_ASSIGN exp
    (44) exp -> exp . MOD_ASSIGN exp
    (45) exp -> exp . ADD_ASSIGN exp
    (46) exp -> exp . SUB_ASSIGN exp
    (47) exp -> exp . LEFT_ASSIGN exp
    (48) exp -> exp . RIGHT_ASSIGN exp
    (49) exp -> exp . AND_ASSIGN exp
    (50) exp -> exp . XOR_ASSIGN exp
    (51) exp -> exp . OR_ASSIGN exp
    (52) exp -> exp . EQUALS exp

    RPAREN          shift and go to state 160
    ADD             shift and go to state 67
    MINUS           shift and go to state 57
    MULT            shift and go to state 58
    DIV             shift and go to state 56
    MOD             shift and go to state 76
    L_OP            shift and go to state 73
    G_OP            shift and go to state 61
    LE_OP           shift and go to state 59
    GE_OP           shift and go to state 68
    NOTEQUALS       shift and go to state 52
    EQUALS_OP       shift and go to state 53
    OR_OP           shift and go to state 62
    AND_OP          shift and go to state 66
    MUL_ASSIGN      shift and go to state 74
    DIV_ASSIGN      shift and go to state 54
    MOD_ASSIGN      shift and go to state 70
    ADD_ASSIGN      shift and go to state 64
    SUB_ASSIGN      shift and go to state 69
    LEFT_ASSIGN     shift and go to state 75
    RIGHT_ASSIGN    shift and go to state 60
    AND_ASSIGN      shift and go to state 63
    XOR_ASSIGN      shift and go to state 71
    OR_ASSIGN       shift and go to state 72
    EQUALS          shift and go to state 65


state 153

    (72) iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN . SEMI_COLON

    SEMI_COLON      shift and go to state 161


state 154

    (67) iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE .

    RBRACE          reduce using rule 67 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE .)
    LPAREN          reduce using rule 67 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE .)
    VARIABLE        reduce using rule 67 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE .)
    FOR             reduce using rule 67 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE .)
    WHILE           reduce using rule 67 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE .)
    DO              reduce using rule 67 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE .)
    BREAK           reduce using rule 67 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE .)
    CONTINUE        reduce using rule 67 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE .)
    RETURN          reduce using rule 67 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE .)
    INT             reduce using rule 67 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE .)
    FLOAT           reduce using rule 67 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE .)
    CHAR            reduce using rule 67 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE .)
    DOUBLE          reduce using rule 67 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE .)
    VOID            reduce using rule 67 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE .)
    SHORT           reduce using rule 67 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE .)
    LONG            reduce using rule 67 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE .)
    HEX_INT         reduce using rule 67 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE .)
    DOT_REAL        reduce using rule 67 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE .)
    EXP_REAL        reduce using rule 67 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE .)
    DEC_INT         reduce using rule 67 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE .)
    CHARACTER       reduce using rule 67 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE .)
    INCREMENT       reduce using rule 67 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE .)
    DECREMENT       reduce using rule 67 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE .)
    $end            reduce using rule 67 (iterative_statement -> WHILE LPAREN exp RPAREN LBRACE statements RBRACE .)


state 155

    (79) normal_function -> type VARIABLE LPAREN arguments RPAREN LBRACE statements . RBRACE
    (1) statements -> statements . statement
    (3) statement -> . declaration
    (4) statement -> . exp SEMI_COLON
    (5) statement -> . iterative_statement
    (6) statement -> . function
    (7) statement -> . constant_statement
    (12) declaration -> . type enum_list SEMI_COLON
    (29) exp -> . exp ADD exp
    (30) exp -> . exp MINUS exp
    (31) exp -> . exp MULT exp
    (32) exp -> . exp DIV exp
    (33) exp -> . exp MOD exp
    (34) exp -> . exp L_OP exp
    (35) exp -> . exp G_OP exp
    (36) exp -> . exp LE_OP exp
    (37) exp -> . exp GE_OP exp
    (38) exp -> . exp NOTEQUALS exp
    (39) exp -> . exp EQUALS_OP exp
    (40) exp -> . exp OR_OP exp
    (41) exp -> . exp AND_OP exp
    (42) exp -> . exp MUL_ASSIGN exp
    (43) exp -> . exp DIV_ASSIGN exp
    (44) exp -> . exp MOD_ASSIGN exp
    (45) exp -> . exp ADD_ASSIGN exp
    (46) exp -> . exp SUB_ASSIGN exp
    (47) exp -> . exp LEFT_ASSIGN exp
    (48) exp -> . exp RIGHT_ASSIGN exp
    (49) exp -> . exp AND_ASSIGN exp
    (50) exp -> . exp XOR_ASSIGN exp
    (51) exp -> . exp OR_ASSIGN exp
    (52) exp -> . exp EQUALS exp
    (53) exp -> . unary_expression
    (54) exp -> . LPAREN exp RPAREN
    (55) exp -> . constant
    (56) exp -> . VARIABLE
    (61) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (62) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE
    (63) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (64) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE
    (65) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (66) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (67) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE statements RBRACE
    (68) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (69) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (70) iterative_statement -> . DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (71) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (72) iterative_statement -> . DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (75) function -> . normal_function
    (76) function -> . main_function
    (8) constant_statement -> . BREAK SEMI_COLON
    (9) constant_statement -> . CONTINUE SEMI_COLON
    (10) constant_statement -> . RETURN SEMI_COLON
    (11) constant_statement -> . RETURN exp SEMI_COLON
    (17) type -> . INT
    (18) type -> . FLOAT
    (19) type -> . CHAR
    (20) type -> . DOUBLE
    (21) type -> . VOID
    (22) type -> . SHORT
    (23) type -> . LONG
    (57) unary_expression -> . VARIABLE unary_operator
    (58) unary_expression -> . unary_operator VARIABLE
    (24) constant -> . HEX_INT
    (25) constant -> . DOT_REAL
    (26) constant -> . EXP_REAL
    (27) constant -> . DEC_INT
    (28) constant -> . CHARACTER
    (79) normal_function -> . type VARIABLE LPAREN arguments RPAREN LBRACE statements RBRACE
    (80) normal_function -> . type VARIABLE LPAREN arguments RPAREN LBRACE RBRACE
    (77) main_function -> . type MAIN LPAREN arguments RPAREN LBRACE statements RBRACE
    (78) main_function -> . type MAIN LPAREN arguments RPAREN LBRACE RBRACE
    (59) unary_operator -> . INCREMENT
    (60) unary_operator -> . DECREMENT

    RBRACE          shift and go to state 162
    LPAREN          shift and go to state 21
    VARIABLE        shift and go to state 23
    FOR             shift and go to state 20
    WHILE           shift and go to state 8
    DO              shift and go to state 4
    BREAK           shift and go to state 32
    CONTINUE        shift and go to state 33
    RETURN          shift and go to state 1
    INT             shift and go to state 27
    FLOAT           shift and go to state 31
    CHAR            shift and go to state 7
    DOUBLE          shift and go to state 28
    VOID            shift and go to state 5
    SHORT           shift and go to state 9
    LONG            shift and go to state 35
    HEX_INT         shift and go to state 29
    DOT_REAL        shift and go to state 16
    EXP_REAL        shift and go to state 13
    DEC_INT         shift and go to state 14
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 12
    DECREMENT       shift and go to state 25

    function                       shift and go to state 19
    main_function                  shift and go to state 2
    statement                      shift and go to state 38
    unary_expression               shift and go to state 24
    iterative_statement            shift and go to state 11
    normal_function                shift and go to state 30
    exp                            shift and go to state 34
    declaration                    shift and go to state 22
    constant_statement             shift and go to state 26
    constant                       shift and go to state 10
    type                           shift and go to state 17
    unary_operator                 shift and go to state 18

state 156

    (80) normal_function -> type VARIABLE LPAREN arguments RPAREN LBRACE RBRACE .

    WHILE           reduce using rule 80 (normal_function -> type VARIABLE LPAREN arguments RPAREN LBRACE RBRACE .)
    RBRACE          reduce using rule 80 (normal_function -> type VARIABLE LPAREN arguments RPAREN LBRACE RBRACE .)
    LPAREN          reduce using rule 80 (normal_function -> type VARIABLE LPAREN arguments RPAREN LBRACE RBRACE .)
    VARIABLE        reduce using rule 80 (normal_function -> type VARIABLE LPAREN arguments RPAREN LBRACE RBRACE .)
    FOR             reduce using rule 80 (normal_function -> type VARIABLE LPAREN arguments RPAREN LBRACE RBRACE .)
    DO              reduce using rule 80 (normal_function -> type VARIABLE LPAREN arguments RPAREN LBRACE RBRACE .)
    BREAK           reduce using rule 80 (normal_function -> type VARIABLE LPAREN arguments RPAREN LBRACE RBRACE .)
    CONTINUE        reduce using rule 80 (normal_function -> type VARIABLE LPAREN arguments RPAREN LBRACE RBRACE .)
    RETURN          reduce using rule 80 (normal_function -> type VARIABLE LPAREN arguments RPAREN LBRACE RBRACE .)
    INT             reduce using rule 80 (normal_function -> type VARIABLE LPAREN arguments RPAREN LBRACE RBRACE .)
    FLOAT           reduce using rule 80 (normal_function -> type VARIABLE LPAREN arguments RPAREN LBRACE RBRACE .)
    CHAR            reduce using rule 80 (normal_function -> type VARIABLE LPAREN arguments RPAREN LBRACE RBRACE .)
    DOUBLE          reduce using rule 80 (normal_function -> type VARIABLE LPAREN arguments RPAREN LBRACE RBRACE .)
    VOID            reduce using rule 80 (normal_function -> type VARIABLE LPAREN arguments RPAREN LBRACE RBRACE .)
    SHORT           reduce using rule 80 (normal_function -> type VARIABLE LPAREN arguments RPAREN LBRACE RBRACE .)
    LONG            reduce using rule 80 (normal_function -> type VARIABLE LPAREN arguments RPAREN LBRACE RBRACE .)
    HEX_INT         reduce using rule 80 (normal_function -> type VARIABLE LPAREN arguments RPAREN LBRACE RBRACE .)
    DOT_REAL        reduce using rule 80 (normal_function -> type VARIABLE LPAREN arguments RPAREN LBRACE RBRACE .)
    EXP_REAL        reduce using rule 80 (normal_function -> type VARIABLE LPAREN arguments RPAREN LBRACE RBRACE .)
    DEC_INT         reduce using rule 80 (normal_function -> type VARIABLE LPAREN arguments RPAREN LBRACE RBRACE .)
    CHARACTER       reduce using rule 80 (normal_function -> type VARIABLE LPAREN arguments RPAREN LBRACE RBRACE .)
    INCREMENT       reduce using rule 80 (normal_function -> type VARIABLE LPAREN arguments RPAREN LBRACE RBRACE .)
    DECREMENT       reduce using rule 80 (normal_function -> type VARIABLE LPAREN arguments RPAREN LBRACE RBRACE .)
    $end            reduce using rule 80 (normal_function -> type VARIABLE LPAREN arguments RPAREN LBRACE RBRACE .)


state 157

    (77) main_function -> type MAIN LPAREN arguments RPAREN LBRACE statements . RBRACE
    (1) statements -> statements . statement
    (3) statement -> . declaration
    (4) statement -> . exp SEMI_COLON
    (5) statement -> . iterative_statement
    (6) statement -> . function
    (7) statement -> . constant_statement
    (12) declaration -> . type enum_list SEMI_COLON
    (29) exp -> . exp ADD exp
    (30) exp -> . exp MINUS exp
    (31) exp -> . exp MULT exp
    (32) exp -> . exp DIV exp
    (33) exp -> . exp MOD exp
    (34) exp -> . exp L_OP exp
    (35) exp -> . exp G_OP exp
    (36) exp -> . exp LE_OP exp
    (37) exp -> . exp GE_OP exp
    (38) exp -> . exp NOTEQUALS exp
    (39) exp -> . exp EQUALS_OP exp
    (40) exp -> . exp OR_OP exp
    (41) exp -> . exp AND_OP exp
    (42) exp -> . exp MUL_ASSIGN exp
    (43) exp -> . exp DIV_ASSIGN exp
    (44) exp -> . exp MOD_ASSIGN exp
    (45) exp -> . exp ADD_ASSIGN exp
    (46) exp -> . exp SUB_ASSIGN exp
    (47) exp -> . exp LEFT_ASSIGN exp
    (48) exp -> . exp RIGHT_ASSIGN exp
    (49) exp -> . exp AND_ASSIGN exp
    (50) exp -> . exp XOR_ASSIGN exp
    (51) exp -> . exp OR_ASSIGN exp
    (52) exp -> . exp EQUALS exp
    (53) exp -> . unary_expression
    (54) exp -> . LPAREN exp RPAREN
    (55) exp -> . constant
    (56) exp -> . VARIABLE
    (61) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (62) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE
    (63) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (64) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE
    (65) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (66) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (67) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE statements RBRACE
    (68) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (69) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (70) iterative_statement -> . DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (71) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (72) iterative_statement -> . DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (75) function -> . normal_function
    (76) function -> . main_function
    (8) constant_statement -> . BREAK SEMI_COLON
    (9) constant_statement -> . CONTINUE SEMI_COLON
    (10) constant_statement -> . RETURN SEMI_COLON
    (11) constant_statement -> . RETURN exp SEMI_COLON
    (17) type -> . INT
    (18) type -> . FLOAT
    (19) type -> . CHAR
    (20) type -> . DOUBLE
    (21) type -> . VOID
    (22) type -> . SHORT
    (23) type -> . LONG
    (57) unary_expression -> . VARIABLE unary_operator
    (58) unary_expression -> . unary_operator VARIABLE
    (24) constant -> . HEX_INT
    (25) constant -> . DOT_REAL
    (26) constant -> . EXP_REAL
    (27) constant -> . DEC_INT
    (28) constant -> . CHARACTER
    (79) normal_function -> . type VARIABLE LPAREN arguments RPAREN LBRACE statements RBRACE
    (80) normal_function -> . type VARIABLE LPAREN arguments RPAREN LBRACE RBRACE
    (77) main_function -> . type MAIN LPAREN arguments RPAREN LBRACE statements RBRACE
    (78) main_function -> . type MAIN LPAREN arguments RPAREN LBRACE RBRACE
    (59) unary_operator -> . INCREMENT
    (60) unary_operator -> . DECREMENT

    RBRACE          shift and go to state 163
    LPAREN          shift and go to state 21
    VARIABLE        shift and go to state 23
    FOR             shift and go to state 20
    WHILE           shift and go to state 8
    DO              shift and go to state 4
    BREAK           shift and go to state 32
    CONTINUE        shift and go to state 33
    RETURN          shift and go to state 1
    INT             shift and go to state 27
    FLOAT           shift and go to state 31
    CHAR            shift and go to state 7
    DOUBLE          shift and go to state 28
    VOID            shift and go to state 5
    SHORT           shift and go to state 9
    LONG            shift and go to state 35
    HEX_INT         shift and go to state 29
    DOT_REAL        shift and go to state 16
    EXP_REAL        shift and go to state 13
    DEC_INT         shift and go to state 14
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 12
    DECREMENT       shift and go to state 25

    function                       shift and go to state 19
    main_function                  shift and go to state 2
    statement                      shift and go to state 38
    unary_expression               shift and go to state 24
    iterative_statement            shift and go to state 11
    normal_function                shift and go to state 30
    exp                            shift and go to state 34
    declaration                    shift and go to state 22
    constant_statement             shift and go to state 26
    constant                       shift and go to state 10
    type                           shift and go to state 17
    unary_operator                 shift and go to state 18

state 158

    (78) main_function -> type MAIN LPAREN arguments RPAREN LBRACE RBRACE .

    RBRACE          reduce using rule 78 (main_function -> type MAIN LPAREN arguments RPAREN LBRACE RBRACE .)
    LPAREN          reduce using rule 78 (main_function -> type MAIN LPAREN arguments RPAREN LBRACE RBRACE .)
    VARIABLE        reduce using rule 78 (main_function -> type MAIN LPAREN arguments RPAREN LBRACE RBRACE .)
    FOR             reduce using rule 78 (main_function -> type MAIN LPAREN arguments RPAREN LBRACE RBRACE .)
    WHILE           reduce using rule 78 (main_function -> type MAIN LPAREN arguments RPAREN LBRACE RBRACE .)
    DO              reduce using rule 78 (main_function -> type MAIN LPAREN arguments RPAREN LBRACE RBRACE .)
    BREAK           reduce using rule 78 (main_function -> type MAIN LPAREN arguments RPAREN LBRACE RBRACE .)
    CONTINUE        reduce using rule 78 (main_function -> type MAIN LPAREN arguments RPAREN LBRACE RBRACE .)
    RETURN          reduce using rule 78 (main_function -> type MAIN LPAREN arguments RPAREN LBRACE RBRACE .)
    INT             reduce using rule 78 (main_function -> type MAIN LPAREN arguments RPAREN LBRACE RBRACE .)
    FLOAT           reduce using rule 78 (main_function -> type MAIN LPAREN arguments RPAREN LBRACE RBRACE .)
    CHAR            reduce using rule 78 (main_function -> type MAIN LPAREN arguments RPAREN LBRACE RBRACE .)
    DOUBLE          reduce using rule 78 (main_function -> type MAIN LPAREN arguments RPAREN LBRACE RBRACE .)
    VOID            reduce using rule 78 (main_function -> type MAIN LPAREN arguments RPAREN LBRACE RBRACE .)
    SHORT           reduce using rule 78 (main_function -> type MAIN LPAREN arguments RPAREN LBRACE RBRACE .)
    LONG            reduce using rule 78 (main_function -> type MAIN LPAREN arguments RPAREN LBRACE RBRACE .)
    HEX_INT         reduce using rule 78 (main_function -> type MAIN LPAREN arguments RPAREN LBRACE RBRACE .)
    DOT_REAL        reduce using rule 78 (main_function -> type MAIN LPAREN arguments RPAREN LBRACE RBRACE .)
    EXP_REAL        reduce using rule 78 (main_function -> type MAIN LPAREN arguments RPAREN LBRACE RBRACE .)
    DEC_INT         reduce using rule 78 (main_function -> type MAIN LPAREN arguments RPAREN LBRACE RBRACE .)
    CHARACTER       reduce using rule 78 (main_function -> type MAIN LPAREN arguments RPAREN LBRACE RBRACE .)
    INCREMENT       reduce using rule 78 (main_function -> type MAIN LPAREN arguments RPAREN LBRACE RBRACE .)
    DECREMENT       reduce using rule 78 (main_function -> type MAIN LPAREN arguments RPAREN LBRACE RBRACE .)
    $end            reduce using rule 78 (main_function -> type MAIN LPAREN arguments RPAREN LBRACE RBRACE .)


state 159

    (61) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp . RPAREN statement
    (62) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp . RPAREN LBRACE statements RBRACE
    (63) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp . RPAREN SEMI_COLON
    (64) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp . RPAREN LBRACE RBRACE

    RPAREN          shift and go to state 164


state 160

    (70) iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN . SEMI_COLON

    SEMI_COLON      shift and go to state 165


state 161

    (72) iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .

    RBRACE          reduce using rule 72 (iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    LPAREN          reduce using rule 72 (iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    VARIABLE        reduce using rule 72 (iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    FOR             reduce using rule 72 (iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    WHILE           reduce using rule 72 (iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    DO              reduce using rule 72 (iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    BREAK           reduce using rule 72 (iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    CONTINUE        reduce using rule 72 (iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    RETURN          reduce using rule 72 (iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    INT             reduce using rule 72 (iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    FLOAT           reduce using rule 72 (iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    CHAR            reduce using rule 72 (iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    DOUBLE          reduce using rule 72 (iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    VOID            reduce using rule 72 (iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    SHORT           reduce using rule 72 (iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    LONG            reduce using rule 72 (iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    HEX_INT         reduce using rule 72 (iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    DOT_REAL        reduce using rule 72 (iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    EXP_REAL        reduce using rule 72 (iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    DEC_INT         reduce using rule 72 (iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    CHARACTER       reduce using rule 72 (iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    INCREMENT       reduce using rule 72 (iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    DECREMENT       reduce using rule 72 (iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    $end            reduce using rule 72 (iterative_statement -> DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)


state 162

    (79) normal_function -> type VARIABLE LPAREN arguments RPAREN LBRACE statements RBRACE .

    WHILE           reduce using rule 79 (normal_function -> type VARIABLE LPAREN arguments RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 79 (normal_function -> type VARIABLE LPAREN arguments RPAREN LBRACE statements RBRACE .)
    LPAREN          reduce using rule 79 (normal_function -> type VARIABLE LPAREN arguments RPAREN LBRACE statements RBRACE .)
    VARIABLE        reduce using rule 79 (normal_function -> type VARIABLE LPAREN arguments RPAREN LBRACE statements RBRACE .)
    FOR             reduce using rule 79 (normal_function -> type VARIABLE LPAREN arguments RPAREN LBRACE statements RBRACE .)
    DO              reduce using rule 79 (normal_function -> type VARIABLE LPAREN arguments RPAREN LBRACE statements RBRACE .)
    BREAK           reduce using rule 79 (normal_function -> type VARIABLE LPAREN arguments RPAREN LBRACE statements RBRACE .)
    CONTINUE        reduce using rule 79 (normal_function -> type VARIABLE LPAREN arguments RPAREN LBRACE statements RBRACE .)
    RETURN          reduce using rule 79 (normal_function -> type VARIABLE LPAREN arguments RPAREN LBRACE statements RBRACE .)
    INT             reduce using rule 79 (normal_function -> type VARIABLE LPAREN arguments RPAREN LBRACE statements RBRACE .)
    FLOAT           reduce using rule 79 (normal_function -> type VARIABLE LPAREN arguments RPAREN LBRACE statements RBRACE .)
    CHAR            reduce using rule 79 (normal_function -> type VARIABLE LPAREN arguments RPAREN LBRACE statements RBRACE .)
    DOUBLE          reduce using rule 79 (normal_function -> type VARIABLE LPAREN arguments RPAREN LBRACE statements RBRACE .)
    VOID            reduce using rule 79 (normal_function -> type VARIABLE LPAREN arguments RPAREN LBRACE statements RBRACE .)
    SHORT           reduce using rule 79 (normal_function -> type VARIABLE LPAREN arguments RPAREN LBRACE statements RBRACE .)
    LONG            reduce using rule 79 (normal_function -> type VARIABLE LPAREN arguments RPAREN LBRACE statements RBRACE .)
    HEX_INT         reduce using rule 79 (normal_function -> type VARIABLE LPAREN arguments RPAREN LBRACE statements RBRACE .)
    DOT_REAL        reduce using rule 79 (normal_function -> type VARIABLE LPAREN arguments RPAREN LBRACE statements RBRACE .)
    EXP_REAL        reduce using rule 79 (normal_function -> type VARIABLE LPAREN arguments RPAREN LBRACE statements RBRACE .)
    DEC_INT         reduce using rule 79 (normal_function -> type VARIABLE LPAREN arguments RPAREN LBRACE statements RBRACE .)
    CHARACTER       reduce using rule 79 (normal_function -> type VARIABLE LPAREN arguments RPAREN LBRACE statements RBRACE .)
    INCREMENT       reduce using rule 79 (normal_function -> type VARIABLE LPAREN arguments RPAREN LBRACE statements RBRACE .)
    DECREMENT       reduce using rule 79 (normal_function -> type VARIABLE LPAREN arguments RPAREN LBRACE statements RBRACE .)
    $end            reduce using rule 79 (normal_function -> type VARIABLE LPAREN arguments RPAREN LBRACE statements RBRACE .)


state 163

    (77) main_function -> type MAIN LPAREN arguments RPAREN LBRACE statements RBRACE .

    RBRACE          reduce using rule 77 (main_function -> type MAIN LPAREN arguments RPAREN LBRACE statements RBRACE .)
    LPAREN          reduce using rule 77 (main_function -> type MAIN LPAREN arguments RPAREN LBRACE statements RBRACE .)
    VARIABLE        reduce using rule 77 (main_function -> type MAIN LPAREN arguments RPAREN LBRACE statements RBRACE .)
    FOR             reduce using rule 77 (main_function -> type MAIN LPAREN arguments RPAREN LBRACE statements RBRACE .)
    WHILE           reduce using rule 77 (main_function -> type MAIN LPAREN arguments RPAREN LBRACE statements RBRACE .)
    DO              reduce using rule 77 (main_function -> type MAIN LPAREN arguments RPAREN LBRACE statements RBRACE .)
    BREAK           reduce using rule 77 (main_function -> type MAIN LPAREN arguments RPAREN LBRACE statements RBRACE .)
    CONTINUE        reduce using rule 77 (main_function -> type MAIN LPAREN arguments RPAREN LBRACE statements RBRACE .)
    RETURN          reduce using rule 77 (main_function -> type MAIN LPAREN arguments RPAREN LBRACE statements RBRACE .)
    INT             reduce using rule 77 (main_function -> type MAIN LPAREN arguments RPAREN LBRACE statements RBRACE .)
    FLOAT           reduce using rule 77 (main_function -> type MAIN LPAREN arguments RPAREN LBRACE statements RBRACE .)
    CHAR            reduce using rule 77 (main_function -> type MAIN LPAREN arguments RPAREN LBRACE statements RBRACE .)
    DOUBLE          reduce using rule 77 (main_function -> type MAIN LPAREN arguments RPAREN LBRACE statements RBRACE .)
    VOID            reduce using rule 77 (main_function -> type MAIN LPAREN arguments RPAREN LBRACE statements RBRACE .)
    SHORT           reduce using rule 77 (main_function -> type MAIN LPAREN arguments RPAREN LBRACE statements RBRACE .)
    LONG            reduce using rule 77 (main_function -> type MAIN LPAREN arguments RPAREN LBRACE statements RBRACE .)
    HEX_INT         reduce using rule 77 (main_function -> type MAIN LPAREN arguments RPAREN LBRACE statements RBRACE .)
    DOT_REAL        reduce using rule 77 (main_function -> type MAIN LPAREN arguments RPAREN LBRACE statements RBRACE .)
    EXP_REAL        reduce using rule 77 (main_function -> type MAIN LPAREN arguments RPAREN LBRACE statements RBRACE .)
    DEC_INT         reduce using rule 77 (main_function -> type MAIN LPAREN arguments RPAREN LBRACE statements RBRACE .)
    CHARACTER       reduce using rule 77 (main_function -> type MAIN LPAREN arguments RPAREN LBRACE statements RBRACE .)
    INCREMENT       reduce using rule 77 (main_function -> type MAIN LPAREN arguments RPAREN LBRACE statements RBRACE .)
    DECREMENT       reduce using rule 77 (main_function -> type MAIN LPAREN arguments RPAREN LBRACE statements RBRACE .)
    $end            reduce using rule 77 (main_function -> type MAIN LPAREN arguments RPAREN LBRACE statements RBRACE .)


state 164

    (61) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN . statement
    (62) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN . LBRACE statements RBRACE
    (63) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN . SEMI_COLON
    (64) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN . LBRACE RBRACE
    (3) statement -> . declaration
    (4) statement -> . exp SEMI_COLON
    (5) statement -> . iterative_statement
    (6) statement -> . function
    (7) statement -> . constant_statement
    (12) declaration -> . type enum_list SEMI_COLON
    (29) exp -> . exp ADD exp
    (30) exp -> . exp MINUS exp
    (31) exp -> . exp MULT exp
    (32) exp -> . exp DIV exp
    (33) exp -> . exp MOD exp
    (34) exp -> . exp L_OP exp
    (35) exp -> . exp G_OP exp
    (36) exp -> . exp LE_OP exp
    (37) exp -> . exp GE_OP exp
    (38) exp -> . exp NOTEQUALS exp
    (39) exp -> . exp EQUALS_OP exp
    (40) exp -> . exp OR_OP exp
    (41) exp -> . exp AND_OP exp
    (42) exp -> . exp MUL_ASSIGN exp
    (43) exp -> . exp DIV_ASSIGN exp
    (44) exp -> . exp MOD_ASSIGN exp
    (45) exp -> . exp ADD_ASSIGN exp
    (46) exp -> . exp SUB_ASSIGN exp
    (47) exp -> . exp LEFT_ASSIGN exp
    (48) exp -> . exp RIGHT_ASSIGN exp
    (49) exp -> . exp AND_ASSIGN exp
    (50) exp -> . exp XOR_ASSIGN exp
    (51) exp -> . exp OR_ASSIGN exp
    (52) exp -> . exp EQUALS exp
    (53) exp -> . unary_expression
    (54) exp -> . LPAREN exp RPAREN
    (55) exp -> . constant
    (56) exp -> . VARIABLE
    (61) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (62) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE
    (63) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (64) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE
    (65) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (66) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (67) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE statements RBRACE
    (68) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (69) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (70) iterative_statement -> . DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (71) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (72) iterative_statement -> . DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (75) function -> . normal_function
    (76) function -> . main_function
    (8) constant_statement -> . BREAK SEMI_COLON
    (9) constant_statement -> . CONTINUE SEMI_COLON
    (10) constant_statement -> . RETURN SEMI_COLON
    (11) constant_statement -> . RETURN exp SEMI_COLON
    (17) type -> . INT
    (18) type -> . FLOAT
    (19) type -> . CHAR
    (20) type -> . DOUBLE
    (21) type -> . VOID
    (22) type -> . SHORT
    (23) type -> . LONG
    (57) unary_expression -> . VARIABLE unary_operator
    (58) unary_expression -> . unary_operator VARIABLE
    (24) constant -> . HEX_INT
    (25) constant -> . DOT_REAL
    (26) constant -> . EXP_REAL
    (27) constant -> . DEC_INT
    (28) constant -> . CHARACTER
    (79) normal_function -> . type VARIABLE LPAREN arguments RPAREN LBRACE statements RBRACE
    (80) normal_function -> . type VARIABLE LPAREN arguments RPAREN LBRACE RBRACE
    (77) main_function -> . type MAIN LPAREN arguments RPAREN LBRACE statements RBRACE
    (78) main_function -> . type MAIN LPAREN arguments RPAREN LBRACE RBRACE
    (59) unary_operator -> . INCREMENT
    (60) unary_operator -> . DECREMENT

    LBRACE          shift and go to state 168
    SEMI_COLON      shift and go to state 166
    LPAREN          shift and go to state 21
    VARIABLE        shift and go to state 23
    FOR             shift and go to state 20
    WHILE           shift and go to state 8
    DO              shift and go to state 4
    BREAK           shift and go to state 32
    CONTINUE        shift and go to state 33
    RETURN          shift and go to state 1
    INT             shift and go to state 27
    FLOAT           shift and go to state 31
    CHAR            shift and go to state 7
    DOUBLE          shift and go to state 28
    VOID            shift and go to state 5
    SHORT           shift and go to state 9
    LONG            shift and go to state 35
    HEX_INT         shift and go to state 29
    DOT_REAL        shift and go to state 16
    EXP_REAL        shift and go to state 13
    DEC_INT         shift and go to state 14
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 12
    DECREMENT       shift and go to state 25

    function                       shift and go to state 19
    main_function                  shift and go to state 2
    statement                      shift and go to state 167
    unary_expression               shift and go to state 24
    type                           shift and go to state 17
    normal_function                shift and go to state 30
    exp                            shift and go to state 34
    declaration                    shift and go to state 22
    constant_statement             shift and go to state 26
    constant                       shift and go to state 10
    iterative_statement            shift and go to state 11
    unary_operator                 shift and go to state 18

state 165

    (70) iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .

    RBRACE          reduce using rule 70 (iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    LPAREN          reduce using rule 70 (iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    VARIABLE        reduce using rule 70 (iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    FOR             reduce using rule 70 (iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    WHILE           reduce using rule 70 (iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    DO              reduce using rule 70 (iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    BREAK           reduce using rule 70 (iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    CONTINUE        reduce using rule 70 (iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    RETURN          reduce using rule 70 (iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    INT             reduce using rule 70 (iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    FLOAT           reduce using rule 70 (iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    CHAR            reduce using rule 70 (iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    DOUBLE          reduce using rule 70 (iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    VOID            reduce using rule 70 (iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    SHORT           reduce using rule 70 (iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    LONG            reduce using rule 70 (iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    HEX_INT         reduce using rule 70 (iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    DOT_REAL        reduce using rule 70 (iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    EXP_REAL        reduce using rule 70 (iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    DEC_INT         reduce using rule 70 (iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    CHARACTER       reduce using rule 70 (iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    INCREMENT       reduce using rule 70 (iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    DECREMENT       reduce using rule 70 (iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)
    $end            reduce using rule 70 (iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON .)


state 166

    (63) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .

    RBRACE          reduce using rule 63 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    LPAREN          reduce using rule 63 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    VARIABLE        reduce using rule 63 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    FOR             reduce using rule 63 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    WHILE           reduce using rule 63 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    DO              reduce using rule 63 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    BREAK           reduce using rule 63 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    CONTINUE        reduce using rule 63 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    RETURN          reduce using rule 63 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    INT             reduce using rule 63 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    FLOAT           reduce using rule 63 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    CHAR            reduce using rule 63 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    DOUBLE          reduce using rule 63 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    VOID            reduce using rule 63 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    SHORT           reduce using rule 63 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    LONG            reduce using rule 63 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    HEX_INT         reduce using rule 63 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    DOT_REAL        reduce using rule 63 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    EXP_REAL        reduce using rule 63 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    DEC_INT         reduce using rule 63 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    CHARACTER       reduce using rule 63 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    INCREMENT       reduce using rule 63 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    DECREMENT       reduce using rule 63 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)
    $end            reduce using rule 63 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON .)


state 167

    (61) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .

    RBRACE          reduce using rule 61 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    LPAREN          reduce using rule 61 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    VARIABLE        reduce using rule 61 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    FOR             reduce using rule 61 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    WHILE           reduce using rule 61 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    DO              reduce using rule 61 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    BREAK           reduce using rule 61 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    CONTINUE        reduce using rule 61 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    RETURN          reduce using rule 61 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    INT             reduce using rule 61 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    FLOAT           reduce using rule 61 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    CHAR            reduce using rule 61 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    DOUBLE          reduce using rule 61 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    VOID            reduce using rule 61 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    SHORT           reduce using rule 61 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    LONG            reduce using rule 61 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    HEX_INT         reduce using rule 61 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    DOT_REAL        reduce using rule 61 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    EXP_REAL        reduce using rule 61 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    DEC_INT         reduce using rule 61 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    CHARACTER       reduce using rule 61 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    INCREMENT       reduce using rule 61 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    DECREMENT       reduce using rule 61 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)
    $end            reduce using rule 61 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement .)


state 168

    (62) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE . statements RBRACE
    (64) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE . RBRACE
    (1) statements -> . statements statement
    (2) statements -> . statement
    (3) statement -> . declaration
    (4) statement -> . exp SEMI_COLON
    (5) statement -> . iterative_statement
    (6) statement -> . function
    (7) statement -> . constant_statement
    (12) declaration -> . type enum_list SEMI_COLON
    (29) exp -> . exp ADD exp
    (30) exp -> . exp MINUS exp
    (31) exp -> . exp MULT exp
    (32) exp -> . exp DIV exp
    (33) exp -> . exp MOD exp
    (34) exp -> . exp L_OP exp
    (35) exp -> . exp G_OP exp
    (36) exp -> . exp LE_OP exp
    (37) exp -> . exp GE_OP exp
    (38) exp -> . exp NOTEQUALS exp
    (39) exp -> . exp EQUALS_OP exp
    (40) exp -> . exp OR_OP exp
    (41) exp -> . exp AND_OP exp
    (42) exp -> . exp MUL_ASSIGN exp
    (43) exp -> . exp DIV_ASSIGN exp
    (44) exp -> . exp MOD_ASSIGN exp
    (45) exp -> . exp ADD_ASSIGN exp
    (46) exp -> . exp SUB_ASSIGN exp
    (47) exp -> . exp LEFT_ASSIGN exp
    (48) exp -> . exp RIGHT_ASSIGN exp
    (49) exp -> . exp AND_ASSIGN exp
    (50) exp -> . exp XOR_ASSIGN exp
    (51) exp -> . exp OR_ASSIGN exp
    (52) exp -> . exp EQUALS exp
    (53) exp -> . unary_expression
    (54) exp -> . LPAREN exp RPAREN
    (55) exp -> . constant
    (56) exp -> . VARIABLE
    (61) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (62) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE
    (63) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (64) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE
    (65) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (66) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (67) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE statements RBRACE
    (68) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (69) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (70) iterative_statement -> . DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (71) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (72) iterative_statement -> . DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (75) function -> . normal_function
    (76) function -> . main_function
    (8) constant_statement -> . BREAK SEMI_COLON
    (9) constant_statement -> . CONTINUE SEMI_COLON
    (10) constant_statement -> . RETURN SEMI_COLON
    (11) constant_statement -> . RETURN exp SEMI_COLON
    (17) type -> . INT
    (18) type -> . FLOAT
    (19) type -> . CHAR
    (20) type -> . DOUBLE
    (21) type -> . VOID
    (22) type -> . SHORT
    (23) type -> . LONG
    (57) unary_expression -> . VARIABLE unary_operator
    (58) unary_expression -> . unary_operator VARIABLE
    (24) constant -> . HEX_INT
    (25) constant -> . DOT_REAL
    (26) constant -> . EXP_REAL
    (27) constant -> . DEC_INT
    (28) constant -> . CHARACTER
    (79) normal_function -> . type VARIABLE LPAREN arguments RPAREN LBRACE statements RBRACE
    (80) normal_function -> . type VARIABLE LPAREN arguments RPAREN LBRACE RBRACE
    (77) main_function -> . type MAIN LPAREN arguments RPAREN LBRACE statements RBRACE
    (78) main_function -> . type MAIN LPAREN arguments RPAREN LBRACE RBRACE
    (59) unary_operator -> . INCREMENT
    (60) unary_operator -> . DECREMENT

    RBRACE          shift and go to state 170
    LPAREN          shift and go to state 21
    VARIABLE        shift and go to state 23
    FOR             shift and go to state 20
    WHILE           shift and go to state 8
    DO              shift and go to state 4
    BREAK           shift and go to state 32
    CONTINUE        shift and go to state 33
    RETURN          shift and go to state 1
    INT             shift and go to state 27
    FLOAT           shift and go to state 31
    CHAR            shift and go to state 7
    DOUBLE          shift and go to state 28
    VOID            shift and go to state 5
    SHORT           shift and go to state 9
    LONG            shift and go to state 35
    HEX_INT         shift and go to state 29
    DOT_REAL        shift and go to state 16
    EXP_REAL        shift and go to state 13
    DEC_INT         shift and go to state 14
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 12
    DECREMENT       shift and go to state 25

    function                       shift and go to state 19
    main_function                  shift and go to state 2
    statements                     shift and go to state 169
    statement                      shift and go to state 15
    unary_expression               shift and go to state 24
    type                           shift and go to state 17
    normal_function                shift and go to state 30
    exp                            shift and go to state 34
    declaration                    shift and go to state 22
    constant_statement             shift and go to state 26
    constant                       shift and go to state 10
    iterative_statement            shift and go to state 11
    unary_operator                 shift and go to state 18

state 169

    (62) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements . RBRACE
    (1) statements -> statements . statement
    (3) statement -> . declaration
    (4) statement -> . exp SEMI_COLON
    (5) statement -> . iterative_statement
    (6) statement -> . function
    (7) statement -> . constant_statement
    (12) declaration -> . type enum_list SEMI_COLON
    (29) exp -> . exp ADD exp
    (30) exp -> . exp MINUS exp
    (31) exp -> . exp MULT exp
    (32) exp -> . exp DIV exp
    (33) exp -> . exp MOD exp
    (34) exp -> . exp L_OP exp
    (35) exp -> . exp G_OP exp
    (36) exp -> . exp LE_OP exp
    (37) exp -> . exp GE_OP exp
    (38) exp -> . exp NOTEQUALS exp
    (39) exp -> . exp EQUALS_OP exp
    (40) exp -> . exp OR_OP exp
    (41) exp -> . exp AND_OP exp
    (42) exp -> . exp MUL_ASSIGN exp
    (43) exp -> . exp DIV_ASSIGN exp
    (44) exp -> . exp MOD_ASSIGN exp
    (45) exp -> . exp ADD_ASSIGN exp
    (46) exp -> . exp SUB_ASSIGN exp
    (47) exp -> . exp LEFT_ASSIGN exp
    (48) exp -> . exp RIGHT_ASSIGN exp
    (49) exp -> . exp AND_ASSIGN exp
    (50) exp -> . exp XOR_ASSIGN exp
    (51) exp -> . exp OR_ASSIGN exp
    (52) exp -> . exp EQUALS exp
    (53) exp -> . unary_expression
    (54) exp -> . LPAREN exp RPAREN
    (55) exp -> . constant
    (56) exp -> . VARIABLE
    (61) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN statement
    (62) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE
    (63) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN SEMI_COLON
    (64) iterative_statement -> . FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE
    (65) iterative_statement -> . WHILE LPAREN exp RPAREN statement
    (66) iterative_statement -> . WHILE LPAREN exp RPAREN SEMI_COLON
    (67) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE statements RBRACE
    (68) iterative_statement -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (69) iterative_statement -> . DO statement WHILE LPAREN exp RPAREN SEMI_COLON
    (70) iterative_statement -> . DO LBRACE statements RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (71) iterative_statement -> . DO SEMI_COLON WHILE LPAREN exp RPAREN SEMI_COLON
    (72) iterative_statement -> . DO LBRACE RBRACE WHILE LPAREN exp RPAREN SEMI_COLON
    (75) function -> . normal_function
    (76) function -> . main_function
    (8) constant_statement -> . BREAK SEMI_COLON
    (9) constant_statement -> . CONTINUE SEMI_COLON
    (10) constant_statement -> . RETURN SEMI_COLON
    (11) constant_statement -> . RETURN exp SEMI_COLON
    (17) type -> . INT
    (18) type -> . FLOAT
    (19) type -> . CHAR
    (20) type -> . DOUBLE
    (21) type -> . VOID
    (22) type -> . SHORT
    (23) type -> . LONG
    (57) unary_expression -> . VARIABLE unary_operator
    (58) unary_expression -> . unary_operator VARIABLE
    (24) constant -> . HEX_INT
    (25) constant -> . DOT_REAL
    (26) constant -> . EXP_REAL
    (27) constant -> . DEC_INT
    (28) constant -> . CHARACTER
    (79) normal_function -> . type VARIABLE LPAREN arguments RPAREN LBRACE statements RBRACE
    (80) normal_function -> . type VARIABLE LPAREN arguments RPAREN LBRACE RBRACE
    (77) main_function -> . type MAIN LPAREN arguments RPAREN LBRACE statements RBRACE
    (78) main_function -> . type MAIN LPAREN arguments RPAREN LBRACE RBRACE
    (59) unary_operator -> . INCREMENT
    (60) unary_operator -> . DECREMENT

    RBRACE          shift and go to state 171
    LPAREN          shift and go to state 21
    VARIABLE        shift and go to state 23
    FOR             shift and go to state 20
    WHILE           shift and go to state 8
    DO              shift and go to state 4
    BREAK           shift and go to state 32
    CONTINUE        shift and go to state 33
    RETURN          shift and go to state 1
    INT             shift and go to state 27
    FLOAT           shift and go to state 31
    CHAR            shift and go to state 7
    DOUBLE          shift and go to state 28
    VOID            shift and go to state 5
    SHORT           shift and go to state 9
    LONG            shift and go to state 35
    HEX_INT         shift and go to state 29
    DOT_REAL        shift and go to state 16
    EXP_REAL        shift and go to state 13
    DEC_INT         shift and go to state 14
    CHARACTER       shift and go to state 6
    INCREMENT       shift and go to state 12
    DECREMENT       shift and go to state 25

    function                       shift and go to state 19
    main_function                  shift and go to state 2
    statement                      shift and go to state 38
    unary_expression               shift and go to state 24
    type                           shift and go to state 17
    normal_function                shift and go to state 30
    exp                            shift and go to state 34
    declaration                    shift and go to state 22
    constant_statement             shift and go to state 26
    constant                       shift and go to state 10
    iterative_statement            shift and go to state 11
    unary_operator                 shift and go to state 18

state 170

    (64) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE .

    RBRACE          reduce using rule 64 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE .)
    LPAREN          reduce using rule 64 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE .)
    VARIABLE        reduce using rule 64 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE .)
    FOR             reduce using rule 64 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE .)
    WHILE           reduce using rule 64 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE .)
    DO              reduce using rule 64 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE .)
    BREAK           reduce using rule 64 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE .)
    CONTINUE        reduce using rule 64 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE .)
    RETURN          reduce using rule 64 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE .)
    INT             reduce using rule 64 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE .)
    FLOAT           reduce using rule 64 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE .)
    CHAR            reduce using rule 64 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE .)
    DOUBLE          reduce using rule 64 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE .)
    VOID            reduce using rule 64 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE .)
    SHORT           reduce using rule 64 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE .)
    LONG            reduce using rule 64 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE .)
    HEX_INT         reduce using rule 64 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE .)
    DOT_REAL        reduce using rule 64 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE .)
    EXP_REAL        reduce using rule 64 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE .)
    DEC_INT         reduce using rule 64 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE .)
    CHARACTER       reduce using rule 64 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE .)
    INCREMENT       reduce using rule 64 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE .)
    DECREMENT       reduce using rule 64 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE .)
    $end            reduce using rule 64 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE RBRACE .)


state 171

    (62) iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE .

    RBRACE          reduce using rule 62 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE .)
    LPAREN          reduce using rule 62 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE .)
    VARIABLE        reduce using rule 62 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE .)
    FOR             reduce using rule 62 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE .)
    WHILE           reduce using rule 62 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE .)
    DO              reduce using rule 62 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE .)
    BREAK           reduce using rule 62 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE .)
    CONTINUE        reduce using rule 62 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE .)
    RETURN          reduce using rule 62 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE .)
    INT             reduce using rule 62 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE .)
    FLOAT           reduce using rule 62 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE .)
    CHAR            reduce using rule 62 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE .)
    DOUBLE          reduce using rule 62 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE .)
    VOID            reduce using rule 62 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE .)
    SHORT           reduce using rule 62 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE .)
    LONG            reduce using rule 62 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE .)
    HEX_INT         reduce using rule 62 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE .)
    DOT_REAL        reduce using rule 62 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE .)
    EXP_REAL        reduce using rule 62 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE .)
    DEC_INT         reduce using rule 62 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE .)
    CHARACTER       reduce using rule 62 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE .)
    INCREMENT       reduce using rule 62 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE .)
    DECREMENT       reduce using rule 62 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE .)
    $end            reduce using rule 62 (iterative_statement -> FOR LPAREN iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp RPAREN LBRACE statements RBRACE .)

