Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    RIGHT_OP
    RETURN
    DEFAULT
    LEFT_OP
    COLON
    TRUE
    MAIN
    NEWLINE
    CASE
    LBIG
    TILDA
    COMMA
    DOT
    SIZEOF
    SINGLE_QUOTES
    ANDI
    AND
    CONDOP
    BREAK
    CONTINUE
    DOUBLE_QUOTES
    NOT
    SWITCH
    RBIG
    OR

Grammar

Rule 0     S' -> statements
Rule 1     statements -> statements statement SEMI_COLON
Rule 2     statements -> statement SEMI_COLON
Rule 3     statements -> COMMENT
Rule 4     statements -> COMMENT statements
Rule 5     statement -> declaration
Rule 6     statement -> assignment_statement
Rule 7     statement -> exp
Rule 8     statement -> iterative_statement
Rule 9     declaration -> type VARIABLE
Rule 10    declaration -> type VARIABLE EQUALS constant
Rule 11    declaration -> type VARIABLE EQUALS exp
Rule 12    type -> INT
Rule 13    type -> FLOAT
Rule 14    type -> CHAR
Rule 15    type -> DOUBLE
Rule 16    type -> VOID
Rule 17    type -> SHORT
Rule 18    type -> LONG
Rule 19    constant -> HEX_INT
Rule 20    constant -> DOT_REAL
Rule 21    constant -> EXP_REAL
Rule 22    constant -> DEC_INT
Rule 23    constant -> CHARACTER
Rule 24    assignment_statement -> VARIABLE EQUALS exp
Rule 25    assignment_statement -> VARIABLE assignment_operator exp
Rule 26    assignment_operator -> MUL_ASSIGN
Rule 27    assignment_operator -> DIV_ASSIGN
Rule 28    assignment_operator -> MOD_ASSIGN
Rule 29    assignment_operator -> ADD_ASSIGN
Rule 30    assignment_operator -> SUB_ASSIGN
Rule 31    assignment_operator -> LEFT_ASSIGN
Rule 32    assignment_operator -> RIGHT_ASSIGN
Rule 33    assignment_operator -> AND_ASSIGN
Rule 34    assignment_operator -> XOR_ASSIGN
Rule 35    assignment_operator -> OR_ASSIGN
Rule 36    exp -> exp operator exp
Rule 37    exp -> constant
Rule 38    exp -> VARIABLE
Rule 39    exp -> VARIABLE unary_operator
Rule 40    exp -> unary_operator VARIABLE
Rule 41    exp -> comparison_expression
Rule 42    exp -> logical_expression
Rule 43    unary_operator -> INCREMENT
Rule 44    unary_operator -> DECREMENT
Rule 45    iterative_statement -> FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN statement SEMI_COLON
Rule 46    iterative_statement -> FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN LBRACE statements RBRACE
Rule 47    iterative_statement -> WHILE LPAREN conditional_expression RPAREN statement SEMI_COLON
Rule 48    iterative_statement -> WHILE LPAREN conditional_expression RPAREN LBRACE statements RBRACE
Rule 49    iterative_statement -> DO statement SEMI_COLON WHILE LPAREN conditional_expression RPAREN SEMI_COLON
Rule 50    iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN conditional_expression RPAREN SEMI_COLON
Rule 51    action -> assignment_statement
Rule 52    action -> exp
Rule 53    conditional_statement -> IF LPAREN conditional_expression RPAREN statement
Rule 54    conditional_statement -> IF LPAREN conditional_expression RPAREN LBRACE statements RBRACE
Rule 55    conditional_statement -> IF LPAREN conditional_expression RPAREN statement ELSE statement
Rule 56    conditional_statement -> IF LPAREN conditional_expression RPAREN statement ELSE LBRACE statements RBRACE
Rule 57    conditional_statement -> IF LPAREN conditional_expression RPAREN LBRACE statements RBRACE ELSE statement
Rule 58    conditional_statement -> IF LPAREN conditional_expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
Rule 59    conditional_expression -> comparison_expression
Rule 60    conditional_expression -> logical_expression
Rule 61    conditional_expression -> constant
Rule 62    conditional_expression -> exp
Rule 63    conditional_expression -> assignment_statement
Rule 64    comparison_expression -> exp comparison_operator exp
Rule 65    logical_expression -> exp logical_operator exp
Rule 66    comparison_operator -> L_OP
Rule 67    comparison_operator -> G_OP
Rule 68    comparison_operator -> LE_OP
Rule 69    comparison_operator -> GE_OP
Rule 70    comparison_operator -> NOTEQUALS
Rule 71    comparison_operator -> EQUALS_OP
Rule 72    logical_operator -> OR_OP
Rule 73    logical_operator -> AND_OP
Rule 74    operator -> ADD
Rule 75    operator -> MINUS
Rule 76    operator -> MULT
Rule 77    operator -> DIV
Rule 78    operator -> MOD
Rule 79    empty -> <empty>

Terminals, with rules where they appear

ADD                  : 74
ADD_ASSIGN           : 29
AND                  : 
ANDI                 : 
AND_ASSIGN           : 33
AND_OP               : 73
BREAK                : 
CASE                 : 
CHAR                 : 14
CHARACTER            : 23
COLON                : 
COMMA                : 
COMMENT              : 3 4
CONDOP               : 
CONTINUE             : 
DECREMENT            : 44
DEC_INT              : 22
DEFAULT              : 
DIV                  : 77
DIV_ASSIGN           : 27
DO                   : 49 50
DOT                  : 
DOT_REAL             : 20
DOUBLE               : 15
DOUBLE_QUOTES        : 
ELSE                 : 55 56 57 58
EQUALS               : 10 11 24
EQUALS_OP            : 71
EXP_REAL             : 21
FLOAT                : 13
FOR                  : 45 46
GE_OP                : 69
G_OP                 : 67
HEX_INT              : 19
IF                   : 53 54 55 56 57 58
INCREMENT            : 43
INT                  : 12
LBIG                 : 
LBRACE               : 46 48 50 54 56 57 58 58
LEFT_ASSIGN          : 31
LEFT_OP              : 
LE_OP                : 68
LONG                 : 18
LPAREN               : 45 46 47 48 49 50 53 54 55 56 57 58
L_OP                 : 66
MAIN                 : 
MINUS                : 75
MOD                  : 78
MOD_ASSIGN           : 28
MULT                 : 76
MUL_ASSIGN           : 26
NEWLINE              : 
NOT                  : 
NOTEQUALS            : 70
OR                   : 
OR_ASSIGN            : 35
OR_OP                : 72
RBIG                 : 
RBRACE               : 46 48 50 54 56 57 58 58
RETURN               : 
RIGHT_ASSIGN         : 32
RIGHT_OP             : 
RPAREN               : 45 46 47 48 49 50 53 54 55 56 57 58
SEMI_COLON           : 1 2 45 45 45 46 46 47 49 49 50
SHORT                : 17
SINGLE_QUOTES        : 
SIZEOF               : 
SUB_ASSIGN           : 30
SWITCH               : 
TILDA                : 
TRUE                 : 
VARIABLE             : 9 10 11 24 25 38 39 40
VOID                 : 16
WHILE                : 47 48 49 50
XOR_ASSIGN           : 34
error                : 

Nonterminals, with rules where they appear

action               : 45 46
assignment_operator  : 25
assignment_statement : 6 45 46 51 63
comparison_expression : 41 59
comparison_operator  : 64
conditional_expression : 45 46 47 48 49 50 53 54 55 56 57 58
conditional_statement : 
constant             : 10 37 61
declaration          : 5
empty                : 
exp                  : 7 11 24 25 36 36 52 62 64 64 65 65
iterative_statement  : 8
logical_expression   : 42 60
logical_operator     : 65
operator             : 36
statement            : 1 2 45 47 49 53 55 55 56 57
statements           : 1 4 46 48 50 54 56 57 58 58 0
type                 : 9 10 11
unary_operator       : 39 40

Parsing method: LALR

state 0

    (0) S' -> . statements
    (1) statements -> . statements statement SEMI_COLON
    (2) statements -> . statement SEMI_COLON
    (3) statements -> . COMMENT
    (4) statements -> . COMMENT statements
    (5) statement -> . declaration
    (6) statement -> . assignment_statement
    (7) statement -> . exp
    (8) statement -> . iterative_statement
    (9) declaration -> . type VARIABLE
    (10) declaration -> . type VARIABLE EQUALS constant
    (11) declaration -> . type VARIABLE EQUALS exp
    (24) assignment_statement -> . VARIABLE EQUALS exp
    (25) assignment_statement -> . VARIABLE assignment_operator exp
    (36) exp -> . exp operator exp
    (37) exp -> . constant
    (38) exp -> . VARIABLE
    (39) exp -> . VARIABLE unary_operator
    (40) exp -> . unary_operator VARIABLE
    (41) exp -> . comparison_expression
    (42) exp -> . logical_expression
    (45) iterative_statement -> . FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN statement SEMI_COLON
    (46) iterative_statement -> . FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN LBRACE statements RBRACE
    (47) iterative_statement -> . WHILE LPAREN conditional_expression RPAREN statement SEMI_COLON
    (48) iterative_statement -> . WHILE LPAREN conditional_expression RPAREN LBRACE statements RBRACE
    (49) iterative_statement -> . DO statement SEMI_COLON WHILE LPAREN conditional_expression RPAREN SEMI_COLON
    (50) iterative_statement -> . DO LBRACE statements RBRACE WHILE LPAREN conditional_expression RPAREN SEMI_COLON
    (12) type -> . INT
    (13) type -> . FLOAT
    (14) type -> . CHAR
    (15) type -> . DOUBLE
    (16) type -> . VOID
    (17) type -> . SHORT
    (18) type -> . LONG
    (19) constant -> . HEX_INT
    (20) constant -> . DOT_REAL
    (21) constant -> . EXP_REAL
    (22) constant -> . DEC_INT
    (23) constant -> . CHARACTER
    (43) unary_operator -> . INCREMENT
    (44) unary_operator -> . DECREMENT
    (64) comparison_expression -> . exp comparison_operator exp
    (65) logical_expression -> . exp logical_operator exp

    COMMENT         shift and go to state 13
    VARIABLE        shift and go to state 23
    FOR             shift and go to state 21
    WHILE           shift and go to state 10
    DO              shift and go to state 1
    INT             shift and go to state 24
    FLOAT           shift and go to state 27
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 25
    VOID            shift and go to state 4
    SHORT           shift and go to state 2
    LONG            shift and go to state 17
    HEX_INT         shift and go to state 26
    DOT_REAL        shift and go to state 28
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 7
    CHARACTER       shift and go to state 5
    INCREMENT       shift and go to state 14
    DECREMENT       shift and go to state 30

    statements                     shift and go to state 3
    statement                      shift and go to state 18
    type                           shift and go to state 19
    assignment_statement           shift and go to state 16
    comparison_expression          shift and go to state 6
    logical_expression             shift and go to state 9
    exp                            shift and go to state 29
    declaration                    shift and go to state 22
    constant                       shift and go to state 11
    iterative_statement            shift and go to state 12
    unary_operator                 shift and go to state 20

state 1

    (49) iterative_statement -> DO . statement SEMI_COLON WHILE LPAREN conditional_expression RPAREN SEMI_COLON
    (50) iterative_statement -> DO . LBRACE statements RBRACE WHILE LPAREN conditional_expression RPAREN SEMI_COLON
    (5) statement -> . declaration
    (6) statement -> . assignment_statement
    (7) statement -> . exp
    (8) statement -> . iterative_statement
    (9) declaration -> . type VARIABLE
    (10) declaration -> . type VARIABLE EQUALS constant
    (11) declaration -> . type VARIABLE EQUALS exp
    (24) assignment_statement -> . VARIABLE EQUALS exp
    (25) assignment_statement -> . VARIABLE assignment_operator exp
    (36) exp -> . exp operator exp
    (37) exp -> . constant
    (38) exp -> . VARIABLE
    (39) exp -> . VARIABLE unary_operator
    (40) exp -> . unary_operator VARIABLE
    (41) exp -> . comparison_expression
    (42) exp -> . logical_expression
    (45) iterative_statement -> . FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN statement SEMI_COLON
    (46) iterative_statement -> . FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN LBRACE statements RBRACE
    (47) iterative_statement -> . WHILE LPAREN conditional_expression RPAREN statement SEMI_COLON
    (48) iterative_statement -> . WHILE LPAREN conditional_expression RPAREN LBRACE statements RBRACE
    (49) iterative_statement -> . DO statement SEMI_COLON WHILE LPAREN conditional_expression RPAREN SEMI_COLON
    (50) iterative_statement -> . DO LBRACE statements RBRACE WHILE LPAREN conditional_expression RPAREN SEMI_COLON
    (12) type -> . INT
    (13) type -> . FLOAT
    (14) type -> . CHAR
    (15) type -> . DOUBLE
    (16) type -> . VOID
    (17) type -> . SHORT
    (18) type -> . LONG
    (19) constant -> . HEX_INT
    (20) constant -> . DOT_REAL
    (21) constant -> . EXP_REAL
    (22) constant -> . DEC_INT
    (23) constant -> . CHARACTER
    (43) unary_operator -> . INCREMENT
    (44) unary_operator -> . DECREMENT
    (64) comparison_expression -> . exp comparison_operator exp
    (65) logical_expression -> . exp logical_operator exp

    LBRACE          shift and go to state 32
    VARIABLE        shift and go to state 23
    FOR             shift and go to state 21
    WHILE           shift and go to state 10
    DO              shift and go to state 1
    INT             shift and go to state 24
    FLOAT           shift and go to state 27
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 25
    VOID            shift and go to state 4
    SHORT           shift and go to state 2
    LONG            shift and go to state 17
    HEX_INT         shift and go to state 26
    DOT_REAL        shift and go to state 28
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 7
    CHARACTER       shift and go to state 5
    INCREMENT       shift and go to state 14
    DECREMENT       shift and go to state 30

    statement                      shift and go to state 31
    type                           shift and go to state 19
    assignment_statement           shift and go to state 16
    comparison_expression          shift and go to state 6
    logical_expression             shift and go to state 9
    exp                            shift and go to state 29
    declaration                    shift and go to state 22
    constant                       shift and go to state 11
    iterative_statement            shift and go to state 12
    unary_operator                 shift and go to state 20

state 2

    (17) type -> SHORT .

    VARIABLE        reduce using rule 17 (type -> SHORT .)


state 3

    (0) S' -> statements .
    (1) statements -> statements . statement SEMI_COLON
    (5) statement -> . declaration
    (6) statement -> . assignment_statement
    (7) statement -> . exp
    (8) statement -> . iterative_statement
    (9) declaration -> . type VARIABLE
    (10) declaration -> . type VARIABLE EQUALS constant
    (11) declaration -> . type VARIABLE EQUALS exp
    (24) assignment_statement -> . VARIABLE EQUALS exp
    (25) assignment_statement -> . VARIABLE assignment_operator exp
    (36) exp -> . exp operator exp
    (37) exp -> . constant
    (38) exp -> . VARIABLE
    (39) exp -> . VARIABLE unary_operator
    (40) exp -> . unary_operator VARIABLE
    (41) exp -> . comparison_expression
    (42) exp -> . logical_expression
    (45) iterative_statement -> . FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN statement SEMI_COLON
    (46) iterative_statement -> . FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN LBRACE statements RBRACE
    (47) iterative_statement -> . WHILE LPAREN conditional_expression RPAREN statement SEMI_COLON
    (48) iterative_statement -> . WHILE LPAREN conditional_expression RPAREN LBRACE statements RBRACE
    (49) iterative_statement -> . DO statement SEMI_COLON WHILE LPAREN conditional_expression RPAREN SEMI_COLON
    (50) iterative_statement -> . DO LBRACE statements RBRACE WHILE LPAREN conditional_expression RPAREN SEMI_COLON
    (12) type -> . INT
    (13) type -> . FLOAT
    (14) type -> . CHAR
    (15) type -> . DOUBLE
    (16) type -> . VOID
    (17) type -> . SHORT
    (18) type -> . LONG
    (19) constant -> . HEX_INT
    (20) constant -> . DOT_REAL
    (21) constant -> . EXP_REAL
    (22) constant -> . DEC_INT
    (23) constant -> . CHARACTER
    (43) unary_operator -> . INCREMENT
    (44) unary_operator -> . DECREMENT
    (64) comparison_expression -> . exp comparison_operator exp
    (65) logical_expression -> . exp logical_operator exp

    VARIABLE        shift and go to state 23
    FOR             shift and go to state 21
    WHILE           shift and go to state 10
    DO              shift and go to state 1
    INT             shift and go to state 24
    FLOAT           shift and go to state 27
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 25
    VOID            shift and go to state 4
    SHORT           shift and go to state 2
    LONG            shift and go to state 17
    HEX_INT         shift and go to state 26
    DOT_REAL        shift and go to state 28
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 7
    CHARACTER       shift and go to state 5
    INCREMENT       shift and go to state 14
    DECREMENT       shift and go to state 30

    statement                      shift and go to state 33
    type                           shift and go to state 19
    assignment_statement           shift and go to state 16
    comparison_expression          shift and go to state 6
    logical_expression             shift and go to state 9
    exp                            shift and go to state 29
    declaration                    shift and go to state 22
    constant                       shift and go to state 11
    iterative_statement            shift and go to state 12
    unary_operator                 shift and go to state 20

state 4

    (16) type -> VOID .

    VARIABLE        reduce using rule 16 (type -> VOID .)


state 5

    (23) constant -> CHARACTER .

    ADD             reduce using rule 23 (constant -> CHARACTER .)
    MINUS           reduce using rule 23 (constant -> CHARACTER .)
    MULT            reduce using rule 23 (constant -> CHARACTER .)
    DIV             reduce using rule 23 (constant -> CHARACTER .)
    MOD             reduce using rule 23 (constant -> CHARACTER .)
    L_OP            reduce using rule 23 (constant -> CHARACTER .)
    G_OP            reduce using rule 23 (constant -> CHARACTER .)
    LE_OP           reduce using rule 23 (constant -> CHARACTER .)
    GE_OP           reduce using rule 23 (constant -> CHARACTER .)
    NOTEQUALS       reduce using rule 23 (constant -> CHARACTER .)
    EQUALS_OP       reduce using rule 23 (constant -> CHARACTER .)
    OR_OP           reduce using rule 23 (constant -> CHARACTER .)
    AND_OP          reduce using rule 23 (constant -> CHARACTER .)
    SEMI_COLON      reduce using rule 23 (constant -> CHARACTER .)
    RPAREN          reduce using rule 23 (constant -> CHARACTER .)


state 6

    (41) exp -> comparison_expression .

    ADD             reduce using rule 41 (exp -> comparison_expression .)
    MINUS           reduce using rule 41 (exp -> comparison_expression .)
    MULT            reduce using rule 41 (exp -> comparison_expression .)
    DIV             reduce using rule 41 (exp -> comparison_expression .)
    MOD             reduce using rule 41 (exp -> comparison_expression .)
    L_OP            reduce using rule 41 (exp -> comparison_expression .)
    G_OP            reduce using rule 41 (exp -> comparison_expression .)
    LE_OP           reduce using rule 41 (exp -> comparison_expression .)
    GE_OP           reduce using rule 41 (exp -> comparison_expression .)
    NOTEQUALS       reduce using rule 41 (exp -> comparison_expression .)
    EQUALS_OP       reduce using rule 41 (exp -> comparison_expression .)
    OR_OP           reduce using rule 41 (exp -> comparison_expression .)
    AND_OP          reduce using rule 41 (exp -> comparison_expression .)
    SEMI_COLON      reduce using rule 41 (exp -> comparison_expression .)
    RPAREN          reduce using rule 41 (exp -> comparison_expression .)


state 7

    (22) constant -> DEC_INT .

    ADD             reduce using rule 22 (constant -> DEC_INT .)
    MINUS           reduce using rule 22 (constant -> DEC_INT .)
    MULT            reduce using rule 22 (constant -> DEC_INT .)
    DIV             reduce using rule 22 (constant -> DEC_INT .)
    MOD             reduce using rule 22 (constant -> DEC_INT .)
    L_OP            reduce using rule 22 (constant -> DEC_INT .)
    G_OP            reduce using rule 22 (constant -> DEC_INT .)
    LE_OP           reduce using rule 22 (constant -> DEC_INT .)
    GE_OP           reduce using rule 22 (constant -> DEC_INT .)
    NOTEQUALS       reduce using rule 22 (constant -> DEC_INT .)
    EQUALS_OP       reduce using rule 22 (constant -> DEC_INT .)
    OR_OP           reduce using rule 22 (constant -> DEC_INT .)
    AND_OP          reduce using rule 22 (constant -> DEC_INT .)
    SEMI_COLON      reduce using rule 22 (constant -> DEC_INT .)
    RPAREN          reduce using rule 22 (constant -> DEC_INT .)


state 8

    (14) type -> CHAR .

    VARIABLE        reduce using rule 14 (type -> CHAR .)


state 9

    (42) exp -> logical_expression .

    ADD             reduce using rule 42 (exp -> logical_expression .)
    MINUS           reduce using rule 42 (exp -> logical_expression .)
    MULT            reduce using rule 42 (exp -> logical_expression .)
    DIV             reduce using rule 42 (exp -> logical_expression .)
    MOD             reduce using rule 42 (exp -> logical_expression .)
    L_OP            reduce using rule 42 (exp -> logical_expression .)
    G_OP            reduce using rule 42 (exp -> logical_expression .)
    LE_OP           reduce using rule 42 (exp -> logical_expression .)
    GE_OP           reduce using rule 42 (exp -> logical_expression .)
    NOTEQUALS       reduce using rule 42 (exp -> logical_expression .)
    EQUALS_OP       reduce using rule 42 (exp -> logical_expression .)
    OR_OP           reduce using rule 42 (exp -> logical_expression .)
    AND_OP          reduce using rule 42 (exp -> logical_expression .)
    SEMI_COLON      reduce using rule 42 (exp -> logical_expression .)
    RPAREN          reduce using rule 42 (exp -> logical_expression .)


state 10

    (47) iterative_statement -> WHILE . LPAREN conditional_expression RPAREN statement SEMI_COLON
    (48) iterative_statement -> WHILE . LPAREN conditional_expression RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 34


state 11

    (37) exp -> constant .

    ADD             reduce using rule 37 (exp -> constant .)
    MINUS           reduce using rule 37 (exp -> constant .)
    MULT            reduce using rule 37 (exp -> constant .)
    DIV             reduce using rule 37 (exp -> constant .)
    MOD             reduce using rule 37 (exp -> constant .)
    L_OP            reduce using rule 37 (exp -> constant .)
    G_OP            reduce using rule 37 (exp -> constant .)
    LE_OP           reduce using rule 37 (exp -> constant .)
    GE_OP           reduce using rule 37 (exp -> constant .)
    NOTEQUALS       reduce using rule 37 (exp -> constant .)
    EQUALS_OP       reduce using rule 37 (exp -> constant .)
    OR_OP           reduce using rule 37 (exp -> constant .)
    AND_OP          reduce using rule 37 (exp -> constant .)
    SEMI_COLON      reduce using rule 37 (exp -> constant .)
    RPAREN          reduce using rule 37 (exp -> constant .)


state 12

    (8) statement -> iterative_statement .

    SEMI_COLON      reduce using rule 8 (statement -> iterative_statement .)


state 13

    (3) statements -> COMMENT .
    (4) statements -> COMMENT . statements
    (1) statements -> . statements statement SEMI_COLON
    (2) statements -> . statement SEMI_COLON
    (3) statements -> . COMMENT
    (4) statements -> . COMMENT statements
    (5) statement -> . declaration
    (6) statement -> . assignment_statement
    (7) statement -> . exp
    (8) statement -> . iterative_statement
    (9) declaration -> . type VARIABLE
    (10) declaration -> . type VARIABLE EQUALS constant
    (11) declaration -> . type VARIABLE EQUALS exp
    (24) assignment_statement -> . VARIABLE EQUALS exp
    (25) assignment_statement -> . VARIABLE assignment_operator exp
    (36) exp -> . exp operator exp
    (37) exp -> . constant
    (38) exp -> . VARIABLE
    (39) exp -> . VARIABLE unary_operator
    (40) exp -> . unary_operator VARIABLE
    (41) exp -> . comparison_expression
    (42) exp -> . logical_expression
    (45) iterative_statement -> . FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN statement SEMI_COLON
    (46) iterative_statement -> . FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN LBRACE statements RBRACE
    (47) iterative_statement -> . WHILE LPAREN conditional_expression RPAREN statement SEMI_COLON
    (48) iterative_statement -> . WHILE LPAREN conditional_expression RPAREN LBRACE statements RBRACE
    (49) iterative_statement -> . DO statement SEMI_COLON WHILE LPAREN conditional_expression RPAREN SEMI_COLON
    (50) iterative_statement -> . DO LBRACE statements RBRACE WHILE LPAREN conditional_expression RPAREN SEMI_COLON
    (12) type -> . INT
    (13) type -> . FLOAT
    (14) type -> . CHAR
    (15) type -> . DOUBLE
    (16) type -> . VOID
    (17) type -> . SHORT
    (18) type -> . LONG
    (19) constant -> . HEX_INT
    (20) constant -> . DOT_REAL
    (21) constant -> . EXP_REAL
    (22) constant -> . DEC_INT
    (23) constant -> . CHARACTER
    (43) unary_operator -> . INCREMENT
    (44) unary_operator -> . DECREMENT
    (64) comparison_expression -> . exp comparison_operator exp
    (65) logical_expression -> . exp logical_operator exp

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for HEX_INT resolved as shift
  ! shift/reduce conflict for DOT_REAL resolved as shift
  ! shift/reduce conflict for EXP_REAL resolved as shift
  ! shift/reduce conflict for DEC_INT resolved as shift
  ! shift/reduce conflict for CHARACTER resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
    RBRACE          reduce using rule 3 (statements -> COMMENT .)
    $end            reduce using rule 3 (statements -> COMMENT .)
    COMMENT         shift and go to state 13
    VARIABLE        shift and go to state 23
    FOR             shift and go to state 21
    WHILE           shift and go to state 10
    DO              shift and go to state 1
    INT             shift and go to state 24
    FLOAT           shift and go to state 27
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 25
    VOID            shift and go to state 4
    SHORT           shift and go to state 2
    LONG            shift and go to state 17
    HEX_INT         shift and go to state 26
    DOT_REAL        shift and go to state 28
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 7
    CHARACTER       shift and go to state 5
    INCREMENT       shift and go to state 14
    DECREMENT       shift and go to state 30

  ! VARIABLE        [ reduce using rule 3 (statements -> COMMENT .) ]
  ! FOR             [ reduce using rule 3 (statements -> COMMENT .) ]
  ! WHILE           [ reduce using rule 3 (statements -> COMMENT .) ]
  ! DO              [ reduce using rule 3 (statements -> COMMENT .) ]
  ! INT             [ reduce using rule 3 (statements -> COMMENT .) ]
  ! FLOAT           [ reduce using rule 3 (statements -> COMMENT .) ]
  ! CHAR            [ reduce using rule 3 (statements -> COMMENT .) ]
  ! DOUBLE          [ reduce using rule 3 (statements -> COMMENT .) ]
  ! VOID            [ reduce using rule 3 (statements -> COMMENT .) ]
  ! SHORT           [ reduce using rule 3 (statements -> COMMENT .) ]
  ! LONG            [ reduce using rule 3 (statements -> COMMENT .) ]
  ! HEX_INT         [ reduce using rule 3 (statements -> COMMENT .) ]
  ! DOT_REAL        [ reduce using rule 3 (statements -> COMMENT .) ]
  ! EXP_REAL        [ reduce using rule 3 (statements -> COMMENT .) ]
  ! DEC_INT         [ reduce using rule 3 (statements -> COMMENT .) ]
  ! CHARACTER       [ reduce using rule 3 (statements -> COMMENT .) ]
  ! INCREMENT       [ reduce using rule 3 (statements -> COMMENT .) ]
  ! DECREMENT       [ reduce using rule 3 (statements -> COMMENT .) ]

    statements                     shift and go to state 35
    statement                      shift and go to state 18
    type                           shift and go to state 19
    assignment_statement           shift and go to state 16
    comparison_expression          shift and go to state 6
    logical_expression             shift and go to state 9
    exp                            shift and go to state 29
    declaration                    shift and go to state 22
    constant                       shift and go to state 11
    iterative_statement            shift and go to state 12
    unary_operator                 shift and go to state 20

state 14

    (43) unary_operator -> INCREMENT .

    VARIABLE        reduce using rule 43 (unary_operator -> INCREMENT .)
    ADD             reduce using rule 43 (unary_operator -> INCREMENT .)
    MINUS           reduce using rule 43 (unary_operator -> INCREMENT .)
    MULT            reduce using rule 43 (unary_operator -> INCREMENT .)
    DIV             reduce using rule 43 (unary_operator -> INCREMENT .)
    MOD             reduce using rule 43 (unary_operator -> INCREMENT .)
    L_OP            reduce using rule 43 (unary_operator -> INCREMENT .)
    G_OP            reduce using rule 43 (unary_operator -> INCREMENT .)
    LE_OP           reduce using rule 43 (unary_operator -> INCREMENT .)
    GE_OP           reduce using rule 43 (unary_operator -> INCREMENT .)
    NOTEQUALS       reduce using rule 43 (unary_operator -> INCREMENT .)
    EQUALS_OP       reduce using rule 43 (unary_operator -> INCREMENT .)
    OR_OP           reduce using rule 43 (unary_operator -> INCREMENT .)
    AND_OP          reduce using rule 43 (unary_operator -> INCREMENT .)
    SEMI_COLON      reduce using rule 43 (unary_operator -> INCREMENT .)
    RPAREN          reduce using rule 43 (unary_operator -> INCREMENT .)


state 15

    (21) constant -> EXP_REAL .

    ADD             reduce using rule 21 (constant -> EXP_REAL .)
    MINUS           reduce using rule 21 (constant -> EXP_REAL .)
    MULT            reduce using rule 21 (constant -> EXP_REAL .)
    DIV             reduce using rule 21 (constant -> EXP_REAL .)
    MOD             reduce using rule 21 (constant -> EXP_REAL .)
    L_OP            reduce using rule 21 (constant -> EXP_REAL .)
    G_OP            reduce using rule 21 (constant -> EXP_REAL .)
    LE_OP           reduce using rule 21 (constant -> EXP_REAL .)
    GE_OP           reduce using rule 21 (constant -> EXP_REAL .)
    NOTEQUALS       reduce using rule 21 (constant -> EXP_REAL .)
    EQUALS_OP       reduce using rule 21 (constant -> EXP_REAL .)
    OR_OP           reduce using rule 21 (constant -> EXP_REAL .)
    AND_OP          reduce using rule 21 (constant -> EXP_REAL .)
    SEMI_COLON      reduce using rule 21 (constant -> EXP_REAL .)
    RPAREN          reduce using rule 21 (constant -> EXP_REAL .)


state 16

    (6) statement -> assignment_statement .

    SEMI_COLON      reduce using rule 6 (statement -> assignment_statement .)


state 17

    (18) type -> LONG .

    VARIABLE        reduce using rule 18 (type -> LONG .)


state 18

    (2) statements -> statement . SEMI_COLON

    SEMI_COLON      shift and go to state 36


state 19

    (9) declaration -> type . VARIABLE
    (10) declaration -> type . VARIABLE EQUALS constant
    (11) declaration -> type . VARIABLE EQUALS exp

    VARIABLE        shift and go to state 37


state 20

    (40) exp -> unary_operator . VARIABLE

    VARIABLE        shift and go to state 38


state 21

    (45) iterative_statement -> FOR . LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN statement SEMI_COLON
    (46) iterative_statement -> FOR . LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 39


state 22

    (5) statement -> declaration .

    SEMI_COLON      reduce using rule 5 (statement -> declaration .)


state 23

    (24) assignment_statement -> VARIABLE . EQUALS exp
    (25) assignment_statement -> VARIABLE . assignment_operator exp
    (38) exp -> VARIABLE .
    (39) exp -> VARIABLE . unary_operator
    (26) assignment_operator -> . MUL_ASSIGN
    (27) assignment_operator -> . DIV_ASSIGN
    (28) assignment_operator -> . MOD_ASSIGN
    (29) assignment_operator -> . ADD_ASSIGN
    (30) assignment_operator -> . SUB_ASSIGN
    (31) assignment_operator -> . LEFT_ASSIGN
    (32) assignment_operator -> . RIGHT_ASSIGN
    (33) assignment_operator -> . AND_ASSIGN
    (34) assignment_operator -> . XOR_ASSIGN
    (35) assignment_operator -> . OR_ASSIGN
    (43) unary_operator -> . INCREMENT
    (44) unary_operator -> . DECREMENT

    EQUALS          shift and go to state 45
    ADD             reduce using rule 38 (exp -> VARIABLE .)
    MINUS           reduce using rule 38 (exp -> VARIABLE .)
    MULT            reduce using rule 38 (exp -> VARIABLE .)
    DIV             reduce using rule 38 (exp -> VARIABLE .)
    MOD             reduce using rule 38 (exp -> VARIABLE .)
    L_OP            reduce using rule 38 (exp -> VARIABLE .)
    G_OP            reduce using rule 38 (exp -> VARIABLE .)
    LE_OP           reduce using rule 38 (exp -> VARIABLE .)
    GE_OP           reduce using rule 38 (exp -> VARIABLE .)
    NOTEQUALS       reduce using rule 38 (exp -> VARIABLE .)
    EQUALS_OP       reduce using rule 38 (exp -> VARIABLE .)
    OR_OP           reduce using rule 38 (exp -> VARIABLE .)
    AND_OP          reduce using rule 38 (exp -> VARIABLE .)
    SEMI_COLON      reduce using rule 38 (exp -> VARIABLE .)
    RPAREN          reduce using rule 38 (exp -> VARIABLE .)
    MUL_ASSIGN      shift and go to state 47
    DIV_ASSIGN      shift and go to state 52
    MOD_ASSIGN      shift and go to state 41
    ADD_ASSIGN      shift and go to state 50
    SUB_ASSIGN      shift and go to state 40
    LEFT_ASSIGN     shift and go to state 49
    RIGHT_ASSIGN    shift and go to state 42
    AND_ASSIGN      shift and go to state 46
    XOR_ASSIGN      shift and go to state 43
    OR_ASSIGN       shift and go to state 44
    INCREMENT       shift and go to state 14
    DECREMENT       shift and go to state 30

    assignment_operator            shift and go to state 48
    unary_operator                 shift and go to state 51

state 24

    (12) type -> INT .

    VARIABLE        reduce using rule 12 (type -> INT .)


state 25

    (15) type -> DOUBLE .

    VARIABLE        reduce using rule 15 (type -> DOUBLE .)


state 26

    (19) constant -> HEX_INT .

    ADD             reduce using rule 19 (constant -> HEX_INT .)
    MINUS           reduce using rule 19 (constant -> HEX_INT .)
    MULT            reduce using rule 19 (constant -> HEX_INT .)
    DIV             reduce using rule 19 (constant -> HEX_INT .)
    MOD             reduce using rule 19 (constant -> HEX_INT .)
    L_OP            reduce using rule 19 (constant -> HEX_INT .)
    G_OP            reduce using rule 19 (constant -> HEX_INT .)
    LE_OP           reduce using rule 19 (constant -> HEX_INT .)
    GE_OP           reduce using rule 19 (constant -> HEX_INT .)
    NOTEQUALS       reduce using rule 19 (constant -> HEX_INT .)
    EQUALS_OP       reduce using rule 19 (constant -> HEX_INT .)
    OR_OP           reduce using rule 19 (constant -> HEX_INT .)
    AND_OP          reduce using rule 19 (constant -> HEX_INT .)
    SEMI_COLON      reduce using rule 19 (constant -> HEX_INT .)
    RPAREN          reduce using rule 19 (constant -> HEX_INT .)


state 27

    (13) type -> FLOAT .

    VARIABLE        reduce using rule 13 (type -> FLOAT .)


state 28

    (20) constant -> DOT_REAL .

    ADD             reduce using rule 20 (constant -> DOT_REAL .)
    MINUS           reduce using rule 20 (constant -> DOT_REAL .)
    MULT            reduce using rule 20 (constant -> DOT_REAL .)
    DIV             reduce using rule 20 (constant -> DOT_REAL .)
    MOD             reduce using rule 20 (constant -> DOT_REAL .)
    L_OP            reduce using rule 20 (constant -> DOT_REAL .)
    G_OP            reduce using rule 20 (constant -> DOT_REAL .)
    LE_OP           reduce using rule 20 (constant -> DOT_REAL .)
    GE_OP           reduce using rule 20 (constant -> DOT_REAL .)
    NOTEQUALS       reduce using rule 20 (constant -> DOT_REAL .)
    EQUALS_OP       reduce using rule 20 (constant -> DOT_REAL .)
    OR_OP           reduce using rule 20 (constant -> DOT_REAL .)
    AND_OP          reduce using rule 20 (constant -> DOT_REAL .)
    SEMI_COLON      reduce using rule 20 (constant -> DOT_REAL .)
    RPAREN          reduce using rule 20 (constant -> DOT_REAL .)


state 29

    (7) statement -> exp .
    (36) exp -> exp . operator exp
    (64) comparison_expression -> exp . comparison_operator exp
    (65) logical_expression -> exp . logical_operator exp
    (74) operator -> . ADD
    (75) operator -> . MINUS
    (76) operator -> . MULT
    (77) operator -> . DIV
    (78) operator -> . MOD
    (66) comparison_operator -> . L_OP
    (67) comparison_operator -> . G_OP
    (68) comparison_operator -> . LE_OP
    (69) comparison_operator -> . GE_OP
    (70) comparison_operator -> . NOTEQUALS
    (71) comparison_operator -> . EQUALS_OP
    (72) logical_operator -> . OR_OP
    (73) logical_operator -> . AND_OP

    SEMI_COLON      reduce using rule 7 (statement -> exp .)
    ADD             shift and go to state 60
    MINUS           shift and go to state 58
    MULT            shift and go to state 67
    DIV             shift and go to state 65
    MOD             shift and go to state 68
    L_OP            shift and go to state 57
    G_OP            shift and go to state 56
    LE_OP           shift and go to state 64
    GE_OP           shift and go to state 61
    NOTEQUALS       shift and go to state 53
    EQUALS_OP       shift and go to state 55
    OR_OP           shift and go to state 62
    AND_OP          shift and go to state 59

    operator                       shift and go to state 63
    logical_operator               shift and go to state 54
    comparison_operator            shift and go to state 66

state 30

    (44) unary_operator -> DECREMENT .

    VARIABLE        reduce using rule 44 (unary_operator -> DECREMENT .)
    ADD             reduce using rule 44 (unary_operator -> DECREMENT .)
    MINUS           reduce using rule 44 (unary_operator -> DECREMENT .)
    MULT            reduce using rule 44 (unary_operator -> DECREMENT .)
    DIV             reduce using rule 44 (unary_operator -> DECREMENT .)
    MOD             reduce using rule 44 (unary_operator -> DECREMENT .)
    L_OP            reduce using rule 44 (unary_operator -> DECREMENT .)
    G_OP            reduce using rule 44 (unary_operator -> DECREMENT .)
    LE_OP           reduce using rule 44 (unary_operator -> DECREMENT .)
    GE_OP           reduce using rule 44 (unary_operator -> DECREMENT .)
    NOTEQUALS       reduce using rule 44 (unary_operator -> DECREMENT .)
    EQUALS_OP       reduce using rule 44 (unary_operator -> DECREMENT .)
    OR_OP           reduce using rule 44 (unary_operator -> DECREMENT .)
    AND_OP          reduce using rule 44 (unary_operator -> DECREMENT .)
    SEMI_COLON      reduce using rule 44 (unary_operator -> DECREMENT .)
    RPAREN          reduce using rule 44 (unary_operator -> DECREMENT .)


state 31

    (49) iterative_statement -> DO statement . SEMI_COLON WHILE LPAREN conditional_expression RPAREN SEMI_COLON

    SEMI_COLON      shift and go to state 69


state 32

    (50) iterative_statement -> DO LBRACE . statements RBRACE WHILE LPAREN conditional_expression RPAREN SEMI_COLON
    (1) statements -> . statements statement SEMI_COLON
    (2) statements -> . statement SEMI_COLON
    (3) statements -> . COMMENT
    (4) statements -> . COMMENT statements
    (5) statement -> . declaration
    (6) statement -> . assignment_statement
    (7) statement -> . exp
    (8) statement -> . iterative_statement
    (9) declaration -> . type VARIABLE
    (10) declaration -> . type VARIABLE EQUALS constant
    (11) declaration -> . type VARIABLE EQUALS exp
    (24) assignment_statement -> . VARIABLE EQUALS exp
    (25) assignment_statement -> . VARIABLE assignment_operator exp
    (36) exp -> . exp operator exp
    (37) exp -> . constant
    (38) exp -> . VARIABLE
    (39) exp -> . VARIABLE unary_operator
    (40) exp -> . unary_operator VARIABLE
    (41) exp -> . comparison_expression
    (42) exp -> . logical_expression
    (45) iterative_statement -> . FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN statement SEMI_COLON
    (46) iterative_statement -> . FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN LBRACE statements RBRACE
    (47) iterative_statement -> . WHILE LPAREN conditional_expression RPAREN statement SEMI_COLON
    (48) iterative_statement -> . WHILE LPAREN conditional_expression RPAREN LBRACE statements RBRACE
    (49) iterative_statement -> . DO statement SEMI_COLON WHILE LPAREN conditional_expression RPAREN SEMI_COLON
    (50) iterative_statement -> . DO LBRACE statements RBRACE WHILE LPAREN conditional_expression RPAREN SEMI_COLON
    (12) type -> . INT
    (13) type -> . FLOAT
    (14) type -> . CHAR
    (15) type -> . DOUBLE
    (16) type -> . VOID
    (17) type -> . SHORT
    (18) type -> . LONG
    (19) constant -> . HEX_INT
    (20) constant -> . DOT_REAL
    (21) constant -> . EXP_REAL
    (22) constant -> . DEC_INT
    (23) constant -> . CHARACTER
    (43) unary_operator -> . INCREMENT
    (44) unary_operator -> . DECREMENT
    (64) comparison_expression -> . exp comparison_operator exp
    (65) logical_expression -> . exp logical_operator exp

    COMMENT         shift and go to state 13
    VARIABLE        shift and go to state 23
    FOR             shift and go to state 21
    WHILE           shift and go to state 10
    DO              shift and go to state 1
    INT             shift and go to state 24
    FLOAT           shift and go to state 27
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 25
    VOID            shift and go to state 4
    SHORT           shift and go to state 2
    LONG            shift and go to state 17
    HEX_INT         shift and go to state 26
    DOT_REAL        shift and go to state 28
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 7
    CHARACTER       shift and go to state 5
    INCREMENT       shift and go to state 14
    DECREMENT       shift and go to state 30

    statements                     shift and go to state 70
    statement                      shift and go to state 18
    type                           shift and go to state 19
    assignment_statement           shift and go to state 16
    comparison_expression          shift and go to state 6
    logical_expression             shift and go to state 9
    exp                            shift and go to state 29
    declaration                    shift and go to state 22
    constant                       shift and go to state 11
    iterative_statement            shift and go to state 12
    unary_operator                 shift and go to state 20

state 33

    (1) statements -> statements statement . SEMI_COLON

    SEMI_COLON      shift and go to state 71


state 34

    (47) iterative_statement -> WHILE LPAREN . conditional_expression RPAREN statement SEMI_COLON
    (48) iterative_statement -> WHILE LPAREN . conditional_expression RPAREN LBRACE statements RBRACE
    (59) conditional_expression -> . comparison_expression
    (60) conditional_expression -> . logical_expression
    (61) conditional_expression -> . constant
    (62) conditional_expression -> . exp
    (63) conditional_expression -> . assignment_statement
    (64) comparison_expression -> . exp comparison_operator exp
    (65) logical_expression -> . exp logical_operator exp
    (19) constant -> . HEX_INT
    (20) constant -> . DOT_REAL
    (21) constant -> . EXP_REAL
    (22) constant -> . DEC_INT
    (23) constant -> . CHARACTER
    (36) exp -> . exp operator exp
    (37) exp -> . constant
    (38) exp -> . VARIABLE
    (39) exp -> . VARIABLE unary_operator
    (40) exp -> . unary_operator VARIABLE
    (41) exp -> . comparison_expression
    (42) exp -> . logical_expression
    (24) assignment_statement -> . VARIABLE EQUALS exp
    (25) assignment_statement -> . VARIABLE assignment_operator exp
    (43) unary_operator -> . INCREMENT
    (44) unary_operator -> . DECREMENT

    HEX_INT         shift and go to state 26
    DOT_REAL        shift and go to state 28
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 7
    CHARACTER       shift and go to state 5
    VARIABLE        shift and go to state 76
    INCREMENT       shift and go to state 14
    DECREMENT       shift and go to state 30

    constant                       shift and go to state 75
    exp                            shift and go to state 77
    comparison_expression          shift and go to state 72
    assignment_statement           shift and go to state 73
    conditional_expression         shift and go to state 78
    logical_expression             shift and go to state 74
    unary_operator                 shift and go to state 20

state 35

    (4) statements -> COMMENT statements .
    (1) statements -> statements . statement SEMI_COLON
    (5) statement -> . declaration
    (6) statement -> . assignment_statement
    (7) statement -> . exp
    (8) statement -> . iterative_statement
    (9) declaration -> . type VARIABLE
    (10) declaration -> . type VARIABLE EQUALS constant
    (11) declaration -> . type VARIABLE EQUALS exp
    (24) assignment_statement -> . VARIABLE EQUALS exp
    (25) assignment_statement -> . VARIABLE assignment_operator exp
    (36) exp -> . exp operator exp
    (37) exp -> . constant
    (38) exp -> . VARIABLE
    (39) exp -> . VARIABLE unary_operator
    (40) exp -> . unary_operator VARIABLE
    (41) exp -> . comparison_expression
    (42) exp -> . logical_expression
    (45) iterative_statement -> . FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN statement SEMI_COLON
    (46) iterative_statement -> . FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN LBRACE statements RBRACE
    (47) iterative_statement -> . WHILE LPAREN conditional_expression RPAREN statement SEMI_COLON
    (48) iterative_statement -> . WHILE LPAREN conditional_expression RPAREN LBRACE statements RBRACE
    (49) iterative_statement -> . DO statement SEMI_COLON WHILE LPAREN conditional_expression RPAREN SEMI_COLON
    (50) iterative_statement -> . DO LBRACE statements RBRACE WHILE LPAREN conditional_expression RPAREN SEMI_COLON
    (12) type -> . INT
    (13) type -> . FLOAT
    (14) type -> . CHAR
    (15) type -> . DOUBLE
    (16) type -> . VOID
    (17) type -> . SHORT
    (18) type -> . LONG
    (19) constant -> . HEX_INT
    (20) constant -> . DOT_REAL
    (21) constant -> . EXP_REAL
    (22) constant -> . DEC_INT
    (23) constant -> . CHARACTER
    (43) unary_operator -> . INCREMENT
    (44) unary_operator -> . DECREMENT
    (64) comparison_expression -> . exp comparison_operator exp
    (65) logical_expression -> . exp logical_operator exp

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for HEX_INT resolved as shift
  ! shift/reduce conflict for DOT_REAL resolved as shift
  ! shift/reduce conflict for EXP_REAL resolved as shift
  ! shift/reduce conflict for DEC_INT resolved as shift
  ! shift/reduce conflict for CHARACTER resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
    RBRACE          reduce using rule 4 (statements -> COMMENT statements .)
    $end            reduce using rule 4 (statements -> COMMENT statements .)
    VARIABLE        shift and go to state 23
    FOR             shift and go to state 21
    WHILE           shift and go to state 10
    DO              shift and go to state 1
    INT             shift and go to state 24
    FLOAT           shift and go to state 27
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 25
    VOID            shift and go to state 4
    SHORT           shift and go to state 2
    LONG            shift and go to state 17
    HEX_INT         shift and go to state 26
    DOT_REAL        shift and go to state 28
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 7
    CHARACTER       shift and go to state 5
    INCREMENT       shift and go to state 14
    DECREMENT       shift and go to state 30

  ! VARIABLE        [ reduce using rule 4 (statements -> COMMENT statements .) ]
  ! FOR             [ reduce using rule 4 (statements -> COMMENT statements .) ]
  ! WHILE           [ reduce using rule 4 (statements -> COMMENT statements .) ]
  ! DO              [ reduce using rule 4 (statements -> COMMENT statements .) ]
  ! INT             [ reduce using rule 4 (statements -> COMMENT statements .) ]
  ! FLOAT           [ reduce using rule 4 (statements -> COMMENT statements .) ]
  ! CHAR            [ reduce using rule 4 (statements -> COMMENT statements .) ]
  ! DOUBLE          [ reduce using rule 4 (statements -> COMMENT statements .) ]
  ! VOID            [ reduce using rule 4 (statements -> COMMENT statements .) ]
  ! SHORT           [ reduce using rule 4 (statements -> COMMENT statements .) ]
  ! LONG            [ reduce using rule 4 (statements -> COMMENT statements .) ]
  ! HEX_INT         [ reduce using rule 4 (statements -> COMMENT statements .) ]
  ! DOT_REAL        [ reduce using rule 4 (statements -> COMMENT statements .) ]
  ! EXP_REAL        [ reduce using rule 4 (statements -> COMMENT statements .) ]
  ! DEC_INT         [ reduce using rule 4 (statements -> COMMENT statements .) ]
  ! CHARACTER       [ reduce using rule 4 (statements -> COMMENT statements .) ]
  ! INCREMENT       [ reduce using rule 4 (statements -> COMMENT statements .) ]
  ! DECREMENT       [ reduce using rule 4 (statements -> COMMENT statements .) ]

    statement                      shift and go to state 33
    type                           shift and go to state 19
    assignment_statement           shift and go to state 16
    comparison_expression          shift and go to state 6
    logical_expression             shift and go to state 9
    exp                            shift and go to state 29
    declaration                    shift and go to state 22
    constant                       shift and go to state 11
    iterative_statement            shift and go to state 12
    unary_operator                 shift and go to state 20

state 36

    (2) statements -> statement SEMI_COLON .

    RBRACE          reduce using rule 2 (statements -> statement SEMI_COLON .)
    VARIABLE        reduce using rule 2 (statements -> statement SEMI_COLON .)
    FOR             reduce using rule 2 (statements -> statement SEMI_COLON .)
    WHILE           reduce using rule 2 (statements -> statement SEMI_COLON .)
    DO              reduce using rule 2 (statements -> statement SEMI_COLON .)
    INT             reduce using rule 2 (statements -> statement SEMI_COLON .)
    FLOAT           reduce using rule 2 (statements -> statement SEMI_COLON .)
    CHAR            reduce using rule 2 (statements -> statement SEMI_COLON .)
    DOUBLE          reduce using rule 2 (statements -> statement SEMI_COLON .)
    VOID            reduce using rule 2 (statements -> statement SEMI_COLON .)
    SHORT           reduce using rule 2 (statements -> statement SEMI_COLON .)
    LONG            reduce using rule 2 (statements -> statement SEMI_COLON .)
    HEX_INT         reduce using rule 2 (statements -> statement SEMI_COLON .)
    DOT_REAL        reduce using rule 2 (statements -> statement SEMI_COLON .)
    EXP_REAL        reduce using rule 2 (statements -> statement SEMI_COLON .)
    DEC_INT         reduce using rule 2 (statements -> statement SEMI_COLON .)
    CHARACTER       reduce using rule 2 (statements -> statement SEMI_COLON .)
    INCREMENT       reduce using rule 2 (statements -> statement SEMI_COLON .)
    DECREMENT       reduce using rule 2 (statements -> statement SEMI_COLON .)
    $end            reduce using rule 2 (statements -> statement SEMI_COLON .)


state 37

    (9) declaration -> type VARIABLE .
    (10) declaration -> type VARIABLE . EQUALS constant
    (11) declaration -> type VARIABLE . EQUALS exp

    SEMI_COLON      reduce using rule 9 (declaration -> type VARIABLE .)
    EQUALS          shift and go to state 79


state 38

    (40) exp -> unary_operator VARIABLE .

    ADD             reduce using rule 40 (exp -> unary_operator VARIABLE .)
    MINUS           reduce using rule 40 (exp -> unary_operator VARIABLE .)
    MULT            reduce using rule 40 (exp -> unary_operator VARIABLE .)
    DIV             reduce using rule 40 (exp -> unary_operator VARIABLE .)
    MOD             reduce using rule 40 (exp -> unary_operator VARIABLE .)
    L_OP            reduce using rule 40 (exp -> unary_operator VARIABLE .)
    G_OP            reduce using rule 40 (exp -> unary_operator VARIABLE .)
    LE_OP           reduce using rule 40 (exp -> unary_operator VARIABLE .)
    GE_OP           reduce using rule 40 (exp -> unary_operator VARIABLE .)
    NOTEQUALS       reduce using rule 40 (exp -> unary_operator VARIABLE .)
    EQUALS_OP       reduce using rule 40 (exp -> unary_operator VARIABLE .)
    OR_OP           reduce using rule 40 (exp -> unary_operator VARIABLE .)
    AND_OP          reduce using rule 40 (exp -> unary_operator VARIABLE .)
    SEMI_COLON      reduce using rule 40 (exp -> unary_operator VARIABLE .)
    RPAREN          reduce using rule 40 (exp -> unary_operator VARIABLE .)


state 39

    (45) iterative_statement -> FOR LPAREN . assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN statement SEMI_COLON
    (46) iterative_statement -> FOR LPAREN . assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN LBRACE statements RBRACE
    (24) assignment_statement -> . VARIABLE EQUALS exp
    (25) assignment_statement -> . VARIABLE assignment_operator exp

    VARIABLE        shift and go to state 81

    assignment_statement           shift and go to state 80

state 40

    (30) assignment_operator -> SUB_ASSIGN .

    VARIABLE        reduce using rule 30 (assignment_operator -> SUB_ASSIGN .)
    HEX_INT         reduce using rule 30 (assignment_operator -> SUB_ASSIGN .)
    DOT_REAL        reduce using rule 30 (assignment_operator -> SUB_ASSIGN .)
    EXP_REAL        reduce using rule 30 (assignment_operator -> SUB_ASSIGN .)
    DEC_INT         reduce using rule 30 (assignment_operator -> SUB_ASSIGN .)
    CHARACTER       reduce using rule 30 (assignment_operator -> SUB_ASSIGN .)
    INCREMENT       reduce using rule 30 (assignment_operator -> SUB_ASSIGN .)
    DECREMENT       reduce using rule 30 (assignment_operator -> SUB_ASSIGN .)


state 41

    (28) assignment_operator -> MOD_ASSIGN .

    VARIABLE        reduce using rule 28 (assignment_operator -> MOD_ASSIGN .)
    HEX_INT         reduce using rule 28 (assignment_operator -> MOD_ASSIGN .)
    DOT_REAL        reduce using rule 28 (assignment_operator -> MOD_ASSIGN .)
    EXP_REAL        reduce using rule 28 (assignment_operator -> MOD_ASSIGN .)
    DEC_INT         reduce using rule 28 (assignment_operator -> MOD_ASSIGN .)
    CHARACTER       reduce using rule 28 (assignment_operator -> MOD_ASSIGN .)
    INCREMENT       reduce using rule 28 (assignment_operator -> MOD_ASSIGN .)
    DECREMENT       reduce using rule 28 (assignment_operator -> MOD_ASSIGN .)


state 42

    (32) assignment_operator -> RIGHT_ASSIGN .

    VARIABLE        reduce using rule 32 (assignment_operator -> RIGHT_ASSIGN .)
    HEX_INT         reduce using rule 32 (assignment_operator -> RIGHT_ASSIGN .)
    DOT_REAL        reduce using rule 32 (assignment_operator -> RIGHT_ASSIGN .)
    EXP_REAL        reduce using rule 32 (assignment_operator -> RIGHT_ASSIGN .)
    DEC_INT         reduce using rule 32 (assignment_operator -> RIGHT_ASSIGN .)
    CHARACTER       reduce using rule 32 (assignment_operator -> RIGHT_ASSIGN .)
    INCREMENT       reduce using rule 32 (assignment_operator -> RIGHT_ASSIGN .)
    DECREMENT       reduce using rule 32 (assignment_operator -> RIGHT_ASSIGN .)


state 43

    (34) assignment_operator -> XOR_ASSIGN .

    VARIABLE        reduce using rule 34 (assignment_operator -> XOR_ASSIGN .)
    HEX_INT         reduce using rule 34 (assignment_operator -> XOR_ASSIGN .)
    DOT_REAL        reduce using rule 34 (assignment_operator -> XOR_ASSIGN .)
    EXP_REAL        reduce using rule 34 (assignment_operator -> XOR_ASSIGN .)
    DEC_INT         reduce using rule 34 (assignment_operator -> XOR_ASSIGN .)
    CHARACTER       reduce using rule 34 (assignment_operator -> XOR_ASSIGN .)
    INCREMENT       reduce using rule 34 (assignment_operator -> XOR_ASSIGN .)
    DECREMENT       reduce using rule 34 (assignment_operator -> XOR_ASSIGN .)


state 44

    (35) assignment_operator -> OR_ASSIGN .

    VARIABLE        reduce using rule 35 (assignment_operator -> OR_ASSIGN .)
    HEX_INT         reduce using rule 35 (assignment_operator -> OR_ASSIGN .)
    DOT_REAL        reduce using rule 35 (assignment_operator -> OR_ASSIGN .)
    EXP_REAL        reduce using rule 35 (assignment_operator -> OR_ASSIGN .)
    DEC_INT         reduce using rule 35 (assignment_operator -> OR_ASSIGN .)
    CHARACTER       reduce using rule 35 (assignment_operator -> OR_ASSIGN .)
    INCREMENT       reduce using rule 35 (assignment_operator -> OR_ASSIGN .)
    DECREMENT       reduce using rule 35 (assignment_operator -> OR_ASSIGN .)


state 45

    (24) assignment_statement -> VARIABLE EQUALS . exp
    (36) exp -> . exp operator exp
    (37) exp -> . constant
    (38) exp -> . VARIABLE
    (39) exp -> . VARIABLE unary_operator
    (40) exp -> . unary_operator VARIABLE
    (41) exp -> . comparison_expression
    (42) exp -> . logical_expression
    (19) constant -> . HEX_INT
    (20) constant -> . DOT_REAL
    (21) constant -> . EXP_REAL
    (22) constant -> . DEC_INT
    (23) constant -> . CHARACTER
    (43) unary_operator -> . INCREMENT
    (44) unary_operator -> . DECREMENT
    (64) comparison_expression -> . exp comparison_operator exp
    (65) logical_expression -> . exp logical_operator exp

    VARIABLE        shift and go to state 83
    HEX_INT         shift and go to state 26
    DOT_REAL        shift and go to state 28
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 7
    CHARACTER       shift and go to state 5
    INCREMENT       shift and go to state 14
    DECREMENT       shift and go to state 30

    constant                       shift and go to state 11
    comparison_expression          shift and go to state 6
    logical_expression             shift and go to state 9
    exp                            shift and go to state 82
    unary_operator                 shift and go to state 20

state 46

    (33) assignment_operator -> AND_ASSIGN .

    VARIABLE        reduce using rule 33 (assignment_operator -> AND_ASSIGN .)
    HEX_INT         reduce using rule 33 (assignment_operator -> AND_ASSIGN .)
    DOT_REAL        reduce using rule 33 (assignment_operator -> AND_ASSIGN .)
    EXP_REAL        reduce using rule 33 (assignment_operator -> AND_ASSIGN .)
    DEC_INT         reduce using rule 33 (assignment_operator -> AND_ASSIGN .)
    CHARACTER       reduce using rule 33 (assignment_operator -> AND_ASSIGN .)
    INCREMENT       reduce using rule 33 (assignment_operator -> AND_ASSIGN .)
    DECREMENT       reduce using rule 33 (assignment_operator -> AND_ASSIGN .)


state 47

    (26) assignment_operator -> MUL_ASSIGN .

    VARIABLE        reduce using rule 26 (assignment_operator -> MUL_ASSIGN .)
    HEX_INT         reduce using rule 26 (assignment_operator -> MUL_ASSIGN .)
    DOT_REAL        reduce using rule 26 (assignment_operator -> MUL_ASSIGN .)
    EXP_REAL        reduce using rule 26 (assignment_operator -> MUL_ASSIGN .)
    DEC_INT         reduce using rule 26 (assignment_operator -> MUL_ASSIGN .)
    CHARACTER       reduce using rule 26 (assignment_operator -> MUL_ASSIGN .)
    INCREMENT       reduce using rule 26 (assignment_operator -> MUL_ASSIGN .)
    DECREMENT       reduce using rule 26 (assignment_operator -> MUL_ASSIGN .)


state 48

    (25) assignment_statement -> VARIABLE assignment_operator . exp
    (36) exp -> . exp operator exp
    (37) exp -> . constant
    (38) exp -> . VARIABLE
    (39) exp -> . VARIABLE unary_operator
    (40) exp -> . unary_operator VARIABLE
    (41) exp -> . comparison_expression
    (42) exp -> . logical_expression
    (19) constant -> . HEX_INT
    (20) constant -> . DOT_REAL
    (21) constant -> . EXP_REAL
    (22) constant -> . DEC_INT
    (23) constant -> . CHARACTER
    (43) unary_operator -> . INCREMENT
    (44) unary_operator -> . DECREMENT
    (64) comparison_expression -> . exp comparison_operator exp
    (65) logical_expression -> . exp logical_operator exp

    VARIABLE        shift and go to state 83
    HEX_INT         shift and go to state 26
    DOT_REAL        shift and go to state 28
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 7
    CHARACTER       shift and go to state 5
    INCREMENT       shift and go to state 14
    DECREMENT       shift and go to state 30

    constant                       shift and go to state 11
    comparison_expression          shift and go to state 6
    logical_expression             shift and go to state 9
    exp                            shift and go to state 84
    unary_operator                 shift and go to state 20

state 49

    (31) assignment_operator -> LEFT_ASSIGN .

    VARIABLE        reduce using rule 31 (assignment_operator -> LEFT_ASSIGN .)
    HEX_INT         reduce using rule 31 (assignment_operator -> LEFT_ASSIGN .)
    DOT_REAL        reduce using rule 31 (assignment_operator -> LEFT_ASSIGN .)
    EXP_REAL        reduce using rule 31 (assignment_operator -> LEFT_ASSIGN .)
    DEC_INT         reduce using rule 31 (assignment_operator -> LEFT_ASSIGN .)
    CHARACTER       reduce using rule 31 (assignment_operator -> LEFT_ASSIGN .)
    INCREMENT       reduce using rule 31 (assignment_operator -> LEFT_ASSIGN .)
    DECREMENT       reduce using rule 31 (assignment_operator -> LEFT_ASSIGN .)


state 50

    (29) assignment_operator -> ADD_ASSIGN .

    VARIABLE        reduce using rule 29 (assignment_operator -> ADD_ASSIGN .)
    HEX_INT         reduce using rule 29 (assignment_operator -> ADD_ASSIGN .)
    DOT_REAL        reduce using rule 29 (assignment_operator -> ADD_ASSIGN .)
    EXP_REAL        reduce using rule 29 (assignment_operator -> ADD_ASSIGN .)
    DEC_INT         reduce using rule 29 (assignment_operator -> ADD_ASSIGN .)
    CHARACTER       reduce using rule 29 (assignment_operator -> ADD_ASSIGN .)
    INCREMENT       reduce using rule 29 (assignment_operator -> ADD_ASSIGN .)
    DECREMENT       reduce using rule 29 (assignment_operator -> ADD_ASSIGN .)


state 51

    (39) exp -> VARIABLE unary_operator .

    ADD             reduce using rule 39 (exp -> VARIABLE unary_operator .)
    MINUS           reduce using rule 39 (exp -> VARIABLE unary_operator .)
    MULT            reduce using rule 39 (exp -> VARIABLE unary_operator .)
    DIV             reduce using rule 39 (exp -> VARIABLE unary_operator .)
    MOD             reduce using rule 39 (exp -> VARIABLE unary_operator .)
    L_OP            reduce using rule 39 (exp -> VARIABLE unary_operator .)
    G_OP            reduce using rule 39 (exp -> VARIABLE unary_operator .)
    LE_OP           reduce using rule 39 (exp -> VARIABLE unary_operator .)
    GE_OP           reduce using rule 39 (exp -> VARIABLE unary_operator .)
    NOTEQUALS       reduce using rule 39 (exp -> VARIABLE unary_operator .)
    EQUALS_OP       reduce using rule 39 (exp -> VARIABLE unary_operator .)
    OR_OP           reduce using rule 39 (exp -> VARIABLE unary_operator .)
    AND_OP          reduce using rule 39 (exp -> VARIABLE unary_operator .)
    SEMI_COLON      reduce using rule 39 (exp -> VARIABLE unary_operator .)
    RPAREN          reduce using rule 39 (exp -> VARIABLE unary_operator .)


state 52

    (27) assignment_operator -> DIV_ASSIGN .

    VARIABLE        reduce using rule 27 (assignment_operator -> DIV_ASSIGN .)
    HEX_INT         reduce using rule 27 (assignment_operator -> DIV_ASSIGN .)
    DOT_REAL        reduce using rule 27 (assignment_operator -> DIV_ASSIGN .)
    EXP_REAL        reduce using rule 27 (assignment_operator -> DIV_ASSIGN .)
    DEC_INT         reduce using rule 27 (assignment_operator -> DIV_ASSIGN .)
    CHARACTER       reduce using rule 27 (assignment_operator -> DIV_ASSIGN .)
    INCREMENT       reduce using rule 27 (assignment_operator -> DIV_ASSIGN .)
    DECREMENT       reduce using rule 27 (assignment_operator -> DIV_ASSIGN .)


state 53

    (70) comparison_operator -> NOTEQUALS .

    VARIABLE        reduce using rule 70 (comparison_operator -> NOTEQUALS .)
    HEX_INT         reduce using rule 70 (comparison_operator -> NOTEQUALS .)
    DOT_REAL        reduce using rule 70 (comparison_operator -> NOTEQUALS .)
    EXP_REAL        reduce using rule 70 (comparison_operator -> NOTEQUALS .)
    DEC_INT         reduce using rule 70 (comparison_operator -> NOTEQUALS .)
    CHARACTER       reduce using rule 70 (comparison_operator -> NOTEQUALS .)
    INCREMENT       reduce using rule 70 (comparison_operator -> NOTEQUALS .)
    DECREMENT       reduce using rule 70 (comparison_operator -> NOTEQUALS .)


state 54

    (65) logical_expression -> exp logical_operator . exp
    (36) exp -> . exp operator exp
    (37) exp -> . constant
    (38) exp -> . VARIABLE
    (39) exp -> . VARIABLE unary_operator
    (40) exp -> . unary_operator VARIABLE
    (41) exp -> . comparison_expression
    (42) exp -> . logical_expression
    (19) constant -> . HEX_INT
    (20) constant -> . DOT_REAL
    (21) constant -> . EXP_REAL
    (22) constant -> . DEC_INT
    (23) constant -> . CHARACTER
    (43) unary_operator -> . INCREMENT
    (44) unary_operator -> . DECREMENT
    (64) comparison_expression -> . exp comparison_operator exp
    (65) logical_expression -> . exp logical_operator exp

    VARIABLE        shift and go to state 83
    HEX_INT         shift and go to state 26
    DOT_REAL        shift and go to state 28
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 7
    CHARACTER       shift and go to state 5
    INCREMENT       shift and go to state 14
    DECREMENT       shift and go to state 30

    constant                       shift and go to state 11
    comparison_expression          shift and go to state 6
    logical_expression             shift and go to state 9
    exp                            shift and go to state 85
    unary_operator                 shift and go to state 20

state 55

    (71) comparison_operator -> EQUALS_OP .

    VARIABLE        reduce using rule 71 (comparison_operator -> EQUALS_OP .)
    HEX_INT         reduce using rule 71 (comparison_operator -> EQUALS_OP .)
    DOT_REAL        reduce using rule 71 (comparison_operator -> EQUALS_OP .)
    EXP_REAL        reduce using rule 71 (comparison_operator -> EQUALS_OP .)
    DEC_INT         reduce using rule 71 (comparison_operator -> EQUALS_OP .)
    CHARACTER       reduce using rule 71 (comparison_operator -> EQUALS_OP .)
    INCREMENT       reduce using rule 71 (comparison_operator -> EQUALS_OP .)
    DECREMENT       reduce using rule 71 (comparison_operator -> EQUALS_OP .)


state 56

    (67) comparison_operator -> G_OP .

    VARIABLE        reduce using rule 67 (comparison_operator -> G_OP .)
    HEX_INT         reduce using rule 67 (comparison_operator -> G_OP .)
    DOT_REAL        reduce using rule 67 (comparison_operator -> G_OP .)
    EXP_REAL        reduce using rule 67 (comparison_operator -> G_OP .)
    DEC_INT         reduce using rule 67 (comparison_operator -> G_OP .)
    CHARACTER       reduce using rule 67 (comparison_operator -> G_OP .)
    INCREMENT       reduce using rule 67 (comparison_operator -> G_OP .)
    DECREMENT       reduce using rule 67 (comparison_operator -> G_OP .)


state 57

    (66) comparison_operator -> L_OP .

    VARIABLE        reduce using rule 66 (comparison_operator -> L_OP .)
    HEX_INT         reduce using rule 66 (comparison_operator -> L_OP .)
    DOT_REAL        reduce using rule 66 (comparison_operator -> L_OP .)
    EXP_REAL        reduce using rule 66 (comparison_operator -> L_OP .)
    DEC_INT         reduce using rule 66 (comparison_operator -> L_OP .)
    CHARACTER       reduce using rule 66 (comparison_operator -> L_OP .)
    INCREMENT       reduce using rule 66 (comparison_operator -> L_OP .)
    DECREMENT       reduce using rule 66 (comparison_operator -> L_OP .)


state 58

    (75) operator -> MINUS .

    VARIABLE        reduce using rule 75 (operator -> MINUS .)
    HEX_INT         reduce using rule 75 (operator -> MINUS .)
    DOT_REAL        reduce using rule 75 (operator -> MINUS .)
    EXP_REAL        reduce using rule 75 (operator -> MINUS .)
    DEC_INT         reduce using rule 75 (operator -> MINUS .)
    CHARACTER       reduce using rule 75 (operator -> MINUS .)
    INCREMENT       reduce using rule 75 (operator -> MINUS .)
    DECREMENT       reduce using rule 75 (operator -> MINUS .)


state 59

    (73) logical_operator -> AND_OP .

    VARIABLE        reduce using rule 73 (logical_operator -> AND_OP .)
    HEX_INT         reduce using rule 73 (logical_operator -> AND_OP .)
    DOT_REAL        reduce using rule 73 (logical_operator -> AND_OP .)
    EXP_REAL        reduce using rule 73 (logical_operator -> AND_OP .)
    DEC_INT         reduce using rule 73 (logical_operator -> AND_OP .)
    CHARACTER       reduce using rule 73 (logical_operator -> AND_OP .)
    INCREMENT       reduce using rule 73 (logical_operator -> AND_OP .)
    DECREMENT       reduce using rule 73 (logical_operator -> AND_OP .)


state 60

    (74) operator -> ADD .

    VARIABLE        reduce using rule 74 (operator -> ADD .)
    HEX_INT         reduce using rule 74 (operator -> ADD .)
    DOT_REAL        reduce using rule 74 (operator -> ADD .)
    EXP_REAL        reduce using rule 74 (operator -> ADD .)
    DEC_INT         reduce using rule 74 (operator -> ADD .)
    CHARACTER       reduce using rule 74 (operator -> ADD .)
    INCREMENT       reduce using rule 74 (operator -> ADD .)
    DECREMENT       reduce using rule 74 (operator -> ADD .)


state 61

    (69) comparison_operator -> GE_OP .

    VARIABLE        reduce using rule 69 (comparison_operator -> GE_OP .)
    HEX_INT         reduce using rule 69 (comparison_operator -> GE_OP .)
    DOT_REAL        reduce using rule 69 (comparison_operator -> GE_OP .)
    EXP_REAL        reduce using rule 69 (comparison_operator -> GE_OP .)
    DEC_INT         reduce using rule 69 (comparison_operator -> GE_OP .)
    CHARACTER       reduce using rule 69 (comparison_operator -> GE_OP .)
    INCREMENT       reduce using rule 69 (comparison_operator -> GE_OP .)
    DECREMENT       reduce using rule 69 (comparison_operator -> GE_OP .)


state 62

    (72) logical_operator -> OR_OP .

    VARIABLE        reduce using rule 72 (logical_operator -> OR_OP .)
    HEX_INT         reduce using rule 72 (logical_operator -> OR_OP .)
    DOT_REAL        reduce using rule 72 (logical_operator -> OR_OP .)
    EXP_REAL        reduce using rule 72 (logical_operator -> OR_OP .)
    DEC_INT         reduce using rule 72 (logical_operator -> OR_OP .)
    CHARACTER       reduce using rule 72 (logical_operator -> OR_OP .)
    INCREMENT       reduce using rule 72 (logical_operator -> OR_OP .)
    DECREMENT       reduce using rule 72 (logical_operator -> OR_OP .)


state 63

    (36) exp -> exp operator . exp
    (36) exp -> . exp operator exp
    (37) exp -> . constant
    (38) exp -> . VARIABLE
    (39) exp -> . VARIABLE unary_operator
    (40) exp -> . unary_operator VARIABLE
    (41) exp -> . comparison_expression
    (42) exp -> . logical_expression
    (19) constant -> . HEX_INT
    (20) constant -> . DOT_REAL
    (21) constant -> . EXP_REAL
    (22) constant -> . DEC_INT
    (23) constant -> . CHARACTER
    (43) unary_operator -> . INCREMENT
    (44) unary_operator -> . DECREMENT
    (64) comparison_expression -> . exp comparison_operator exp
    (65) logical_expression -> . exp logical_operator exp

    VARIABLE        shift and go to state 83
    HEX_INT         shift and go to state 26
    DOT_REAL        shift and go to state 28
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 7
    CHARACTER       shift and go to state 5
    INCREMENT       shift and go to state 14
    DECREMENT       shift and go to state 30

    constant                       shift and go to state 11
    comparison_expression          shift and go to state 6
    logical_expression             shift and go to state 9
    exp                            shift and go to state 86
    unary_operator                 shift and go to state 20

state 64

    (68) comparison_operator -> LE_OP .

    VARIABLE        reduce using rule 68 (comparison_operator -> LE_OP .)
    HEX_INT         reduce using rule 68 (comparison_operator -> LE_OP .)
    DOT_REAL        reduce using rule 68 (comparison_operator -> LE_OP .)
    EXP_REAL        reduce using rule 68 (comparison_operator -> LE_OP .)
    DEC_INT         reduce using rule 68 (comparison_operator -> LE_OP .)
    CHARACTER       reduce using rule 68 (comparison_operator -> LE_OP .)
    INCREMENT       reduce using rule 68 (comparison_operator -> LE_OP .)
    DECREMENT       reduce using rule 68 (comparison_operator -> LE_OP .)


state 65

    (77) operator -> DIV .

    VARIABLE        reduce using rule 77 (operator -> DIV .)
    HEX_INT         reduce using rule 77 (operator -> DIV .)
    DOT_REAL        reduce using rule 77 (operator -> DIV .)
    EXP_REAL        reduce using rule 77 (operator -> DIV .)
    DEC_INT         reduce using rule 77 (operator -> DIV .)
    CHARACTER       reduce using rule 77 (operator -> DIV .)
    INCREMENT       reduce using rule 77 (operator -> DIV .)
    DECREMENT       reduce using rule 77 (operator -> DIV .)


state 66

    (64) comparison_expression -> exp comparison_operator . exp
    (36) exp -> . exp operator exp
    (37) exp -> . constant
    (38) exp -> . VARIABLE
    (39) exp -> . VARIABLE unary_operator
    (40) exp -> . unary_operator VARIABLE
    (41) exp -> . comparison_expression
    (42) exp -> . logical_expression
    (19) constant -> . HEX_INT
    (20) constant -> . DOT_REAL
    (21) constant -> . EXP_REAL
    (22) constant -> . DEC_INT
    (23) constant -> . CHARACTER
    (43) unary_operator -> . INCREMENT
    (44) unary_operator -> . DECREMENT
    (64) comparison_expression -> . exp comparison_operator exp
    (65) logical_expression -> . exp logical_operator exp

    VARIABLE        shift and go to state 83
    HEX_INT         shift and go to state 26
    DOT_REAL        shift and go to state 28
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 7
    CHARACTER       shift and go to state 5
    INCREMENT       shift and go to state 14
    DECREMENT       shift and go to state 30

    constant                       shift and go to state 11
    comparison_expression          shift and go to state 6
    logical_expression             shift and go to state 9
    exp                            shift and go to state 87
    unary_operator                 shift and go to state 20

state 67

    (76) operator -> MULT .

    VARIABLE        reduce using rule 76 (operator -> MULT .)
    HEX_INT         reduce using rule 76 (operator -> MULT .)
    DOT_REAL        reduce using rule 76 (operator -> MULT .)
    EXP_REAL        reduce using rule 76 (operator -> MULT .)
    DEC_INT         reduce using rule 76 (operator -> MULT .)
    CHARACTER       reduce using rule 76 (operator -> MULT .)
    INCREMENT       reduce using rule 76 (operator -> MULT .)
    DECREMENT       reduce using rule 76 (operator -> MULT .)


state 68

    (78) operator -> MOD .

    VARIABLE        reduce using rule 78 (operator -> MOD .)
    HEX_INT         reduce using rule 78 (operator -> MOD .)
    DOT_REAL        reduce using rule 78 (operator -> MOD .)
    EXP_REAL        reduce using rule 78 (operator -> MOD .)
    DEC_INT         reduce using rule 78 (operator -> MOD .)
    CHARACTER       reduce using rule 78 (operator -> MOD .)
    INCREMENT       reduce using rule 78 (operator -> MOD .)
    DECREMENT       reduce using rule 78 (operator -> MOD .)


state 69

    (49) iterative_statement -> DO statement SEMI_COLON . WHILE LPAREN conditional_expression RPAREN SEMI_COLON

    WHILE           shift and go to state 88


state 70

    (50) iterative_statement -> DO LBRACE statements . RBRACE WHILE LPAREN conditional_expression RPAREN SEMI_COLON
    (1) statements -> statements . statement SEMI_COLON
    (5) statement -> . declaration
    (6) statement -> . assignment_statement
    (7) statement -> . exp
    (8) statement -> . iterative_statement
    (9) declaration -> . type VARIABLE
    (10) declaration -> . type VARIABLE EQUALS constant
    (11) declaration -> . type VARIABLE EQUALS exp
    (24) assignment_statement -> . VARIABLE EQUALS exp
    (25) assignment_statement -> . VARIABLE assignment_operator exp
    (36) exp -> . exp operator exp
    (37) exp -> . constant
    (38) exp -> . VARIABLE
    (39) exp -> . VARIABLE unary_operator
    (40) exp -> . unary_operator VARIABLE
    (41) exp -> . comparison_expression
    (42) exp -> . logical_expression
    (45) iterative_statement -> . FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN statement SEMI_COLON
    (46) iterative_statement -> . FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN LBRACE statements RBRACE
    (47) iterative_statement -> . WHILE LPAREN conditional_expression RPAREN statement SEMI_COLON
    (48) iterative_statement -> . WHILE LPAREN conditional_expression RPAREN LBRACE statements RBRACE
    (49) iterative_statement -> . DO statement SEMI_COLON WHILE LPAREN conditional_expression RPAREN SEMI_COLON
    (50) iterative_statement -> . DO LBRACE statements RBRACE WHILE LPAREN conditional_expression RPAREN SEMI_COLON
    (12) type -> . INT
    (13) type -> . FLOAT
    (14) type -> . CHAR
    (15) type -> . DOUBLE
    (16) type -> . VOID
    (17) type -> . SHORT
    (18) type -> . LONG
    (19) constant -> . HEX_INT
    (20) constant -> . DOT_REAL
    (21) constant -> . EXP_REAL
    (22) constant -> . DEC_INT
    (23) constant -> . CHARACTER
    (43) unary_operator -> . INCREMENT
    (44) unary_operator -> . DECREMENT
    (64) comparison_expression -> . exp comparison_operator exp
    (65) logical_expression -> . exp logical_operator exp

    RBRACE          shift and go to state 89
    VARIABLE        shift and go to state 23
    FOR             shift and go to state 21
    WHILE           shift and go to state 10
    DO              shift and go to state 1
    INT             shift and go to state 24
    FLOAT           shift and go to state 27
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 25
    VOID            shift and go to state 4
    SHORT           shift and go to state 2
    LONG            shift and go to state 17
    HEX_INT         shift and go to state 26
    DOT_REAL        shift and go to state 28
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 7
    CHARACTER       shift and go to state 5
    INCREMENT       shift and go to state 14
    DECREMENT       shift and go to state 30

    statement                      shift and go to state 33
    type                           shift and go to state 19
    assignment_statement           shift and go to state 16
    comparison_expression          shift and go to state 6
    logical_expression             shift and go to state 9
    exp                            shift and go to state 29
    declaration                    shift and go to state 22
    constant                       shift and go to state 11
    iterative_statement            shift and go to state 12
    unary_operator                 shift and go to state 20

state 71

    (1) statements -> statements statement SEMI_COLON .

    RBRACE          reduce using rule 1 (statements -> statements statement SEMI_COLON .)
    VARIABLE        reduce using rule 1 (statements -> statements statement SEMI_COLON .)
    FOR             reduce using rule 1 (statements -> statements statement SEMI_COLON .)
    WHILE           reduce using rule 1 (statements -> statements statement SEMI_COLON .)
    DO              reduce using rule 1 (statements -> statements statement SEMI_COLON .)
    INT             reduce using rule 1 (statements -> statements statement SEMI_COLON .)
    FLOAT           reduce using rule 1 (statements -> statements statement SEMI_COLON .)
    CHAR            reduce using rule 1 (statements -> statements statement SEMI_COLON .)
    DOUBLE          reduce using rule 1 (statements -> statements statement SEMI_COLON .)
    VOID            reduce using rule 1 (statements -> statements statement SEMI_COLON .)
    SHORT           reduce using rule 1 (statements -> statements statement SEMI_COLON .)
    LONG            reduce using rule 1 (statements -> statements statement SEMI_COLON .)
    HEX_INT         reduce using rule 1 (statements -> statements statement SEMI_COLON .)
    DOT_REAL        reduce using rule 1 (statements -> statements statement SEMI_COLON .)
    EXP_REAL        reduce using rule 1 (statements -> statements statement SEMI_COLON .)
    DEC_INT         reduce using rule 1 (statements -> statements statement SEMI_COLON .)
    CHARACTER       reduce using rule 1 (statements -> statements statement SEMI_COLON .)
    INCREMENT       reduce using rule 1 (statements -> statements statement SEMI_COLON .)
    DECREMENT       reduce using rule 1 (statements -> statements statement SEMI_COLON .)
    $end            reduce using rule 1 (statements -> statements statement SEMI_COLON .)


state 72

    (59) conditional_expression -> comparison_expression .
    (41) exp -> comparison_expression .

  ! reduce/reduce conflict for RPAREN resolved using rule 41 (exp -> comparison_expression .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 41 (exp -> comparison_expression .)
    L_OP            reduce using rule 41 (exp -> comparison_expression .)
    G_OP            reduce using rule 41 (exp -> comparison_expression .)
    LE_OP           reduce using rule 41 (exp -> comparison_expression .)
    GE_OP           reduce using rule 41 (exp -> comparison_expression .)
    NOTEQUALS       reduce using rule 41 (exp -> comparison_expression .)
    EQUALS_OP       reduce using rule 41 (exp -> comparison_expression .)
    OR_OP           reduce using rule 41 (exp -> comparison_expression .)
    AND_OP          reduce using rule 41 (exp -> comparison_expression .)
    ADD             reduce using rule 41 (exp -> comparison_expression .)
    MINUS           reduce using rule 41 (exp -> comparison_expression .)
    MULT            reduce using rule 41 (exp -> comparison_expression .)
    DIV             reduce using rule 41 (exp -> comparison_expression .)
    MOD             reduce using rule 41 (exp -> comparison_expression .)
    RPAREN          reduce using rule 41 (exp -> comparison_expression .)
    SEMI_COLON      reduce using rule 41 (exp -> comparison_expression .)

  ! RPAREN          [ reduce using rule 59 (conditional_expression -> comparison_expression .) ]
  ! SEMI_COLON      [ reduce using rule 59 (conditional_expression -> comparison_expression .) ]


state 73

    (63) conditional_expression -> assignment_statement .

    RPAREN          reduce using rule 63 (conditional_expression -> assignment_statement .)
    SEMI_COLON      reduce using rule 63 (conditional_expression -> assignment_statement .)


state 74

    (60) conditional_expression -> logical_expression .
    (42) exp -> logical_expression .

  ! reduce/reduce conflict for RPAREN resolved using rule 42 (exp -> logical_expression .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 42 (exp -> logical_expression .)
    L_OP            reduce using rule 42 (exp -> logical_expression .)
    G_OP            reduce using rule 42 (exp -> logical_expression .)
    LE_OP           reduce using rule 42 (exp -> logical_expression .)
    GE_OP           reduce using rule 42 (exp -> logical_expression .)
    NOTEQUALS       reduce using rule 42 (exp -> logical_expression .)
    EQUALS_OP       reduce using rule 42 (exp -> logical_expression .)
    OR_OP           reduce using rule 42 (exp -> logical_expression .)
    AND_OP          reduce using rule 42 (exp -> logical_expression .)
    ADD             reduce using rule 42 (exp -> logical_expression .)
    MINUS           reduce using rule 42 (exp -> logical_expression .)
    MULT            reduce using rule 42 (exp -> logical_expression .)
    DIV             reduce using rule 42 (exp -> logical_expression .)
    MOD             reduce using rule 42 (exp -> logical_expression .)
    RPAREN          reduce using rule 42 (exp -> logical_expression .)
    SEMI_COLON      reduce using rule 42 (exp -> logical_expression .)

  ! RPAREN          [ reduce using rule 60 (conditional_expression -> logical_expression .) ]
  ! SEMI_COLON      [ reduce using rule 60 (conditional_expression -> logical_expression .) ]


state 75

    (61) conditional_expression -> constant .
    (37) exp -> constant .

  ! reduce/reduce conflict for RPAREN resolved using rule 37 (exp -> constant .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 37 (exp -> constant .)
    L_OP            reduce using rule 37 (exp -> constant .)
    G_OP            reduce using rule 37 (exp -> constant .)
    LE_OP           reduce using rule 37 (exp -> constant .)
    GE_OP           reduce using rule 37 (exp -> constant .)
    NOTEQUALS       reduce using rule 37 (exp -> constant .)
    EQUALS_OP       reduce using rule 37 (exp -> constant .)
    OR_OP           reduce using rule 37 (exp -> constant .)
    AND_OP          reduce using rule 37 (exp -> constant .)
    ADD             reduce using rule 37 (exp -> constant .)
    MINUS           reduce using rule 37 (exp -> constant .)
    MULT            reduce using rule 37 (exp -> constant .)
    DIV             reduce using rule 37 (exp -> constant .)
    MOD             reduce using rule 37 (exp -> constant .)
    RPAREN          reduce using rule 37 (exp -> constant .)
    SEMI_COLON      reduce using rule 37 (exp -> constant .)

  ! RPAREN          [ reduce using rule 61 (conditional_expression -> constant .) ]
  ! SEMI_COLON      [ reduce using rule 61 (conditional_expression -> constant .) ]


state 76

    (38) exp -> VARIABLE .
    (39) exp -> VARIABLE . unary_operator
    (24) assignment_statement -> VARIABLE . EQUALS exp
    (25) assignment_statement -> VARIABLE . assignment_operator exp
    (43) unary_operator -> . INCREMENT
    (44) unary_operator -> . DECREMENT
    (26) assignment_operator -> . MUL_ASSIGN
    (27) assignment_operator -> . DIV_ASSIGN
    (28) assignment_operator -> . MOD_ASSIGN
    (29) assignment_operator -> . ADD_ASSIGN
    (30) assignment_operator -> . SUB_ASSIGN
    (31) assignment_operator -> . LEFT_ASSIGN
    (32) assignment_operator -> . RIGHT_ASSIGN
    (33) assignment_operator -> . AND_ASSIGN
    (34) assignment_operator -> . XOR_ASSIGN
    (35) assignment_operator -> . OR_ASSIGN

    L_OP            reduce using rule 38 (exp -> VARIABLE .)
    G_OP            reduce using rule 38 (exp -> VARIABLE .)
    LE_OP           reduce using rule 38 (exp -> VARIABLE .)
    GE_OP           reduce using rule 38 (exp -> VARIABLE .)
    NOTEQUALS       reduce using rule 38 (exp -> VARIABLE .)
    EQUALS_OP       reduce using rule 38 (exp -> VARIABLE .)
    OR_OP           reduce using rule 38 (exp -> VARIABLE .)
    AND_OP          reduce using rule 38 (exp -> VARIABLE .)
    ADD             reduce using rule 38 (exp -> VARIABLE .)
    MINUS           reduce using rule 38 (exp -> VARIABLE .)
    MULT            reduce using rule 38 (exp -> VARIABLE .)
    DIV             reduce using rule 38 (exp -> VARIABLE .)
    MOD             reduce using rule 38 (exp -> VARIABLE .)
    RPAREN          reduce using rule 38 (exp -> VARIABLE .)
    SEMI_COLON      reduce using rule 38 (exp -> VARIABLE .)
    EQUALS          shift and go to state 45
    INCREMENT       shift and go to state 14
    DECREMENT       shift and go to state 30
    MUL_ASSIGN      shift and go to state 47
    DIV_ASSIGN      shift and go to state 52
    MOD_ASSIGN      shift and go to state 41
    ADD_ASSIGN      shift and go to state 50
    SUB_ASSIGN      shift and go to state 40
    LEFT_ASSIGN     shift and go to state 49
    RIGHT_ASSIGN    shift and go to state 42
    AND_ASSIGN      shift and go to state 46
    XOR_ASSIGN      shift and go to state 43
    OR_ASSIGN       shift and go to state 44

    unary_operator                 shift and go to state 51
    assignment_operator            shift and go to state 48

state 77

    (62) conditional_expression -> exp .
    (64) comparison_expression -> exp . comparison_operator exp
    (65) logical_expression -> exp . logical_operator exp
    (36) exp -> exp . operator exp
    (66) comparison_operator -> . L_OP
    (67) comparison_operator -> . G_OP
    (68) comparison_operator -> . LE_OP
    (69) comparison_operator -> . GE_OP
    (70) comparison_operator -> . NOTEQUALS
    (71) comparison_operator -> . EQUALS_OP
    (72) logical_operator -> . OR_OP
    (73) logical_operator -> . AND_OP
    (74) operator -> . ADD
    (75) operator -> . MINUS
    (76) operator -> . MULT
    (77) operator -> . DIV
    (78) operator -> . MOD

    RPAREN          reduce using rule 62 (conditional_expression -> exp .)
    SEMI_COLON      reduce using rule 62 (conditional_expression -> exp .)
    L_OP            shift and go to state 57
    G_OP            shift and go to state 56
    LE_OP           shift and go to state 64
    GE_OP           shift and go to state 61
    NOTEQUALS       shift and go to state 53
    EQUALS_OP       shift and go to state 55
    OR_OP           shift and go to state 62
    AND_OP          shift and go to state 59
    ADD             shift and go to state 60
    MINUS           shift and go to state 58
    MULT            shift and go to state 67
    DIV             shift and go to state 65
    MOD             shift and go to state 68

    operator                       shift and go to state 63
    logical_operator               shift and go to state 54
    comparison_operator            shift and go to state 66

state 78

    (47) iterative_statement -> WHILE LPAREN conditional_expression . RPAREN statement SEMI_COLON
    (48) iterative_statement -> WHILE LPAREN conditional_expression . RPAREN LBRACE statements RBRACE

    RPAREN          shift and go to state 90


state 79

    (10) declaration -> type VARIABLE EQUALS . constant
    (11) declaration -> type VARIABLE EQUALS . exp
    (19) constant -> . HEX_INT
    (20) constant -> . DOT_REAL
    (21) constant -> . EXP_REAL
    (22) constant -> . DEC_INT
    (23) constant -> . CHARACTER
    (36) exp -> . exp operator exp
    (37) exp -> . constant
    (38) exp -> . VARIABLE
    (39) exp -> . VARIABLE unary_operator
    (40) exp -> . unary_operator VARIABLE
    (41) exp -> . comparison_expression
    (42) exp -> . logical_expression
    (43) unary_operator -> . INCREMENT
    (44) unary_operator -> . DECREMENT
    (64) comparison_expression -> . exp comparison_operator exp
    (65) logical_expression -> . exp logical_operator exp

    HEX_INT         shift and go to state 26
    DOT_REAL        shift and go to state 28
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 7
    CHARACTER       shift and go to state 5
    VARIABLE        shift and go to state 83
    INCREMENT       shift and go to state 14
    DECREMENT       shift and go to state 30

    constant                       shift and go to state 91
    comparison_expression          shift and go to state 6
    logical_expression             shift and go to state 9
    exp                            shift and go to state 92
    unary_operator                 shift and go to state 20

state 80

    (45) iterative_statement -> FOR LPAREN assignment_statement . SEMI_COLON conditional_expression SEMI_COLON action RPAREN statement SEMI_COLON
    (46) iterative_statement -> FOR LPAREN assignment_statement . SEMI_COLON conditional_expression SEMI_COLON action RPAREN LBRACE statements RBRACE

    SEMI_COLON      shift and go to state 93


state 81

    (24) assignment_statement -> VARIABLE . EQUALS exp
    (25) assignment_statement -> VARIABLE . assignment_operator exp
    (26) assignment_operator -> . MUL_ASSIGN
    (27) assignment_operator -> . DIV_ASSIGN
    (28) assignment_operator -> . MOD_ASSIGN
    (29) assignment_operator -> . ADD_ASSIGN
    (30) assignment_operator -> . SUB_ASSIGN
    (31) assignment_operator -> . LEFT_ASSIGN
    (32) assignment_operator -> . RIGHT_ASSIGN
    (33) assignment_operator -> . AND_ASSIGN
    (34) assignment_operator -> . XOR_ASSIGN
    (35) assignment_operator -> . OR_ASSIGN

    EQUALS          shift and go to state 45
    MUL_ASSIGN      shift and go to state 47
    DIV_ASSIGN      shift and go to state 52
    MOD_ASSIGN      shift and go to state 41
    ADD_ASSIGN      shift and go to state 50
    SUB_ASSIGN      shift and go to state 40
    LEFT_ASSIGN     shift and go to state 49
    RIGHT_ASSIGN    shift and go to state 42
    AND_ASSIGN      shift and go to state 46
    XOR_ASSIGN      shift and go to state 43
    OR_ASSIGN       shift and go to state 44

    assignment_operator            shift and go to state 48

state 82

    (24) assignment_statement -> VARIABLE EQUALS exp .
    (36) exp -> exp . operator exp
    (64) comparison_expression -> exp . comparison_operator exp
    (65) logical_expression -> exp . logical_operator exp
    (74) operator -> . ADD
    (75) operator -> . MINUS
    (76) operator -> . MULT
    (77) operator -> . DIV
    (78) operator -> . MOD
    (66) comparison_operator -> . L_OP
    (67) comparison_operator -> . G_OP
    (68) comparison_operator -> . LE_OP
    (69) comparison_operator -> . GE_OP
    (70) comparison_operator -> . NOTEQUALS
    (71) comparison_operator -> . EQUALS_OP
    (72) logical_operator -> . OR_OP
    (73) logical_operator -> . AND_OP

    SEMI_COLON      reduce using rule 24 (assignment_statement -> VARIABLE EQUALS exp .)
    RPAREN          reduce using rule 24 (assignment_statement -> VARIABLE EQUALS exp .)
    ADD             shift and go to state 60
    MINUS           shift and go to state 58
    MULT            shift and go to state 67
    DIV             shift and go to state 65
    MOD             shift and go to state 68
    L_OP            shift and go to state 57
    G_OP            shift and go to state 56
    LE_OP           shift and go to state 64
    GE_OP           shift and go to state 61
    NOTEQUALS       shift and go to state 53
    EQUALS_OP       shift and go to state 55
    OR_OP           shift and go to state 62
    AND_OP          shift and go to state 59

    operator                       shift and go to state 63
    logical_operator               shift and go to state 54
    comparison_operator            shift and go to state 66

state 83

    (38) exp -> VARIABLE .
    (39) exp -> VARIABLE . unary_operator
    (43) unary_operator -> . INCREMENT
    (44) unary_operator -> . DECREMENT

    ADD             reduce using rule 38 (exp -> VARIABLE .)
    MINUS           reduce using rule 38 (exp -> VARIABLE .)
    MULT            reduce using rule 38 (exp -> VARIABLE .)
    DIV             reduce using rule 38 (exp -> VARIABLE .)
    MOD             reduce using rule 38 (exp -> VARIABLE .)
    L_OP            reduce using rule 38 (exp -> VARIABLE .)
    G_OP            reduce using rule 38 (exp -> VARIABLE .)
    LE_OP           reduce using rule 38 (exp -> VARIABLE .)
    GE_OP           reduce using rule 38 (exp -> VARIABLE .)
    NOTEQUALS       reduce using rule 38 (exp -> VARIABLE .)
    EQUALS_OP       reduce using rule 38 (exp -> VARIABLE .)
    OR_OP           reduce using rule 38 (exp -> VARIABLE .)
    AND_OP          reduce using rule 38 (exp -> VARIABLE .)
    SEMI_COLON      reduce using rule 38 (exp -> VARIABLE .)
    RPAREN          reduce using rule 38 (exp -> VARIABLE .)
    INCREMENT       shift and go to state 14
    DECREMENT       shift and go to state 30

    unary_operator                 shift and go to state 51

state 84

    (25) assignment_statement -> VARIABLE assignment_operator exp .
    (36) exp -> exp . operator exp
    (64) comparison_expression -> exp . comparison_operator exp
    (65) logical_expression -> exp . logical_operator exp
    (74) operator -> . ADD
    (75) operator -> . MINUS
    (76) operator -> . MULT
    (77) operator -> . DIV
    (78) operator -> . MOD
    (66) comparison_operator -> . L_OP
    (67) comparison_operator -> . G_OP
    (68) comparison_operator -> . LE_OP
    (69) comparison_operator -> . GE_OP
    (70) comparison_operator -> . NOTEQUALS
    (71) comparison_operator -> . EQUALS_OP
    (72) logical_operator -> . OR_OP
    (73) logical_operator -> . AND_OP

    SEMI_COLON      reduce using rule 25 (assignment_statement -> VARIABLE assignment_operator exp .)
    RPAREN          reduce using rule 25 (assignment_statement -> VARIABLE assignment_operator exp .)
    ADD             shift and go to state 60
    MINUS           shift and go to state 58
    MULT            shift and go to state 67
    DIV             shift and go to state 65
    MOD             shift and go to state 68
    L_OP            shift and go to state 57
    G_OP            shift and go to state 56
    LE_OP           shift and go to state 64
    GE_OP           shift and go to state 61
    NOTEQUALS       shift and go to state 53
    EQUALS_OP       shift and go to state 55
    OR_OP           shift and go to state 62
    AND_OP          shift and go to state 59

    operator                       shift and go to state 63
    logical_operator               shift and go to state 54
    comparison_operator            shift and go to state 66

state 85

    (65) logical_expression -> exp logical_operator exp .
    (36) exp -> exp . operator exp
    (64) comparison_expression -> exp . comparison_operator exp
    (65) logical_expression -> exp . logical_operator exp
    (74) operator -> . ADD
    (75) operator -> . MINUS
    (76) operator -> . MULT
    (77) operator -> . DIV
    (78) operator -> . MOD
    (66) comparison_operator -> . L_OP
    (67) comparison_operator -> . G_OP
    (68) comparison_operator -> . LE_OP
    (69) comparison_operator -> . GE_OP
    (70) comparison_operator -> . NOTEQUALS
    (71) comparison_operator -> . EQUALS_OP
    (72) logical_operator -> . OR_OP
    (73) logical_operator -> . AND_OP

  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for L_OP resolved as shift
  ! shift/reduce conflict for G_OP resolved as shift
  ! shift/reduce conflict for LE_OP resolved as shift
  ! shift/reduce conflict for GE_OP resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for EQUALS_OP resolved as shift
  ! shift/reduce conflict for OR_OP resolved as shift
  ! shift/reduce conflict for AND_OP resolved as shift
    RPAREN          reduce using rule 65 (logical_expression -> exp logical_operator exp .)
    SEMI_COLON      reduce using rule 65 (logical_expression -> exp logical_operator exp .)
    ADD             shift and go to state 60
    MINUS           shift and go to state 58
    MULT            shift and go to state 67
    DIV             shift and go to state 65
    MOD             shift and go to state 68
    L_OP            shift and go to state 57
    G_OP            shift and go to state 56
    LE_OP           shift and go to state 64
    GE_OP           shift and go to state 61
    NOTEQUALS       shift and go to state 53
    EQUALS_OP       shift and go to state 55
    OR_OP           shift and go to state 62
    AND_OP          shift and go to state 59

  ! L_OP            [ reduce using rule 65 (logical_expression -> exp logical_operator exp .) ]
  ! G_OP            [ reduce using rule 65 (logical_expression -> exp logical_operator exp .) ]
  ! LE_OP           [ reduce using rule 65 (logical_expression -> exp logical_operator exp .) ]
  ! GE_OP           [ reduce using rule 65 (logical_expression -> exp logical_operator exp .) ]
  ! NOTEQUALS       [ reduce using rule 65 (logical_expression -> exp logical_operator exp .) ]
  ! EQUALS_OP       [ reduce using rule 65 (logical_expression -> exp logical_operator exp .) ]
  ! OR_OP           [ reduce using rule 65 (logical_expression -> exp logical_operator exp .) ]
  ! AND_OP          [ reduce using rule 65 (logical_expression -> exp logical_operator exp .) ]
  ! ADD             [ reduce using rule 65 (logical_expression -> exp logical_operator exp .) ]
  ! MINUS           [ reduce using rule 65 (logical_expression -> exp logical_operator exp .) ]
  ! MULT            [ reduce using rule 65 (logical_expression -> exp logical_operator exp .) ]
  ! DIV             [ reduce using rule 65 (logical_expression -> exp logical_operator exp .) ]
  ! MOD             [ reduce using rule 65 (logical_expression -> exp logical_operator exp .) ]

    operator                       shift and go to state 63
    logical_operator               shift and go to state 54
    comparison_operator            shift and go to state 66

state 86

    (36) exp -> exp operator exp .
    (36) exp -> exp . operator exp
    (64) comparison_expression -> exp . comparison_operator exp
    (65) logical_expression -> exp . logical_operator exp
    (74) operator -> . ADD
    (75) operator -> . MINUS
    (76) operator -> . MULT
    (77) operator -> . DIV
    (78) operator -> . MOD
    (66) comparison_operator -> . L_OP
    (67) comparison_operator -> . G_OP
    (68) comparison_operator -> . LE_OP
    (69) comparison_operator -> . GE_OP
    (70) comparison_operator -> . NOTEQUALS
    (71) comparison_operator -> . EQUALS_OP
    (72) logical_operator -> . OR_OP
    (73) logical_operator -> . AND_OP

  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for L_OP resolved as shift
  ! shift/reduce conflict for G_OP resolved as shift
  ! shift/reduce conflict for LE_OP resolved as shift
  ! shift/reduce conflict for GE_OP resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for EQUALS_OP resolved as shift
  ! shift/reduce conflict for OR_OP resolved as shift
  ! shift/reduce conflict for AND_OP resolved as shift
    SEMI_COLON      reduce using rule 36 (exp -> exp operator exp .)
    RPAREN          reduce using rule 36 (exp -> exp operator exp .)
    ADD             shift and go to state 60
    MINUS           shift and go to state 58
    MULT            shift and go to state 67
    DIV             shift and go to state 65
    MOD             shift and go to state 68
    L_OP            shift and go to state 57
    G_OP            shift and go to state 56
    LE_OP           shift and go to state 64
    GE_OP           shift and go to state 61
    NOTEQUALS       shift and go to state 53
    EQUALS_OP       shift and go to state 55
    OR_OP           shift and go to state 62
    AND_OP          shift and go to state 59

  ! ADD             [ reduce using rule 36 (exp -> exp operator exp .) ]
  ! MINUS           [ reduce using rule 36 (exp -> exp operator exp .) ]
  ! MULT            [ reduce using rule 36 (exp -> exp operator exp .) ]
  ! DIV             [ reduce using rule 36 (exp -> exp operator exp .) ]
  ! MOD             [ reduce using rule 36 (exp -> exp operator exp .) ]
  ! L_OP            [ reduce using rule 36 (exp -> exp operator exp .) ]
  ! G_OP            [ reduce using rule 36 (exp -> exp operator exp .) ]
  ! LE_OP           [ reduce using rule 36 (exp -> exp operator exp .) ]
  ! GE_OP           [ reduce using rule 36 (exp -> exp operator exp .) ]
  ! NOTEQUALS       [ reduce using rule 36 (exp -> exp operator exp .) ]
  ! EQUALS_OP       [ reduce using rule 36 (exp -> exp operator exp .) ]
  ! OR_OP           [ reduce using rule 36 (exp -> exp operator exp .) ]
  ! AND_OP          [ reduce using rule 36 (exp -> exp operator exp .) ]

    operator                       shift and go to state 63
    logical_operator               shift and go to state 54
    comparison_operator            shift and go to state 66

state 87

    (64) comparison_expression -> exp comparison_operator exp .
    (36) exp -> exp . operator exp
    (64) comparison_expression -> exp . comparison_operator exp
    (65) logical_expression -> exp . logical_operator exp
    (74) operator -> . ADD
    (75) operator -> . MINUS
    (76) operator -> . MULT
    (77) operator -> . DIV
    (78) operator -> . MOD
    (66) comparison_operator -> . L_OP
    (67) comparison_operator -> . G_OP
    (68) comparison_operator -> . LE_OP
    (69) comparison_operator -> . GE_OP
    (70) comparison_operator -> . NOTEQUALS
    (71) comparison_operator -> . EQUALS_OP
    (72) logical_operator -> . OR_OP
    (73) logical_operator -> . AND_OP

  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for L_OP resolved as shift
  ! shift/reduce conflict for G_OP resolved as shift
  ! shift/reduce conflict for LE_OP resolved as shift
  ! shift/reduce conflict for GE_OP resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for EQUALS_OP resolved as shift
  ! shift/reduce conflict for OR_OP resolved as shift
  ! shift/reduce conflict for AND_OP resolved as shift
    SEMI_COLON      reduce using rule 64 (comparison_expression -> exp comparison_operator exp .)
    RPAREN          reduce using rule 64 (comparison_expression -> exp comparison_operator exp .)
    ADD             shift and go to state 60
    MINUS           shift and go to state 58
    MULT            shift and go to state 67
    DIV             shift and go to state 65
    MOD             shift and go to state 68
    L_OP            shift and go to state 57
    G_OP            shift and go to state 56
    LE_OP           shift and go to state 64
    GE_OP           shift and go to state 61
    NOTEQUALS       shift and go to state 53
    EQUALS_OP       shift and go to state 55
    OR_OP           shift and go to state 62
    AND_OP          shift and go to state 59

  ! ADD             [ reduce using rule 64 (comparison_expression -> exp comparison_operator exp .) ]
  ! MINUS           [ reduce using rule 64 (comparison_expression -> exp comparison_operator exp .) ]
  ! MULT            [ reduce using rule 64 (comparison_expression -> exp comparison_operator exp .) ]
  ! DIV             [ reduce using rule 64 (comparison_expression -> exp comparison_operator exp .) ]
  ! MOD             [ reduce using rule 64 (comparison_expression -> exp comparison_operator exp .) ]
  ! L_OP            [ reduce using rule 64 (comparison_expression -> exp comparison_operator exp .) ]
  ! G_OP            [ reduce using rule 64 (comparison_expression -> exp comparison_operator exp .) ]
  ! LE_OP           [ reduce using rule 64 (comparison_expression -> exp comparison_operator exp .) ]
  ! GE_OP           [ reduce using rule 64 (comparison_expression -> exp comparison_operator exp .) ]
  ! NOTEQUALS       [ reduce using rule 64 (comparison_expression -> exp comparison_operator exp .) ]
  ! EQUALS_OP       [ reduce using rule 64 (comparison_expression -> exp comparison_operator exp .) ]
  ! OR_OP           [ reduce using rule 64 (comparison_expression -> exp comparison_operator exp .) ]
  ! AND_OP          [ reduce using rule 64 (comparison_expression -> exp comparison_operator exp .) ]

    operator                       shift and go to state 63
    logical_operator               shift and go to state 54
    comparison_operator            shift and go to state 66

state 88

    (49) iterative_statement -> DO statement SEMI_COLON WHILE . LPAREN conditional_expression RPAREN SEMI_COLON

    LPAREN          shift and go to state 94


state 89

    (50) iterative_statement -> DO LBRACE statements RBRACE . WHILE LPAREN conditional_expression RPAREN SEMI_COLON

    WHILE           shift and go to state 95


state 90

    (47) iterative_statement -> WHILE LPAREN conditional_expression RPAREN . statement SEMI_COLON
    (48) iterative_statement -> WHILE LPAREN conditional_expression RPAREN . LBRACE statements RBRACE
    (5) statement -> . declaration
    (6) statement -> . assignment_statement
    (7) statement -> . exp
    (8) statement -> . iterative_statement
    (9) declaration -> . type VARIABLE
    (10) declaration -> . type VARIABLE EQUALS constant
    (11) declaration -> . type VARIABLE EQUALS exp
    (24) assignment_statement -> . VARIABLE EQUALS exp
    (25) assignment_statement -> . VARIABLE assignment_operator exp
    (36) exp -> . exp operator exp
    (37) exp -> . constant
    (38) exp -> . VARIABLE
    (39) exp -> . VARIABLE unary_operator
    (40) exp -> . unary_operator VARIABLE
    (41) exp -> . comparison_expression
    (42) exp -> . logical_expression
    (45) iterative_statement -> . FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN statement SEMI_COLON
    (46) iterative_statement -> . FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN LBRACE statements RBRACE
    (47) iterative_statement -> . WHILE LPAREN conditional_expression RPAREN statement SEMI_COLON
    (48) iterative_statement -> . WHILE LPAREN conditional_expression RPAREN LBRACE statements RBRACE
    (49) iterative_statement -> . DO statement SEMI_COLON WHILE LPAREN conditional_expression RPAREN SEMI_COLON
    (50) iterative_statement -> . DO LBRACE statements RBRACE WHILE LPAREN conditional_expression RPAREN SEMI_COLON
    (12) type -> . INT
    (13) type -> . FLOAT
    (14) type -> . CHAR
    (15) type -> . DOUBLE
    (16) type -> . VOID
    (17) type -> . SHORT
    (18) type -> . LONG
    (19) constant -> . HEX_INT
    (20) constant -> . DOT_REAL
    (21) constant -> . EXP_REAL
    (22) constant -> . DEC_INT
    (23) constant -> . CHARACTER
    (43) unary_operator -> . INCREMENT
    (44) unary_operator -> . DECREMENT
    (64) comparison_expression -> . exp comparison_operator exp
    (65) logical_expression -> . exp logical_operator exp

    LBRACE          shift and go to state 97
    VARIABLE        shift and go to state 23
    FOR             shift and go to state 21
    WHILE           shift and go to state 10
    DO              shift and go to state 1
    INT             shift and go to state 24
    FLOAT           shift and go to state 27
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 25
    VOID            shift and go to state 4
    SHORT           shift and go to state 2
    LONG            shift and go to state 17
    HEX_INT         shift and go to state 26
    DOT_REAL        shift and go to state 28
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 7
    CHARACTER       shift and go to state 5
    INCREMENT       shift and go to state 14
    DECREMENT       shift and go to state 30

    statement                      shift and go to state 96
    type                           shift and go to state 19
    assignment_statement           shift and go to state 16
    comparison_expression          shift and go to state 6
    logical_expression             shift and go to state 9
    exp                            shift and go to state 29
    declaration                    shift and go to state 22
    constant                       shift and go to state 11
    iterative_statement            shift and go to state 12
    unary_operator                 shift and go to state 20

state 91

    (10) declaration -> type VARIABLE EQUALS constant .
    (37) exp -> constant .

  ! reduce/reduce conflict for SEMI_COLON resolved using rule 10 (declaration -> type VARIABLE EQUALS constant .)
    SEMI_COLON      reduce using rule 10 (declaration -> type VARIABLE EQUALS constant .)
    ADD             reduce using rule 37 (exp -> constant .)
    MINUS           reduce using rule 37 (exp -> constant .)
    MULT            reduce using rule 37 (exp -> constant .)
    DIV             reduce using rule 37 (exp -> constant .)
    MOD             reduce using rule 37 (exp -> constant .)
    L_OP            reduce using rule 37 (exp -> constant .)
    G_OP            reduce using rule 37 (exp -> constant .)
    LE_OP           reduce using rule 37 (exp -> constant .)
    GE_OP           reduce using rule 37 (exp -> constant .)
    NOTEQUALS       reduce using rule 37 (exp -> constant .)
    EQUALS_OP       reduce using rule 37 (exp -> constant .)
    OR_OP           reduce using rule 37 (exp -> constant .)
    AND_OP          reduce using rule 37 (exp -> constant .)

  ! SEMI_COLON      [ reduce using rule 37 (exp -> constant .) ]


state 92

    (11) declaration -> type VARIABLE EQUALS exp .
    (36) exp -> exp . operator exp
    (64) comparison_expression -> exp . comparison_operator exp
    (65) logical_expression -> exp . logical_operator exp
    (74) operator -> . ADD
    (75) operator -> . MINUS
    (76) operator -> . MULT
    (77) operator -> . DIV
    (78) operator -> . MOD
    (66) comparison_operator -> . L_OP
    (67) comparison_operator -> . G_OP
    (68) comparison_operator -> . LE_OP
    (69) comparison_operator -> . GE_OP
    (70) comparison_operator -> . NOTEQUALS
    (71) comparison_operator -> . EQUALS_OP
    (72) logical_operator -> . OR_OP
    (73) logical_operator -> . AND_OP

    SEMI_COLON      reduce using rule 11 (declaration -> type VARIABLE EQUALS exp .)
    ADD             shift and go to state 60
    MINUS           shift and go to state 58
    MULT            shift and go to state 67
    DIV             shift and go to state 65
    MOD             shift and go to state 68
    L_OP            shift and go to state 57
    G_OP            shift and go to state 56
    LE_OP           shift and go to state 64
    GE_OP           shift and go to state 61
    NOTEQUALS       shift and go to state 53
    EQUALS_OP       shift and go to state 55
    OR_OP           shift and go to state 62
    AND_OP          shift and go to state 59

    operator                       shift and go to state 63
    logical_operator               shift and go to state 54
    comparison_operator            shift and go to state 66

state 93

    (45) iterative_statement -> FOR LPAREN assignment_statement SEMI_COLON . conditional_expression SEMI_COLON action RPAREN statement SEMI_COLON
    (46) iterative_statement -> FOR LPAREN assignment_statement SEMI_COLON . conditional_expression SEMI_COLON action RPAREN LBRACE statements RBRACE
    (59) conditional_expression -> . comparison_expression
    (60) conditional_expression -> . logical_expression
    (61) conditional_expression -> . constant
    (62) conditional_expression -> . exp
    (63) conditional_expression -> . assignment_statement
    (64) comparison_expression -> . exp comparison_operator exp
    (65) logical_expression -> . exp logical_operator exp
    (19) constant -> . HEX_INT
    (20) constant -> . DOT_REAL
    (21) constant -> . EXP_REAL
    (22) constant -> . DEC_INT
    (23) constant -> . CHARACTER
    (36) exp -> . exp operator exp
    (37) exp -> . constant
    (38) exp -> . VARIABLE
    (39) exp -> . VARIABLE unary_operator
    (40) exp -> . unary_operator VARIABLE
    (41) exp -> . comparison_expression
    (42) exp -> . logical_expression
    (24) assignment_statement -> . VARIABLE EQUALS exp
    (25) assignment_statement -> . VARIABLE assignment_operator exp
    (43) unary_operator -> . INCREMENT
    (44) unary_operator -> . DECREMENT

    HEX_INT         shift and go to state 26
    DOT_REAL        shift and go to state 28
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 7
    CHARACTER       shift and go to state 5
    VARIABLE        shift and go to state 76
    INCREMENT       shift and go to state 14
    DECREMENT       shift and go to state 30

    exp                            shift and go to state 77
    comparison_expression          shift and go to state 72
    assignment_statement           shift and go to state 73
    logical_expression             shift and go to state 74
    conditional_expression         shift and go to state 98
    constant                       shift and go to state 75
    unary_operator                 shift and go to state 20

state 94

    (49) iterative_statement -> DO statement SEMI_COLON WHILE LPAREN . conditional_expression RPAREN SEMI_COLON
    (59) conditional_expression -> . comparison_expression
    (60) conditional_expression -> . logical_expression
    (61) conditional_expression -> . constant
    (62) conditional_expression -> . exp
    (63) conditional_expression -> . assignment_statement
    (64) comparison_expression -> . exp comparison_operator exp
    (65) logical_expression -> . exp logical_operator exp
    (19) constant -> . HEX_INT
    (20) constant -> . DOT_REAL
    (21) constant -> . EXP_REAL
    (22) constant -> . DEC_INT
    (23) constant -> . CHARACTER
    (36) exp -> . exp operator exp
    (37) exp -> . constant
    (38) exp -> . VARIABLE
    (39) exp -> . VARIABLE unary_operator
    (40) exp -> . unary_operator VARIABLE
    (41) exp -> . comparison_expression
    (42) exp -> . logical_expression
    (24) assignment_statement -> . VARIABLE EQUALS exp
    (25) assignment_statement -> . VARIABLE assignment_operator exp
    (43) unary_operator -> . INCREMENT
    (44) unary_operator -> . DECREMENT

    HEX_INT         shift and go to state 26
    DOT_REAL        shift and go to state 28
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 7
    CHARACTER       shift and go to state 5
    VARIABLE        shift and go to state 76
    INCREMENT       shift and go to state 14
    DECREMENT       shift and go to state 30

    constant                       shift and go to state 75
    comparison_expression          shift and go to state 72
    assignment_statement           shift and go to state 73
    exp                            shift and go to state 77
    conditional_expression         shift and go to state 99
    logical_expression             shift and go to state 74
    unary_operator                 shift and go to state 20

state 95

    (50) iterative_statement -> DO LBRACE statements RBRACE WHILE . LPAREN conditional_expression RPAREN SEMI_COLON

    LPAREN          shift and go to state 100


state 96

    (47) iterative_statement -> WHILE LPAREN conditional_expression RPAREN statement . SEMI_COLON

    SEMI_COLON      shift and go to state 101


state 97

    (48) iterative_statement -> WHILE LPAREN conditional_expression RPAREN LBRACE . statements RBRACE
    (1) statements -> . statements statement SEMI_COLON
    (2) statements -> . statement SEMI_COLON
    (3) statements -> . COMMENT
    (4) statements -> . COMMENT statements
    (5) statement -> . declaration
    (6) statement -> . assignment_statement
    (7) statement -> . exp
    (8) statement -> . iterative_statement
    (9) declaration -> . type VARIABLE
    (10) declaration -> . type VARIABLE EQUALS constant
    (11) declaration -> . type VARIABLE EQUALS exp
    (24) assignment_statement -> . VARIABLE EQUALS exp
    (25) assignment_statement -> . VARIABLE assignment_operator exp
    (36) exp -> . exp operator exp
    (37) exp -> . constant
    (38) exp -> . VARIABLE
    (39) exp -> . VARIABLE unary_operator
    (40) exp -> . unary_operator VARIABLE
    (41) exp -> . comparison_expression
    (42) exp -> . logical_expression
    (45) iterative_statement -> . FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN statement SEMI_COLON
    (46) iterative_statement -> . FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN LBRACE statements RBRACE
    (47) iterative_statement -> . WHILE LPAREN conditional_expression RPAREN statement SEMI_COLON
    (48) iterative_statement -> . WHILE LPAREN conditional_expression RPAREN LBRACE statements RBRACE
    (49) iterative_statement -> . DO statement SEMI_COLON WHILE LPAREN conditional_expression RPAREN SEMI_COLON
    (50) iterative_statement -> . DO LBRACE statements RBRACE WHILE LPAREN conditional_expression RPAREN SEMI_COLON
    (12) type -> . INT
    (13) type -> . FLOAT
    (14) type -> . CHAR
    (15) type -> . DOUBLE
    (16) type -> . VOID
    (17) type -> . SHORT
    (18) type -> . LONG
    (19) constant -> . HEX_INT
    (20) constant -> . DOT_REAL
    (21) constant -> . EXP_REAL
    (22) constant -> . DEC_INT
    (23) constant -> . CHARACTER
    (43) unary_operator -> . INCREMENT
    (44) unary_operator -> . DECREMENT
    (64) comparison_expression -> . exp comparison_operator exp
    (65) logical_expression -> . exp logical_operator exp

    COMMENT         shift and go to state 13
    VARIABLE        shift and go to state 23
    FOR             shift and go to state 21
    WHILE           shift and go to state 10
    DO              shift and go to state 1
    INT             shift and go to state 24
    FLOAT           shift and go to state 27
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 25
    VOID            shift and go to state 4
    SHORT           shift and go to state 2
    LONG            shift and go to state 17
    HEX_INT         shift and go to state 26
    DOT_REAL        shift and go to state 28
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 7
    CHARACTER       shift and go to state 5
    INCREMENT       shift and go to state 14
    DECREMENT       shift and go to state 30

    statements                     shift and go to state 102
    statement                      shift and go to state 18
    type                           shift and go to state 19
    assignment_statement           shift and go to state 16
    comparison_expression          shift and go to state 6
    logical_expression             shift and go to state 9
    exp                            shift and go to state 29
    declaration                    shift and go to state 22
    constant                       shift and go to state 11
    iterative_statement            shift and go to state 12
    unary_operator                 shift and go to state 20

state 98

    (45) iterative_statement -> FOR LPAREN assignment_statement SEMI_COLON conditional_expression . SEMI_COLON action RPAREN statement SEMI_COLON
    (46) iterative_statement -> FOR LPAREN assignment_statement SEMI_COLON conditional_expression . SEMI_COLON action RPAREN LBRACE statements RBRACE

    SEMI_COLON      shift and go to state 103


state 99

    (49) iterative_statement -> DO statement SEMI_COLON WHILE LPAREN conditional_expression . RPAREN SEMI_COLON

    RPAREN          shift and go to state 104


state 100

    (50) iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN . conditional_expression RPAREN SEMI_COLON
    (59) conditional_expression -> . comparison_expression
    (60) conditional_expression -> . logical_expression
    (61) conditional_expression -> . constant
    (62) conditional_expression -> . exp
    (63) conditional_expression -> . assignment_statement
    (64) comparison_expression -> . exp comparison_operator exp
    (65) logical_expression -> . exp logical_operator exp
    (19) constant -> . HEX_INT
    (20) constant -> . DOT_REAL
    (21) constant -> . EXP_REAL
    (22) constant -> . DEC_INT
    (23) constant -> . CHARACTER
    (36) exp -> . exp operator exp
    (37) exp -> . constant
    (38) exp -> . VARIABLE
    (39) exp -> . VARIABLE unary_operator
    (40) exp -> . unary_operator VARIABLE
    (41) exp -> . comparison_expression
    (42) exp -> . logical_expression
    (24) assignment_statement -> . VARIABLE EQUALS exp
    (25) assignment_statement -> . VARIABLE assignment_operator exp
    (43) unary_operator -> . INCREMENT
    (44) unary_operator -> . DECREMENT

    HEX_INT         shift and go to state 26
    DOT_REAL        shift and go to state 28
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 7
    CHARACTER       shift and go to state 5
    VARIABLE        shift and go to state 76
    INCREMENT       shift and go to state 14
    DECREMENT       shift and go to state 30

    constant                       shift and go to state 75
    comparison_expression          shift and go to state 72
    assignment_statement           shift and go to state 73
    exp                            shift and go to state 77
    conditional_expression         shift and go to state 105
    logical_expression             shift and go to state 74
    unary_operator                 shift and go to state 20

state 101

    (47) iterative_statement -> WHILE LPAREN conditional_expression RPAREN statement SEMI_COLON .

    SEMI_COLON      reduce using rule 47 (iterative_statement -> WHILE LPAREN conditional_expression RPAREN statement SEMI_COLON .)


state 102

    (48) iterative_statement -> WHILE LPAREN conditional_expression RPAREN LBRACE statements . RBRACE
    (1) statements -> statements . statement SEMI_COLON
    (5) statement -> . declaration
    (6) statement -> . assignment_statement
    (7) statement -> . exp
    (8) statement -> . iterative_statement
    (9) declaration -> . type VARIABLE
    (10) declaration -> . type VARIABLE EQUALS constant
    (11) declaration -> . type VARIABLE EQUALS exp
    (24) assignment_statement -> . VARIABLE EQUALS exp
    (25) assignment_statement -> . VARIABLE assignment_operator exp
    (36) exp -> . exp operator exp
    (37) exp -> . constant
    (38) exp -> . VARIABLE
    (39) exp -> . VARIABLE unary_operator
    (40) exp -> . unary_operator VARIABLE
    (41) exp -> . comparison_expression
    (42) exp -> . logical_expression
    (45) iterative_statement -> . FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN statement SEMI_COLON
    (46) iterative_statement -> . FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN LBRACE statements RBRACE
    (47) iterative_statement -> . WHILE LPAREN conditional_expression RPAREN statement SEMI_COLON
    (48) iterative_statement -> . WHILE LPAREN conditional_expression RPAREN LBRACE statements RBRACE
    (49) iterative_statement -> . DO statement SEMI_COLON WHILE LPAREN conditional_expression RPAREN SEMI_COLON
    (50) iterative_statement -> . DO LBRACE statements RBRACE WHILE LPAREN conditional_expression RPAREN SEMI_COLON
    (12) type -> . INT
    (13) type -> . FLOAT
    (14) type -> . CHAR
    (15) type -> . DOUBLE
    (16) type -> . VOID
    (17) type -> . SHORT
    (18) type -> . LONG
    (19) constant -> . HEX_INT
    (20) constant -> . DOT_REAL
    (21) constant -> . EXP_REAL
    (22) constant -> . DEC_INT
    (23) constant -> . CHARACTER
    (43) unary_operator -> . INCREMENT
    (44) unary_operator -> . DECREMENT
    (64) comparison_expression -> . exp comparison_operator exp
    (65) logical_expression -> . exp logical_operator exp

    RBRACE          shift and go to state 106
    VARIABLE        shift and go to state 23
    FOR             shift and go to state 21
    WHILE           shift and go to state 10
    DO              shift and go to state 1
    INT             shift and go to state 24
    FLOAT           shift and go to state 27
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 25
    VOID            shift and go to state 4
    SHORT           shift and go to state 2
    LONG            shift and go to state 17
    HEX_INT         shift and go to state 26
    DOT_REAL        shift and go to state 28
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 7
    CHARACTER       shift and go to state 5
    INCREMENT       shift and go to state 14
    DECREMENT       shift and go to state 30

    statement                      shift and go to state 33
    type                           shift and go to state 19
    assignment_statement           shift and go to state 16
    comparison_expression          shift and go to state 6
    logical_expression             shift and go to state 9
    exp                            shift and go to state 29
    declaration                    shift and go to state 22
    constant                       shift and go to state 11
    iterative_statement            shift and go to state 12
    unary_operator                 shift and go to state 20

state 103

    (45) iterative_statement -> FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON . action RPAREN statement SEMI_COLON
    (46) iterative_statement -> FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON . action RPAREN LBRACE statements RBRACE
    (51) action -> . assignment_statement
    (52) action -> . exp
    (24) assignment_statement -> . VARIABLE EQUALS exp
    (25) assignment_statement -> . VARIABLE assignment_operator exp
    (36) exp -> . exp operator exp
    (37) exp -> . constant
    (38) exp -> . VARIABLE
    (39) exp -> . VARIABLE unary_operator
    (40) exp -> . unary_operator VARIABLE
    (41) exp -> . comparison_expression
    (42) exp -> . logical_expression
    (19) constant -> . HEX_INT
    (20) constant -> . DOT_REAL
    (21) constant -> . EXP_REAL
    (22) constant -> . DEC_INT
    (23) constant -> . CHARACTER
    (43) unary_operator -> . INCREMENT
    (44) unary_operator -> . DECREMENT
    (64) comparison_expression -> . exp comparison_operator exp
    (65) logical_expression -> . exp logical_operator exp

    VARIABLE        shift and go to state 23
    HEX_INT         shift and go to state 26
    DOT_REAL        shift and go to state 28
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 7
    CHARACTER       shift and go to state 5
    INCREMENT       shift and go to state 14
    DECREMENT       shift and go to state 30

    assignment_statement           shift and go to state 107
    comparison_expression          shift and go to state 6
    logical_expression             shift and go to state 9
    exp                            shift and go to state 108
    action                         shift and go to state 109
    constant                       shift and go to state 11
    unary_operator                 shift and go to state 20

state 104

    (49) iterative_statement -> DO statement SEMI_COLON WHILE LPAREN conditional_expression RPAREN . SEMI_COLON

    SEMI_COLON      shift and go to state 110


state 105

    (50) iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN conditional_expression . RPAREN SEMI_COLON

    RPAREN          shift and go to state 111


state 106

    (48) iterative_statement -> WHILE LPAREN conditional_expression RPAREN LBRACE statements RBRACE .

    SEMI_COLON      reduce using rule 48 (iterative_statement -> WHILE LPAREN conditional_expression RPAREN LBRACE statements RBRACE .)


state 107

    (51) action -> assignment_statement .

    RPAREN          reduce using rule 51 (action -> assignment_statement .)


state 108

    (52) action -> exp .
    (36) exp -> exp . operator exp
    (64) comparison_expression -> exp . comparison_operator exp
    (65) logical_expression -> exp . logical_operator exp
    (74) operator -> . ADD
    (75) operator -> . MINUS
    (76) operator -> . MULT
    (77) operator -> . DIV
    (78) operator -> . MOD
    (66) comparison_operator -> . L_OP
    (67) comparison_operator -> . G_OP
    (68) comparison_operator -> . LE_OP
    (69) comparison_operator -> . GE_OP
    (70) comparison_operator -> . NOTEQUALS
    (71) comparison_operator -> . EQUALS_OP
    (72) logical_operator -> . OR_OP
    (73) logical_operator -> . AND_OP

    RPAREN          reduce using rule 52 (action -> exp .)
    ADD             shift and go to state 60
    MINUS           shift and go to state 58
    MULT            shift and go to state 67
    DIV             shift and go to state 65
    MOD             shift and go to state 68
    L_OP            shift and go to state 57
    G_OP            shift and go to state 56
    LE_OP           shift and go to state 64
    GE_OP           shift and go to state 61
    NOTEQUALS       shift and go to state 53
    EQUALS_OP       shift and go to state 55
    OR_OP           shift and go to state 62
    AND_OP          shift and go to state 59

    operator                       shift and go to state 63
    logical_operator               shift and go to state 54
    comparison_operator            shift and go to state 66

state 109

    (45) iterative_statement -> FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action . RPAREN statement SEMI_COLON
    (46) iterative_statement -> FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action . RPAREN LBRACE statements RBRACE

    RPAREN          shift and go to state 112


state 110

    (49) iterative_statement -> DO statement SEMI_COLON WHILE LPAREN conditional_expression RPAREN SEMI_COLON .

    SEMI_COLON      reduce using rule 49 (iterative_statement -> DO statement SEMI_COLON WHILE LPAREN conditional_expression RPAREN SEMI_COLON .)


state 111

    (50) iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN conditional_expression RPAREN . SEMI_COLON

    SEMI_COLON      shift and go to state 113


state 112

    (45) iterative_statement -> FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN . statement SEMI_COLON
    (46) iterative_statement -> FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN . LBRACE statements RBRACE
    (5) statement -> . declaration
    (6) statement -> . assignment_statement
    (7) statement -> . exp
    (8) statement -> . iterative_statement
    (9) declaration -> . type VARIABLE
    (10) declaration -> . type VARIABLE EQUALS constant
    (11) declaration -> . type VARIABLE EQUALS exp
    (24) assignment_statement -> . VARIABLE EQUALS exp
    (25) assignment_statement -> . VARIABLE assignment_operator exp
    (36) exp -> . exp operator exp
    (37) exp -> . constant
    (38) exp -> . VARIABLE
    (39) exp -> . VARIABLE unary_operator
    (40) exp -> . unary_operator VARIABLE
    (41) exp -> . comparison_expression
    (42) exp -> . logical_expression
    (45) iterative_statement -> . FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN statement SEMI_COLON
    (46) iterative_statement -> . FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN LBRACE statements RBRACE
    (47) iterative_statement -> . WHILE LPAREN conditional_expression RPAREN statement SEMI_COLON
    (48) iterative_statement -> . WHILE LPAREN conditional_expression RPAREN LBRACE statements RBRACE
    (49) iterative_statement -> . DO statement SEMI_COLON WHILE LPAREN conditional_expression RPAREN SEMI_COLON
    (50) iterative_statement -> . DO LBRACE statements RBRACE WHILE LPAREN conditional_expression RPAREN SEMI_COLON
    (12) type -> . INT
    (13) type -> . FLOAT
    (14) type -> . CHAR
    (15) type -> . DOUBLE
    (16) type -> . VOID
    (17) type -> . SHORT
    (18) type -> . LONG
    (19) constant -> . HEX_INT
    (20) constant -> . DOT_REAL
    (21) constant -> . EXP_REAL
    (22) constant -> . DEC_INT
    (23) constant -> . CHARACTER
    (43) unary_operator -> . INCREMENT
    (44) unary_operator -> . DECREMENT
    (64) comparison_expression -> . exp comparison_operator exp
    (65) logical_expression -> . exp logical_operator exp

    LBRACE          shift and go to state 115
    VARIABLE        shift and go to state 23
    FOR             shift and go to state 21
    WHILE           shift and go to state 10
    DO              shift and go to state 1
    INT             shift and go to state 24
    FLOAT           shift and go to state 27
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 25
    VOID            shift and go to state 4
    SHORT           shift and go to state 2
    LONG            shift and go to state 17
    HEX_INT         shift and go to state 26
    DOT_REAL        shift and go to state 28
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 7
    CHARACTER       shift and go to state 5
    INCREMENT       shift and go to state 14
    DECREMENT       shift and go to state 30

    exp                            shift and go to state 29
    type                           shift and go to state 19
    assignment_statement           shift and go to state 16
    comparison_expression          shift and go to state 6
    logical_expression             shift and go to state 9
    statement                      shift and go to state 114
    declaration                    shift and go to state 22
    constant                       shift and go to state 11
    iterative_statement            shift and go to state 12
    unary_operator                 shift and go to state 20

state 113

    (50) iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN conditional_expression RPAREN SEMI_COLON .

    SEMI_COLON      reduce using rule 50 (iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN conditional_expression RPAREN SEMI_COLON .)


state 114

    (45) iterative_statement -> FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN statement . SEMI_COLON

    SEMI_COLON      shift and go to state 116


state 115

    (46) iterative_statement -> FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN LBRACE . statements RBRACE
    (1) statements -> . statements statement SEMI_COLON
    (2) statements -> . statement SEMI_COLON
    (3) statements -> . COMMENT
    (4) statements -> . COMMENT statements
    (5) statement -> . declaration
    (6) statement -> . assignment_statement
    (7) statement -> . exp
    (8) statement -> . iterative_statement
    (9) declaration -> . type VARIABLE
    (10) declaration -> . type VARIABLE EQUALS constant
    (11) declaration -> . type VARIABLE EQUALS exp
    (24) assignment_statement -> . VARIABLE EQUALS exp
    (25) assignment_statement -> . VARIABLE assignment_operator exp
    (36) exp -> . exp operator exp
    (37) exp -> . constant
    (38) exp -> . VARIABLE
    (39) exp -> . VARIABLE unary_operator
    (40) exp -> . unary_operator VARIABLE
    (41) exp -> . comparison_expression
    (42) exp -> . logical_expression
    (45) iterative_statement -> . FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN statement SEMI_COLON
    (46) iterative_statement -> . FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN LBRACE statements RBRACE
    (47) iterative_statement -> . WHILE LPAREN conditional_expression RPAREN statement SEMI_COLON
    (48) iterative_statement -> . WHILE LPAREN conditional_expression RPAREN LBRACE statements RBRACE
    (49) iterative_statement -> . DO statement SEMI_COLON WHILE LPAREN conditional_expression RPAREN SEMI_COLON
    (50) iterative_statement -> . DO LBRACE statements RBRACE WHILE LPAREN conditional_expression RPAREN SEMI_COLON
    (12) type -> . INT
    (13) type -> . FLOAT
    (14) type -> . CHAR
    (15) type -> . DOUBLE
    (16) type -> . VOID
    (17) type -> . SHORT
    (18) type -> . LONG
    (19) constant -> . HEX_INT
    (20) constant -> . DOT_REAL
    (21) constant -> . EXP_REAL
    (22) constant -> . DEC_INT
    (23) constant -> . CHARACTER
    (43) unary_operator -> . INCREMENT
    (44) unary_operator -> . DECREMENT
    (64) comparison_expression -> . exp comparison_operator exp
    (65) logical_expression -> . exp logical_operator exp

    COMMENT         shift and go to state 13
    VARIABLE        shift and go to state 23
    FOR             shift and go to state 21
    WHILE           shift and go to state 10
    DO              shift and go to state 1
    INT             shift and go to state 24
    FLOAT           shift and go to state 27
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 25
    VOID            shift and go to state 4
    SHORT           shift and go to state 2
    LONG            shift and go to state 17
    HEX_INT         shift and go to state 26
    DOT_REAL        shift and go to state 28
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 7
    CHARACTER       shift and go to state 5
    INCREMENT       shift and go to state 14
    DECREMENT       shift and go to state 30

    statements                     shift and go to state 117
    exp                            shift and go to state 29
    type                           shift and go to state 19
    assignment_statement           shift and go to state 16
    comparison_expression          shift and go to state 6
    logical_expression             shift and go to state 9
    statement                      shift and go to state 18
    declaration                    shift and go to state 22
    constant                       shift and go to state 11
    iterative_statement            shift and go to state 12
    unary_operator                 shift and go to state 20

state 116

    (45) iterative_statement -> FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN statement SEMI_COLON .

    SEMI_COLON      reduce using rule 45 (iterative_statement -> FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN statement SEMI_COLON .)


state 117

    (46) iterative_statement -> FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN LBRACE statements . RBRACE
    (1) statements -> statements . statement SEMI_COLON
    (5) statement -> . declaration
    (6) statement -> . assignment_statement
    (7) statement -> . exp
    (8) statement -> . iterative_statement
    (9) declaration -> . type VARIABLE
    (10) declaration -> . type VARIABLE EQUALS constant
    (11) declaration -> . type VARIABLE EQUALS exp
    (24) assignment_statement -> . VARIABLE EQUALS exp
    (25) assignment_statement -> . VARIABLE assignment_operator exp
    (36) exp -> . exp operator exp
    (37) exp -> . constant
    (38) exp -> . VARIABLE
    (39) exp -> . VARIABLE unary_operator
    (40) exp -> . unary_operator VARIABLE
    (41) exp -> . comparison_expression
    (42) exp -> . logical_expression
    (45) iterative_statement -> . FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN statement SEMI_COLON
    (46) iterative_statement -> . FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN LBRACE statements RBRACE
    (47) iterative_statement -> . WHILE LPAREN conditional_expression RPAREN statement SEMI_COLON
    (48) iterative_statement -> . WHILE LPAREN conditional_expression RPAREN LBRACE statements RBRACE
    (49) iterative_statement -> . DO statement SEMI_COLON WHILE LPAREN conditional_expression RPAREN SEMI_COLON
    (50) iterative_statement -> . DO LBRACE statements RBRACE WHILE LPAREN conditional_expression RPAREN SEMI_COLON
    (12) type -> . INT
    (13) type -> . FLOAT
    (14) type -> . CHAR
    (15) type -> . DOUBLE
    (16) type -> . VOID
    (17) type -> . SHORT
    (18) type -> . LONG
    (19) constant -> . HEX_INT
    (20) constant -> . DOT_REAL
    (21) constant -> . EXP_REAL
    (22) constant -> . DEC_INT
    (23) constant -> . CHARACTER
    (43) unary_operator -> . INCREMENT
    (44) unary_operator -> . DECREMENT
    (64) comparison_expression -> . exp comparison_operator exp
    (65) logical_expression -> . exp logical_operator exp

    RBRACE          shift and go to state 118
    VARIABLE        shift and go to state 23
    FOR             shift and go to state 21
    WHILE           shift and go to state 10
    DO              shift and go to state 1
    INT             shift and go to state 24
    FLOAT           shift and go to state 27
    CHAR            shift and go to state 8
    DOUBLE          shift and go to state 25
    VOID            shift and go to state 4
    SHORT           shift and go to state 2
    LONG            shift and go to state 17
    HEX_INT         shift and go to state 26
    DOT_REAL        shift and go to state 28
    EXP_REAL        shift and go to state 15
    DEC_INT         shift and go to state 7
    CHARACTER       shift and go to state 5
    INCREMENT       shift and go to state 14
    DECREMENT       shift and go to state 30

    exp                            shift and go to state 29
    type                           shift and go to state 19
    assignment_statement           shift and go to state 16
    comparison_expression          shift and go to state 6
    logical_expression             shift and go to state 9
    statement                      shift and go to state 33
    declaration                    shift and go to state 22
    constant                       shift and go to state 11
    iterative_statement            shift and go to state 12
    unary_operator                 shift and go to state 20

state 118

    (46) iterative_statement -> FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN LBRACE statements RBRACE .

    SEMI_COLON      reduce using rule 46 (iterative_statement -> FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN LBRACE statements RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for VARIABLE in state 13 resolved as shift
WARNING: shift/reduce conflict for FOR in state 13 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 13 resolved as shift
WARNING: shift/reduce conflict for DO in state 13 resolved as shift
WARNING: shift/reduce conflict for INT in state 13 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 13 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 13 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 13 resolved as shift
WARNING: shift/reduce conflict for VOID in state 13 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 13 resolved as shift
WARNING: shift/reduce conflict for LONG in state 13 resolved as shift
WARNING: shift/reduce conflict for HEX_INT in state 13 resolved as shift
WARNING: shift/reduce conflict for DOT_REAL in state 13 resolved as shift
WARNING: shift/reduce conflict for EXP_REAL in state 13 resolved as shift
WARNING: shift/reduce conflict for DEC_INT in state 13 resolved as shift
WARNING: shift/reduce conflict for CHARACTER in state 13 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 13 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 13 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 35 resolved as shift
WARNING: shift/reduce conflict for FOR in state 35 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 35 resolved as shift
WARNING: shift/reduce conflict for DO in state 35 resolved as shift
WARNING: shift/reduce conflict for INT in state 35 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 35 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 35 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 35 resolved as shift
WARNING: shift/reduce conflict for VOID in state 35 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 35 resolved as shift
WARNING: shift/reduce conflict for LONG in state 35 resolved as shift
WARNING: shift/reduce conflict for HEX_INT in state 35 resolved as shift
WARNING: shift/reduce conflict for DOT_REAL in state 35 resolved as shift
WARNING: shift/reduce conflict for EXP_REAL in state 35 resolved as shift
WARNING: shift/reduce conflict for DEC_INT in state 35 resolved as shift
WARNING: shift/reduce conflict for CHARACTER in state 35 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 35 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 35 resolved as shift
WARNING: shift/reduce conflict for ADD in state 85 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 85 resolved as shift
WARNING: shift/reduce conflict for MULT in state 85 resolved as shift
WARNING: shift/reduce conflict for DIV in state 85 resolved as shift
WARNING: shift/reduce conflict for MOD in state 85 resolved as shift
WARNING: shift/reduce conflict for L_OP in state 85 resolved as shift
WARNING: shift/reduce conflict for G_OP in state 85 resolved as shift
WARNING: shift/reduce conflict for LE_OP in state 85 resolved as shift
WARNING: shift/reduce conflict for GE_OP in state 85 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 85 resolved as shift
WARNING: shift/reduce conflict for EQUALS_OP in state 85 resolved as shift
WARNING: shift/reduce conflict for OR_OP in state 85 resolved as shift
WARNING: shift/reduce conflict for AND_OP in state 85 resolved as shift
WARNING: shift/reduce conflict for ADD in state 86 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 86 resolved as shift
WARNING: shift/reduce conflict for MULT in state 86 resolved as shift
WARNING: shift/reduce conflict for DIV in state 86 resolved as shift
WARNING: shift/reduce conflict for MOD in state 86 resolved as shift
WARNING: shift/reduce conflict for L_OP in state 86 resolved as shift
WARNING: shift/reduce conflict for G_OP in state 86 resolved as shift
WARNING: shift/reduce conflict for LE_OP in state 86 resolved as shift
WARNING: shift/reduce conflict for GE_OP in state 86 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 86 resolved as shift
WARNING: shift/reduce conflict for EQUALS_OP in state 86 resolved as shift
WARNING: shift/reduce conflict for OR_OP in state 86 resolved as shift
WARNING: shift/reduce conflict for AND_OP in state 86 resolved as shift
WARNING: shift/reduce conflict for ADD in state 87 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 87 resolved as shift
WARNING: shift/reduce conflict for MULT in state 87 resolved as shift
WARNING: shift/reduce conflict for DIV in state 87 resolved as shift
WARNING: shift/reduce conflict for MOD in state 87 resolved as shift
WARNING: shift/reduce conflict for L_OP in state 87 resolved as shift
WARNING: shift/reduce conflict for G_OP in state 87 resolved as shift
WARNING: shift/reduce conflict for LE_OP in state 87 resolved as shift
WARNING: shift/reduce conflict for GE_OP in state 87 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 87 resolved as shift
WARNING: shift/reduce conflict for EQUALS_OP in state 87 resolved as shift
WARNING: shift/reduce conflict for OR_OP in state 87 resolved as shift
WARNING: shift/reduce conflict for AND_OP in state 87 resolved as shift
WARNING: reduce/reduce conflict in state 72 resolved using rule (exp -> comparison_expression)
WARNING: rejected rule (conditional_expression -> comparison_expression) in state 72
WARNING: reduce/reduce conflict in state 74 resolved using rule (exp -> logical_expression)
WARNING: rejected rule (conditional_expression -> logical_expression) in state 74
WARNING: reduce/reduce conflict in state 75 resolved using rule (exp -> constant)
WARNING: rejected rule (conditional_expression -> constant) in state 75
WARNING: reduce/reduce conflict in state 91 resolved using rule (declaration -> type VARIABLE EQUALS constant)
WARNING: rejected rule (exp -> constant) in state 91
WARNING: Rule (conditional_expression -> comparison_expression) is never reduced
WARNING: Rule (conditional_expression -> logical_expression) is never reduced
WARNING: Rule (conditional_expression -> constant) is never reduced
