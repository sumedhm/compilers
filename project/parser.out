Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    RIGHT_OP
    NOTEQUALS
    RETURN
    EQUALS_OP
    DEFAULT
    LEFT_OP
    COLON
    DIV_ASSIGN
    TRUE
    COMMENT
    RIGHT_ASSIGN
    MAIN
    MUL_ASSIGN
    G_OP
    NEWLINE
    OR_OP
    CASE
    LBIG
    TILDA
    COMMA
    DOT
    ADD_ASSIGN
    SUB_ASSIGN
    SIZEOF
    AND_ASSIGN
    SINGLE_QUOTES
    AND_OP
    GE_OP
    ANDI
    LEFT_ASSIGN
    LE_OP
    AND
    MOD_ASSIGN
    XOR_ASSIGN
    CONDOP
    OR_ASSIGN
    L_OP
    BREAK
    CONTINUE
    DOUBLE_QUOTES
    NOT
    SWITCH
    RBIG
    OR

Grammar

Rule 0     S' -> statements
Rule 1     statements -> statements statement SEMI_COLON
Rule 2     statements -> statement SEMI_COLON
Rule 3     statement -> declaration
Rule 4     statement -> assignment_statement
Rule 5     statement -> iterative_statement
Rule 6     statement -> exp
Rule 7     declaration -> type VARIABLE
Rule 8     declaration -> type VARIABLE EQUALS constant
Rule 9     declaration -> type VARIABLE EQUALS exp
Rule 10    type -> INT
Rule 11    type -> FLOAT
Rule 12    type -> CHAR
Rule 13    type -> DOUBLE
Rule 14    type -> VOID
Rule 15    type -> SHORT
Rule 16    type -> LONG
Rule 17    constant -> HEX_INT
Rule 18    constant -> DOT_REAL
Rule 19    constant -> EXP_REAL
Rule 20    constant -> DEC_INT
Rule 21    constant -> CHARACTER
Rule 22    assignment_statement -> VARIABLE EQUALS exp
Rule 23    exp -> exp operator exp
Rule 24    exp -> constant
Rule 25    exp -> VARIABLE
Rule 26    exp -> VARIABLE unary_operator
Rule 27    unary_operator -> INCREMENT
Rule 28    unary_operator -> DECREMENT
Rule 29    iterative_statement -> FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN statement
Rule 30    iterative_statement -> FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN LBRACE statements RBRACE
Rule 31    iterative_statement -> WHILE LPAREN conditional_expression RPAREN statement
Rule 32    iterative_statement -> WHILE LPAREN conditional_expression RPAREN LBRACE statements RBRACE
Rule 33    iterative_statement -> DO statement WHILE LPAREN conditional_expression RPAREN SEMI_COLON
Rule 34    iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN conditional_expression RPAREN SEMI_COLON
Rule 35    action -> assignment_statement
Rule 36    action -> exp
Rule 37    conditional_statement -> IF LPAREN conditional_expression RPAREN statement
Rule 38    conditional_statement -> IF LPAREN conditional_expression RPAREN LBRACE statements RBRACE
Rule 39    conditional_statement -> IF LPAREN conditional_expression RPAREN statement ELSE statement
Rule 40    conditional_statement -> IF LPAREN conditional_expression RPAREN statement ELSE LBRACE statements RBRACE
Rule 41    conditional_statement -> IF LPAREN conditional_expression RPAREN LBRACE statements RBRACE ELSE statement
Rule 42    conditional_statement -> IF LPAREN conditional_expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
Rule 43    conditional_expression -> exp
Rule 44    operator -> ADD
Rule 45    operator -> MINUS
Rule 46    operator -> MULT
Rule 47    operator -> DIV
Rule 48    operator -> MOD
Rule 49    empty -> <empty>

Terminals, with rules where they appear

ADD                  : 44
ADD_ASSIGN           : 
AND                  : 
ANDI                 : 
AND_ASSIGN           : 
AND_OP               : 
BREAK                : 
CASE                 : 
CHAR                 : 12
CHARACTER            : 21
COLON                : 
COMMA                : 
COMMENT              : 
CONDOP               : 
CONTINUE             : 
DECREMENT            : 28
DEC_INT              : 20
DEFAULT              : 
DIV                  : 47
DIV_ASSIGN           : 
DO                   : 33 34
DOT                  : 
DOT_REAL             : 18
DOUBLE               : 13
DOUBLE_QUOTES        : 
ELSE                 : 39 40 41 42
EQUALS               : 8 9 22
EQUALS_OP            : 
EXP_REAL             : 19
FLOAT                : 11
FOR                  : 29 30
GE_OP                : 
G_OP                 : 
HEX_INT              : 17
IF                   : 37 38 39 40 41 42
INCREMENT            : 27
INT                  : 10
LBIG                 : 
LBRACE               : 30 32 34 38 40 41 42 42
LEFT_ASSIGN          : 
LEFT_OP              : 
LE_OP                : 
LONG                 : 16
LPAREN               : 29 30 31 32 33 34 37 38 39 40 41 42
L_OP                 : 
MAIN                 : 
MINUS                : 45
MOD                  : 48
MOD_ASSIGN           : 
MULT                 : 46
MUL_ASSIGN           : 
NEWLINE              : 
NOT                  : 
NOTEQUALS            : 
OR                   : 
OR_ASSIGN            : 
OR_OP                : 
RBIG                 : 
RBRACE               : 30 32 34 38 40 41 42 42
RETURN               : 
RIGHT_ASSIGN         : 
RIGHT_OP             : 
RPAREN               : 29 30 31 32 33 34 37 38 39 40 41 42
SEMI_COLON           : 1 2 29 29 30 30 33 34
SHORT                : 15
SINGLE_QUOTES        : 
SIZEOF               : 
SUB_ASSIGN           : 
SWITCH               : 
TILDA                : 
TRUE                 : 
VARIABLE             : 7 8 9 22 25 26
VOID                 : 14
WHILE                : 31 32 33 34
XOR_ASSIGN           : 
error                : 

Nonterminals, with rules where they appear

action               : 29 30
assignment_statement : 4 29 30 35
conditional_expression : 29 30 31 32 33 34 37 38 39 40 41 42
conditional_statement : 
constant             : 8 24
declaration          : 3
empty                : 
exp                  : 6 9 22 23 23 36 43
iterative_statement  : 5
operator             : 23
statement            : 1 2 29 31 33 37 39 39 40 41
statements           : 1 30 32 34 38 40 41 42 42 0
type                 : 7 8 9
unary_operator       : 26

Parsing method: LALR

state 0

    (0) S' -> . statements
    (1) statements -> . statements statement SEMI_COLON
    (2) statements -> . statement SEMI_COLON
    (3) statement -> . declaration
    (4) statement -> . assignment_statement
    (5) statement -> . iterative_statement
    (6) statement -> . exp
    (7) declaration -> . type VARIABLE
    (8) declaration -> . type VARIABLE EQUALS constant
    (9) declaration -> . type VARIABLE EQUALS exp
    (22) assignment_statement -> . VARIABLE EQUALS exp
    (29) iterative_statement -> . FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN statement
    (30) iterative_statement -> . FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN LBRACE statements RBRACE
    (31) iterative_statement -> . WHILE LPAREN conditional_expression RPAREN statement
    (32) iterative_statement -> . WHILE LPAREN conditional_expression RPAREN LBRACE statements RBRACE
    (33) iterative_statement -> . DO statement WHILE LPAREN conditional_expression RPAREN SEMI_COLON
    (34) iterative_statement -> . DO LBRACE statements RBRACE WHILE LPAREN conditional_expression RPAREN SEMI_COLON
    (23) exp -> . exp operator exp
    (24) exp -> . constant
    (25) exp -> . VARIABLE
    (26) exp -> . VARIABLE unary_operator
    (10) type -> . INT
    (11) type -> . FLOAT
    (12) type -> . CHAR
    (13) type -> . DOUBLE
    (14) type -> . VOID
    (15) type -> . SHORT
    (16) type -> . LONG
    (17) constant -> . HEX_INT
    (18) constant -> . DOT_REAL
    (19) constant -> . EXP_REAL
    (20) constant -> . DEC_INT
    (21) constant -> . CHARACTER

    VARIABLE        shift and go to state 18
    FOR             shift and go to state 16
    WHILE           shift and go to state 8
    DO              shift and go to state 1
    INT             shift and go to state 19
    FLOAT           shift and go to state 22
    CHAR            shift and go to state 7
    DOUBLE          shift and go to state 20
    VOID            shift and go to state 4
    SHORT           shift and go to state 2
    LONG            shift and go to state 13
    HEX_INT         shift and go to state 21
    DOT_REAL        shift and go to state 23
    EXP_REAL        shift and go to state 11
    DEC_INT         shift and go to state 6
    CHARACTER       shift and go to state 5

    statements                     shift and go to state 3
    statement                      shift and go to state 14
    type                           shift and go to state 15
    assignment_statement           shift and go to state 12
    exp                            shift and go to state 24
    declaration                    shift and go to state 17
    constant                       shift and go to state 9
    iterative_statement            shift and go to state 10

state 1

    (33) iterative_statement -> DO . statement WHILE LPAREN conditional_expression RPAREN SEMI_COLON
    (34) iterative_statement -> DO . LBRACE statements RBRACE WHILE LPAREN conditional_expression RPAREN SEMI_COLON
    (3) statement -> . declaration
    (4) statement -> . assignment_statement
    (5) statement -> . iterative_statement
    (6) statement -> . exp
    (7) declaration -> . type VARIABLE
    (8) declaration -> . type VARIABLE EQUALS constant
    (9) declaration -> . type VARIABLE EQUALS exp
    (22) assignment_statement -> . VARIABLE EQUALS exp
    (29) iterative_statement -> . FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN statement
    (30) iterative_statement -> . FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN LBRACE statements RBRACE
    (31) iterative_statement -> . WHILE LPAREN conditional_expression RPAREN statement
    (32) iterative_statement -> . WHILE LPAREN conditional_expression RPAREN LBRACE statements RBRACE
    (33) iterative_statement -> . DO statement WHILE LPAREN conditional_expression RPAREN SEMI_COLON
    (34) iterative_statement -> . DO LBRACE statements RBRACE WHILE LPAREN conditional_expression RPAREN SEMI_COLON
    (23) exp -> . exp operator exp
    (24) exp -> . constant
    (25) exp -> . VARIABLE
    (26) exp -> . VARIABLE unary_operator
    (10) type -> . INT
    (11) type -> . FLOAT
    (12) type -> . CHAR
    (13) type -> . DOUBLE
    (14) type -> . VOID
    (15) type -> . SHORT
    (16) type -> . LONG
    (17) constant -> . HEX_INT
    (18) constant -> . DOT_REAL
    (19) constant -> . EXP_REAL
    (20) constant -> . DEC_INT
    (21) constant -> . CHARACTER

    LBRACE          shift and go to state 26
    VARIABLE        shift and go to state 18
    FOR             shift and go to state 16
    WHILE           shift and go to state 8
    DO              shift and go to state 1
    INT             shift and go to state 19
    FLOAT           shift and go to state 22
    CHAR            shift and go to state 7
    DOUBLE          shift and go to state 20
    VOID            shift and go to state 4
    SHORT           shift and go to state 2
    LONG            shift and go to state 13
    HEX_INT         shift and go to state 21
    DOT_REAL        shift and go to state 23
    EXP_REAL        shift and go to state 11
    DEC_INT         shift and go to state 6
    CHARACTER       shift and go to state 5

    exp                            shift and go to state 24
    type                           shift and go to state 15
    assignment_statement           shift and go to state 12
    statement                      shift and go to state 25
    declaration                    shift and go to state 17
    constant                       shift and go to state 9
    iterative_statement            shift and go to state 10

state 2

    (15) type -> SHORT .

    VARIABLE        reduce using rule 15 (type -> SHORT .)


state 3

    (0) S' -> statements .
    (1) statements -> statements . statement SEMI_COLON
    (3) statement -> . declaration
    (4) statement -> . assignment_statement
    (5) statement -> . iterative_statement
    (6) statement -> . exp
    (7) declaration -> . type VARIABLE
    (8) declaration -> . type VARIABLE EQUALS constant
    (9) declaration -> . type VARIABLE EQUALS exp
    (22) assignment_statement -> . VARIABLE EQUALS exp
    (29) iterative_statement -> . FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN statement
    (30) iterative_statement -> . FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN LBRACE statements RBRACE
    (31) iterative_statement -> . WHILE LPAREN conditional_expression RPAREN statement
    (32) iterative_statement -> . WHILE LPAREN conditional_expression RPAREN LBRACE statements RBRACE
    (33) iterative_statement -> . DO statement WHILE LPAREN conditional_expression RPAREN SEMI_COLON
    (34) iterative_statement -> . DO LBRACE statements RBRACE WHILE LPAREN conditional_expression RPAREN SEMI_COLON
    (23) exp -> . exp operator exp
    (24) exp -> . constant
    (25) exp -> . VARIABLE
    (26) exp -> . VARIABLE unary_operator
    (10) type -> . INT
    (11) type -> . FLOAT
    (12) type -> . CHAR
    (13) type -> . DOUBLE
    (14) type -> . VOID
    (15) type -> . SHORT
    (16) type -> . LONG
    (17) constant -> . HEX_INT
    (18) constant -> . DOT_REAL
    (19) constant -> . EXP_REAL
    (20) constant -> . DEC_INT
    (21) constant -> . CHARACTER

    VARIABLE        shift and go to state 18
    FOR             shift and go to state 16
    WHILE           shift and go to state 8
    DO              shift and go to state 1
    INT             shift and go to state 19
    FLOAT           shift and go to state 22
    CHAR            shift and go to state 7
    DOUBLE          shift and go to state 20
    VOID            shift and go to state 4
    SHORT           shift and go to state 2
    LONG            shift and go to state 13
    HEX_INT         shift and go to state 21
    DOT_REAL        shift and go to state 23
    EXP_REAL        shift and go to state 11
    DEC_INT         shift and go to state 6
    CHARACTER       shift and go to state 5

    statement                      shift and go to state 27
    type                           shift and go to state 15
    assignment_statement           shift and go to state 12
    exp                            shift and go to state 24
    declaration                    shift and go to state 17
    constant                       shift and go to state 9
    iterative_statement            shift and go to state 10

state 4

    (14) type -> VOID .

    VARIABLE        reduce using rule 14 (type -> VOID .)


state 5

    (21) constant -> CHARACTER .

    ADD             reduce using rule 21 (constant -> CHARACTER .)
    MINUS           reduce using rule 21 (constant -> CHARACTER .)
    MULT            reduce using rule 21 (constant -> CHARACTER .)
    DIV             reduce using rule 21 (constant -> CHARACTER .)
    MOD             reduce using rule 21 (constant -> CHARACTER .)
    RPAREN          reduce using rule 21 (constant -> CHARACTER .)
    SEMI_COLON      reduce using rule 21 (constant -> CHARACTER .)
    WHILE           reduce using rule 21 (constant -> CHARACTER .)


state 6

    (20) constant -> DEC_INT .

    ADD             reduce using rule 20 (constant -> DEC_INT .)
    MINUS           reduce using rule 20 (constant -> DEC_INT .)
    MULT            reduce using rule 20 (constant -> DEC_INT .)
    DIV             reduce using rule 20 (constant -> DEC_INT .)
    MOD             reduce using rule 20 (constant -> DEC_INT .)
    RPAREN          reduce using rule 20 (constant -> DEC_INT .)
    SEMI_COLON      reduce using rule 20 (constant -> DEC_INT .)
    WHILE           reduce using rule 20 (constant -> DEC_INT .)


state 7

    (12) type -> CHAR .

    VARIABLE        reduce using rule 12 (type -> CHAR .)


state 8

    (31) iterative_statement -> WHILE . LPAREN conditional_expression RPAREN statement
    (32) iterative_statement -> WHILE . LPAREN conditional_expression RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 28


state 9

    (24) exp -> constant .

    ADD             reduce using rule 24 (exp -> constant .)
    MINUS           reduce using rule 24 (exp -> constant .)
    MULT            reduce using rule 24 (exp -> constant .)
    DIV             reduce using rule 24 (exp -> constant .)
    MOD             reduce using rule 24 (exp -> constant .)
    WHILE           reduce using rule 24 (exp -> constant .)
    SEMI_COLON      reduce using rule 24 (exp -> constant .)
    RPAREN          reduce using rule 24 (exp -> constant .)


state 10

    (5) statement -> iterative_statement .

    SEMI_COLON      reduce using rule 5 (statement -> iterative_statement .)
    WHILE           reduce using rule 5 (statement -> iterative_statement .)


state 11

    (19) constant -> EXP_REAL .

    ADD             reduce using rule 19 (constant -> EXP_REAL .)
    MINUS           reduce using rule 19 (constant -> EXP_REAL .)
    MULT            reduce using rule 19 (constant -> EXP_REAL .)
    DIV             reduce using rule 19 (constant -> EXP_REAL .)
    MOD             reduce using rule 19 (constant -> EXP_REAL .)
    RPAREN          reduce using rule 19 (constant -> EXP_REAL .)
    SEMI_COLON      reduce using rule 19 (constant -> EXP_REAL .)
    WHILE           reduce using rule 19 (constant -> EXP_REAL .)


state 12

    (4) statement -> assignment_statement .

    SEMI_COLON      reduce using rule 4 (statement -> assignment_statement .)
    WHILE           reduce using rule 4 (statement -> assignment_statement .)


state 13

    (16) type -> LONG .

    VARIABLE        reduce using rule 16 (type -> LONG .)


state 14

    (2) statements -> statement . SEMI_COLON

    SEMI_COLON      shift and go to state 29


state 15

    (7) declaration -> type . VARIABLE
    (8) declaration -> type . VARIABLE EQUALS constant
    (9) declaration -> type . VARIABLE EQUALS exp

    VARIABLE        shift and go to state 30


state 16

    (29) iterative_statement -> FOR . LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN statement
    (30) iterative_statement -> FOR . LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 31


state 17

    (3) statement -> declaration .

    SEMI_COLON      reduce using rule 3 (statement -> declaration .)
    WHILE           reduce using rule 3 (statement -> declaration .)


state 18

    (22) assignment_statement -> VARIABLE . EQUALS exp
    (25) exp -> VARIABLE .
    (26) exp -> VARIABLE . unary_operator
    (27) unary_operator -> . INCREMENT
    (28) unary_operator -> . DECREMENT

    EQUALS          shift and go to state 32
    ADD             reduce using rule 25 (exp -> VARIABLE .)
    MINUS           reduce using rule 25 (exp -> VARIABLE .)
    MULT            reduce using rule 25 (exp -> VARIABLE .)
    DIV             reduce using rule 25 (exp -> VARIABLE .)
    MOD             reduce using rule 25 (exp -> VARIABLE .)
    WHILE           reduce using rule 25 (exp -> VARIABLE .)
    SEMI_COLON      reduce using rule 25 (exp -> VARIABLE .)
    RPAREN          reduce using rule 25 (exp -> VARIABLE .)
    INCREMENT       shift and go to state 33
    DECREMENT       shift and go to state 34

    unary_operator                 shift and go to state 35

state 19

    (10) type -> INT .

    VARIABLE        reduce using rule 10 (type -> INT .)


state 20

    (13) type -> DOUBLE .

    VARIABLE        reduce using rule 13 (type -> DOUBLE .)


state 21

    (17) constant -> HEX_INT .

    ADD             reduce using rule 17 (constant -> HEX_INT .)
    MINUS           reduce using rule 17 (constant -> HEX_INT .)
    MULT            reduce using rule 17 (constant -> HEX_INT .)
    DIV             reduce using rule 17 (constant -> HEX_INT .)
    MOD             reduce using rule 17 (constant -> HEX_INT .)
    RPAREN          reduce using rule 17 (constant -> HEX_INT .)
    SEMI_COLON      reduce using rule 17 (constant -> HEX_INT .)
    WHILE           reduce using rule 17 (constant -> HEX_INT .)


state 22

    (11) type -> FLOAT .

    VARIABLE        reduce using rule 11 (type -> FLOAT .)


state 23

    (18) constant -> DOT_REAL .

    ADD             reduce using rule 18 (constant -> DOT_REAL .)
    MINUS           reduce using rule 18 (constant -> DOT_REAL .)
    MULT            reduce using rule 18 (constant -> DOT_REAL .)
    DIV             reduce using rule 18 (constant -> DOT_REAL .)
    MOD             reduce using rule 18 (constant -> DOT_REAL .)
    RPAREN          reduce using rule 18 (constant -> DOT_REAL .)
    SEMI_COLON      reduce using rule 18 (constant -> DOT_REAL .)
    WHILE           reduce using rule 18 (constant -> DOT_REAL .)


state 24

    (6) statement -> exp .
    (23) exp -> exp . operator exp
    (44) operator -> . ADD
    (45) operator -> . MINUS
    (46) operator -> . MULT
    (47) operator -> . DIV
    (48) operator -> . MOD

    SEMI_COLON      reduce using rule 6 (statement -> exp .)
    WHILE           reduce using rule 6 (statement -> exp .)
    ADD             shift and go to state 36
    MINUS           shift and go to state 39
    MULT            shift and go to state 40
    DIV             shift and go to state 38
    MOD             shift and go to state 41

    operator                       shift and go to state 37

state 25

    (33) iterative_statement -> DO statement . WHILE LPAREN conditional_expression RPAREN SEMI_COLON

    WHILE           shift and go to state 42


state 26

    (34) iterative_statement -> DO LBRACE . statements RBRACE WHILE LPAREN conditional_expression RPAREN SEMI_COLON
    (1) statements -> . statements statement SEMI_COLON
    (2) statements -> . statement SEMI_COLON
    (3) statement -> . declaration
    (4) statement -> . assignment_statement
    (5) statement -> . iterative_statement
    (6) statement -> . exp
    (7) declaration -> . type VARIABLE
    (8) declaration -> . type VARIABLE EQUALS constant
    (9) declaration -> . type VARIABLE EQUALS exp
    (22) assignment_statement -> . VARIABLE EQUALS exp
    (29) iterative_statement -> . FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN statement
    (30) iterative_statement -> . FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN LBRACE statements RBRACE
    (31) iterative_statement -> . WHILE LPAREN conditional_expression RPAREN statement
    (32) iterative_statement -> . WHILE LPAREN conditional_expression RPAREN LBRACE statements RBRACE
    (33) iterative_statement -> . DO statement WHILE LPAREN conditional_expression RPAREN SEMI_COLON
    (34) iterative_statement -> . DO LBRACE statements RBRACE WHILE LPAREN conditional_expression RPAREN SEMI_COLON
    (23) exp -> . exp operator exp
    (24) exp -> . constant
    (25) exp -> . VARIABLE
    (26) exp -> . VARIABLE unary_operator
    (10) type -> . INT
    (11) type -> . FLOAT
    (12) type -> . CHAR
    (13) type -> . DOUBLE
    (14) type -> . VOID
    (15) type -> . SHORT
    (16) type -> . LONG
    (17) constant -> . HEX_INT
    (18) constant -> . DOT_REAL
    (19) constant -> . EXP_REAL
    (20) constant -> . DEC_INT
    (21) constant -> . CHARACTER

    VARIABLE        shift and go to state 18
    FOR             shift and go to state 16
    WHILE           shift and go to state 8
    DO              shift and go to state 1
    INT             shift and go to state 19
    FLOAT           shift and go to state 22
    CHAR            shift and go to state 7
    DOUBLE          shift and go to state 20
    VOID            shift and go to state 4
    SHORT           shift and go to state 2
    LONG            shift and go to state 13
    HEX_INT         shift and go to state 21
    DOT_REAL        shift and go to state 23
    EXP_REAL        shift and go to state 11
    DEC_INT         shift and go to state 6
    CHARACTER       shift and go to state 5

    statements                     shift and go to state 43
    exp                            shift and go to state 24
    type                           shift and go to state 15
    assignment_statement           shift and go to state 12
    statement                      shift and go to state 14
    declaration                    shift and go to state 17
    constant                       shift and go to state 9
    iterative_statement            shift and go to state 10

state 27

    (1) statements -> statements statement . SEMI_COLON

    SEMI_COLON      shift and go to state 44


state 28

    (31) iterative_statement -> WHILE LPAREN . conditional_expression RPAREN statement
    (32) iterative_statement -> WHILE LPAREN . conditional_expression RPAREN LBRACE statements RBRACE
    (43) conditional_expression -> . exp
    (23) exp -> . exp operator exp
    (24) exp -> . constant
    (25) exp -> . VARIABLE
    (26) exp -> . VARIABLE unary_operator
    (17) constant -> . HEX_INT
    (18) constant -> . DOT_REAL
    (19) constant -> . EXP_REAL
    (20) constant -> . DEC_INT
    (21) constant -> . CHARACTER

    VARIABLE        shift and go to state 46
    HEX_INT         shift and go to state 21
    DOT_REAL        shift and go to state 23
    EXP_REAL        shift and go to state 11
    DEC_INT         shift and go to state 6
    CHARACTER       shift and go to state 5

    constant                       shift and go to state 9
    exp                            shift and go to state 45
    conditional_expression         shift and go to state 47

state 29

    (2) statements -> statement SEMI_COLON .

    RBRACE          reduce using rule 2 (statements -> statement SEMI_COLON .)
    VARIABLE        reduce using rule 2 (statements -> statement SEMI_COLON .)
    FOR             reduce using rule 2 (statements -> statement SEMI_COLON .)
    WHILE           reduce using rule 2 (statements -> statement SEMI_COLON .)
    DO              reduce using rule 2 (statements -> statement SEMI_COLON .)
    INT             reduce using rule 2 (statements -> statement SEMI_COLON .)
    FLOAT           reduce using rule 2 (statements -> statement SEMI_COLON .)
    CHAR            reduce using rule 2 (statements -> statement SEMI_COLON .)
    DOUBLE          reduce using rule 2 (statements -> statement SEMI_COLON .)
    VOID            reduce using rule 2 (statements -> statement SEMI_COLON .)
    SHORT           reduce using rule 2 (statements -> statement SEMI_COLON .)
    LONG            reduce using rule 2 (statements -> statement SEMI_COLON .)
    HEX_INT         reduce using rule 2 (statements -> statement SEMI_COLON .)
    DOT_REAL        reduce using rule 2 (statements -> statement SEMI_COLON .)
    EXP_REAL        reduce using rule 2 (statements -> statement SEMI_COLON .)
    DEC_INT         reduce using rule 2 (statements -> statement SEMI_COLON .)
    CHARACTER       reduce using rule 2 (statements -> statement SEMI_COLON .)
    $end            reduce using rule 2 (statements -> statement SEMI_COLON .)


state 30

    (7) declaration -> type VARIABLE .
    (8) declaration -> type VARIABLE . EQUALS constant
    (9) declaration -> type VARIABLE . EQUALS exp

    SEMI_COLON      reduce using rule 7 (declaration -> type VARIABLE .)
    WHILE           reduce using rule 7 (declaration -> type VARIABLE .)
    EQUALS          shift and go to state 48


state 31

    (29) iterative_statement -> FOR LPAREN . assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN statement
    (30) iterative_statement -> FOR LPAREN . assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN LBRACE statements RBRACE
    (22) assignment_statement -> . VARIABLE EQUALS exp

    VARIABLE        shift and go to state 50

    assignment_statement           shift and go to state 49

state 32

    (22) assignment_statement -> VARIABLE EQUALS . exp
    (23) exp -> . exp operator exp
    (24) exp -> . constant
    (25) exp -> . VARIABLE
    (26) exp -> . VARIABLE unary_operator
    (17) constant -> . HEX_INT
    (18) constant -> . DOT_REAL
    (19) constant -> . EXP_REAL
    (20) constant -> . DEC_INT
    (21) constant -> . CHARACTER

    VARIABLE        shift and go to state 46
    HEX_INT         shift and go to state 21
    DOT_REAL        shift and go to state 23
    EXP_REAL        shift and go to state 11
    DEC_INT         shift and go to state 6
    CHARACTER       shift and go to state 5

    constant                       shift and go to state 9
    exp                            shift and go to state 51

state 33

    (27) unary_operator -> INCREMENT .

    ADD             reduce using rule 27 (unary_operator -> INCREMENT .)
    MINUS           reduce using rule 27 (unary_operator -> INCREMENT .)
    MULT            reduce using rule 27 (unary_operator -> INCREMENT .)
    DIV             reduce using rule 27 (unary_operator -> INCREMENT .)
    MOD             reduce using rule 27 (unary_operator -> INCREMENT .)
    RPAREN          reduce using rule 27 (unary_operator -> INCREMENT .)
    SEMI_COLON      reduce using rule 27 (unary_operator -> INCREMENT .)
    WHILE           reduce using rule 27 (unary_operator -> INCREMENT .)


state 34

    (28) unary_operator -> DECREMENT .

    ADD             reduce using rule 28 (unary_operator -> DECREMENT .)
    MINUS           reduce using rule 28 (unary_operator -> DECREMENT .)
    MULT            reduce using rule 28 (unary_operator -> DECREMENT .)
    DIV             reduce using rule 28 (unary_operator -> DECREMENT .)
    MOD             reduce using rule 28 (unary_operator -> DECREMENT .)
    RPAREN          reduce using rule 28 (unary_operator -> DECREMENT .)
    SEMI_COLON      reduce using rule 28 (unary_operator -> DECREMENT .)
    WHILE           reduce using rule 28 (unary_operator -> DECREMENT .)


state 35

    (26) exp -> VARIABLE unary_operator .

    ADD             reduce using rule 26 (exp -> VARIABLE unary_operator .)
    MINUS           reduce using rule 26 (exp -> VARIABLE unary_operator .)
    MULT            reduce using rule 26 (exp -> VARIABLE unary_operator .)
    DIV             reduce using rule 26 (exp -> VARIABLE unary_operator .)
    MOD             reduce using rule 26 (exp -> VARIABLE unary_operator .)
    WHILE           reduce using rule 26 (exp -> VARIABLE unary_operator .)
    SEMI_COLON      reduce using rule 26 (exp -> VARIABLE unary_operator .)
    RPAREN          reduce using rule 26 (exp -> VARIABLE unary_operator .)


state 36

    (44) operator -> ADD .

    VARIABLE        reduce using rule 44 (operator -> ADD .)
    HEX_INT         reduce using rule 44 (operator -> ADD .)
    DOT_REAL        reduce using rule 44 (operator -> ADD .)
    EXP_REAL        reduce using rule 44 (operator -> ADD .)
    DEC_INT         reduce using rule 44 (operator -> ADD .)
    CHARACTER       reduce using rule 44 (operator -> ADD .)


state 37

    (23) exp -> exp operator . exp
    (23) exp -> . exp operator exp
    (24) exp -> . constant
    (25) exp -> . VARIABLE
    (26) exp -> . VARIABLE unary_operator
    (17) constant -> . HEX_INT
    (18) constant -> . DOT_REAL
    (19) constant -> . EXP_REAL
    (20) constant -> . DEC_INT
    (21) constant -> . CHARACTER

    VARIABLE        shift and go to state 46
    HEX_INT         shift and go to state 21
    DOT_REAL        shift and go to state 23
    EXP_REAL        shift and go to state 11
    DEC_INT         shift and go to state 6
    CHARACTER       shift and go to state 5

    constant                       shift and go to state 9
    exp                            shift and go to state 52

state 38

    (47) operator -> DIV .

    VARIABLE        reduce using rule 47 (operator -> DIV .)
    HEX_INT         reduce using rule 47 (operator -> DIV .)
    DOT_REAL        reduce using rule 47 (operator -> DIV .)
    EXP_REAL        reduce using rule 47 (operator -> DIV .)
    DEC_INT         reduce using rule 47 (operator -> DIV .)
    CHARACTER       reduce using rule 47 (operator -> DIV .)


state 39

    (45) operator -> MINUS .

    VARIABLE        reduce using rule 45 (operator -> MINUS .)
    HEX_INT         reduce using rule 45 (operator -> MINUS .)
    DOT_REAL        reduce using rule 45 (operator -> MINUS .)
    EXP_REAL        reduce using rule 45 (operator -> MINUS .)
    DEC_INT         reduce using rule 45 (operator -> MINUS .)
    CHARACTER       reduce using rule 45 (operator -> MINUS .)


state 40

    (46) operator -> MULT .

    VARIABLE        reduce using rule 46 (operator -> MULT .)
    HEX_INT         reduce using rule 46 (operator -> MULT .)
    DOT_REAL        reduce using rule 46 (operator -> MULT .)
    EXP_REAL        reduce using rule 46 (operator -> MULT .)
    DEC_INT         reduce using rule 46 (operator -> MULT .)
    CHARACTER       reduce using rule 46 (operator -> MULT .)


state 41

    (48) operator -> MOD .

    VARIABLE        reduce using rule 48 (operator -> MOD .)
    HEX_INT         reduce using rule 48 (operator -> MOD .)
    DOT_REAL        reduce using rule 48 (operator -> MOD .)
    EXP_REAL        reduce using rule 48 (operator -> MOD .)
    DEC_INT         reduce using rule 48 (operator -> MOD .)
    CHARACTER       reduce using rule 48 (operator -> MOD .)


state 42

    (33) iterative_statement -> DO statement WHILE . LPAREN conditional_expression RPAREN SEMI_COLON

    LPAREN          shift and go to state 53


state 43

    (34) iterative_statement -> DO LBRACE statements . RBRACE WHILE LPAREN conditional_expression RPAREN SEMI_COLON
    (1) statements -> statements . statement SEMI_COLON
    (3) statement -> . declaration
    (4) statement -> . assignment_statement
    (5) statement -> . iterative_statement
    (6) statement -> . exp
    (7) declaration -> . type VARIABLE
    (8) declaration -> . type VARIABLE EQUALS constant
    (9) declaration -> . type VARIABLE EQUALS exp
    (22) assignment_statement -> . VARIABLE EQUALS exp
    (29) iterative_statement -> . FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN statement
    (30) iterative_statement -> . FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN LBRACE statements RBRACE
    (31) iterative_statement -> . WHILE LPAREN conditional_expression RPAREN statement
    (32) iterative_statement -> . WHILE LPAREN conditional_expression RPAREN LBRACE statements RBRACE
    (33) iterative_statement -> . DO statement WHILE LPAREN conditional_expression RPAREN SEMI_COLON
    (34) iterative_statement -> . DO LBRACE statements RBRACE WHILE LPAREN conditional_expression RPAREN SEMI_COLON
    (23) exp -> . exp operator exp
    (24) exp -> . constant
    (25) exp -> . VARIABLE
    (26) exp -> . VARIABLE unary_operator
    (10) type -> . INT
    (11) type -> . FLOAT
    (12) type -> . CHAR
    (13) type -> . DOUBLE
    (14) type -> . VOID
    (15) type -> . SHORT
    (16) type -> . LONG
    (17) constant -> . HEX_INT
    (18) constant -> . DOT_REAL
    (19) constant -> . EXP_REAL
    (20) constant -> . DEC_INT
    (21) constant -> . CHARACTER

    RBRACE          shift and go to state 54
    VARIABLE        shift and go to state 18
    FOR             shift and go to state 16
    WHILE           shift and go to state 8
    DO              shift and go to state 1
    INT             shift and go to state 19
    FLOAT           shift and go to state 22
    CHAR            shift and go to state 7
    DOUBLE          shift and go to state 20
    VOID            shift and go to state 4
    SHORT           shift and go to state 2
    LONG            shift and go to state 13
    HEX_INT         shift and go to state 21
    DOT_REAL        shift and go to state 23
    EXP_REAL        shift and go to state 11
    DEC_INT         shift and go to state 6
    CHARACTER       shift and go to state 5

    exp                            shift and go to state 24
    type                           shift and go to state 15
    assignment_statement           shift and go to state 12
    statement                      shift and go to state 27
    declaration                    shift and go to state 17
    constant                       shift and go to state 9
    iterative_statement            shift and go to state 10

state 44

    (1) statements -> statements statement SEMI_COLON .

    RBRACE          reduce using rule 1 (statements -> statements statement SEMI_COLON .)
    VARIABLE        reduce using rule 1 (statements -> statements statement SEMI_COLON .)
    FOR             reduce using rule 1 (statements -> statements statement SEMI_COLON .)
    WHILE           reduce using rule 1 (statements -> statements statement SEMI_COLON .)
    DO              reduce using rule 1 (statements -> statements statement SEMI_COLON .)
    INT             reduce using rule 1 (statements -> statements statement SEMI_COLON .)
    FLOAT           reduce using rule 1 (statements -> statements statement SEMI_COLON .)
    CHAR            reduce using rule 1 (statements -> statements statement SEMI_COLON .)
    DOUBLE          reduce using rule 1 (statements -> statements statement SEMI_COLON .)
    VOID            reduce using rule 1 (statements -> statements statement SEMI_COLON .)
    SHORT           reduce using rule 1 (statements -> statements statement SEMI_COLON .)
    LONG            reduce using rule 1 (statements -> statements statement SEMI_COLON .)
    HEX_INT         reduce using rule 1 (statements -> statements statement SEMI_COLON .)
    DOT_REAL        reduce using rule 1 (statements -> statements statement SEMI_COLON .)
    EXP_REAL        reduce using rule 1 (statements -> statements statement SEMI_COLON .)
    DEC_INT         reduce using rule 1 (statements -> statements statement SEMI_COLON .)
    CHARACTER       reduce using rule 1 (statements -> statements statement SEMI_COLON .)
    $end            reduce using rule 1 (statements -> statements statement SEMI_COLON .)


state 45

    (43) conditional_expression -> exp .
    (23) exp -> exp . operator exp
    (44) operator -> . ADD
    (45) operator -> . MINUS
    (46) operator -> . MULT
    (47) operator -> . DIV
    (48) operator -> . MOD

    RPAREN          reduce using rule 43 (conditional_expression -> exp .)
    SEMI_COLON      reduce using rule 43 (conditional_expression -> exp .)
    ADD             shift and go to state 36
    MINUS           shift and go to state 39
    MULT            shift and go to state 40
    DIV             shift and go to state 38
    MOD             shift and go to state 41

    operator                       shift and go to state 37

state 46

    (25) exp -> VARIABLE .
    (26) exp -> VARIABLE . unary_operator
    (27) unary_operator -> . INCREMENT
    (28) unary_operator -> . DECREMENT

    ADD             reduce using rule 25 (exp -> VARIABLE .)
    MINUS           reduce using rule 25 (exp -> VARIABLE .)
    MULT            reduce using rule 25 (exp -> VARIABLE .)
    DIV             reduce using rule 25 (exp -> VARIABLE .)
    MOD             reduce using rule 25 (exp -> VARIABLE .)
    RPAREN          reduce using rule 25 (exp -> VARIABLE .)
    SEMI_COLON      reduce using rule 25 (exp -> VARIABLE .)
    WHILE           reduce using rule 25 (exp -> VARIABLE .)
    INCREMENT       shift and go to state 33
    DECREMENT       shift and go to state 34

    unary_operator                 shift and go to state 35

state 47

    (31) iterative_statement -> WHILE LPAREN conditional_expression . RPAREN statement
    (32) iterative_statement -> WHILE LPAREN conditional_expression . RPAREN LBRACE statements RBRACE

    RPAREN          shift and go to state 55


state 48

    (8) declaration -> type VARIABLE EQUALS . constant
    (9) declaration -> type VARIABLE EQUALS . exp
    (17) constant -> . HEX_INT
    (18) constant -> . DOT_REAL
    (19) constant -> . EXP_REAL
    (20) constant -> . DEC_INT
    (21) constant -> . CHARACTER
    (23) exp -> . exp operator exp
    (24) exp -> . constant
    (25) exp -> . VARIABLE
    (26) exp -> . VARIABLE unary_operator

    HEX_INT         shift and go to state 21
    DOT_REAL        shift and go to state 23
    EXP_REAL        shift and go to state 11
    DEC_INT         shift and go to state 6
    CHARACTER       shift and go to state 5
    VARIABLE        shift and go to state 46

    constant                       shift and go to state 56
    exp                            shift and go to state 57

state 49

    (29) iterative_statement -> FOR LPAREN assignment_statement . SEMI_COLON conditional_expression SEMI_COLON action RPAREN statement
    (30) iterative_statement -> FOR LPAREN assignment_statement . SEMI_COLON conditional_expression SEMI_COLON action RPAREN LBRACE statements RBRACE

    SEMI_COLON      shift and go to state 58


state 50

    (22) assignment_statement -> VARIABLE . EQUALS exp

    EQUALS          shift and go to state 32


state 51

    (22) assignment_statement -> VARIABLE EQUALS exp .
    (23) exp -> exp . operator exp
    (44) operator -> . ADD
    (45) operator -> . MINUS
    (46) operator -> . MULT
    (47) operator -> . DIV
    (48) operator -> . MOD

    SEMI_COLON      reduce using rule 22 (assignment_statement -> VARIABLE EQUALS exp .)
    WHILE           reduce using rule 22 (assignment_statement -> VARIABLE EQUALS exp .)
    RPAREN          reduce using rule 22 (assignment_statement -> VARIABLE EQUALS exp .)
    ADD             shift and go to state 36
    MINUS           shift and go to state 39
    MULT            shift and go to state 40
    DIV             shift and go to state 38
    MOD             shift and go to state 41

    operator                       shift and go to state 37

state 52

    (23) exp -> exp operator exp .
    (23) exp -> exp . operator exp
    (44) operator -> . ADD
    (45) operator -> . MINUS
    (46) operator -> . MULT
    (47) operator -> . DIV
    (48) operator -> . MOD

  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    WHILE           reduce using rule 23 (exp -> exp operator exp .)
    SEMI_COLON      reduce using rule 23 (exp -> exp operator exp .)
    RPAREN          reduce using rule 23 (exp -> exp operator exp .)
    ADD             shift and go to state 36
    MINUS           shift and go to state 39
    MULT            shift and go to state 40
    DIV             shift and go to state 38
    MOD             shift and go to state 41

  ! ADD             [ reduce using rule 23 (exp -> exp operator exp .) ]
  ! MINUS           [ reduce using rule 23 (exp -> exp operator exp .) ]
  ! MULT            [ reduce using rule 23 (exp -> exp operator exp .) ]
  ! DIV             [ reduce using rule 23 (exp -> exp operator exp .) ]
  ! MOD             [ reduce using rule 23 (exp -> exp operator exp .) ]

    operator                       shift and go to state 37

state 53

    (33) iterative_statement -> DO statement WHILE LPAREN . conditional_expression RPAREN SEMI_COLON
    (43) conditional_expression -> . exp
    (23) exp -> . exp operator exp
    (24) exp -> . constant
    (25) exp -> . VARIABLE
    (26) exp -> . VARIABLE unary_operator
    (17) constant -> . HEX_INT
    (18) constant -> . DOT_REAL
    (19) constant -> . EXP_REAL
    (20) constant -> . DEC_INT
    (21) constant -> . CHARACTER

    VARIABLE        shift and go to state 46
    HEX_INT         shift and go to state 21
    DOT_REAL        shift and go to state 23
    EXP_REAL        shift and go to state 11
    DEC_INT         shift and go to state 6
    CHARACTER       shift and go to state 5

    constant                       shift and go to state 9
    exp                            shift and go to state 45
    conditional_expression         shift and go to state 59

state 54

    (34) iterative_statement -> DO LBRACE statements RBRACE . WHILE LPAREN conditional_expression RPAREN SEMI_COLON

    WHILE           shift and go to state 60


state 55

    (31) iterative_statement -> WHILE LPAREN conditional_expression RPAREN . statement
    (32) iterative_statement -> WHILE LPAREN conditional_expression RPAREN . LBRACE statements RBRACE
    (3) statement -> . declaration
    (4) statement -> . assignment_statement
    (5) statement -> . iterative_statement
    (6) statement -> . exp
    (7) declaration -> . type VARIABLE
    (8) declaration -> . type VARIABLE EQUALS constant
    (9) declaration -> . type VARIABLE EQUALS exp
    (22) assignment_statement -> . VARIABLE EQUALS exp
    (29) iterative_statement -> . FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN statement
    (30) iterative_statement -> . FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN LBRACE statements RBRACE
    (31) iterative_statement -> . WHILE LPAREN conditional_expression RPAREN statement
    (32) iterative_statement -> . WHILE LPAREN conditional_expression RPAREN LBRACE statements RBRACE
    (33) iterative_statement -> . DO statement WHILE LPAREN conditional_expression RPAREN SEMI_COLON
    (34) iterative_statement -> . DO LBRACE statements RBRACE WHILE LPAREN conditional_expression RPAREN SEMI_COLON
    (23) exp -> . exp operator exp
    (24) exp -> . constant
    (25) exp -> . VARIABLE
    (26) exp -> . VARIABLE unary_operator
    (10) type -> . INT
    (11) type -> . FLOAT
    (12) type -> . CHAR
    (13) type -> . DOUBLE
    (14) type -> . VOID
    (15) type -> . SHORT
    (16) type -> . LONG
    (17) constant -> . HEX_INT
    (18) constant -> . DOT_REAL
    (19) constant -> . EXP_REAL
    (20) constant -> . DEC_INT
    (21) constant -> . CHARACTER

    LBRACE          shift and go to state 62
    VARIABLE        shift and go to state 18
    FOR             shift and go to state 16
    WHILE           shift and go to state 8
    DO              shift and go to state 1
    INT             shift and go to state 19
    FLOAT           shift and go to state 22
    CHAR            shift and go to state 7
    DOUBLE          shift and go to state 20
    VOID            shift and go to state 4
    SHORT           shift and go to state 2
    LONG            shift and go to state 13
    HEX_INT         shift and go to state 21
    DOT_REAL        shift and go to state 23
    EXP_REAL        shift and go to state 11
    DEC_INT         shift and go to state 6
    CHARACTER       shift and go to state 5

    exp                            shift and go to state 24
    type                           shift and go to state 15
    assignment_statement           shift and go to state 12
    statement                      shift and go to state 61
    declaration                    shift and go to state 17
    constant                       shift and go to state 9
    iterative_statement            shift and go to state 10

state 56

    (8) declaration -> type VARIABLE EQUALS constant .
    (24) exp -> constant .

  ! reduce/reduce conflict for SEMI_COLON resolved using rule 8 (declaration -> type VARIABLE EQUALS constant .)
  ! reduce/reduce conflict for WHILE resolved using rule 8 (declaration -> type VARIABLE EQUALS constant .)
    SEMI_COLON      reduce using rule 8 (declaration -> type VARIABLE EQUALS constant .)
    WHILE           reduce using rule 8 (declaration -> type VARIABLE EQUALS constant .)
    ADD             reduce using rule 24 (exp -> constant .)
    MINUS           reduce using rule 24 (exp -> constant .)
    MULT            reduce using rule 24 (exp -> constant .)
    DIV             reduce using rule 24 (exp -> constant .)
    MOD             reduce using rule 24 (exp -> constant .)

  ! SEMI_COLON      [ reduce using rule 24 (exp -> constant .) ]
  ! WHILE           [ reduce using rule 24 (exp -> constant .) ]


state 57

    (9) declaration -> type VARIABLE EQUALS exp .
    (23) exp -> exp . operator exp
    (44) operator -> . ADD
    (45) operator -> . MINUS
    (46) operator -> . MULT
    (47) operator -> . DIV
    (48) operator -> . MOD

    SEMI_COLON      reduce using rule 9 (declaration -> type VARIABLE EQUALS exp .)
    WHILE           reduce using rule 9 (declaration -> type VARIABLE EQUALS exp .)
    ADD             shift and go to state 36
    MINUS           shift and go to state 39
    MULT            shift and go to state 40
    DIV             shift and go to state 38
    MOD             shift and go to state 41

    operator                       shift and go to state 37

state 58

    (29) iterative_statement -> FOR LPAREN assignment_statement SEMI_COLON . conditional_expression SEMI_COLON action RPAREN statement
    (30) iterative_statement -> FOR LPAREN assignment_statement SEMI_COLON . conditional_expression SEMI_COLON action RPAREN LBRACE statements RBRACE
    (43) conditional_expression -> . exp
    (23) exp -> . exp operator exp
    (24) exp -> . constant
    (25) exp -> . VARIABLE
    (26) exp -> . VARIABLE unary_operator
    (17) constant -> . HEX_INT
    (18) constant -> . DOT_REAL
    (19) constant -> . EXP_REAL
    (20) constant -> . DEC_INT
    (21) constant -> . CHARACTER

    VARIABLE        shift and go to state 46
    HEX_INT         shift and go to state 21
    DOT_REAL        shift and go to state 23
    EXP_REAL        shift and go to state 11
    DEC_INT         shift and go to state 6
    CHARACTER       shift and go to state 5

    exp                            shift and go to state 45
    conditional_expression         shift and go to state 63
    constant                       shift and go to state 9

state 59

    (33) iterative_statement -> DO statement WHILE LPAREN conditional_expression . RPAREN SEMI_COLON

    RPAREN          shift and go to state 64


state 60

    (34) iterative_statement -> DO LBRACE statements RBRACE WHILE . LPAREN conditional_expression RPAREN SEMI_COLON

    LPAREN          shift and go to state 65


state 61

    (31) iterative_statement -> WHILE LPAREN conditional_expression RPAREN statement .

    SEMI_COLON      reduce using rule 31 (iterative_statement -> WHILE LPAREN conditional_expression RPAREN statement .)
    WHILE           reduce using rule 31 (iterative_statement -> WHILE LPAREN conditional_expression RPAREN statement .)


state 62

    (32) iterative_statement -> WHILE LPAREN conditional_expression RPAREN LBRACE . statements RBRACE
    (1) statements -> . statements statement SEMI_COLON
    (2) statements -> . statement SEMI_COLON
    (3) statement -> . declaration
    (4) statement -> . assignment_statement
    (5) statement -> . iterative_statement
    (6) statement -> . exp
    (7) declaration -> . type VARIABLE
    (8) declaration -> . type VARIABLE EQUALS constant
    (9) declaration -> . type VARIABLE EQUALS exp
    (22) assignment_statement -> . VARIABLE EQUALS exp
    (29) iterative_statement -> . FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN statement
    (30) iterative_statement -> . FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN LBRACE statements RBRACE
    (31) iterative_statement -> . WHILE LPAREN conditional_expression RPAREN statement
    (32) iterative_statement -> . WHILE LPAREN conditional_expression RPAREN LBRACE statements RBRACE
    (33) iterative_statement -> . DO statement WHILE LPAREN conditional_expression RPAREN SEMI_COLON
    (34) iterative_statement -> . DO LBRACE statements RBRACE WHILE LPAREN conditional_expression RPAREN SEMI_COLON
    (23) exp -> . exp operator exp
    (24) exp -> . constant
    (25) exp -> . VARIABLE
    (26) exp -> . VARIABLE unary_operator
    (10) type -> . INT
    (11) type -> . FLOAT
    (12) type -> . CHAR
    (13) type -> . DOUBLE
    (14) type -> . VOID
    (15) type -> . SHORT
    (16) type -> . LONG
    (17) constant -> . HEX_INT
    (18) constant -> . DOT_REAL
    (19) constant -> . EXP_REAL
    (20) constant -> . DEC_INT
    (21) constant -> . CHARACTER

    VARIABLE        shift and go to state 18
    FOR             shift and go to state 16
    WHILE           shift and go to state 8
    DO              shift and go to state 1
    INT             shift and go to state 19
    FLOAT           shift and go to state 22
    CHAR            shift and go to state 7
    DOUBLE          shift and go to state 20
    VOID            shift and go to state 4
    SHORT           shift and go to state 2
    LONG            shift and go to state 13
    HEX_INT         shift and go to state 21
    DOT_REAL        shift and go to state 23
    EXP_REAL        shift and go to state 11
    DEC_INT         shift and go to state 6
    CHARACTER       shift and go to state 5

    statements                     shift and go to state 66
    exp                            shift and go to state 24
    type                           shift and go to state 15
    assignment_statement           shift and go to state 12
    statement                      shift and go to state 14
    declaration                    shift and go to state 17
    constant                       shift and go to state 9
    iterative_statement            shift and go to state 10

state 63

    (29) iterative_statement -> FOR LPAREN assignment_statement SEMI_COLON conditional_expression . SEMI_COLON action RPAREN statement
    (30) iterative_statement -> FOR LPAREN assignment_statement SEMI_COLON conditional_expression . SEMI_COLON action RPAREN LBRACE statements RBRACE

    SEMI_COLON      shift and go to state 67


state 64

    (33) iterative_statement -> DO statement WHILE LPAREN conditional_expression RPAREN . SEMI_COLON

    SEMI_COLON      shift and go to state 68


state 65

    (34) iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN . conditional_expression RPAREN SEMI_COLON
    (43) conditional_expression -> . exp
    (23) exp -> . exp operator exp
    (24) exp -> . constant
    (25) exp -> . VARIABLE
    (26) exp -> . VARIABLE unary_operator
    (17) constant -> . HEX_INT
    (18) constant -> . DOT_REAL
    (19) constant -> . EXP_REAL
    (20) constant -> . DEC_INT
    (21) constant -> . CHARACTER

    VARIABLE        shift and go to state 46
    HEX_INT         shift and go to state 21
    DOT_REAL        shift and go to state 23
    EXP_REAL        shift and go to state 11
    DEC_INT         shift and go to state 6
    CHARACTER       shift and go to state 5

    constant                       shift and go to state 9
    exp                            shift and go to state 45
    conditional_expression         shift and go to state 69

state 66

    (32) iterative_statement -> WHILE LPAREN conditional_expression RPAREN LBRACE statements . RBRACE
    (1) statements -> statements . statement SEMI_COLON
    (3) statement -> . declaration
    (4) statement -> . assignment_statement
    (5) statement -> . iterative_statement
    (6) statement -> . exp
    (7) declaration -> . type VARIABLE
    (8) declaration -> . type VARIABLE EQUALS constant
    (9) declaration -> . type VARIABLE EQUALS exp
    (22) assignment_statement -> . VARIABLE EQUALS exp
    (29) iterative_statement -> . FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN statement
    (30) iterative_statement -> . FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN LBRACE statements RBRACE
    (31) iterative_statement -> . WHILE LPAREN conditional_expression RPAREN statement
    (32) iterative_statement -> . WHILE LPAREN conditional_expression RPAREN LBRACE statements RBRACE
    (33) iterative_statement -> . DO statement WHILE LPAREN conditional_expression RPAREN SEMI_COLON
    (34) iterative_statement -> . DO LBRACE statements RBRACE WHILE LPAREN conditional_expression RPAREN SEMI_COLON
    (23) exp -> . exp operator exp
    (24) exp -> . constant
    (25) exp -> . VARIABLE
    (26) exp -> . VARIABLE unary_operator
    (10) type -> . INT
    (11) type -> . FLOAT
    (12) type -> . CHAR
    (13) type -> . DOUBLE
    (14) type -> . VOID
    (15) type -> . SHORT
    (16) type -> . LONG
    (17) constant -> . HEX_INT
    (18) constant -> . DOT_REAL
    (19) constant -> . EXP_REAL
    (20) constant -> . DEC_INT
    (21) constant -> . CHARACTER

    RBRACE          shift and go to state 70
    VARIABLE        shift and go to state 18
    FOR             shift and go to state 16
    WHILE           shift and go to state 8
    DO              shift and go to state 1
    INT             shift and go to state 19
    FLOAT           shift and go to state 22
    CHAR            shift and go to state 7
    DOUBLE          shift and go to state 20
    VOID            shift and go to state 4
    SHORT           shift and go to state 2
    LONG            shift and go to state 13
    HEX_INT         shift and go to state 21
    DOT_REAL        shift and go to state 23
    EXP_REAL        shift and go to state 11
    DEC_INT         shift and go to state 6
    CHARACTER       shift and go to state 5

    exp                            shift and go to state 24
    type                           shift and go to state 15
    assignment_statement           shift and go to state 12
    statement                      shift and go to state 27
    declaration                    shift and go to state 17
    constant                       shift and go to state 9
    iterative_statement            shift and go to state 10

state 67

    (29) iterative_statement -> FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON . action RPAREN statement
    (30) iterative_statement -> FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON . action RPAREN LBRACE statements RBRACE
    (35) action -> . assignment_statement
    (36) action -> . exp
    (22) assignment_statement -> . VARIABLE EQUALS exp
    (23) exp -> . exp operator exp
    (24) exp -> . constant
    (25) exp -> . VARIABLE
    (26) exp -> . VARIABLE unary_operator
    (17) constant -> . HEX_INT
    (18) constant -> . DOT_REAL
    (19) constant -> . EXP_REAL
    (20) constant -> . DEC_INT
    (21) constant -> . CHARACTER

    VARIABLE        shift and go to state 18
    HEX_INT         shift and go to state 21
    DOT_REAL        shift and go to state 23
    EXP_REAL        shift and go to state 11
    DEC_INT         shift and go to state 6
    CHARACTER       shift and go to state 5

    assignment_statement           shift and go to state 71
    exp                            shift and go to state 72
    action                         shift and go to state 73
    constant                       shift and go to state 9

state 68

    (33) iterative_statement -> DO statement WHILE LPAREN conditional_expression RPAREN SEMI_COLON .

    SEMI_COLON      reduce using rule 33 (iterative_statement -> DO statement WHILE LPAREN conditional_expression RPAREN SEMI_COLON .)
    WHILE           reduce using rule 33 (iterative_statement -> DO statement WHILE LPAREN conditional_expression RPAREN SEMI_COLON .)


state 69

    (34) iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN conditional_expression . RPAREN SEMI_COLON

    RPAREN          shift and go to state 74


state 70

    (32) iterative_statement -> WHILE LPAREN conditional_expression RPAREN LBRACE statements RBRACE .

    SEMI_COLON      reduce using rule 32 (iterative_statement -> WHILE LPAREN conditional_expression RPAREN LBRACE statements RBRACE .)
    WHILE           reduce using rule 32 (iterative_statement -> WHILE LPAREN conditional_expression RPAREN LBRACE statements RBRACE .)


state 71

    (35) action -> assignment_statement .

    RPAREN          reduce using rule 35 (action -> assignment_statement .)


state 72

    (36) action -> exp .
    (23) exp -> exp . operator exp
    (44) operator -> . ADD
    (45) operator -> . MINUS
    (46) operator -> . MULT
    (47) operator -> . DIV
    (48) operator -> . MOD

    RPAREN          reduce using rule 36 (action -> exp .)
    ADD             shift and go to state 36
    MINUS           shift and go to state 39
    MULT            shift and go to state 40
    DIV             shift and go to state 38
    MOD             shift and go to state 41

    operator                       shift and go to state 37

state 73

    (29) iterative_statement -> FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action . RPAREN statement
    (30) iterative_statement -> FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action . RPAREN LBRACE statements RBRACE

    RPAREN          shift and go to state 75


state 74

    (34) iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN conditional_expression RPAREN . SEMI_COLON

    SEMI_COLON      shift and go to state 76


state 75

    (29) iterative_statement -> FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN . statement
    (30) iterative_statement -> FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN . LBRACE statements RBRACE
    (3) statement -> . declaration
    (4) statement -> . assignment_statement
    (5) statement -> . iterative_statement
    (6) statement -> . exp
    (7) declaration -> . type VARIABLE
    (8) declaration -> . type VARIABLE EQUALS constant
    (9) declaration -> . type VARIABLE EQUALS exp
    (22) assignment_statement -> . VARIABLE EQUALS exp
    (29) iterative_statement -> . FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN statement
    (30) iterative_statement -> . FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN LBRACE statements RBRACE
    (31) iterative_statement -> . WHILE LPAREN conditional_expression RPAREN statement
    (32) iterative_statement -> . WHILE LPAREN conditional_expression RPAREN LBRACE statements RBRACE
    (33) iterative_statement -> . DO statement WHILE LPAREN conditional_expression RPAREN SEMI_COLON
    (34) iterative_statement -> . DO LBRACE statements RBRACE WHILE LPAREN conditional_expression RPAREN SEMI_COLON
    (23) exp -> . exp operator exp
    (24) exp -> . constant
    (25) exp -> . VARIABLE
    (26) exp -> . VARIABLE unary_operator
    (10) type -> . INT
    (11) type -> . FLOAT
    (12) type -> . CHAR
    (13) type -> . DOUBLE
    (14) type -> . VOID
    (15) type -> . SHORT
    (16) type -> . LONG
    (17) constant -> . HEX_INT
    (18) constant -> . DOT_REAL
    (19) constant -> . EXP_REAL
    (20) constant -> . DEC_INT
    (21) constant -> . CHARACTER

    LBRACE          shift and go to state 78
    VARIABLE        shift and go to state 18
    FOR             shift and go to state 16
    WHILE           shift and go to state 8
    DO              shift and go to state 1
    INT             shift and go to state 19
    FLOAT           shift and go to state 22
    CHAR            shift and go to state 7
    DOUBLE          shift and go to state 20
    VOID            shift and go to state 4
    SHORT           shift and go to state 2
    LONG            shift and go to state 13
    HEX_INT         shift and go to state 21
    DOT_REAL        shift and go to state 23
    EXP_REAL        shift and go to state 11
    DEC_INT         shift and go to state 6
    CHARACTER       shift and go to state 5

    exp                            shift and go to state 24
    type                           shift and go to state 15
    assignment_statement           shift and go to state 12
    statement                      shift and go to state 77
    declaration                    shift and go to state 17
    constant                       shift and go to state 9
    iterative_statement            shift and go to state 10

state 76

    (34) iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN conditional_expression RPAREN SEMI_COLON .

    SEMI_COLON      reduce using rule 34 (iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN conditional_expression RPAREN SEMI_COLON .)
    WHILE           reduce using rule 34 (iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN conditional_expression RPAREN SEMI_COLON .)


state 77

    (29) iterative_statement -> FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN statement .

    SEMI_COLON      reduce using rule 29 (iterative_statement -> FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN statement .)
    WHILE           reduce using rule 29 (iterative_statement -> FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN statement .)


state 78

    (30) iterative_statement -> FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN LBRACE . statements RBRACE
    (1) statements -> . statements statement SEMI_COLON
    (2) statements -> . statement SEMI_COLON
    (3) statement -> . declaration
    (4) statement -> . assignment_statement
    (5) statement -> . iterative_statement
    (6) statement -> . exp
    (7) declaration -> . type VARIABLE
    (8) declaration -> . type VARIABLE EQUALS constant
    (9) declaration -> . type VARIABLE EQUALS exp
    (22) assignment_statement -> . VARIABLE EQUALS exp
    (29) iterative_statement -> . FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN statement
    (30) iterative_statement -> . FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN LBRACE statements RBRACE
    (31) iterative_statement -> . WHILE LPAREN conditional_expression RPAREN statement
    (32) iterative_statement -> . WHILE LPAREN conditional_expression RPAREN LBRACE statements RBRACE
    (33) iterative_statement -> . DO statement WHILE LPAREN conditional_expression RPAREN SEMI_COLON
    (34) iterative_statement -> . DO LBRACE statements RBRACE WHILE LPAREN conditional_expression RPAREN SEMI_COLON
    (23) exp -> . exp operator exp
    (24) exp -> . constant
    (25) exp -> . VARIABLE
    (26) exp -> . VARIABLE unary_operator
    (10) type -> . INT
    (11) type -> . FLOAT
    (12) type -> . CHAR
    (13) type -> . DOUBLE
    (14) type -> . VOID
    (15) type -> . SHORT
    (16) type -> . LONG
    (17) constant -> . HEX_INT
    (18) constant -> . DOT_REAL
    (19) constant -> . EXP_REAL
    (20) constant -> . DEC_INT
    (21) constant -> . CHARACTER

    VARIABLE        shift and go to state 18
    FOR             shift and go to state 16
    WHILE           shift and go to state 8
    DO              shift and go to state 1
    INT             shift and go to state 19
    FLOAT           shift and go to state 22
    CHAR            shift and go to state 7
    DOUBLE          shift and go to state 20
    VOID            shift and go to state 4
    SHORT           shift and go to state 2
    LONG            shift and go to state 13
    HEX_INT         shift and go to state 21
    DOT_REAL        shift and go to state 23
    EXP_REAL        shift and go to state 11
    DEC_INT         shift and go to state 6
    CHARACTER       shift and go to state 5

    statements                     shift and go to state 79
    exp                            shift and go to state 24
    type                           shift and go to state 15
    assignment_statement           shift and go to state 12
    statement                      shift and go to state 14
    declaration                    shift and go to state 17
    constant                       shift and go to state 9
    iterative_statement            shift and go to state 10

state 79

    (30) iterative_statement -> FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN LBRACE statements . RBRACE
    (1) statements -> statements . statement SEMI_COLON
    (3) statement -> . declaration
    (4) statement -> . assignment_statement
    (5) statement -> . iterative_statement
    (6) statement -> . exp
    (7) declaration -> . type VARIABLE
    (8) declaration -> . type VARIABLE EQUALS constant
    (9) declaration -> . type VARIABLE EQUALS exp
    (22) assignment_statement -> . VARIABLE EQUALS exp
    (29) iterative_statement -> . FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN statement
    (30) iterative_statement -> . FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN LBRACE statements RBRACE
    (31) iterative_statement -> . WHILE LPAREN conditional_expression RPAREN statement
    (32) iterative_statement -> . WHILE LPAREN conditional_expression RPAREN LBRACE statements RBRACE
    (33) iterative_statement -> . DO statement WHILE LPAREN conditional_expression RPAREN SEMI_COLON
    (34) iterative_statement -> . DO LBRACE statements RBRACE WHILE LPAREN conditional_expression RPAREN SEMI_COLON
    (23) exp -> . exp operator exp
    (24) exp -> . constant
    (25) exp -> . VARIABLE
    (26) exp -> . VARIABLE unary_operator
    (10) type -> . INT
    (11) type -> . FLOAT
    (12) type -> . CHAR
    (13) type -> . DOUBLE
    (14) type -> . VOID
    (15) type -> . SHORT
    (16) type -> . LONG
    (17) constant -> . HEX_INT
    (18) constant -> . DOT_REAL
    (19) constant -> . EXP_REAL
    (20) constant -> . DEC_INT
    (21) constant -> . CHARACTER

    RBRACE          shift and go to state 80
    VARIABLE        shift and go to state 18
    FOR             shift and go to state 16
    WHILE           shift and go to state 8
    DO              shift and go to state 1
    INT             shift and go to state 19
    FLOAT           shift and go to state 22
    CHAR            shift and go to state 7
    DOUBLE          shift and go to state 20
    VOID            shift and go to state 4
    SHORT           shift and go to state 2
    LONG            shift and go to state 13
    HEX_INT         shift and go to state 21
    DOT_REAL        shift and go to state 23
    EXP_REAL        shift and go to state 11
    DEC_INT         shift and go to state 6
    CHARACTER       shift and go to state 5

    exp                            shift and go to state 24
    type                           shift and go to state 15
    assignment_statement           shift and go to state 12
    statement                      shift and go to state 27
    declaration                    shift and go to state 17
    constant                       shift and go to state 9
    iterative_statement            shift and go to state 10

state 80

    (30) iterative_statement -> FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN LBRACE statements RBRACE .

    SEMI_COLON      reduce using rule 30 (iterative_statement -> FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN LBRACE statements RBRACE .)
    WHILE           reduce using rule 30 (iterative_statement -> FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN LBRACE statements RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ADD in state 52 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 52 resolved as shift
WARNING: shift/reduce conflict for MULT in state 52 resolved as shift
WARNING: shift/reduce conflict for DIV in state 52 resolved as shift
WARNING: shift/reduce conflict for MOD in state 52 resolved as shift
WARNING: reduce/reduce conflict in state 56 resolved using rule (declaration -> type VARIABLE EQUALS constant)
WARNING: rejected rule (exp -> constant) in state 56
