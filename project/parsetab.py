
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = 'Q\xfa\x80\xa8|V(\xd7\x0eoM\xfd\x89Z\x0b@'
    
_lr_action_items = {'INT':([0,1,15,17,],[2,2,-2,-1,]),'DOUBLE':([0,1,15,17,],[3,3,-2,-1,]),'VOID':([0,1,15,17,],[4,4,-2,-1,]),'FLOAT':([0,1,15,17,],[5,5,-2,-1,]),'CHARACTER':([14,26,27,28,29,30,31,32,],[19,19,19,-23,-26,-24,-25,-27,]),'EQUALS':([9,16,],[14,26,]),'LONG':([0,1,15,17,],[7,7,-2,-1,]),'DEC_INT':([14,26,27,28,29,30,31,32,],[22,22,22,-23,-26,-24,-25,-27,]),'CHAR':([0,1,15,17,],[8,8,-2,-1,]),'SEMI_COLON':([6,10,11,13,16,18,19,20,21,22,23,24,25,33,34,35,],[-4,15,-3,17,-5,-21,-18,-14,-16,-17,-15,-19,-22,-6,-7,-20,]),'ADD':([18,19,20,21,22,23,24,25,33,34,35,],[-21,-18,-14,-16,-17,-15,28,-22,-21,28,28,]),'DOT_REAL':([14,26,27,28,29,30,31,32,],[23,23,23,-23,-26,-24,-25,-27,]),'MOD':([18,19,20,21,22,23,24,25,33,34,35,],[-21,-18,-14,-16,-17,-15,32,-22,-21,32,32,]),'VARIABLE':([0,1,2,3,4,5,7,8,12,14,15,17,26,27,28,29,30,31,32,],[9,9,-8,-11,-12,-9,-13,-10,16,25,-2,-1,25,25,-23,-26,-24,-25,-27,]),'DIV':([18,19,20,21,22,23,24,25,33,34,35,],[-21,-18,-14,-16,-17,-15,29,-22,-21,29,29,]),'EXP_REAL':([14,26,27,28,29,30,31,32,],[21,21,21,-23,-26,-24,-25,-27,]),'MINUS':([18,19,20,21,22,23,24,25,33,34,35,],[-21,-18,-14,-16,-17,-15,30,-22,-21,30,30,]),'HEX_INT':([14,26,27,28,29,30,31,32,],[20,20,20,-23,-26,-24,-25,-27,]),'MULT':([18,19,20,21,22,23,24,25,33,34,35,],[-21,-18,-14,-16,-17,-15,31,-22,-21,31,31,]),'$end':([1,15,17,],[0,-2,-1,]),}

_lr_action = { }
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = { }
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statements':([0,],[1,]),'exp':([14,26,27,],[24,34,35,]),'assignment_statement':([0,1,],[6,6,]),'statement':([0,1,],[10,13,]),'declaration':([0,1,],[11,11,]),'operator':([24,34,35,],[27,27,27,]),'constant':([14,26,27,],[18,33,18,]),'type':([0,1,],[12,12,]),}

_lr_goto = { }
for _k, _v in _lr_goto_items.items():
   for _x,_y in zip(_v[0],_v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = { }
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statements","S'",1,None,None,None),
  ('statements -> statements statement SEMI_COLON','statements',3,'p_statements_1','parser.py',10),
  ('statements -> statement SEMI_COLON','statements',2,'p_statements_2','parser.py',14),
  ('statement -> declaration','statement',1,'p_statement_1','parser.py',18),
  ('statement -> assignment_statement','statement',1,'p_statement_2','parser.py',22),
  ('declaration -> type VARIABLE','declaration',2,'p_declaration_1','parser.py',26),
  ('declaration -> type VARIABLE EQUALS constant','declaration',4,'p_declaration_2','parser.py',30),
  ('declaration -> type VARIABLE EQUALS exp','declaration',4,'p_declaration_3','parser.py',34),
  ('type -> INT','type',1,'p_type_1','parser.py',37),
  ('type -> FLOAT','type',1,'p_type_2','parser.py',41),
  ('type -> CHAR','type',1,'p_type_3','parser.py',45),
  ('type -> DOUBLE','type',1,'p_type_4','parser.py',49),
  ('type -> VOID','type',1,'p_type_5','parser.py',53),
  ('type -> LONG','type',1,'p_type_6','parser.py',61),
  ('constant -> HEX_INT','constant',1,'p_constant_1','parser.py',65),
  ('constant -> DOT_REAL','constant',1,'p_constant_2','parser.py',69),
  ('constant -> EXP_REAL','constant',1,'p_constant_3','parser.py',73),
  ('constant -> DEC_INT','constant',1,'p_constant_4','parser.py',77),
  ('constant -> CHARACTER','constant',1,'p_constant_5','parser.py',81),
  ('assignment_statement -> VARIABLE EQUALS exp','assignment_statement',3,'p_assignment_statement_1','parser.py',85),
  ('exp -> exp operator exp','exp',3,'p_exp_1','parser.py',89),
  ('exp -> constant','exp',1,'p_exp_2','parser.py',93),
  ('exp -> VARIABLE','exp',1,'p_exp_3','parser.py',97),
  ('operator -> ADD','operator',1,'p_operator_1','parser.py',101),
  ('operator -> MINUS','operator',1,'p_operator_2','parser.py',105),
  ('operator -> MULT','operator',1,'p_operator_3','parser.py',109),
  ('operator -> DIV','operator',1,'p_operator_4','parser.py',113),
  ('operator -> MOD','operator',1,'p_operator_5','parser.py',117),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',121),
]
