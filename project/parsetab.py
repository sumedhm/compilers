
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = '\xb0\xdb\xbc\x07\x01YB\xad\x84.bQ\x8b\xf8\xd5o'
    
_lr_action_items = {'DO':([0,1,3,13,32,35,36,70,71,90,97,102,112,115,117,],[1,1,1,1,1,1,-2,1,-1,1,1,1,1,1,1,]),'SHORT':([0,1,3,13,32,35,36,70,71,90,97,102,112,115,117,],[2,2,2,2,2,2,-2,2,-1,2,2,2,2,2,2,]),'EQUALS_OP':([5,6,7,9,11,14,15,23,26,28,29,30,38,51,72,74,75,76,77,82,83,84,85,86,87,91,92,108,],[-23,-41,-22,-42,-37,-43,-21,-38,-19,-20,55,-44,-40,-39,-41,-42,-37,-38,55,55,-38,55,55,55,55,-37,55,55,]),'NOTEQUALS':([5,6,7,9,11,14,15,23,26,28,29,30,38,51,72,74,75,76,77,82,83,84,85,86,87,91,92,108,],[-23,-41,-22,-42,-37,-43,-21,-38,-19,-20,53,-44,-40,-39,-41,-42,-37,-38,53,53,-38,53,53,53,53,-37,53,53,]),'DIV_ASSIGN':([23,76,81,],[52,52,52,]),'VOID':([0,1,3,13,32,35,36,70,71,90,97,102,112,115,117,],[4,4,4,4,4,4,-2,4,-1,4,4,4,4,4,4,]),'CHARACTER':([0,1,3,13,32,34,35,36,40,41,42,43,44,45,46,47,48,49,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,71,79,90,93,94,97,100,102,103,112,115,117,],[5,5,5,5,5,5,5,-2,-30,-28,-32,-34,-35,5,-33,-26,5,-31,-29,-27,-70,5,-71,-67,-66,-75,-73,-74,-69,-72,5,-68,-77,5,-76,-78,5,-1,5,5,5,5,5,5,5,5,5,5,5,]),'CHAR':([0,1,3,13,32,35,36,70,71,90,97,102,112,115,117,],[8,8,8,8,8,8,-2,8,-1,8,8,8,8,8,8,]),'WHILE':([0,1,3,13,32,35,36,69,70,71,89,90,97,102,112,115,117,],[10,10,10,10,10,10,-2,88,10,-1,95,10,10,10,10,10,10,]),'OR_OP':([5,6,7,9,11,14,15,23,26,28,29,30,38,51,72,74,75,76,77,82,83,84,85,86,87,91,92,108,],[-23,-41,-22,-42,-37,-43,-21,-38,-19,-20,62,-44,-40,-39,-41,-42,-37,-38,62,62,-38,62,62,62,62,-37,62,62,]),'SEMI_COLON':([5,6,7,9,11,12,14,15,16,18,22,23,26,28,29,30,31,33,37,38,51,72,73,74,75,76,77,80,82,83,84,85,86,87,91,92,96,98,101,104,106,110,111,113,114,116,118,],[-23,-41,-22,-42,-37,-8,-43,-21,-6,36,-5,-38,-19,-20,-7,-44,69,71,-9,-40,-39,-41,-63,-42,-37,-38,-62,93,-24,-38,-25,-65,-36,-64,-10,-11,101,103,-47,110,-48,-49,113,-50,116,-45,-46,]),'DIV':([5,6,7,9,11,14,15,23,26,28,29,30,38,51,72,74,75,76,77,82,83,84,85,86,87,91,92,108,],[-23,-41,-22,-42,-37,-43,-21,-38,-19,-20,65,-44,-40,-39,-41,-42,-37,-38,65,65,-38,65,65,65,65,-37,65,65,]),'MINUS':([5,6,7,9,11,14,15,23,26,28,29,30,38,51,72,74,75,76,77,82,83,84,85,86,87,91,92,108,],[-23,-41,-22,-42,-37,-43,-21,-38,-19,-20,58,-44,-40,-39,-41,-42,-37,-38,58,58,-38,58,58,58,58,-37,58,58,]),'MULT':([5,6,7,9,11,14,15,23,26,28,29,30,38,51,72,74,75,76,77,82,83,84,85,86,87,91,92,108,],[-23,-41,-22,-42,-37,-43,-21,-38,-19,-20,67,-44,-40,-39,-41,-42,-37,-38,67,67,-38,67,67,67,67,-37,67,67,]),'COMMENT':([0,13,32,97,115,],[13,13,13,13,13,]),'LE_OP':([5,6,7,9,11,14,15,23,26,28,29,30,38,51,72,74,75,76,77,82,83,84,85,86,87,91,92,108,],[-23,-41,-22,-42,-37,-43,-21,-38,-19,-20,64,-44,-40,-39,-41,-42,-37,-38,64,64,-38,64,64,64,64,-37,64,64,]),'RIGHT_ASSIGN':([23,76,81,],[42,42,42,]),'G_OP':([5,6,7,9,11,14,15,23,26,28,29,30,38,51,72,74,75,76,77,82,83,84,85,86,87,91,92,108,],[-23,-41,-22,-42,-37,-43,-21,-38,-19,-20,56,-44,-40,-39,-41,-42,-37,-38,56,56,-38,56,56,56,56,-37,56,56,]),'EXP_REAL':([0,1,3,13,32,34,35,36,40,41,42,43,44,45,46,47,48,49,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,71,79,90,93,94,97,100,102,103,112,115,117,],[15,15,15,15,15,15,15,-2,-30,-28,-32,-34,-35,15,-33,-26,15,-31,-29,-27,-70,15,-71,-67,-66,-75,-73,-74,-69,-72,15,-68,-77,15,-76,-78,15,-1,15,15,15,15,15,15,15,15,15,15,15,]),'DEC_INT':([0,1,3,13,32,34,35,36,40,41,42,43,44,45,46,47,48,49,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,71,79,90,93,94,97,100,102,103,112,115,117,],[7,7,7,7,7,7,7,-2,-30,-28,-32,-34,-35,7,-33,-26,7,-31,-29,-27,-70,7,-71,-67,-66,-75,-73,-74,-69,-72,7,-68,-77,7,-76,-78,7,-1,7,7,7,7,7,7,7,7,7,7,7,]),'LONG':([0,1,3,13,32,35,36,70,71,90,97,102,112,115,117,],[17,17,17,17,17,17,-2,17,-1,17,17,17,17,17,17,]),'AND_ASSIGN':([23,76,81,],[46,46,46,]),'INCREMENT':([0,1,3,13,23,32,34,35,36,40,41,42,43,44,45,46,47,48,49,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,71,76,79,83,90,93,94,97,100,102,103,112,115,117,],[14,14,14,14,14,14,14,14,-2,-30,-28,-32,-34,-35,14,-33,-26,14,-31,-29,-27,-70,14,-71,-67,-66,-75,-73,-74,-69,-72,14,-68,-77,14,-76,-78,14,-1,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'MUL_ASSIGN':([23,76,81,],[47,47,47,]),'ADD_ASSIGN':([23,76,81,],[50,50,50,]),'$end':([3,13,35,36,71,],[0,-3,-4,-2,-1,]),'RBRACE':([13,35,36,70,71,102,117,],[-3,-4,-2,89,-1,106,118,]),'FOR':([0,1,3,13,32,35,36,70,71,90,97,102,112,115,117,],[21,21,21,21,21,21,-2,21,-1,21,21,21,21,21,21,]),'EQUALS':([23,37,76,81,],[45,79,45,45,]),'AND_OP':([5,6,7,9,11,14,15,23,26,28,29,30,38,51,72,74,75,76,77,82,83,84,85,86,87,91,92,108,],[-23,-41,-22,-42,-37,-43,-21,-38,-19,-20,59,-44,-40,-39,-41,-42,-37,-38,59,59,-38,59,59,59,59,-37,59,59,]),'ADD':([5,6,7,9,11,14,15,23,26,28,29,30,38,51,72,74,75,76,77,82,83,84,85,86,87,91,92,108,],[-23,-41,-22,-42,-37,-43,-21,-38,-19,-20,60,-44,-40,-39,-41,-42,-37,-38,60,60,-38,60,60,60,60,-37,60,60,]),'GE_OP':([5,6,7,9,11,14,15,23,26,28,29,30,38,51,72,74,75,76,77,82,83,84,85,86,87,91,92,108,],[-23,-41,-22,-42,-37,-43,-21,-38,-19,-20,61,-44,-40,-39,-41,-42,-37,-38,61,61,-38,61,61,61,61,-37,61,61,]),'LPAREN':([10,21,88,95,],[34,39,94,100,]),'VARIABLE':([0,1,2,3,4,8,13,14,17,19,20,24,25,27,30,32,34,35,36,39,40,41,42,43,44,45,46,47,48,49,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,71,79,90,93,94,97,100,102,103,112,115,117,],[23,23,-17,23,-16,-14,23,-43,-18,37,38,-12,-15,-13,-44,23,76,23,-2,81,-30,-28,-32,-34,-35,83,-33,-26,83,-31,-29,-27,-70,83,-71,-67,-66,-75,-73,-74,-69,-72,83,-68,-77,83,-76,-78,23,-1,83,23,76,76,23,76,23,23,23,23,23,]),'RPAREN':([5,6,7,9,11,14,15,23,26,28,30,38,51,72,73,74,75,76,77,78,82,83,84,85,86,87,99,105,107,108,109,],[-23,-41,-22,-42,-37,-43,-21,-38,-19,-20,-44,-40,-39,-41,-63,-42,-37,-38,-62,90,-24,-38,-25,-65,-36,-64,104,111,-51,-52,112,]),'LEFT_ASSIGN':([23,76,81,],[49,49,49,]),'SUB_ASSIGN':([23,76,81,],[40,40,40,]),'MOD_ASSIGN':([23,76,81,],[41,41,41,]),'LBRACE':([1,90,112,],[32,97,115,]),'XOR_ASSIGN':([23,76,81,],[43,43,43,]),'INT':([0,1,3,13,32,35,36,70,71,90,97,102,112,115,117,],[24,24,24,24,24,24,-2,24,-1,24,24,24,24,24,24,]),'DOUBLE':([0,1,3,13,32,35,36,70,71,90,97,102,112,115,117,],[25,25,25,25,25,25,-2,25,-1,25,25,25,25,25,25,]),'HEX_INT':([0,1,3,13,32,34,35,36,40,41,42,43,44,45,46,47,48,49,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,71,79,90,93,94,97,100,102,103,112,115,117,],[26,26,26,26,26,26,26,-2,-30,-28,-32,-34,-35,26,-33,-26,26,-31,-29,-27,-70,26,-71,-67,-66,-75,-73,-74,-69,-72,26,-68,-77,26,-76,-78,26,-1,26,26,26,26,26,26,26,26,26,26,26,]),'FLOAT':([0,1,3,13,32,35,36,70,71,90,97,102,112,115,117,],[27,27,27,27,27,27,-2,27,-1,27,27,27,27,27,27,]),'OR_ASSIGN':([23,76,81,],[44,44,44,]),'L_OP':([5,6,7,9,11,14,15,23,26,28,29,30,38,51,72,74,75,76,77,82,83,84,85,86,87,91,92,108,],[-23,-41,-22,-42,-37,-43,-21,-38,-19,-20,57,-44,-40,-39,-41,-42,-37,-38,57,57,-38,57,57,57,57,-37,57,57,]),'DOT_REAL':([0,1,3,13,32,34,35,36,40,41,42,43,44,45,46,47,48,49,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,71,79,90,93,94,97,100,102,103,112,115,117,],[28,28,28,28,28,28,28,-2,-30,-28,-32,-34,-35,28,-33,-26,28,-31,-29,-27,-70,28,-71,-67,-66,-75,-73,-74,-69,-72,28,-68,-77,28,-76,-78,28,-1,28,28,28,28,28,28,28,28,28,28,28,]),'DECREMENT':([0,1,3,13,23,32,34,35,36,40,41,42,43,44,45,46,47,48,49,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,71,76,79,83,90,93,94,97,100,102,103,112,115,117,],[30,30,30,30,30,30,30,30,-2,-30,-28,-32,-34,-35,30,-33,-26,30,-31,-29,-27,-70,30,-71,-67,-66,-75,-73,-74,-69,-72,30,-68,-77,30,-76,-78,30,-1,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'MOD':([5,6,7,9,11,14,15,23,26,28,29,30,38,51,72,74,75,76,77,82,83,84,85,86,87,91,92,108,],[-23,-41,-22,-42,-37,-43,-21,-38,-19,-20,68,-44,-40,-39,-41,-42,-37,-38,68,68,-38,68,68,68,68,-37,68,68,]),}

_lr_action = { }
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = { }
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statements':([0,13,32,97,115,],[3,35,70,102,117,]),'exp':([0,1,3,13,32,34,35,45,48,54,63,66,70,79,90,93,94,97,100,102,103,112,115,117,],[29,29,29,29,29,77,29,82,84,85,86,87,29,92,29,77,77,29,77,29,108,29,29,29,]),'type':([0,1,3,13,32,35,70,90,97,102,112,115,117,],[19,19,19,19,19,19,19,19,19,19,19,19,19,]),'conditional_expression':([34,93,94,100,],[78,98,99,105,]),'action':([103,],[109,]),'assignment_statement':([0,1,3,13,32,34,35,39,70,90,93,94,97,100,102,103,112,115,117,],[16,16,16,16,16,73,16,80,16,16,73,73,16,73,16,107,16,16,16,]),'comparison_expression':([0,1,3,13,32,34,35,45,48,54,63,66,70,79,90,93,94,97,100,102,103,112,115,117,],[6,6,6,6,6,72,6,6,6,6,6,6,6,6,6,72,72,6,72,6,6,6,6,6,]),'operator':([29,77,82,84,85,86,87,92,108,],[63,63,63,63,63,63,63,63,63,]),'logical_operator':([29,77,82,84,85,86,87,92,108,],[54,54,54,54,54,54,54,54,54,]),'assignment_operator':([23,76,81,],[48,48,48,]),'statement':([0,1,3,13,32,35,70,90,97,102,112,115,117,],[18,31,33,18,18,33,33,96,18,33,114,18,33,]),'declaration':([0,1,3,13,32,35,70,90,97,102,112,115,117,],[22,22,22,22,22,22,22,22,22,22,22,22,22,]),'logical_expression':([0,1,3,13,32,34,35,45,48,54,63,66,70,79,90,93,94,97,100,102,103,112,115,117,],[9,9,9,9,9,74,9,9,9,9,9,9,9,9,9,74,74,9,74,9,9,9,9,9,]),'constant':([0,1,3,13,32,34,35,45,48,54,63,66,70,79,90,93,94,97,100,102,103,112,115,117,],[11,11,11,11,11,75,11,11,11,11,11,11,11,91,11,75,75,11,75,11,11,11,11,11,]),'iterative_statement':([0,1,3,13,32,35,70,90,97,102,112,115,117,],[12,12,12,12,12,12,12,12,12,12,12,12,12,]),'comparison_operator':([29,77,82,84,85,86,87,92,108,],[66,66,66,66,66,66,66,66,66,]),'unary_operator':([0,1,3,13,23,32,34,35,45,48,54,63,66,70,76,79,83,90,93,94,97,100,102,103,112,115,117,],[20,20,20,20,51,20,20,20,20,20,20,20,20,20,51,20,51,20,20,20,20,20,20,20,20,20,20,]),}

_lr_goto = { }
for _k, _v in _lr_goto_items.items():
   for _x,_y in zip(_v[0],_v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = { }
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statements","S'",1,None,None,None),
  ('statements -> statements statement SEMI_COLON','statements',3,'p_statements_1','parser.py',10),
  ('statements -> statement SEMI_COLON','statements',2,'p_statements_2','parser.py',14),
  ('statements -> COMMENT','statements',1,'p_statements_3','parser.py',18),
  ('statements -> COMMENT statements','statements',2,'p_statements_5','parser.py',26),
  ('statement -> declaration','statement',1,'p_statement_1','parser.py',31),
  ('statement -> assignment_statement','statement',1,'p_statement_2','parser.py',35),
  ('statement -> exp','statement',1,'p_statement_3','parser.py',39),
  ('statement -> iterative_statement','statement',1,'p_statements_4','parser.py',43),
  ('declaration -> type VARIABLE','declaration',2,'p_declaration_1','parser.py',46),
  ('declaration -> type VARIABLE EQUALS constant','declaration',4,'p_declaration_2','parser.py',50),
  ('declaration -> type VARIABLE EQUALS exp','declaration',4,'p_declaration_3','parser.py',54),
  ('type -> INT','type',1,'p_type_1','parser.py',57),
  ('type -> FLOAT','type',1,'p_type_2','parser.py',61),
  ('type -> CHAR','type',1,'p_type_3','parser.py',65),
  ('type -> DOUBLE','type',1,'p_type_4','parser.py',69),
  ('type -> VOID','type',1,'p_type_5','parser.py',73),
  ('type -> SHORT','type',1,'p_type_6','parser.py',77),
  ('type -> LONG','type',1,'p_type_7','parser.py',81),
  ('constant -> HEX_INT','constant',1,'p_constant_1','parser.py',85),
  ('constant -> DOT_REAL','constant',1,'p_constant_2','parser.py',89),
  ('constant -> EXP_REAL','constant',1,'p_constant_3','parser.py',93),
  ('constant -> DEC_INT','constant',1,'p_constant_4','parser.py',97),
  ('constant -> CHARACTER','constant',1,'p_constant_5','parser.py',101),
  ('assignment_statement -> VARIABLE EQUALS exp','assignment_statement',3,'p_assignment_statement_1','parser.py',105),
  ('assignment_statement -> VARIABLE assignment_operator exp','assignment_statement',3,'p_assignment_statement_2','parser.py',109),
  ('assignment_operator -> MUL_ASSIGN','assignment_operator',1,'p_assignment_operator_1','parser.py',113),
  ('assignment_operator -> DIV_ASSIGN','assignment_operator',1,'p_assignment_operator_2','parser.py',117),
  ('assignment_operator -> MOD_ASSIGN','assignment_operator',1,'p_assignment_operator_3','parser.py',121),
  ('assignment_operator -> ADD_ASSIGN','assignment_operator',1,'p_assignment_operator_4','parser.py',125),
  ('assignment_operator -> SUB_ASSIGN','assignment_operator',1,'p_assignment_operator_5','parser.py',129),
  ('assignment_operator -> LEFT_ASSIGN','assignment_operator',1,'p_assignment_operator_6','parser.py',133),
  ('assignment_operator -> RIGHT_ASSIGN','assignment_operator',1,'p_assignment_operator_7','parser.py',137),
  ('assignment_operator -> AND_ASSIGN','assignment_operator',1,'p_assignment_operator_8','parser.py',141),
  ('assignment_operator -> XOR_ASSIGN','assignment_operator',1,'p_assignment_operator_9','parser.py',145),
  ('assignment_operator -> OR_ASSIGN','assignment_operator',1,'p_assignment_operator_10','parser.py',149),
  ('exp -> exp operator exp','exp',3,'p_exp_1','parser.py',153),
  ('exp -> constant','exp',1,'p_exp_2','parser.py',157),
  ('exp -> VARIABLE','exp',1,'p_exp_3','parser.py',161),
  ('exp -> VARIABLE unary_operator','exp',2,'p_exp_4','parser.py',165),
  ('exp -> unary_operator VARIABLE','exp',2,'p_exp_5','parser.py',169),
  ('exp -> comparison_expression','exp',1,'p_exp_6','parser.py',173),
  ('exp -> logical_expression','exp',1,'p_exp_7','parser.py',177),
  ('unary_operator -> INCREMENT','unary_operator',1,'p_unary_operator_1','parser.py',181),
  ('unary_operator -> DECREMENT','unary_operator',1,'p_unary_operator_2','parser.py',185),
  ('iterative_statement -> FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN statement SEMI_COLON','iterative_statement',10,'p_iterative_statement_1','parser.py',189),
  ('iterative_statement -> FOR LPAREN assignment_statement SEMI_COLON conditional_expression SEMI_COLON action RPAREN LBRACE statements RBRACE','iterative_statement',11,'p_iterative_statement_2','parser.py',193),
  ('iterative_statement -> WHILE LPAREN conditional_expression RPAREN statement SEMI_COLON','iterative_statement',6,'p_iterative_statement_3','parser.py',197),
  ('iterative_statement -> WHILE LPAREN conditional_expression RPAREN LBRACE statements RBRACE','iterative_statement',7,'p_iterative_statement_4','parser.py',201),
  ('iterative_statement -> DO statement SEMI_COLON WHILE LPAREN conditional_expression RPAREN SEMI_COLON','iterative_statement',8,'p_iterative_statement_5','parser.py',205),
  ('iterative_statement -> DO LBRACE statements RBRACE WHILE LPAREN conditional_expression RPAREN SEMI_COLON','iterative_statement',9,'p_iterative_statement_6','parser.py',209),
  ('action -> assignment_statement','action',1,'p_action_1','parser.py',213),
  ('action -> exp','action',1,'p_action_2','parser.py',217),
  ('conditional_statement -> IF LPAREN conditional_expression RPAREN statement','conditional_statement',5,'p_conditional_statement_1','parser.py',221),
  ('conditional_statement -> IF LPAREN conditional_expression RPAREN LBRACE statements RBRACE','conditional_statement',7,'p_conditional_statement_2','parser.py',225),
  ('conditional_statement -> IF LPAREN conditional_expression RPAREN statement ELSE statement','conditional_statement',7,'p_conditional_statement_3','parser.py',229),
  ('conditional_statement -> IF LPAREN conditional_expression RPAREN statement ELSE LBRACE statements RBRACE','conditional_statement',9,'p_conditional_statement_4','parser.py',233),
  ('conditional_statement -> IF LPAREN conditional_expression RPAREN LBRACE statements RBRACE ELSE statement','conditional_statement',9,'p_conditional_statement_5','parser.py',237),
  ('conditional_statement -> IF LPAREN conditional_expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE','conditional_statement',11,'p_conditional_statement_6','parser.py',241),
  ('conditional_expression -> comparison_expression','conditional_expression',1,'p_conditional_expression_1','parser.py',245),
  ('conditional_expression -> logical_expression','conditional_expression',1,'p_conditional_expression_2','parser.py',249),
  ('conditional_expression -> constant','conditional_expression',1,'p_conditional_expression_3','parser.py',253),
  ('conditional_expression -> exp','conditional_expression',1,'p_conditional_expression_4','parser.py',257),
  ('conditional_expression -> assignment_statement','conditional_expression',1,'p_conditional_expression_5','parser.py',261),
  ('comparison_expression -> exp comparison_operator exp','comparison_expression',3,'p_comparison_expression_1','parser.py',265),
  ('logical_expression -> exp logical_operator exp','logical_expression',3,'p_logical_expression_1','parser.py',269),
  ('comparison_operator -> L_OP','comparison_operator',1,'p_comparison_operator_1','parser.py',273),
  ('comparison_operator -> G_OP','comparison_operator',1,'p_comparison_operator_2','parser.py',277),
  ('comparison_operator -> LE_OP','comparison_operator',1,'p_comparison_operator_3','parser.py',281),
  ('comparison_operator -> GE_OP','comparison_operator',1,'p_comparison_operator_4','parser.py',285),
  ('comparison_operator -> NOTEQUALS','comparison_operator',1,'p_comparison_operator_5','parser.py',290),
  ('comparison_operator -> EQUALS_OP','comparison_operator',1,'p_comparison_operator_6','parser.py',294),
  ('logical_operator -> OR_OP','logical_operator',1,'p_logical_operator_1','parser.py',298),
  ('logical_operator -> AND_OP','logical_operator',1,'p_logical_operator_2','parser.py',302),
  ('operator -> ADD','operator',1,'p_operator_1','parser.py',306),
  ('operator -> MINUS','operator',1,'p_operator_2','parser.py',310),
  ('operator -> MULT','operator',1,'p_operator_3','parser.py',314),
  ('operator -> DIV','operator',1,'p_operator_4','parser.py',318),
  ('operator -> MOD','operator',1,'p_operator_5','parser.py',322),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',326),
]
